{"version":3,"sources":["../../src/logger.js"],"names":["stringify","loggers","log","color","name","value","args","label","length","console","group","arg","err","error","dir","groupEnd","logger","debug","info","warn","debugObject","obj","infoObject","warnObject","errorObject","errorStack","Error","Object","keys","forEach","key","hasValues","stack","message","split","line"],"mappings":"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","sourcesContent":["// @flow\n\nimport { stringify } from 'flatted';\n\nconst loggers = {};\n\nconst log = (color:string, name:string, value:string | number, ...args:Array<any>) => {\n  const label = `%c${name}: %c${value}`;\n  if (args.length === 0) {\n    console.log(label, 'color:#333; font-weight: bold', `color:${color}`); // eslint-disable-line\n    return;\n  }\n  console.group(label, 'color:#333; font-weight: bold', `color:${color}`); // eslint-disable-line\n  for (const arg of args) {\n    if (typeof arg === 'undefined') {\n      continue;\n    } else if (typeof arg === 'string') {\n      console.log(`%c${arg}`, 'color:#666'); // eslint-disable-line\n    } else {\n      if (arg && arg.err) {\n        console.error(arg.err); // eslint-disable-line\n      } else if (arg && arg.error) {\n        console.error(arg.error); // eslint-disable-line\n      }\n      console.dir(arg); // eslint-disable-line\n    }\n  }\n  console.groupEnd(); // eslint-disable-line\n};\n\nexport type Logger = {\n  debug: (string | number, ...Array<any>) => void,\n  info: (string | number, ...Array<any>) => void,\n  warn: (string | number, ...Array<any>) => void,\n  error: (string | number, ...Array<any>) => void,\n  debugObject: (Object) => void,\n  infoObject: (Object) => void,\n  warnObject: (Object) => void,\n  errorObject: (Object) => void,\n  errorStack: (Error | MediaError) => void\n};\n\nexport default (name: string) => {\n  if (loggers[name]) {\n    return loggers[name];\n  }\n\n  const logger = {\n    debug: (value:string | number, ...args:Array<any>) => {\n      log('blue', name, value, ...args);\n    },\n    info: (value:string | number, ...args:Array<any>) => {\n      log('green', name, value, ...args);\n    },\n    warn: (value:string | number, ...args:Array<any>) => {\n      log('orange', name, value, ...args);\n    },\n    error: (value:string | number, ...args:Array<any>) => {\n      log('red', name, value, ...args);\n    },\n    debugObject: (obj: Object = {}) => {\n      console.log(obj);\n    },\n    infoObject: (obj: Object = {}) => {\n      console.log(obj);\n    },\n    warnObject: (obj: Object = {}) => {\n      console.log(obj);\n    },\n    errorObject: (obj: Object = {}) => {\n      console.error(obj);\n    },\n    errorStack: (error:Error | MediaError) => {\n      if (typeof error === 'string') {\n        logger.error(error);\n        return;\n      }\n      if (typeof error === 'undefined') {\n        error = new Error('\"undefined\" passed to errorStack handler'); // eslint-disable-line no-param-reassign\n      }\n      const obj: { [string]: any } = {};\n      Object.keys(error).forEach((key: string) => {\n        if (key !== 'toString' && key !== 'message') {\n          // $FlowFixMe\n          obj[key] = error[key];\n        }\n      });\n      const hasValues = obj && Object.keys(obj).length > 0;\n      // $FlowFixMe\n      const { stack } = error;\n      if (typeof stack === 'string') {\n        if (error.message) {\n          log('red', name, error.message);\n        }\n        stack.split('\\n').forEach((line) => log('red', name, `\\t${line}`));\n      } else if (error.message) {\n        log('red', name, error.message);\n      } else if (!hasValues) {\n        log('red', name, 'Unknown error');\n      }\n      if (hasValues) {\n        stringify(obj, null, 2).split('\\n').forEach((line) => log('red', name, `\\t${line}`));\n      }\n    },\n  };\n\n  loggers[name] = logger;\n  return logger;\n};\n"],"file":"logger.js"}