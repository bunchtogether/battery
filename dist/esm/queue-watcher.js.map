{"version":3,"sources":["../../src/queue-watcher.js"],"names":["EventEmitter","getQueueStatus","jobEmitter","JOB_ABORTED_STATUS","JOB_COMPLETE_STATUS","JOB_PENDING_STATUS","JOB_ERROR_STATUS","JOB_CLEANUP_STATUS","JOB_CLEANUP_AND_REMOVE_STATUS","QUEUE_ERROR_STATUS","QUEUE_PENDING_STATUS","QUEUE_EMPTY_STATUS","BatteryQueueWatcher","constructor","queueId","statusRequested","handleJobAdd","id","qId","emit","addListener","handleJobDelete","emitStatus","handleJobUpdate","type","status","handleJobsClear","on","getStatus","newStatus","didEmitNewStatus","handleStatus","self","queueMicrotask","removeListener","close"],"mappings":"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","sourcesContent":["// @flow\n\nimport EventEmitter from 'events';\nimport {\n  getQueueStatus,\n  jobEmitter,\n  JOB_ABORTED_STATUS,\n  JOB_COMPLETE_STATUS,\n  JOB_PENDING_STATUS,\n  JOB_ERROR_STATUS,\n  JOB_CLEANUP_STATUS,\n  JOB_CLEANUP_AND_REMOVE_STATUS,\n  QUEUE_ERROR_STATUS,\n  QUEUE_PENDING_STATUS,\n  QUEUE_EMPTY_STATUS,\n} from './database';\n\n\nexport default class BatteryQueueWatcher extends EventEmitter {\n  declare queueId: string;\n  declare statusRequested: boolean;\n  declare handleJobAdd: (number, string) => void;\n  declare handleJobDelete: (number, string) => void;\n  declare handleJobUpdate: (number, string, string, number) => void;\n  declare handleJobsClear: () => void;\n  declare status: void | number;\n\n  constructor(queueId: string) {\n    super();\n    this.queueId = queueId;\n    this.statusRequested = false;\n    const handleJobAdd = (id:number, qId:string) => {\n      if (queueId !== qId) {\n        return;\n      }\n      this.emit('status', QUEUE_PENDING_STATUS);\n    };\n    this.handleJobAdd = handleJobAdd;\n    jobEmitter.addListener('jobAdd', handleJobAdd);\n    const handleJobDelete = (id:number, qId:string) => {\n      if (queueId !== qId) {\n        return;\n      }\n      this.emitStatus();\n    };\n    this.handleJobDelete = handleJobDelete;\n    jobEmitter.addListener('jobDelete', handleJobDelete);\n    const handleJobUpdate = (id:number, qId:string, type:string, status:number) => {\n      if (queueId !== qId) {\n        return;\n      }\n      if (status === JOB_ABORTED_STATUS || status === JOB_CLEANUP_STATUS) {\n        this.emit('status', QUEUE_ERROR_STATUS);\n      } else if (status === JOB_ERROR_STATUS || status === JOB_PENDING_STATUS || status === JOB_CLEANUP_AND_REMOVE_STATUS) {\n        this.emit('status', QUEUE_PENDING_STATUS);\n      } else if (status === JOB_COMPLETE_STATUS || status === JOB_PENDING_STATUS) {\n        this.emitStatus();\n      }\n    };\n    this.handleJobUpdate = handleJobUpdate;\n    jobEmitter.addListener('jobUpdate', handleJobUpdate);\n    const handleJobsClear = () => {\n      this.emit('status', QUEUE_EMPTY_STATUS);\n    };\n    this.handleJobsClear = handleJobsClear;\n    jobEmitter.addListener('jobsClear', handleJobsClear);\n    this.on('status', (status:number) => {\n      this.status = status;\n    });\n  }\n\n  async getStatus() {\n    const { status } = this;\n    if (typeof status === 'number') {\n      return status;\n    }\n    const newStatus = await getQueueStatus(this.queueId);\n    this.status = newStatus;\n    return newStatus;\n  }\n\n  emitStatus() {\n    if (this.statusRequested) {\n      return;\n    }\n    delete this.status;\n    this.statusRequested = true;\n    let didEmitNewStatus = false;\n    const handleStatus = () => {\n      didEmitNewStatus = true;\n    };\n    this.addListener('status', handleStatus);\n    self.queueMicrotask(async () => {\n      this.statusRequested = false;\n      this.removeListener('status', handleStatus);\n      if (didEmitNewStatus) {\n        return;\n      }\n      const status = await getQueueStatus(this.queueId);\n      this.emit('status', status);\n    });\n  }\n\n  close() {\n    jobEmitter.removeListener('jobAdd', this.handleJobAdd);\n    jobEmitter.removeListener('jobDelete', this.handleJobDelete);\n    jobEmitter.removeListener('jobUpdate', this.handleJobUpdate);\n    jobEmitter.removeListener('jobsClear', this.handleJobsClear);\n  }\n}\n"],"file":"queue-watcher.js"}