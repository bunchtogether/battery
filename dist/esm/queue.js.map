{"version":3,"sources":["../../src/queue.js"],"names":["PQueue","EventEmitter","makeLogger","jobEmitter","localJobEmitter","clearDatabase","dequeueFromDatabase","dequeueFromDatabaseNotIn","incrementJobAttemptInDatabase","incrementCleanupAttemptInDatabase","markJobCompleteInDatabase","markJobCompleteThenRemoveFromDatabase","markJobPendingInDatabase","markJobErrorInDatabase","markJobStartAfterInDatabase","markJobAsAbortedOrRemoveFromDatabase","markCleanupStartAfterInDatabase","updateCleanupValuesInDatabase","getCleanupFromDatabase","removePathFromCleanupDataInDatabase","getJobFromDatabase","markQueueForCleanupInDatabase","markQueueForCleanupAndRemoveInDatabase","markQueueJobsGreaterThanIdCleanupAndRemoveInDatabase","removeCleanupFromDatabase","restoreJobToDatabaseForCleanupAndRemove","getUnloadDataFromDatabase","clearUnloadDataInDatabase","JOB_PENDING_STATUS","JOB_ERROR_STATUS","JOB_CLEANUP_STATUS","JOB_CLEANUP_AND_REMOVE_STATUS","AbortError","CLEANUP_JOB_TYPE","PRIORITY_OFFSET","Math","floor","Number","MAX_SAFE_INTEGER","BatteryQueue","constructor","options","stopped","dequeueQueue","concurrency","unloadQueue","handlerMap","Map","cleanupMap","durationEstimateHandlerMap","durationEstimateMap","retryJobDelayMap","retryCleanupDelayMap","queueCurrentJobTypeMap","queueMap","jobIds","Set","abortControllerMap","isClearing","emitCallbacks","logger","addListener","error","errorStack","interval","clearTimeout","heartbeatExpiresTimeout","heartbeatExpiresTimestamp","Date","now","round","setTimeout","warn","unloadClient","abortJob","queueId","jobId","queueAbortControllerMap","get","abortController","abort","enableStartOnJob","disableStartOnJob","didRequestJobAddDequeue","handleJobAdd","self","queueMicrotask","dequeue","handleJobDelete","id","handleJobUpdate","type","status","didAbort","then","job","has","args","startCleanup","queue","start","catch","removeListener","emit","emitCallback","getQueueIds","queueIds","keys","setUnload","handleUnload","Error","removeUnload","setRetryJobDelay","retryJobDelayFunction","set","removeRetryJobDelay","delete","getRetryJobDelay","attempt","result","retryDelayError","setRetryCleanupDelay","retryCleanupDelayFunction","removeRetryCleanupDelay","getRetryCleanupDelay","setHandler","handler","removeHandler","setCleanup","cleanup","removeCleanup","setDurationEstimateHandler","timeEstimationHandler","removeDurationEstimateHandler","addDurationEstimate","duration","pending","queueDurationEstimateMap","getDurationEstimate","removeDurationEstimate","totalDuration","totalPending","values","setCurrentJobType","getCurrentJobType","clear","onIdle","addToQueue","priority","func","add","newQueue","autoStart","on","undefined","Promise","resolve","timeout","handleClearing","handleActive","size","abortQueue","info","jobs","startJobs","abortAndRemoveQueue","abortAndRemoveQueueJobsGreaterThanId","bind","newJobs","Array","isArray","startAfter","pause","startJob","startErrorHandler","stop","stopPromise","idlePromises","setInterval","push","finally","clearInterval","all","maxDuration","onIdlePromise","jobsInterval","length","getAbortController","newAbortController","AbortController","removeAbortController","runCleanup","cleanupJob","data","delay","toLocaleString","path","name","retryCleanupDelay","newStartAfter","run","signal","aborted","delayJobStart","reject","removeEventListener","handleAbort","addEventListener","updateCleanupData","updateDuration","durationEstimateHandler","durationEstimate","handlerDidRun","shouldKeepJobInDatabase","estimatedToActualRatio","retryDelay","handlePortMessage","event","MessageEvent","warnObject","port","requestId","requestArgs","MessagePort","onmessage","currentJobType","runUnloadHandlers","handleHeartbeat","unloadData","listenForServiceWorkerInterface","activeEmitCallback","handleJobsClear","tag","lastChance","waitUntil","ExtendableMessageEvent","ports","filter","x","previousPort","close","postMessage","t","errorObject"],"mappings":"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","sourcesContent":["// @flow\n\nimport PQueue from 'p-queue';\nimport EventEmitter from 'events';\nimport type { Logger } from './logger';\nimport makeLogger from './logger';\nimport type { Job } from './database';\nimport {\n  jobEmitter,\n  localJobEmitter,\n  clearDatabase,\n  dequeueFromDatabase,\n  dequeueFromDatabaseNotIn,\n  incrementJobAttemptInDatabase,\n  incrementCleanupAttemptInDatabase,\n  markJobCompleteInDatabase,\n  markJobCompleteThenRemoveFromDatabase,\n  markJobPendingInDatabase,\n  markJobErrorInDatabase,\n  markJobStartAfterInDatabase,\n  markJobAsAbortedOrRemoveFromDatabase,\n  markCleanupStartAfterInDatabase,\n  updateCleanupValuesInDatabase,\n  getCleanupFromDatabase,\n  removePathFromCleanupDataInDatabase,\n  getJobFromDatabase,\n  markQueueForCleanupInDatabase,\n  markQueueForCleanupAndRemoveInDatabase,\n  markQueueJobsGreaterThanIdCleanupAndRemoveInDatabase,\n  removeCleanupFromDatabase,\n  restoreJobToDatabaseForCleanupAndRemove,\n  getUnloadDataFromDatabase,\n  clearUnloadDataInDatabase,\n  JOB_PENDING_STATUS,\n  JOB_ERROR_STATUS,\n  JOB_CLEANUP_STATUS,\n  JOB_CLEANUP_AND_REMOVE_STATUS,\n} from './database';\nimport { AbortError } from './errors';\n\nexport const CLEANUP_JOB_TYPE = 'CLEANUP_JOB_TYPE';\n\nconst PRIORITY_OFFSET = Math.floor(Number.MAX_SAFE_INTEGER / 2);\n\ntype HandlerFunction = (Array<any>, AbortSignal, (Object) => Promise<void>, (number, number) => void) => Promise<void | false>;\ntype CleanupFunction = (Object | void, Array<any>, Array<string> => Promise<void>) => Promise<void>;\ntype DurationEstimateFunction = (Array<any>) => number;\ntype RetryDelayFunction = (number, Error) => number | false | Promise<number | false>;\ntype EmitCallback = (string, Array<any>) => void;\ntype UnloadFunction = (Object | void) => Promise<void> | void;\n\ntype Options = {\n  logger?: Logger,\n  startOnJob?: boolean\n};\n\nexport default class BatteryQueue extends EventEmitter {\n  declare logger: Logger;\n  declare dequeueQueue: PQueue;\n  declare unloadQueue: PQueue;\n  declare handlerMap: Map<string, HandlerFunction>;\n  declare retryJobDelayMap: Map<string, RetryDelayFunction>;\n  declare retryCleanupDelayMap: Map<string, RetryDelayFunction>;\n  declare cleanupMap: Map<string, CleanupFunction>;\n  declare queueCurrentJobTypeMap: Map<string, string>;\n  declare durationEstimateHandlerMap: Map<string, DurationEstimateFunction>;\n  declare durationEstimateMap: Map<string, Map<number, [number, number]>>;\n  declare queueMap: Map<string, PQueue>;\n  declare handleUnload: void | UnloadFunction;\n  declare abortControllerMap: Map<string, Map<number, AbortController>>;\n  declare isClearing: boolean;\n  declare onIdlePromise: Promise<void> | void;\n  declare stopPromise: Promise<void> | void;\n  declare jobIds: Set<number>;\n  declare emitCallbacks: Array<EmitCallback>;\n  declare port: MessagePort | void;\n  declare handleJobAdd: void | () => void;\n  declare handleJobUpdate: void | (number, string, string, number) => void;\n  declare handleJobDelete: void | (number, string) => void;\n  declare heartbeatExpiresTimestamp: void | number;\n  declare heartbeatExpiresTimeout: void | TimeoutID;\n  declare stopped: boolean;\n\n  constructor(options?: Options = {}) {\n    super();\n    this.stopped = false;\n    this.dequeueQueue = new PQueue({ concurrency: 1 });\n    this.unloadQueue = new PQueue({ concurrency: 1 });\n    this.handlerMap = new Map();\n    this.cleanupMap = new Map();\n    this.durationEstimateHandlerMap = new Map();\n    this.durationEstimateMap = new Map();\n    this.retryJobDelayMap = new Map();\n    this.retryCleanupDelayMap = new Map();\n    this.queueCurrentJobTypeMap = new Map();\n    this.queueMap = new Map();\n    this.jobIds = new Set();\n    this.abortControllerMap = new Map();\n    this.isClearing = false;\n    this.emitCallbacks = [];\n    this.logger = options.logger || makeLogger('Battery Queue');\n    this.addListener('error', (error) => {\n      this.logger.errorStack(error);\n    });\n    this.addListener('heartbeat', (interval:number) => {\n      clearTimeout(this.heartbeatExpiresTimeout);\n      this.heartbeatExpiresTimestamp = Date.now() + Math.round(interval * 2.5);\n      this.heartbeatExpiresTimeout = setTimeout(() => {\n        if (typeof this.heartbeatExpiresTimestamp !== 'number') {\n          return;\n        }\n        this.logger.warn(`Heartbeat timeout after ${Math.round(interval * 2.1)}ms`);\n        this.unloadClient();\n      }, Math.round(interval * 2.1));\n    });\n  }\n\n  abortJob(queueId:string, jobId:number) {\n    const queueAbortControllerMap = this.abortControllerMap.get(queueId);\n    if (typeof queueAbortControllerMap !== 'undefined') {\n      const abortController = queueAbortControllerMap.get(jobId);\n      if (typeof abortController !== 'undefined') {\n        abortController.abort();\n        return true;\n      }\n    }\n    return false;\n  }\n\n  enableStartOnJob() {\n    this.disableStartOnJob(); // Prevent handlers from being added multiple times\n    let didRequestJobAddDequeue = false;\n    const handleJobAdd = () => {\n      if (didRequestJobAddDequeue) {\n        return;\n      }\n      didRequestJobAddDequeue = true;\n      self.queueMicrotask(() => {\n        didRequestJobAddDequeue = false;\n        this.dequeue();\n      });\n    };\n    jobEmitter.addListener('jobAdd', handleJobAdd);\n    this.handleJobAdd = handleJobAdd;\n    const handleJobDelete = (id:number, queueId:string) => {\n      this.abortJob(queueId, id);\n    };\n    jobEmitter.addListener('jobDelete', handleJobDelete);\n    this.handleJobDelete = handleJobDelete;\n\n    const handleJobUpdate = (id:number, queueId:string, type:string, status:number) => {\n      if (status !== JOB_CLEANUP_AND_REMOVE_STATUS && status !== JOB_CLEANUP_STATUS) {\n        return;\n      }\n      const didAbort = this.abortJob(queueId, id);\n      if (didAbort) {\n        return;\n      }\n      getJobFromDatabase(id).then((job:Job | void) => {\n        if (typeof job === 'undefined') {\n          this.logger.error(`Unable to cleanup and remove ${type} job #${id} in queue ${queueId}, job does not exist`);\n          return;\n        }\n        if (this.jobIds.has(id)) {\n          return;\n        }\n        const { args } = job;\n        this.startCleanup(id, queueId, args, type);\n        const queue = this.queueMap.get(queueId);\n        if (typeof queue !== 'undefined') {\n          queue.start();\n        }\n      }).catch((error) => {\n        this.logger.error(`Error while cleaning up and removing ${type} job #${id} in queue ${queueId}`);\n        this.logger.errorStack(error);\n      });\n    };\n    jobEmitter.addListener('jobUpdate', handleJobUpdate);\n    this.handleJobUpdate = handleJobUpdate;\n  }\n\n  disableStartOnJob() {\n    const handleJobAdd = this.handleJobAdd;\n    if (typeof handleJobAdd === 'function') {\n      jobEmitter.removeListener('jobAdd', handleJobAdd);\n      delete this.handleJobAdd;\n    }\n    const handleJobUpdate = this.handleJobUpdate;\n    if (typeof handleJobUpdate === 'function') {\n      jobEmitter.removeListener('jobUpdate', handleJobUpdate);\n      delete this.handleJobUpdate;\n    }\n    const handleJobDelete = this.handleJobDelete;\n    if (typeof handleJobDelete === 'function') {\n      jobEmitter.removeListener('jobDelete', handleJobDelete);\n      delete this.handleJobDelete;\n    }\n  }\n\n  emit(type:string, ...args:Array<any>) {\n    for (const emitCallback of this.emitCallbacks) {\n      emitCallback(type, args);\n    }\n    return super.emit(type, ...args);\n  }\n\n  async getQueueIds() {\n    await this.dequeue();\n    const queueIds:Set<string> = new Set(this.queueMap.keys());\n    return queueIds;\n  }\n\n  setUnload(handleUnload:UnloadFunction) {\n    if (typeof this.handleUnload === 'function') {\n      throw new Error('Unload handler already exists');\n    }\n    this.handleUnload = handleUnload;\n  }\n\n  removeUnload() {\n    if (typeof this.handleUnload !== 'function') {\n      throw new Error('Unload handler does not exist');\n    }\n    delete this.handleUnload;\n  }\n\n  setRetryJobDelay(type:string, retryJobDelayFunction:RetryDelayFunction) {\n    if (this.retryJobDelayMap.has(type)) {\n      throw new Error(`Retry job delay handler for type \"${type}\" already exists`);\n    }\n    this.retryJobDelayMap.set(type, retryJobDelayFunction);\n  }\n\n  removeRetryJobDelay(type:string) {\n    if (!this.retryJobDelayMap.has(type)) {\n      throw new Error(`Retry job delay handler for type \"${type}\" does not exist`);\n    }\n    this.retryJobDelayMap.delete(type);\n  }\n\n  async getRetryJobDelay(type:string, attempt: number, error:Error) {\n    const retryJobDelayFunction = this.retryJobDelayMap.get(type);\n    if (typeof retryJobDelayFunction !== 'function') {\n      return false;\n    }\n    let result = false;\n    try {\n      result = await retryJobDelayFunction(attempt, error);\n    } catch (retryDelayError) {\n      this.logger.error(`Error in retry job delay handler for type \"${type}\" on attempt ${attempt}`);\n      this.emit('error', retryDelayError);\n      return false;\n    }\n    if (typeof result !== 'number' && result !== false) {\n      throw new Error(`Retry job delay function for type \"${type}\" returned invalid response, should be a number (milliseconds) or false`);\n    }\n    return result;\n  }\n\n  setRetryCleanupDelay(type:string, retryCleanupDelayFunction:RetryDelayFunction) {\n    if (this.retryCleanupDelayMap.has(type)) {\n      throw new Error(`Retry cleanup delay handler for type \"${type}\" already exists`);\n    }\n    this.retryCleanupDelayMap.set(type, retryCleanupDelayFunction);\n  }\n\n  removeRetryCleanupDelay(type:string) {\n    if (!this.retryCleanupDelayMap.has(type)) {\n      throw new Error(`Retry cleanup delay handler for type \"${type}\" does not exist`);\n    }\n    this.retryCleanupDelayMap.delete(type);\n  }\n\n  async getRetryCleanupDelay(type:string, attempt: number, error:Error) {\n    const retryCleanupDelayFunction = this.retryCleanupDelayMap.get(type);\n    if (typeof retryCleanupDelayFunction !== 'function') {\n      return false;\n    }\n    let result = false;\n    try {\n      result = await retryCleanupDelayFunction(attempt, error);\n    } catch (retryDelayError) {\n      this.logger.error(`Error in retry cleanup delay handler for type \"${type}\" on attempt ${attempt}`);\n      this.emit('error', retryDelayError);\n      return false;\n    }\n    if (typeof result !== 'number' && result !== false) {\n      throw new Error(`Retry cleanup delay function for type \"${type}\" returned invalid response, should be a number (milliseconds) or false`);\n    }\n    return result;\n  }\n\n  setHandler(type:string, handler: HandlerFunction) {\n    if (this.handlerMap.has(type)) {\n      throw new Error(`Handler for type \"${type}\" already exists`);\n    }\n    this.handlerMap.set(type, handler);\n  }\n\n  removeHandler(type:string) {\n    if (!this.handlerMap.has(type)) {\n      throw new Error(`Handler for type \"${type}\" does not exist`);\n    }\n    this.handlerMap.delete(type);\n  }\n\n  setCleanup(type:string, cleanup: CleanupFunction) {\n    if (this.cleanupMap.has(type)) {\n      throw new Error(`Cleanup for type \"${type}\" already exists`);\n    }\n    this.cleanupMap.set(type, cleanup);\n  }\n\n  removeCleanup(type:string) {\n    if (!this.cleanupMap.has(type)) {\n      throw new Error(`Cleanup for type \"${type}\" does not exist`);\n    }\n    this.cleanupMap.delete(type);\n  }\n\n  setDurationEstimateHandler(type:string, timeEstimationHandler: DurationEstimateFunction) {\n    if (this.durationEstimateHandlerMap.has(type)) {\n      throw new Error(`Time estimation handler for type \"${type}\" already exists`);\n    }\n    this.durationEstimateHandlerMap.set(type, timeEstimationHandler);\n  }\n\n  removeDurationEstimateHandler(type:string) {\n    if (!this.durationEstimateHandlerMap.has(type)) {\n      throw new Error(`Time estimation handler for type \"${type}\" does not exist`);\n    }\n    this.durationEstimateHandlerMap.delete(type);\n  }\n\n  addDurationEstimate(queueId:string, jobId:number, duration:number, pending:number) {\n    const queueDurationEstimateMap = this.durationEstimateMap.get(queueId);\n    if (typeof queueDurationEstimateMap === 'undefined') {\n      this.durationEstimateMap.set(queueId, new Map([[jobId, [duration, pending]]]));\n      this.getDurationEstimate(queueId);\n      return;\n    }\n    queueDurationEstimateMap.set(jobId, [duration, pending]);\n    this.getDurationEstimate(queueId);\n  }\n\n  removeDurationEstimate(queueId:string, jobId?:number) {\n    if (typeof jobId !== 'number') {\n      this.durationEstimateMap.delete(queueId);\n      this.getDurationEstimate(queueId);\n      return;\n    }\n    const queueDurationEstimateMap = this.durationEstimateMap.get(queueId);\n    if (typeof queueDurationEstimateMap === 'undefined') {\n      this.getDurationEstimate(queueId);\n      return;\n    }\n    queueDurationEstimateMap.delete(jobId);\n    this.getDurationEstimate(queueId);\n  }\n\n  getDurationEstimate(queueId:string) {\n    const queueDurationEstimateMap = this.durationEstimateMap.get(queueId);\n    let totalDuration = 0;\n    let totalPending = 0;\n    if (typeof queueDurationEstimateMap === 'undefined') {\n      this.emit('queueDuration', queueId, totalDuration, totalPending);\n      return [totalDuration, totalPending];\n    }\n    for (const [duration, pending] of queueDurationEstimateMap.values()) {\n      totalDuration += duration;\n      totalPending += pending;\n    }\n    this.emit('queueDuration', queueId, totalDuration, totalPending);\n    return [totalDuration, totalPending];\n  }\n\n  setCurrentJobType(queueId:string, type?:void | string) {\n    if (typeof type === 'string') {\n      this.queueCurrentJobTypeMap.set(queueId, type);\n    } else {\n      this.queueCurrentJobTypeMap.delete(queueId);\n    }\n    this.emit('queueJobType', queueId, type);\n  }\n\n  getCurrentJobType(queueId:string) {\n    return this.queueCurrentJobTypeMap.get(queueId);\n  }\n\n  async clear() {\n    this.isClearing = true;\n    await this.onIdle();\n    this.emit('clearing');\n    await clearDatabase();\n    this.dequeueQueue.start();\n    this.isClearing = false;\n  }\n\n  addToQueue(queueId:string, priority: number, func: () => Promise<void>) {\n    if (this.stopped) {\n      return;\n    }\n    const queue = this.queueMap.get(queueId);\n    if (typeof queue !== 'undefined') {\n      queue.add(func, { priority });\n      return;\n    }\n    const newQueue = new PQueue({ concurrency: 1, autoStart: false });\n    this.queueMap.set(queueId, newQueue);\n    newQueue.add(func, { priority });\n    newQueue.on('idle', async () => {\n      this.setCurrentJobType(queueId, undefined);\n      if (!this.isClearing) {\n        await new Promise((resolve) => {\n          const timeout = setTimeout(() => {\n            this.removeListener('clearing', handleClearing);\n            newQueue.removeListener('active', handleActive);\n            resolve();\n          }, 5000);\n          const handleClearing = () => {\n            clearTimeout(timeout);\n            this.removeListener('clearing', handleClearing);\n            newQueue.removeListener('active', handleActive);\n            resolve();\n          };\n          const handleActive = () => {\n            clearTimeout(timeout);\n            this.removeListener('clearing', handleClearing);\n            newQueue.removeListener('active', handleActive);\n            resolve();\n          };\n          this.addListener('clearing', handleClearing);\n          newQueue.addListener('active', handleActive);\n        });\n      }\n      if (newQueue.pending > 0 || newQueue.size > 0) {\n        return;\n      }\n      this.queueMap.delete(queueId);\n      this.emit('queueInactive', queueId);\n    });\n    this.emit('queueActive', queueId);\n  }\n\n  async abortQueue(queueId: string) {\n    this.logger.info(`Aborting queue ${queueId}`);\n    this.removeDurationEstimate(queueId);\n    // Abort active jobs\n    const queueAbortControllerMap = this.abortControllerMap.get(queueId);\n    if (typeof queueAbortControllerMap !== 'undefined') {\n      for (const abortController of queueAbortControllerMap.values()) {\n        abortController.abort();\n      }\n    }\n    // Changes:\n    // * JOB_ERROR_STATUS -> JOB_CLEANUP_STATUS\n    // * JOB_COMPLETE_STATUS -> JOB_CLEANUP_STATUS\n    // * JOB_CLEANUP_AND_REMOVE_STATUS -> JOB_CLEANUP_AND_REMOVE_STATUS\n    // * JOB_PENDING_STATUS -> JOB_ABORTED_STATUS\n    const jobs = await markQueueForCleanupInDatabase(queueId);\n    await this.startJobs(jobs);\n  }\n\n  async abortAndRemoveQueue(queueId: string) {\n    this.logger.info(`Aborting and removing queue ${queueId}`);\n    this.removeDurationEstimate(queueId);\n    // Abort active jobs\n    const queueAbortControllerMap = this.abortControllerMap.get(queueId);\n    if (typeof queueAbortControllerMap !== 'undefined') {\n      for (const abortController of queueAbortControllerMap.values()) {\n        abortController.abort();\n      }\n    }\n    // Changes:\n    // * JOB_ERROR_STATUS -> JOB_CLEANUP_AND_REMOVE_STATUS\n    // * JOB_COMPLETE_STATUS -> JOB_CLEANUP_AND_REMOVE_STATUS\n    // * JOB_CLEANUP_STATUS -> JOB_CLEANUP_AND_REMOVE_STATUS\n    // * JOB_CLEANUP_AND_REMOVE_STATUS -> JOB_CLEANUP_AND_REMOVE_STATUS\n    // * Removes other statuses\n    const jobs = await markQueueForCleanupAndRemoveInDatabase(queueId);\n    await this.startJobs(jobs);\n  }\n\n  async abortAndRemoveQueueJobsGreaterThanId(queueId: string, id: number) {\n    this.logger.info(`Aborting and removing jobs with ID greater than ${id} in queue ${queueId}`);\n    // Abort active jobs\n    const queueAbortControllerMap = this.abortControllerMap.get(queueId);\n    if (typeof queueAbortControllerMap !== 'undefined') {\n      for (const [jobId, abortController] of queueAbortControllerMap) {\n        if (jobId > id) {\n          this.removeDurationEstimate(queueId, jobId);\n          abortController.abort();\n        }\n      }\n    }\n    // Changes:\n    // * JOB_ERROR_STATUS -> JOB_CLEANUP_AND_REMOVE_STATUS\n    // * JOB_COMPLETE_STATUS -> JOB_CLEANUP_AND_REMOVE_STATUS\n    // * JOB_CLEANUP_STATUS -> JOB_CLEANUP_AND_REMOVE_STATUS\n    // * JOB_CLEANUP_AND_REMOVE_STATUS -> JOB_CLEANUP_AND_REMOVE_STATUS\n    // * Removes other statuses\n    const jobs = await markQueueJobsGreaterThanIdCleanupAndRemoveInDatabase(queueId, id);\n    await this.startJobs(jobs);\n  }\n\n  async dequeue():Promise<void> {\n    if (this.stopped) {\n      return;\n    }\n    if (this.dequeueQueue.size === 0) {\n      // Add a subsequent dequeue\n      this.dequeueQueue.add(this.startJobs.bind(this));\n    }\n    await this.dequeueQueue.onIdle();\n  }\n\n  async startJobs(newJobs?:Array<Job>) { // eslint-disable-line consistent-return\n    const jobs = Array.isArray(newJobs) ? newJobs : await dequeueFromDatabaseNotIn([...this.jobIds.keys()]);\n    const queueIds = new Set();\n    for (const { id, queueId, args, type, status, attempt, startAfter } of jobs) {\n      if (this.jobIds.has(id)) {\n        continue;\n      }\n      // Pause queues before adding items into them to avoid starting things out of priority\n      if (!queueIds.has(queueId)) {\n        const queue = this.queueMap.get(queueId);\n        if (typeof queue !== 'undefined') {\n          queue.pause();\n        }\n        queueIds.add(queueId);\n      }\n      if (status === JOB_PENDING_STATUS) {\n        this.startJob(id, queueId, args, type, attempt + 1, startAfter);\n      } else if (status === JOB_ERROR_STATUS) {\n        this.startErrorHandler(id, queueId, args, type, attempt, startAfter);\n      } else if (status === JOB_CLEANUP_STATUS) {\n        this.startCleanup(id, queueId, args, type);\n      } else if (status === JOB_CLEANUP_AND_REMOVE_STATUS) {\n        this.startCleanup(id, queueId, args, type);\n      } else {\n        throw new Error(`Unknown job status ${status} in job ${id} of queue ${queueId}`);\n      }\n    }\n    for (const queueId of queueIds) {\n      const queue = this.queueMap.get(queueId);\n      if (typeof queue !== 'undefined') {\n        queue.start();\n      } else {\n        this.logger.error(`Unable to start queue ${queueId} after dequeue; queue does not exist`);\n      }\n    }\n  }\n\n  async stop() {\n    if (typeof this.stopPromise === 'undefined') {\n      this.stopped = true;\n      this.stopPromise = (async () => {\n        await this.dequeueQueue.onIdle();\n        const idlePromises = [];\n        for (const [queueId, queue] of this.queueMap) {\n          const interval = setInterval(() => {\n            this.logger.info(`Waiting on queue ${queueId} (stop), size ${queue.size}, pending ${queue.pending}`);\n          }, 250);\n          queue.clear();\n          idlePromises.push(queue.onIdle().finally(() => {\n            clearInterval(interval);\n          }));\n        }\n        await Promise.all(idlePromises);\n        this.jobIds.clear();\n        this.abortControllerMap.clear();\n        delete this.stopPromise;\n        this.emit('stop');\n        this.stopped = false;\n      })();\n    }\n    await this.stopPromise;\n  }\n\n  async onIdle(maxDuration?: number) {\n    if (typeof this.onIdlePromise === 'undefined') {\n      this.onIdlePromise = (async () => {\n        const timeout = typeof maxDuration === 'number' ? Date.now() + maxDuration : -1;\n        const start = Date.now();\n        while (true) { // eslint-disable-line no-constant-condition\n          if (timeout !== -1 && Date.now() > timeout) {\n            this.logger.warn(`Idle timeout after ${Date.now() - start}ms`);\n            break;\n          }\n          await this.dequeueQueue.onIdle();\n          for (const [queueId, queue] of this.queueMap) {\n            const interval = setInterval(() => {\n              this.logger.info(`Waiting on queue ${queueId} (idle)`);\n            }, 250);\n            await queue.onIdle();\n            clearInterval(interval);\n          }\n          const jobsInterval = setInterval(() => {\n            this.logger.info('Waiting on jobs');\n          }, 250);\n          const jobs = await dequeueFromDatabase();\n          clearInterval(jobsInterval);\n          if (jobs.length > 0) {\n            const interval = setInterval(() => {\n              this.logger.info('Waiting on dequeue');\n            }, 250);\n            await this.dequeue();\n            clearInterval(interval);\n            continue;\n          }\n          break;\n        }\n        delete this.onIdlePromise;\n        this.emit('idle');\n      })();\n    }\n    await this.onIdlePromise;\n  }\n\n  getAbortController(id:number, queueId:string) {\n    let queueAbortControllerMap = this.abortControllerMap.get(queueId);\n    if (typeof queueAbortControllerMap === 'undefined') {\n      queueAbortControllerMap = new Map();\n      this.abortControllerMap.set(queueId, queueAbortControllerMap);\n    }\n    const abortController = queueAbortControllerMap.get(id);\n    if (typeof abortController !== 'undefined') {\n      return abortController;\n    }\n    const newAbortController = new AbortController();\n    queueAbortControllerMap.set(id, newAbortController);\n    return newAbortController;\n  }\n\n  removeAbortController(id:number, queueId:string) {\n    const queueAbortControllerMap = this.abortControllerMap.get(queueId);\n    if (typeof queueAbortControllerMap === 'undefined') {\n      this.logger.warn(`Abort controller map for ${id} in queue ${queueId} does not exist`);\n      return;\n    }\n    const abortController = queueAbortControllerMap.get(id);\n    if (typeof abortController === 'undefined') {\n      this.logger.warn(`Abort controller for ${id} in queue ${queueId} does not exist`);\n      return;\n    }\n    queueAbortControllerMap.delete(id);\n    if (queueAbortControllerMap.size === 0) {\n      this.abortControllerMap.delete(queueId);\n    }\n  }\n\n  async runCleanup(id:number, queueId:string, args:Array<any>, type:string) {\n    this.emit('cleanupStart', { id });\n    const cleanup = this.cleanupMap.get(type);\n    if (typeof cleanup !== 'function') {\n      this.logger.warn(`No cleanup for job type ${type}`);\n      await removeCleanupFromDatabase(id);\n      this.emit('cleanup', { id });\n      return;\n    }\n    const cleanupJob = await getCleanupFromDatabase(id);\n    const { data, startAfter } = typeof cleanupJob === 'undefined' ? { data: undefined, startAfter: 0 } : cleanupJob;\n    const delay = startAfter - Date.now();\n    if (delay > 0) {\n      this.logger.info(`Delaying retry of ${type} job #${id} cleanup in queue ${queueId} by ${delay}ms to ${new Date(startAfter).toLocaleString()}`);\n      await new Promise((resolve) => setTimeout(resolve, delay));\n    }\n    try {\n      await cleanup(data, args, (path:Array<string>) => removePathFromCleanupDataInDatabase(id, path));\n    } catch (error) {\n      const attempt = await incrementCleanupAttemptInDatabase(id, queueId);\n      if (error.name === 'FatalError') {\n        this.logger.error(`Fatal error in ${type} job #${id} cleanup in queue ${queueId} attempt ${attempt}`);\n        this.emit('error', error);\n        await removeCleanupFromDatabase(id);\n        this.emit('fatalCleanupError', { id, queueId });\n        return;\n      }\n      const retryCleanupDelay = await this.getRetryCleanupDelay(type, attempt, error);\n      if (retryCleanupDelay === false) {\n        this.logger.error(`Error in ${type} job #${id} cleanup in queue ${queueId} attempt ${attempt} with no additional attempts requested`);\n        this.emit('error', error);\n        await removeCleanupFromDatabase(id);\n        this.emit('fatalCleanupError', { id, queueId });\n        return;\n      }\n      this.logger.error(`Error in ${type} job #${id} cleanup in queue ${queueId} attempt ${attempt}, retrying ${retryCleanupDelay > 0 ? `in ${retryCleanupDelay}ms` : 'immediately'}`);\n      this.emit('error', error);\n      if (retryCleanupDelay > 0) {\n        this.emit('retryCleanupDelay', { id, queueId, retryCleanupDelay });\n        const newStartAfter = Date.now() + retryCleanupDelay;\n        await markCleanupStartAfterInDatabase(id, newStartAfter);\n      }\n      await this.runCleanup(id, queueId, args, type);\n      return;\n    }\n    await removeCleanupFromDatabase(id);\n    this.emit('cleanup', { id });\n  }\n\n  startCleanup(id:number, queueId:string, args:Array<any>, type:string) {\n    this.logger.info(`Adding ${type} cleanup job #${id} to queue ${queueId}`);\n    this.jobIds.add(id);\n    this.removeDurationEstimate(queueId, id);\n    const priority = PRIORITY_OFFSET + id;\n    const run = async () => {\n      this.setCurrentJobType(queueId, CLEANUP_JOB_TYPE);\n      this.logger.info(`Starting ${type} cleanup #${id} in queue ${queueId}`);\n      await this.runCleanup(id, queueId, args, type);\n      // Job could be marked for removal while cleanup is running\n      await markJobAsAbortedOrRemoveFromDatabase(id);\n      this.jobIds.delete(id);\n    };\n    this.addToQueue(queueId, priority, run);\n  }\n\n  startErrorHandler(id:number, queueId:string, args:Array<any>, type:string, attempt: number, startAfter: number) {\n    this.logger.info(`Adding ${type} error handler job #${id} to queue ${queueId}`);\n    this.jobIds.add(id);\n    const priority = PRIORITY_OFFSET + id;\n    const abortController = this.getAbortController(id, queueId);\n    const run = async () => {\n      this.setCurrentJobType(queueId, CLEANUP_JOB_TYPE);\n      this.logger.info(`Starting ${type} error handler #${id} in queue ${queueId}`);\n      await this.runCleanup(id, queueId, args, type);\n      if (abortController.signal.aborted) {\n        // Job could be marked for removal while error handler is running\n        await markJobAsAbortedOrRemoveFromDatabase(id);\n        this.removeAbortController(id, queueId);\n        this.jobIds.delete(id);\n      } else {\n        await markJobPendingInDatabase(id);\n        this.logger.info(`Retrying ${type} job #${id} in queue ${queueId}`);\n        this.emit('retry', { id });\n        this.startJob(id, queueId, args, type, attempt + 1, startAfter);\n      }\n      this.logger.info(`Completed ${type} error handler #${id} in queue ${queueId}`);\n    };\n    this.addToQueue(queueId, priority, run);\n  }\n\n  async delayJobStart(id:number, queueId:string, type:string, signal: AbortSignal, startAfter: number) {\n    if (signal.aborted) {\n      throw new AbortError(`Queue ${queueId} was aborted`);\n    }\n    const duration = startAfter - Date.now();\n    if (duration > 0) {\n      this.logger.info(`Delaying start of ${type} job #${id} in queue ${queueId} by ${duration}ms`);\n      await new Promise((resolve, reject) => {\n        const timeout = setTimeout(() => {\n          signal.removeEventListener('abort', handleAbort);\n          resolve();\n        }, duration);\n        const handleAbort = () => {\n          clearTimeout(timeout);\n          signal.removeEventListener('abort', handleAbort);\n          reject(new AbortError(`Queue ${queueId} was aborted`));\n        };\n        signal.addEventListener('abort', handleAbort);\n      });\n    }\n  }\n\n  startJob(id:number, queueId:string, args:Array<any>, type:string, attempt:number, startAfter: number) {\n    this.logger.info(`Adding ${type} job #${id} to queue ${queueId}`);\n    this.jobIds.add(id);\n    const priority = PRIORITY_OFFSET - id;\n    const updateCleanupData = (data:Object) => updateCleanupValuesInDatabase(id, queueId, data);\n    const updateDuration = (duration:number, pending:number) => {\n      this.addDurationEstimate(queueId, id, duration, pending);\n    };\n    const abortController = this.getAbortController(id, queueId);\n    const durationEstimateHandler = this.durationEstimateHandlerMap.get(type);\n    let durationEstimate;\n    if (typeof durationEstimateHandler === 'function') {\n      try {\n        durationEstimate = durationEstimateHandler(args);\n        this.addDurationEstimate(queueId, id, durationEstimate, durationEstimate);\n      } catch (error) {\n        this.logger.error(`Unable to estimate duration of ${type} job #${id} in queue ${queueId}`);\n        this.logger.errorStack(error);\n      }\n    }\n    const run = async () => {\n      const start = Date.now();\n      if (abortController.signal.aborted) {\n        this.emit('fatalError', { id, queueId, error: new AbortError(`Queue ${queueId} was aborted`) });\n        this.removeAbortController(id, queueId);\n        this.jobIds.delete(id);\n        this.removeDurationEstimate(queueId, id);\n        return;\n      }\n      const handler = this.handlerMap.get(type);\n      if (typeof handler !== 'function') {\n        this.logger.warn(`No handler for job type ${type}`);\n        await markJobCompleteInDatabase(id);\n        this.removeAbortController(id, queueId);\n        this.jobIds.delete(id);\n        this.addDurationEstimate(queueId, id, Date.now() - start, 0);\n        return;\n      }\n      this.setCurrentJobType(queueId, type);\n      let handlerDidRun = false;\n      try {\n        // Mark as error in database so the job is cleaned up and retried if execution\n        // stops before job completion or error.\n        await markJobErrorInDatabase(id);\n        await this.delayJobStart(id, queueId, type, abortController.signal, startAfter);\n        this.logger.info(`Starting ${type} job #${id} in queue ${queueId} attempt ${attempt}`);\n        handlerDidRun = true;\n        const shouldKeepJobInDatabase = await handler(args, abortController.signal, updateCleanupData, updateDuration);\n        if (abortController.signal.aborted) {\n          throw new AbortError(`Queue ${queueId} was aborted`);\n        }\n        if (shouldKeepJobInDatabase === false) {\n          await markJobCompleteThenRemoveFromDatabase(id);\n        } else {\n          await markJobCompleteInDatabase(id);\n        }\n        this.removeAbortController(id, queueId);\n        this.jobIds.delete(id);\n        const duration = Date.now() - start;\n        if (typeof durationEstimate === 'number') {\n          const estimatedToActualRatio = durationEstimate / duration;\n          if (estimatedToActualRatio < 0.8 || estimatedToActualRatio < 1.25) {\n            this.logger.warn(`Duration estimate of ${type} job #${id} (${durationEstimate}ms) was ${Math.round(100 * estimatedToActualRatio)}% of actual value (${duration}ms)`);\n          }\n        }\n        this.addDurationEstimate(queueId, id, duration, 0);\n        return;\n      } catch (error) {\n        if (error.name === 'JobDoesNotExistError') {\n          this.logger.error(`Job does not exist error for ${type} job #${id} in queue ${queueId} attempt ${attempt}`);\n          if (handlerDidRun) {\n            this.emit('fatalError', { id, queueId, error });\n            await restoreJobToDatabaseForCleanupAndRemove(id, queueId, type, args);\n            this.jobIds.delete(id);\n            this.removeAbortController(id, queueId);\n            this.startCleanup(id, queueId, args, type);\n          } else {\n            this.emit('fatalError', { id, queueId, error });\n            this.jobIds.delete(id);\n            this.removeAbortController(id, queueId);\n            this.removeDurationEstimate(queueId, id);\n          }\n          return;\n        }\n        if (abortController.signal.aborted) {\n          if (error.name !== 'AbortError') {\n            this.logger.error(`Abort signal following error in ${type} job #${id} in queue ${queueId} attempt ${attempt}`);\n            this.emit('error', error);\n          } else {\n            this.logger.warn(`Received abort signal for ${type} job #${id} in queue ${queueId} attempt ${attempt}`);\n          }\n          if (handlerDidRun) {\n            this.emit('fatalError', { id, queueId, error });\n            this.jobIds.delete(id);\n            this.removeAbortController(id, queueId);\n            this.startCleanup(id, queueId, args, type);\n          } else {\n            this.emit('fatalError', { id, queueId, error });\n            await markJobAsAbortedOrRemoveFromDatabase(id);\n            this.jobIds.delete(id);\n            this.removeAbortController(id, queueId);\n            this.removeDurationEstimate(queueId, id);\n          }\n          return;\n        }\n        await incrementJobAttemptInDatabase(id);\n        if (error.name === 'FatalError') {\n          this.logger.error(`Fatal error in ${type} job #${id} in queue ${queueId} attempt ${attempt}`);\n          this.emit('error', error);\n          this.emit('fatalError', { id, queueId, error });\n          this.jobIds.delete(id);\n          this.removeAbortController(id, queueId);\n          await this.abortQueue(queueId);\n          return;\n        }\n        const retryDelay = await this.getRetryJobDelay(type, attempt, error);\n        if (retryDelay === false) {\n          this.logger.error(`Error in ${type} job #${id} in queue ${queueId} attempt ${attempt} with no additional attempts requested`);\n          this.emit('error', error);\n          this.emit('fatalError', { id, queueId, error });\n          this.jobIds.delete(id);\n          this.removeAbortController(id, queueId);\n          await this.abortQueue(queueId);\n          return;\n        }\n        this.logger.error(`Error in ${type} job #${id} in queue ${queueId} attempt ${attempt}, retrying ${retryDelay > 0 ? `in ${retryDelay}ms` : 'immediately'}`);\n        this.emit('error', error);\n        if (retryDelay > 0) {\n          this.emit('retryDelay', { id, queueId, retryDelay });\n          const newStartAfter = Date.now() + retryDelay;\n          await markJobStartAfterInDatabase(id, newStartAfter);\n          this.jobIds.delete(id);\n          this.startErrorHandler(id, queueId, args, type, attempt, newStartAfter);\n        } else {\n          this.jobIds.delete(id);\n          this.startErrorHandler(id, queueId, args, type, attempt, startAfter);\n        }\n      }\n    };\n    this.addToQueue(queueId, priority, run);\n    this.emit('dequeue', { id });\n  }\n\n  async handlePortMessage(event:MessageEvent) {\n    if (!(event instanceof MessageEvent)) {\n      return;\n    }\n    const { data } = event;\n    if (!data || typeof data !== 'object') {\n      this.logger.warn('Invalid message data');\n      this.logger.warnObject(event);\n      return;\n    }\n    const { type, args } = data;\n    if (typeof type !== 'string') {\n      this.logger.warn('Unknown message type');\n      this.logger.warnObject(event);\n      return;\n    }\n    if (!Array.isArray(args)) {\n      this.logger.warn('Unknown arguments type');\n      this.logger.warnObject(event);\n      return;\n    }\n    const port = this.port;\n    switch (type) {\n      case 'heartbeat':\n        this.emit('heartbeat', ...args);\n        return;\n      case 'jobAdd':\n        jobEmitter.emit('jobAdd', ...args);\n        return;\n      case 'jobDelete':\n        jobEmitter.emit('jobDelete', ...args);\n        return;\n      case 'jobUpdate':\n        jobEmitter.emit('jobUpdate', ...args);\n        return;\n      case 'jobsClear':\n        jobEmitter.emit('jobsClear', ...args);\n        return;\n      default:\n        break;\n    }\n    const [requestId, ...requestArgs] = args;\n    if (typeof requestId !== 'number') {\n      throw new Error('Request arguments should start with a requestId number');\n    }\n    switch (type) {\n      case 'unlink':\n        this.logger.warn('Unlinking worker interface');\n        try {\n          await this.stop();\n          this.emit('unlinkComplete', requestId);\n        } catch (error) {\n          this.emit('unlinkError', requestId, error);\n          this.logger.error('Unable to handle unlink message');\n          this.emit('error', error);\n        }\n        if (port instanceof MessagePort) {\n          port.onmessage = null;\n          delete this.port;\n        }\n        break;\n      case 'clear':\n        try {\n          await this.clear();\n          this.emit('clearComplete', requestId);\n        } catch (error) {\n          this.emit('clearError', requestId, error);\n          this.logger.error('Unable to handle clear message');\n          this.emit('error', error);\n        }\n        break;\n      case 'abortAndRemoveQueueJobsGreaterThanId':\n        try {\n          const [queueId, id] = requestArgs;\n          if (typeof queueId !== 'string') {\n            throw new Error(`Invalid \"queueId\" argument with type ${typeof queueId}, should be type string`);\n          }\n          if (typeof id !== 'number') {\n            throw new Error(`Invalid \"id\" argument with type ${typeof id}, should be type number`);\n          }\n          await this.abortAndRemoveQueueJobsGreaterThanId(queueId, id);\n          this.emit('abortAndRemoveQueueJobsGreaterThanIdComplete', requestId);\n        } catch (error) {\n          this.emit('abortAndRemoveQueueJobsGreaterThanIdError', requestId, error);\n          this.logger.error('Unable to handle abort and remove queue jobs greater than ID message');\n          this.emit('error', error);\n        }\n        break;\n      case 'abortAndRemoveQueue':\n        try {\n          const [queueId] = requestArgs;\n          if (typeof queueId !== 'string') {\n            throw new Error(`Invalid \"queueId\" argument with type ${typeof queueId}, should be type string`);\n          }\n          await this.abortAndRemoveQueue(queueId);\n          this.emit('abortAndRemoveQueueComplete', requestId);\n        } catch (error) {\n          this.emit('abortAndRemoveQueueError', requestId, error);\n          this.logger.error('Unable to handle abort and remove queue message');\n          this.emit('error', error);\n        }\n        break;\n      case 'abortQueue':\n        try {\n          const [queueId] = requestArgs;\n          if (typeof queueId !== 'string') {\n            throw new Error(`Invalid \"queueId\" argument with type ${typeof queueId}, should be type string`);\n          }\n          await this.abortQueue(queueId);\n          this.emit('abortQueueComplete', requestId);\n        } catch (error) {\n          this.emit('abortQueueError', requestId, error);\n          this.logger.error('Unable to handle abort queue message');\n          this.emit('error', error);\n        }\n        break;\n      case 'dequeue':\n        try {\n          await this.dequeue();\n          this.emit('dequeueComplete', requestId);\n        } catch (error) {\n          this.emit('dequeueError', requestId, error);\n          this.logger.error('Unable to handle dequeue message');\n          this.emit('error', error);\n        }\n        break;\n      case 'enableStartOnJob':\n        try {\n          this.enableStartOnJob();\n          this.emit('enableStartOnJobComplete', requestId);\n        } catch (error) {\n          this.emit('enableStartOnJobError', requestId, error);\n          this.logger.error('Unable to handle enableStartOnJob message');\n          this.emit('error', error);\n        }\n        break;\n      case 'disableStartOnJob':\n        try {\n          this.disableStartOnJob();\n          this.emit('disableStartOnJobComplete', requestId);\n        } catch (error) {\n          this.emit('disableStartOnJobError', requestId, error);\n          this.logger.error('Unable to handle disableStartOnJob message');\n          this.emit('error', error);\n        }\n        break;\n      case 'getQueueIds':\n        try {\n          const queueIds = await this.getQueueIds();\n          this.emit('getQueuesComplete', requestId, [...queueIds]);\n        } catch (error) {\n          this.emit('getQueuesError', requestId, error);\n          this.logger.error('Unable to handle getQueueIds message');\n          this.emit('error', error);\n        }\n        break;\n      case 'getDurationEstimate':\n        try {\n          const [queueId] = requestArgs;\n          if (typeof queueId !== 'string') {\n            throw new Error(`Invalid \"queueId\" argument with type ${typeof queueId}, should be type string`);\n          }\n          const values = await this.getDurationEstimate(queueId);\n          this.emit('getDurationEstimateComplete', requestId, values);\n        } catch (error) {\n          this.emit('getDurationEstimateError', requestId, error);\n          this.logger.error('Unable to handle get duration estimate message');\n          this.emit('error', error);\n        }\n        break;\n      case 'getCurrentJobType':\n        try {\n          const [queueId] = requestArgs;\n          if (typeof queueId !== 'string') {\n            throw new Error(`Invalid \"queueId\" argument with type ${typeof queueId}, should be type string`);\n          }\n          const currentJobType = this.getCurrentJobType(queueId);\n          this.emit('getCurrentJobTypeComplete', requestId, currentJobType);\n        } catch (error) {\n          this.emit('getCurrentJobTypeError', requestId, error);\n          this.logger.error('Unable to handle get current job type message');\n          this.emit('error', error);\n        }\n        break;\n      case 'runUnloadHandlers':\n        try {\n          await this.runUnloadHandlers();\n          this.emit('runUnloadHandlersComplete', requestId);\n        } catch (error) {\n          this.emit('runUnloadHandlersError', requestId, error);\n          this.logger.error('Unable to run unload handlers message');\n          this.emit('error', error);\n        }\n        break;\n      case 'idle':\n        try {\n          const [maxDuration, start] = requestArgs;\n          if (typeof maxDuration !== 'number') {\n            throw new Error(`Invalid \"queueId\" argument with type ${typeof maxDuration}, should be type number`);\n          }\n          if (typeof start !== 'number') {\n            throw new Error(`Invalid \"queueId\" argument with type ${typeof start}, should be type number`);\n          }\n          await this.onIdle(maxDuration - (Date.now() - start));\n          this.emit('idleComplete', requestId);\n        } catch (error) {\n          this.emit('idleError', requestId, error);\n          this.logger.error('Unable to handle idle message');\n          this.emit('error', error);\n        }\n        break;\n      default:\n        this.logger.warn(`Unknown worker interface message type ${type}`);\n    }\n  }\n\n  async unloadClient() {\n    this.logger.info('Detected client unload');\n    const heartbeatExpiresTimestamp = this.heartbeatExpiresTimestamp;\n    if (typeof heartbeatExpiresTimestamp !== 'number') {\n      return;\n    }\n    clearTimeout(this.heartbeatExpiresTimeout);\n    delete this.heartbeatExpiresTimestamp;\n    const delay = heartbeatExpiresTimestamp - Date.now();\n    if (delay > 0) {\n      await new Promise((resolve) => {\n        const timeout = setTimeout(() => {\n          clearTimeout(timeout);\n          this.removeListener('heartbeat', handleHeartbeat);\n          resolve();\n        }, delay);\n        const handleHeartbeat = () => {\n          clearTimeout(timeout);\n          this.removeListener('heartbeat', handleHeartbeat);\n          resolve();\n        };\n        this.addListener('heartbeat', handleHeartbeat);\n      });\n    }\n    if (typeof this.heartbeatExpiresTimestamp === 'number') {\n      this.logger.info('Cancelling client unload, heartbeat detected');\n      return;\n    }\n    this.logger.info('Unloading');\n    await this.runUnloadHandlers();\n    this.emit('unloadClient');\n    await this.onIdle();\n  }\n\n  runUnloadHandlers() {\n    return this.unloadQueue.add(async () => {\n      const handleUnload = this.handleUnload;\n      if (typeof handleUnload === 'function') {\n        try {\n          const unloadData = await getUnloadDataFromDatabase();\n          await handleUnload(unloadData);\n          await clearUnloadDataInDatabase();\n        } catch (error) {\n          this.logger.error('Error in unload handler');\n          this.logger.errorStack(error);\n        }\n      }\n    });\n  }\n\n  listenForServiceWorkerInterface() {\n    let activeEmitCallback;\n    let handleJobAdd;\n    let handleJobDelete;\n    let handleJobUpdate;\n    let handleJobsClear;\n\n    self.addEventListener('sync', (event) => {\n      this.logger.info(`SyncManager event ${event.tag}${event.lastChance ? ', last chance' : ''}`);\n      if (event.tag === 'syncManagerOnIdle') {\n        this.logger.info('Starting SyncManager idle handler');\n        this.emit('syncManagerOnIdle');\n        event.waitUntil(this.onIdle().catch((error) => {\n          this.logger.error(`SyncManager event handler failed${event.lastChance ? ' on last chance' : ''}`);\n          this.logger.errorStack(error);\n        }));\n      } else if (event.tag === 'unload') {\n        this.logger.info('Starting SyncManager unload client handler');\n        event.waitUntil(this.unloadClient().catch((error) => {\n          this.logger.error(`SyncManager event handler failed${event.lastChance ? ' on last chance' : ''}`);\n          this.logger.errorStack(error);\n        }));\n      } else {\n        this.logger.warn(`Received unknown SyncManager event tag ${event.tag}`);\n      }\n    });\n\n    self.addEventListener('message', (event:ExtendableMessageEvent) => {\n      if (!(event instanceof ExtendableMessageEvent)) {\n        return;\n      }\n      const { data } = event;\n      if (!data || typeof data !== 'object') {\n        return;\n      }\n      const { type } = data;\n      if (type !== 'BATTERY_QUEUE_WORKER_INITIALIZATION') {\n        return;\n      }\n      if (!Array.isArray(event.ports)) {\n        return;\n      }\n      const port = event.ports[0];\n      if (!(port instanceof MessagePort)) {\n        return;\n      }\n      this.emitCallbacks = this.emitCallbacks.filter((x) => x !== activeEmitCallback);\n      const previousPort = this.port;\n      if (previousPort instanceof MessagePort) {\n        this.logger.info('Closing previous worker interface');\n        previousPort.close();\n      }\n      if (typeof handleJobAdd === 'function') {\n        localJobEmitter.removeListener('jobAdd', handleJobAdd);\n      }\n      if (typeof handleJobDelete === 'function') {\n        localJobEmitter.removeListener('jobDelete', handleJobDelete);\n      }\n      if (typeof handleJobUpdate === 'function') {\n        localJobEmitter.removeListener('jobUpdate', handleJobUpdate);\n      }\n      if (typeof handleJobsClear === 'function') {\n        localJobEmitter.removeListener('jobsClear', handleJobsClear);\n      }\n      port.onmessage = this.handlePortMessage.bind(this);\n\n      handleJobAdd = (...args:Array<any>) => {\n        port.postMessage({ type: 'jobAdd', args });\n      };\n      handleJobDelete = (...args:Array<any>) => {\n        port.postMessage({ type: 'jobDelete', args });\n      };\n      handleJobUpdate = (...args:Array<any>) => {\n        port.postMessage({ type: 'jobUpdate', args });\n      };\n      handleJobsClear = (...args:Array<any>) => {\n        port.postMessage({ type: 'jobsClear', args });\n      };\n      localJobEmitter.addListener('jobAdd', handleJobAdd);\n      localJobEmitter.addListener('jobDelete', handleJobDelete);\n      localJobEmitter.addListener('jobUpdate', handleJobUpdate);\n      localJobEmitter.addListener('jobsClear', handleJobsClear);\n      const emitCallback = (t:string, args:Array<any>) => {\n        port.postMessage({ type: t, args });\n      };\n      activeEmitCallback = emitCallback;\n      this.emitCallbacks.push(emitCallback);\n      this.port = port;\n      port.postMessage({ type: 'BATTERY_QUEUE_WORKER_CONFIRMATION' });\n      this.logger.info('Linked to worker interface');\n    });\n    self.addEventListener('messageerror', (event:MessageEvent) => {\n      this.logger.error('Service worker interface message error');\n      this.logger.errorObject(event);\n    });\n  }\n}\n\n"],"file":"queue.js"}