{"version":3,"sources":["../../src/queue.js"],"names":["PQueue","EventEmitter","makeLogger","jobEmitter","localJobEmitter","clearDatabase","dequeueFromDatabase","dequeueFromDatabaseNotIn","incrementJobAttemptInDatabase","incrementCleanupAttemptInDatabase","markJobCompleteInDatabase","markJobPendingInDatabase","markJobErrorInDatabase","markJobStartAfterInDatabase","markJobAsAbortedOrRemoveFromDatabase","markCleanupStartAfterInDatabase","updateCleanupValuesInDatabase","getCleanupFromDatabase","removePathFromCleanupDataInDatabase","getJobFromDatabase","markQueueForCleanupInDatabase","removeCleanupFromDatabase","restoreJobToDatabaseForCleanupAndRemove","JOB_PENDING_STATUS","JOB_ERROR_STATUS","JOB_CLEANUP_STATUS","JOB_CLEANUP_AND_REMOVE_STATUS","AbortError","PRIORITY_OFFSET","Math","floor","Number","MAX_SAFE_INTEGER","BatteryQueue","constructor","options","dequeueQueue","concurrency","handlerMap","Map","cleanupMap","retryJobDelayMap","retryCleanupDelayMap","queueMap","jobIds","Set","abortControllerMap","isClearing","emitCallbacks","logger","addListener","error","errorStack","enableStartOnJob","disableStartOnJob","didRequestJobAddDequeue","handleJobAdd","self","queueMicrotask","dequeue","handleJobDelete","id","queueId","has","queueAbortControllerMap","get","abortController","abort","handleJobUpdate","type","status","then","job","args","console","log","startCleanup","catch","removeListener","emit","emitCallback","getQueueIds","queueIds","keys","setRetryJobDelay","retryJobDelayFunction","Error","set","removeRetryJobDelay","delete","getRetryJobDelay","attempt","result","retryDelayError","setRetryCleanupDelay","retryCleanupDelayFunction","removeRetryCleanupDelay","getRetryCleanupDelay","setHandler","handler","removeHandler","setCleanup","cleanup","removeCleanup","clear","onIdle","start","addToQueue","priority","func","queue","add","newQueue","autoStart","on","Promise","resolve","timeout","setTimeout","handleClearing","handleActive","clearTimeout","pending","size","abortQueue","info","values","jobs","startJobs","bind","newJobs","Array","isArray","startAfter","pause","startJob","startErrorHandler","maxDuration","onIdlePromise","Date","now","warn","interval","setInterval","clearInterval","jobsInterval","length","getAbortController","newAbortController","AbortController","removeAbortController","runCleanup","cleanupJob","data","undefined","delay","toLocaleString","path","name","retryCleanupDelay","newStartAfter","run","signal","aborted","delayJobStart","duration","reject","removeEventListener","handleAbort","addEventListener","updateCleanupData","handlerDidRun","retryDelay","handlePortMessage","event","MessageEvent","warnObject","port","MessagePort","onmessage","requestId","requestArgs","listenForServiceWorkerInterface","activeEmitCallback","handleJobsClear","tag","lastChance","waitUntil","ExtendableMessageEvent","ports","filter","x","previousPort","close","postMessage","t","push","errorObject"],"mappings":"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","sourcesContent":["// @flow\n\nimport PQueue from 'p-queue';\nimport EventEmitter from 'events';\nimport type { Logger } from './logger';\nimport makeLogger from './logger';\nimport type { Job } from './database';\nimport {\n  jobEmitter,\n  localJobEmitter,\n  clearDatabase,\n  dequeueFromDatabase,\n  dequeueFromDatabaseNotIn,\n  incrementJobAttemptInDatabase,\n  incrementCleanupAttemptInDatabase,\n  markJobCompleteInDatabase,\n  markJobPendingInDatabase,\n  markJobErrorInDatabase,\n  markJobStartAfterInDatabase,\n  markJobAsAbortedOrRemoveFromDatabase,\n  markCleanupStartAfterInDatabase,\n  updateCleanupValuesInDatabase,\n  getCleanupFromDatabase,\n  removePathFromCleanupDataInDatabase,\n  getJobFromDatabase,\n  markQueueForCleanupInDatabase,\n  removeCleanupFromDatabase,\n  restoreJobToDatabaseForCleanupAndRemove,\n  JOB_PENDING_STATUS,\n  JOB_ERROR_STATUS,\n  JOB_CLEANUP_STATUS,\n  JOB_CLEANUP_AND_REMOVE_STATUS,\n} from './database';\nimport { AbortError } from './errors';\n\nconst PRIORITY_OFFSET = Math.floor(Number.MAX_SAFE_INTEGER / 2);\n\ntype HandlerFunction = (Array<any>, AbortSignal, (Object) => Promise<void>) => Promise<void>;\ntype CleanupFunction = (Object | void, Array<any>, Array<string> => Promise<void>) => Promise<void>;\ntype RetryDelayFunction = (number, Error) => number | false | Promise<number | false>;\ntype EmitCallback = (string, Array<any>) => void;\n\ntype Options = {\n  logger?: Logger,\n  startOnJob?: boolean\n};\n\nexport default class BatteryQueue extends EventEmitter {\n  declare logger: Logger;\n  declare dequeueQueue: PQueue;\n  declare handlerMap: Map<string, HandlerFunction>;\n  declare retryJobDelayMap: Map<string, RetryDelayFunction>;\n  declare retryCleanupDelayMap: Map<string, RetryDelayFunction>;\n  declare cleanupMap: Map<string, CleanupFunction>;\n  declare queueMap: Map<string, PQueue>;\n  declare abortControllerMap: Map<string, Map<number, AbortController>>;\n  declare isClearing: boolean;\n  declare onIdlePromise: Promise<void> | void;\n  declare jobIds: Set<number>;\n  declare emitCallbacks: Array<EmitCallback>;\n  declare port: MessagePort | void;\n  declare handleJobAdd: void | () => void;\n  declare handleJobUpdate: void | (number, string, string, number) => void;\n  declare handleJobDelete: void | (number, string) => void;\n\n  constructor(options?: Options = {}) {\n    super();\n    this.dequeueQueue = new PQueue({ concurrency: 1 });\n    this.handlerMap = new Map();\n    this.cleanupMap = new Map();\n    this.retryJobDelayMap = new Map();\n    this.retryCleanupDelayMap = new Map();\n    this.queueMap = new Map();\n    this.jobIds = new Set();\n    this.abortControllerMap = new Map();\n    this.isClearing = false;\n    this.emitCallbacks = [];\n    this.logger = options.logger || makeLogger('Battery Queue');\n    this.addListener('error', (error) => {\n      this.logger.errorStack(error);\n    });\n  }\n\n  enableStartOnJob() {\n    this.disableStartOnJob(); // Prevent handlers from being added multiple times\n    let didRequestJobAddDequeue = false;\n    const handleJobAdd = () => {\n      if (didRequestJobAddDequeue) {\n        return;\n      }\n      didRequestJobAddDequeue = true;\n      self.queueMicrotask(() => {\n        didRequestJobAddDequeue = false;\n        this.dequeue();\n      });\n    };\n    jobEmitter.addListener('jobAdd', handleJobAdd);\n    this.handleJobAdd = handleJobAdd;\n    const handleJobDelete = (id:number, queueId:string) => {\n      if (this.jobIds.has(id)) {\n        const queueAbortControllerMap = this.abortControllerMap.get(queueId);\n        if (typeof queueAbortControllerMap !== 'undefined') {\n          const abortController = queueAbortControllerMap.get(id);\n          if (typeof abortController !== 'undefined') {\n            abortController.abort();\n          }\n        }\n      }\n    };\n    jobEmitter.addListener('jobDelete', handleJobDelete);\n    this.handleJobDelete = handleJobDelete;\n\n    const handleJobUpdate = (id:number, queueId:string, type:string, status:number) => {\n      if (status !== JOB_CLEANUP_AND_REMOVE_STATUS) {\n        return;\n      }\n      if (this.jobIds.has(id)) {\n        const queueAbortControllerMap = this.abortControllerMap.get(queueId);\n        if (typeof queueAbortControllerMap !== 'undefined') {\n          const abortController = queueAbortControllerMap.get(id);\n          if (typeof abortController !== 'undefined') {\n            abortController.abort();\n          }\n        }\n        return;\n      }\n      getJobFromDatabase(id).then((job:Job | void) => {\n        if (typeof job === 'undefined') {\n          this.logger.error(`Unable to cleanup and remove ${type} job #${id} in queue ${queueId}, job does not exist`);\n          return;\n        }\n        if (this.jobIds.has(id)) {\n          return;\n        }\n        const { args } = job;\n        console.log('START CLEANUP');\n        this.startCleanup(id, queueId, args, type);\n      }).catch((error) => {\n        this.logger.error(`Error while cleaning up and removing ${type} job #${id} in queue ${queueId}`);\n        this.logger.errorStack(error);\n      });\n    };\n    jobEmitter.addListener('jobUpdate', handleJobUpdate);\n    this.handleJobUpdate = handleJobUpdate;\n  }\n\n  disableStartOnJob() {\n    const handleJobAdd = this.handleJobAdd;\n    if (typeof handleJobAdd === 'function') {\n      jobEmitter.removeListener('jobAdd', handleJobAdd);\n      delete this.handleJobAdd;\n    }\n    const handleJobUpdate = this.handleJobUpdate;\n    if (typeof handleJobUpdate === 'function') {\n      jobEmitter.removeListener('jobUpdate', handleJobUpdate);\n      delete this.handleJobUpdate;\n    }\n    const handleJobDelete = this.handleJobDelete;\n    if (typeof handleJobDelete === 'function') {\n      jobEmitter.removeListener('jobDelete', handleJobDelete);\n      delete this.handleJobDelete;\n    }\n  }\n\n  emit(type:string, ...args:Array<any>) {\n    for (const emitCallback of this.emitCallbacks) {\n      emitCallback(type, args);\n    }\n    return super.emit(type, ...args);\n  }\n\n  async getQueueIds() {\n    await this.dequeue();\n    const queueIds:Set<string> = new Set(this.queueMap.keys());\n    return queueIds;\n  }\n\n  setRetryJobDelay(type:string, retryJobDelayFunction:RetryDelayFunction) {\n    if (this.retryJobDelayMap.has(type)) {\n      throw new Error(`Retry job delay handler for type \"${type}\" already exists`);\n    }\n    this.retryJobDelayMap.set(type, retryJobDelayFunction);\n  }\n\n  removeRetryJobDelay(type:string) {\n    if (!this.retryJobDelayMap.has(type)) {\n      throw new Error(`Retry job delay handler for type \"${type}\" does not exist`);\n    }\n    this.retryJobDelayMap.delete(type);\n  }\n\n  async getRetryJobDelay(type:string, attempt: number, error:Error) {\n    const retryJobDelayFunction = this.retryJobDelayMap.get(type);\n    if (typeof retryJobDelayFunction !== 'function') {\n      return false;\n    }\n    let result = false;\n    try {\n      result = await retryJobDelayFunction(attempt, error);\n    } catch (retryDelayError) {\n      this.logger.error(`Error in retry job delay handler for type \"${type}\" on attempt ${attempt}`);\n      this.emit('error', retryDelayError);\n      return false;\n    }\n    if (typeof result !== 'number' && result !== false) {\n      throw new Error(`Retry job delay function for type \"${type}\" returned invalid response, should be a number (milliseconds) or false`);\n    }\n    return result;\n  }\n\n  setRetryCleanupDelay(type:string, retryCleanupDelayFunction:RetryDelayFunction) {\n    if (this.retryCleanupDelayMap.has(type)) {\n      throw new Error(`Retry cleanup delay handler for type \"${type}\" already exists`);\n    }\n    this.retryCleanupDelayMap.set(type, retryCleanupDelayFunction);\n  }\n\n  removeRetryCleanupDelay(type:string) {\n    if (!this.retryCleanupDelayMap.has(type)) {\n      throw new Error(`Retry cleanup delay handler for type \"${type}\" does not exist`);\n    }\n    this.retryCleanupDelayMap.delete(type);\n  }\n\n  async getRetryCleanupDelay(type:string, attempt: number, error:Error) {\n    const retryCleanupDelayFunction = this.retryCleanupDelayMap.get(type);\n    if (typeof retryCleanupDelayFunction !== 'function') {\n      return false;\n    }\n    let result = false;\n    try {\n      result = await retryCleanupDelayFunction(attempt, error);\n    } catch (retryDelayError) {\n      this.logger.error(`Error in retry cleanup delay handler for type \"${type}\" on attempt ${attempt}`);\n      this.emit('error', retryDelayError);\n      return false;\n    }\n    if (typeof result !== 'number' && result !== false) {\n      throw new Error(`Retry cleanup delay function for type \"${type}\" returned invalid response, should be a number (milliseconds) or false`);\n    }\n    return result;\n  }\n\n  setHandler(type:string, handler: HandlerFunction) {\n    if (this.handlerMap.has(type)) {\n      throw new Error(`Handler for type \"${type}\" already exists`);\n    }\n    this.handlerMap.set(type, handler);\n  }\n\n  removeHandler(type:string) {\n    if (!this.handlerMap.has(type)) {\n      throw new Error(`Handler for type \"${type}\" does not exist`);\n    }\n    this.handlerMap.delete(type);\n  }\n\n  setCleanup(type:string, cleanup: CleanupFunction) {\n    if (this.cleanupMap.has(type)) {\n      throw new Error(`Cleanup for type \"${type}\" already exists`);\n    }\n    this.cleanupMap.set(type, cleanup);\n  }\n\n  removeCleanup(type:string) {\n    if (!this.cleanupMap.has(type)) {\n      throw new Error(`Cleanup for type \"${type}\" does not exist`);\n    }\n    this.cleanupMap.delete(type);\n  }\n\n  async clear() {\n    this.isClearing = true;\n    await this.onIdle();\n    this.emit('clearing');\n    await clearDatabase();\n    this.dequeueQueue.start();\n    this.isClearing = false;\n  }\n\n  addToQueue(queueId:string, priority: number, func: () => Promise<void>) {\n    const queue = this.queueMap.get(queueId);\n    if (typeof queue !== 'undefined') {\n      queue.add(func, { priority });\n      return;\n    }\n    const newQueue = new PQueue({ concurrency: 1, autoStart: false });\n    this.queueMap.set(queueId, newQueue);\n    newQueue.add(func, { priority });\n    newQueue.on('idle', async () => {\n      if (!this.isClearing) {\n        await new Promise((resolve) => {\n          const timeout = setTimeout(() => {\n            this.removeListener('clearing', handleClearing);\n            newQueue.removeListener('active', handleActive);\n            resolve();\n          }, 5000);\n          const handleClearing = () => {\n            clearTimeout(timeout);\n            this.removeListener('clearing', handleClearing);\n            newQueue.removeListener('active', handleActive);\n            resolve();\n          };\n          const handleActive = () => {\n            clearTimeout(timeout);\n            this.removeListener('clearing', handleClearing);\n            newQueue.removeListener('active', handleActive);\n            resolve();\n          };\n          this.addListener('clearing', handleClearing);\n          newQueue.addListener('active', handleActive);\n        });\n      }\n      if (newQueue.pending > 0 || newQueue.size > 0) {\n        return;\n      }\n      this.queueMap.delete(queueId);\n      this.emit('queueInactive', queueId);\n    });\n    this.emit('queueActive', queueId);\n  }\n\n  async abortQueue(queueId: string) {\n    this.logger.info(`Aborting queue ${queueId}`);\n    // Abort active jobs\n    const queueAbortControllerMap = this.abortControllerMap.get(queueId);\n    if (typeof queueAbortControllerMap !== 'undefined') {\n      for (const abortController of queueAbortControllerMap.values()) {\n        abortController.abort();\n      }\n    }\n    // Changes:\n    // * JOB_ERROR_STATUS -> JOB_CLEANUP_STATUS\n    // * JOB_COMPLETE_STATUS -> JOB_CLEANUP_STATUS\n    // * JOB_PENDING_STATUS -> JOB_ABORTED_STATUS\n    const jobs = await markQueueForCleanupInDatabase(queueId);\n    await this.startJobs(jobs);\n  }\n\n  dequeue():void | Promise<void> {\n    if (this.dequeueQueue.size === 0) {\n      // Add a subsequent dequeue\n      this.dequeueQueue.add(this.startJobs.bind(this));\n    }\n    return this.dequeueQueue.onIdle();\n  }\n\n  async startJobs(newJobs?:Array<Job>) { // eslint-disable-line consistent-return\n    const jobs = Array.isArray(newJobs) ? newJobs : await dequeueFromDatabaseNotIn([...this.jobIds.keys()]);\n    const queueIds = new Set();\n    for (const { id, queueId, args, type, status, attempt, startAfter } of jobs) {\n      if (this.jobIds.has(id)) {\n        continue;\n      }\n      // Pause queues before adding items into them to avoid starting things out of priority\n      if (!queueIds.has(queueId)) {\n        const queue = this.queueMap.get(queueId);\n        if (typeof queue !== 'undefined') {\n          queue.pause();\n        }\n        queueIds.add(queueId);\n      }\n      if (status === JOB_PENDING_STATUS) {\n        this.startJob(id, queueId, args, type, attempt + 1, startAfter);\n      } else if (status === JOB_ERROR_STATUS) {\n        this.startErrorHandler(id, queueId, args, type, attempt, startAfter);\n      } else if (status === JOB_CLEANUP_STATUS) {\n        this.startCleanup(id, queueId, args, type);\n      } else if (status === JOB_CLEANUP_AND_REMOVE_STATUS) {\n        this.startCleanup(id, queueId, args, type);\n      } else {\n        throw new Error(`Unknown job status ${status} in job ${id} of queue ${queueId}`);\n      }\n    }\n    for (const queueId of queueIds) {\n      const queue = this.queueMap.get(queueId);\n      if (typeof queue !== 'undefined') {\n        queue.start();\n      } else {\n        this.logger.error(`Unable to start queue ${queueId} after dequeue; queue does not exist`);\n      }\n    }\n  }\n\n  async onIdle(maxDuration?: number) {\n    if (typeof this.onIdlePromise === 'undefined') {\n      this.onIdlePromise = (async () => {\n        const timeout = typeof maxDuration === 'number' ? Date.now() + maxDuration : -1;\n        const start = Date.now();\n        while (true) { // eslint-disable-line no-constant-condition\n          if (timeout !== -1 && Date.now() > timeout) {\n            this.logger.warn(`Idle timeout after ${Date.now() - start}ms`);\n            break;\n          }\n          await this.dequeueQueue.onIdle();\n          for (const [queueId, queue] of this.queueMap) {\n            const interval = setInterval(() => {\n              this.logger.info(`Waiting on queue ${queueId}`);\n            }, 250);\n            await queue.onIdle();\n            clearInterval(interval);\n          }\n          const jobsInterval = setInterval(() => {\n            this.logger.info('Waiting on jobs');\n          }, 250);\n          const jobs = await dequeueFromDatabase();\n          clearInterval(jobsInterval);\n          if (jobs.length > 0) {\n            const interval = setInterval(() => {\n              this.logger.info('Waiting on dequeue');\n            }, 250);\n            await this.dequeue();\n            clearInterval(interval);\n            continue;\n          }\n          break;\n        }\n        delete this.onIdlePromise;\n        this.emit('idle');\n      })();\n    }\n    await this.onIdlePromise;\n  }\n\n  getAbortController(id:number, queueId:string) {\n    let queueAbortControllerMap = this.abortControllerMap.get(queueId);\n    if (typeof queueAbortControllerMap === 'undefined') {\n      queueAbortControllerMap = new Map();\n      this.abortControllerMap.set(queueId, queueAbortControllerMap);\n    }\n    const abortController = queueAbortControllerMap.get(id);\n    if (typeof abortController !== 'undefined') {\n      return abortController;\n    }\n    const newAbortController = new AbortController();\n    queueAbortControllerMap.set(id, newAbortController);\n    return newAbortController;\n  }\n\n  removeAbortController(id:number, queueId:string) {\n    const queueAbortControllerMap = this.abortControllerMap.get(queueId);\n    if (typeof queueAbortControllerMap === 'undefined') {\n      this.logger.warn(`Abort controller map for ${id} in queue ${queueId} does not exist`);\n      return;\n    }\n    const abortController = queueAbortControllerMap.get(id);\n    if (typeof abortController === 'undefined') {\n      this.logger.warn(`Abort controller for ${id} in queue ${queueId} does not exist`);\n      return;\n    }\n    queueAbortControllerMap.delete(id);\n    if (queueAbortControllerMap.size === 0) {\n      this.abortControllerMap.delete(queueId);\n    }\n  }\n\n  async runCleanup(id:number, queueId:string, args:Array<any>, type:string) {\n    this.emit('cleanupStart', { id });\n    const cleanup = this.cleanupMap.get(type);\n    if (typeof cleanup !== 'function') {\n      this.logger.warn(`No cleanup for job type ${type}`);\n      await removeCleanupFromDatabase(id);\n      this.emit('cleanup', { id });\n      return;\n    }\n    const cleanupJob = await getCleanupFromDatabase(id);\n    const { data, startAfter } = typeof cleanupJob === 'undefined' ? { data: undefined, startAfter: 0 } : cleanupJob;\n    const delay = startAfter - Date.now();\n    if (delay > 0) {\n      this.logger.info(`Delaying retry of ${type} job #${id} cleanup in queue ${queueId} by ${delay}ms to ${new Date(startAfter).toLocaleString()}`);\n      await new Promise((resolve) => setTimeout(resolve, delay));\n    }\n    try {\n      await cleanup(data, args, (path:Array<string>) => removePathFromCleanupDataInDatabase(id, path));\n    } catch (error) {\n      const attempt = await incrementCleanupAttemptInDatabase(id, queueId);\n      if (error.name === 'FatalCleanupError') {\n        this.logger.error(`Fatal error in ${type} job #${id} cleanup in queue ${queueId} attempt ${attempt}`);\n        this.emit('error', error);\n        await removeCleanupFromDatabase(id);\n        this.emit('fatalCleanupError', { id, queueId });\n        return;\n      }\n      const retryCleanupDelay = await this.getRetryCleanupDelay(type, attempt, error);\n      if (retryCleanupDelay === false) {\n        this.logger.error(`Error in ${type} job #${id} cleanup in queue ${queueId} attempt ${attempt} with no additional attempts requested`);\n        this.emit('error', error);\n        await removeCleanupFromDatabase(id);\n        this.emit('fatalCleanupError', { id, queueId });\n        return;\n      }\n      this.logger.error(`Error in ${type} job #${id} cleanup in queue ${queueId} attempt ${attempt}, retrying ${retryCleanupDelay > 0 ? `in ${retryCleanupDelay}ms'}` : 'immediately'}`);\n      this.emit('error', error);\n      if (retryCleanupDelay > 0) {\n        this.emit('retryCleanupDelay', { id, queueId, retryCleanupDelay });\n        const newStartAfter = Date.now() + retryCleanupDelay;\n        await markCleanupStartAfterInDatabase(id, newStartAfter);\n      }\n      await this.runCleanup(id, queueId, args, type);\n      return;\n    }\n    await removeCleanupFromDatabase(id);\n    this.emit('cleanup', { id });\n  }\n\n  startCleanup(id:number, queueId:string, args:Array<any>, type:string) {\n    this.logger.info(`Adding ${type} cleanup job #${id} to queue ${queueId}`);\n    this.jobIds.add(id);\n    const priority = PRIORITY_OFFSET + id;\n    const run = async () => {\n      this.logger.info(`Starting ${type} cleanup #${id} in queue ${queueId}`);\n      await this.runCleanup(id, queueId, args, type);\n      // Job could be marked for removal while cleanup is running\n      await markJobAsAbortedOrRemoveFromDatabase(id);\n      this.jobIds.delete(id);\n    };\n    this.addToQueue(queueId, priority, run);\n  }\n\n  startErrorHandler(id:number, queueId:string, args:Array<any>, type:string, attempt: number, startAfter: number) {\n    this.logger.info(`Adding ${type} error handler job #${id} to queue ${queueId}`);\n    this.jobIds.add(id);\n    const priority = PRIORITY_OFFSET + id;\n    const abortController = this.getAbortController(id, queueId);\n    const run = async () => {\n      this.logger.info(`Starting ${type} error handler #${id} in queue ${queueId}`);\n      await this.runCleanup(id, queueId, args, type);\n      if (abortController.signal.aborted) {\n        // Job could be marked for removal while error handler is running\n        await markJobAsAbortedOrRemoveFromDatabase(id);\n        this.removeAbortController(id, queueId);\n        this.jobIds.delete(id);\n      } else {\n        await markJobPendingInDatabase(id);\n        this.logger.info(`Retrying ${type} job #${id} in queue ${queueId}`);\n        this.emit('retry', { id });\n        this.startJob(id, queueId, args, type, attempt + 1, startAfter);\n      }\n    };\n    this.addToQueue(queueId, priority, run);\n  }\n\n  async delayJobStart(id:number, queueId:string, type:string, signal: AbortSignal, startAfter: number) {\n    if (signal.aborted) {\n      throw new AbortError(`Queue ${queueId} was aborted`);\n    }\n    const duration = startAfter - Date.now();\n    if (duration > 0) {\n      this.logger.info(`Delaying start of ${type} job #${id} in queue ${queueId} by ${duration}ms`);\n      await new Promise((resolve, reject) => {\n        const timeout = setTimeout(() => {\n          signal.removeEventListener('abort', handleAbort);\n          resolve();\n        }, duration);\n        const handleAbort = () => {\n          clearTimeout(timeout);\n          signal.removeEventListener('abort', handleAbort);\n          reject(new AbortError(`Queue ${queueId} was aborted`));\n        };\n        signal.addEventListener('abort', handleAbort);\n      });\n    }\n  }\n\n  startJob(id:number, queueId:string, args:Array<any>, type:string, attempt:number, startAfter: number) {\n    this.logger.info(`Adding ${type} job #${id} to queue ${queueId}`);\n    this.jobIds.add(id);\n    const priority = PRIORITY_OFFSET - id;\n    const updateCleanupData = (data:Object) => updateCleanupValuesInDatabase(id, queueId, data);\n    const abortController = this.getAbortController(id, queueId);\n    const run = async () => {\n      if (abortController.signal.aborted) {\n        this.emit('fatalError', { id, queueId, error: new AbortError(`Queue ${queueId} was aborted`) });\n        this.removeAbortController(id, queueId);\n        this.jobIds.delete(id);\n        return;\n      }\n      this.logger.info(`Starting ${type} job #${id} in queue ${queueId} attempt ${attempt}`);\n      const handler = this.handlerMap.get(type);\n      if (typeof handler !== 'function') {\n        this.logger.warn(`No handler for job type ${type}`);\n        await markJobCompleteInDatabase(id);\n        this.removeAbortController(id, queueId);\n        this.jobIds.delete(id);\n        return;\n      }\n      let handlerDidRun = false;\n      try {\n        // Mark as error in database so the job is cleaned up and retried if execution\n        // stops before job completion or error.\n        await markJobErrorInDatabase(id);\n        await this.delayJobStart(id, queueId, type, abortController.signal, startAfter);\n        handlerDidRun = true;\n        await handler(args, abortController.signal, updateCleanupData);\n        if (abortController.signal.aborted) {\n          console.log('caught aborted');\n          throw new AbortError(`Queue ${queueId} was aborted`);\n        }\n        await markJobCompleteInDatabase(id);\n        this.removeAbortController(id, queueId);\n        this.jobIds.delete(id);\n        return;\n      } catch (error) {\n        if (error.name === 'JobDoesNotExistError') {\n          this.logger.error(`Job does not exist error for ${type} job #${id} in queue ${queueId} attempt ${attempt}`);\n          if (handlerDidRun) {\n            await restoreJobToDatabaseForCleanupAndRemove(id, queueId, type, args);\n            this.emit('fatalError', { id, queueId, error });\n            this.jobIds.delete(id);\n            this.removeAbortController(id, queueId);\n            this.startCleanup(id, queueId, args, type);\n          } else {\n            this.emit('fatalError', { id, queueId, error });\n            this.jobIds.delete(id);\n            this.removeAbortController(id, queueId);\n          }\n          return;\n        }\n        if (abortController.signal.aborted) {\n          if (error.name !== 'AbortError') {\n            this.logger.error(`Abort signal following error in ${type} job #${id} in queue ${queueId} attempt ${attempt}`);\n            this.emit('error', error);\n          } else {\n            this.logger.warn(`Received abort signal for ${type} job #${id} in queue ${queueId} attempt ${attempt}`);\n          }\n          if (handlerDidRun) {\n            this.emit('fatalError', { id, queueId, error });\n            this.jobIds.delete(id);\n            this.removeAbortController(id, queueId);\n            this.startCleanup(id, queueId, args, type);\n          } else {\n            await markJobAsAbortedOrRemoveFromDatabase(id);\n            this.emit('fatalError', { id, queueId, error });\n            this.jobIds.delete(id);\n            this.removeAbortController(id, queueId);\n          }\n          return;\n        }\n        await incrementJobAttemptInDatabase(id);\n        if (error.name === 'FatalError') {\n          this.logger.error(`Fatal error in ${type} job #${id} in queue ${queueId} attempt ${attempt}`);\n          this.emit('error', error);\n          this.emit('fatalError', { id, queueId, error });\n          this.jobIds.delete(id);\n          this.removeAbortController(id, queueId);\n          await this.abortQueue(queueId);\n          return;\n        }\n        const retryDelay = await this.getRetryJobDelay(type, attempt, error);\n        if (retryDelay === false) {\n          this.logger.error(`Error in ${type} job #${id} in queue ${queueId} attempt ${attempt} with no additional attempts requested`);\n          this.emit('error', error);\n          this.emit('fatalError', { id, queueId, error });\n          this.jobIds.delete(id);\n          this.removeAbortController(id, queueId);\n          await this.abortQueue(queueId);\n          return;\n        }\n        this.logger.error(`Error in ${type} job #${id} in queue ${queueId} attempt ${attempt}, retrying ${retryDelay > 0 ? `in ${retryDelay}ms'}` : 'immediately'}`);\n        this.emit('error', error);\n        if (retryDelay > 0) {\n          this.emit('retryDelay', { id, queueId, retryDelay });\n          const newStartAfter = Date.now() + retryDelay;\n          await markJobStartAfterInDatabase(id, newStartAfter);\n          this.jobIds.delete(id);\n          this.startErrorHandler(id, queueId, args, type, attempt, newStartAfter);\n        } else {\n          this.jobIds.delete(id);\n          this.startErrorHandler(id, queueId, args, type, attempt, startAfter);\n        }\n      }\n    };\n    this.addToQueue(queueId, priority, run);\n    this.emit('dequeue', { id });\n  }\n\n  async handlePortMessage(event:MessageEvent) {\n    if (!(event instanceof MessageEvent)) {\n      return;\n    }\n    const { data } = event;\n    if (!data || typeof data !== 'object') {\n      this.logger.warn('Invalid message data');\n      this.logger.warnObject(event);\n      return;\n    }\n    const { type, args } = data;\n    if (typeof type !== 'string') {\n      this.logger.warn('Unknown message type');\n      this.logger.warnObject(event);\n      return;\n    }\n    if (!Array.isArray(args)) {\n      this.logger.warn('Unknown arguments type');\n      this.logger.warnObject(event);\n      return;\n    }\n    const port = this.port;\n    switch (type) {\n      case 'unlink':\n        this.logger.warn('Unlinking worker interface');\n        if (port instanceof MessagePort) {\n          port.onmessage = null;\n          delete this.port;\n        }\n        return;\n      case 'jobAdd':\n        jobEmitter.emit('jobAdd', ...args);\n        return;\n      case 'jobDelete':\n        jobEmitter.emit('jobDelete', ...args);\n        return;\n      case 'jobUpdate':\n        jobEmitter.emit('jobUpdate', ...args);\n        return;\n      case 'jobsClear':\n        jobEmitter.emit('jobsClear', ...args);\n        return;\n      default:\n        break;\n    }\n    const [requestId, ...requestArgs] = args;\n    if (typeof requestId !== 'number') {\n      throw new Error('Request arguments should start with a requestId number');\n    }\n    switch (type) {\n      case 'clear':\n        try {\n          await this.clear();\n          this.emit('clearComplete', requestId);\n        } catch (error) {\n          this.emit('clearError', requestId, error);\n          this.logger.error('Unable to handle clear message');\n          this.emit('error', error);\n        }\n        break;\n      case 'abortQueue':\n        try {\n          const [queueId] = requestArgs;\n          if (typeof queueId !== 'string') {\n            throw new Error(`Invalid \"queueId\" argument with type ${typeof queueId}, should be type string`);\n          }\n          await this.abortQueue(queueId);\n          this.emit('abortQueueComplete', requestId);\n        } catch (error) {\n          this.emit('abortQueueError', requestId, error);\n          this.logger.error('Unable to handle abort queue message');\n          this.emit('error', error);\n        }\n        break;\n      case 'dequeue':\n        try {\n          await this.dequeue();\n          this.emit('dequeueComplete', requestId);\n        } catch (error) {\n          this.emit('dequeueError', requestId, error);\n          this.logger.error('Unable to handle dequeue message');\n          this.emit('error', error);\n        }\n        break;\n      case 'enableStartOnJob':\n        try {\n          this.enableStartOnJob();\n          this.emit('enableStartOnJobComplete', requestId);\n        } catch (error) {\n          this.emit('enableStartOnJobError', requestId, error);\n          this.logger.error('Unable to handle enableStartOnJob message');\n          this.emit('error', error);\n        }\n        break;\n      case 'disableStartOnJob':\n        try {\n          this.disableStartOnJob();\n          this.emit('disableStartOnJobComplete', requestId);\n        } catch (error) {\n          this.emit('disableStartOnJobError', requestId, error);\n          this.logger.error('Unable to handle disableStartOnJob message');\n          this.emit('error', error);\n        }\n        break;\n      case 'getQueueIds':\n        try {\n          const queueIds = await this.getQueueIds();\n          this.emit('getQueuesComplete', requestId, [...queueIds]);\n        } catch (error) {\n          this.emit('getQueuesError', requestId, error);\n          this.logger.error('Unable to handle getQueueIds message');\n          this.emit('error', error);\n        }\n        break;\n      case 'idle':\n        try {\n          const [maxDuration, start] = requestArgs;\n          if (typeof maxDuration !== 'number') {\n            throw new Error(`Invalid \"queueId\" argument with type ${typeof maxDuration}, should be type number`);\n          }\n          if (typeof start !== 'number') {\n            throw new Error(`Invalid \"queueId\" argument with type ${typeof start}, should be type number`);\n          }\n          await this.onIdle(maxDuration - (Date.now() - start));\n          this.emit('idleComplete', requestId);\n        } catch (error) {\n          this.emit('idleError', requestId, error);\n          this.logger.error('Unable to handle idle message');\n          this.emit('error', error);\n        }\n        break;\n      default:\n        this.logger.warn(`Unknown worker interface message type ${type}`);\n    }\n  }\n\n  listenForServiceWorkerInterface() {\n    let activeEmitCallback;\n    let handleJobAdd;\n    let handleJobDelete;\n    let handleJobUpdate;\n    let handleJobsClear;\n\n    self.addEventListener('sync', (event) => {\n      this.logger.info(`SyncManager event ${event.tag}${event.lastChance ? ', last chance' : ''}`);\n      if (event.tag === 'syncManagerOnIdle') {\n        this.logger.info('Starting SyncManager handler');\n        this.emit('syncManagerOnIdle');\n        event.waitUntil(this.onIdle().catch((error) => {\n          this.logger.error(`SyncManager event handler failed${event.lastChance ? ' on last chance' : ''}`);\n          this.logger.errorStack(error);\n        }));\n      } else {\n        this.logger.warn(`Received unknown SyncManager event tag ${event.tag}`);\n      }\n    });\n\n    self.addEventListener('message', (event:ExtendableMessageEvent) => {\n      if (!(event instanceof ExtendableMessageEvent)) {\n        return;\n      }\n      const { data } = event;\n      if (!data || typeof data !== 'object') {\n        return;\n      }\n      const { type } = data;\n      if (type !== 'BATTERY_QUEUE_WORKER_INITIALIZATION') {\n        return;\n      }\n      if (!Array.isArray(event.ports)) {\n        return;\n      }\n      const port = event.ports[0];\n      if (!(port instanceof MessagePort)) {\n        return;\n      }\n      this.emitCallbacks = this.emitCallbacks.filter((x) => x !== activeEmitCallback);\n      const previousPort = this.port;\n      if (previousPort instanceof MessagePort) {\n        this.logger.info('Closing previous worker interface');\n        previousPort.close();\n      }\n      if (typeof handleJobAdd === 'function') {\n        localJobEmitter.removeListener('jobAdd', handleJobAdd);\n      }\n      if (typeof handleJobDelete === 'function') {\n        localJobEmitter.removeListener('jobDelete', handleJobDelete);\n      }\n      if (typeof handleJobUpdate === 'function') {\n        localJobEmitter.removeListener('jobUpdate', handleJobUpdate);\n      }\n      if (typeof handleJobsClear === 'function') {\n        localJobEmitter.removeListener('jobsClear', handleJobsClear);\n      }\n      port.postMessage({ type: 'BATTERY_QUEUE_WORKER_CONFIRMATION' });\n      this.logger.info('Linked to worker interface');\n      port.onmessage = this.handlePortMessage.bind(this);\n\n      handleJobAdd = (...args:Array<any>) => {\n        port.postMessage({ type: 'jobAdd', args });\n      };\n      handleJobDelete = (...args:Array<any>) => {\n        port.postMessage({ type: 'jobDelete', args });\n      };\n      handleJobUpdate = (...args:Array<any>) => {\n        port.postMessage({ type: 'jobUpdate', args });\n      };\n      handleJobsClear = (...args:Array<any>) => {\n        port.postMessage({ type: 'jobsClear', args });\n      };\n      localJobEmitter.addListener('jobAdd', handleJobAdd);\n      localJobEmitter.addListener('jobDelete', handleJobDelete);\n      localJobEmitter.addListener('jobUpdate', handleJobUpdate);\n      localJobEmitter.addListener('jobsClear', handleJobsClear);\n      const emitCallback = (t:string, args:Array<any>) => {\n        port.postMessage({ type: t, args });\n      };\n      activeEmitCallback = emitCallback;\n      this.emitCallbacks.push(emitCallback);\n      this.port = port;\n    });\n    self.addEventListener('messageerror', (event:MessageEvent) => {\n      this.logger.error('Service worker interface message error');\n      this.logger.errorObject(event);\n    });\n  }\n}\n\n"],"file":"queue.js"}