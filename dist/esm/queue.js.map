{"version":3,"sources":["../../src/queue.js"],"names":["PQueue","errorObjectParser","EventEmitter","makeLogger","clearDatabase","dequeueFromDatabase","incrementJobAttemptInDatabase","incrementCleanupAttemptInDatabase","markJobCompleteInDatabase","markJobPendingInDatabase","markJobErrorInDatabase","markJobCleanupInDatabase","markJobAbortedInDatabase","markJobStartAfterInDatabase","markCleanupStartAfterInDatabase","updateCleanupInDatabase","getCleanupFromDatabase","getJobFromDatabase","removePathFromCleanupDataInDatabase","markQueueForCleanupInDatabase","removeCleanupFromDatabase","JOB_PENDING_STATUS","JOB_ABORTED_STATUS","JOB_ERROR_STATUS","JOB_CLEANUP_STATUS","JOB_COMPLETE_STATUS","AbortError","PRIORITY_OFFSET","Math","floor","Number","MAX_SAFE_INTEGER","BatteryQueue","constructor","options","dequeueQueue","concurrency","handlerMap","Map","cleanupMap","retryJobDelayMap","retryCleanupDelayMap","queueMap","jobIds","Set","abortControllerMap","isClearing","emitCallbacks","logger","emit","type","args","emitCallback","setRetryJobDelay","retryJobDelayFunction","has","Error","set","removeRetryJobDelay","delete","getRetryJobDelay","attempt","error","get","result","setRetryCleanupDelay","retryCleanupDelayFunction","removeRetryCleanupDelay","getRetryCleanupDelay","setHandler","handler","removeHandler","setCleanup","cleanup","removeCleanup","clear","onIdle","start","addToQueue","queueId","priority","func","queue","add","newQueue","autoStart","on","Promise","resolve","timeout","setTimeout","removeListener","handleClearing","clearTimeout","addListener","pending","size","abortQueue","info","queueAbortControllerMap","abortController","values","abort","dequeue","_dequeue","bind","jobs","queueIds","id","status","startAfter","pause","startJob","startErrorHandler","startCleanup","maxDuration","onIdlePromise","Date","now","warn","interval","setInterval","clearInterval","jobsInterval","length","getAbortController","newAbortController","AbortController","removeAbortController","runCleanup","cleanupJob","data","undefined","delay","toLocaleString","path","name","errorStack","retryCleanupDelay","newStartAfter","run","delayJobStart","signal","duration","reject","removeEventListener","handleAbort","addEventListener","updateCleanupData","aborted","retryDelay","job","handleInitializationMessage","event","ExtendableMessageEvent","Array","isArray","ports","port","MessagePort","postMessage","onmessage","handlePortMessage","push","t","MessageEvent","warnObject","value","errorObject","serializeError","listenForServiceWorkerInterface","self"],"mappings":"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","sourcesContent":["// @flow\n\nimport PQueue from 'p-queue';\nimport errorObjectParser from 'serialize-error';\nimport EventEmitter from 'events';\nimport type { Logger } from './logger';\nimport makeLogger from './logger';\nimport {\n  clearDatabase,\n  dequeueFromDatabase,\n  incrementJobAttemptInDatabase,\n  incrementCleanupAttemptInDatabase,\n  markJobCompleteInDatabase,\n  markJobPendingInDatabase,\n  markJobErrorInDatabase,\n  markJobCleanupInDatabase,\n  markJobAbortedInDatabase,\n  markJobStartAfterInDatabase,\n  markCleanupStartAfterInDatabase,\n  updateCleanupInDatabase,\n  getCleanupFromDatabase,\n  getJobFromDatabase,\n  removePathFromCleanupDataInDatabase,\n  markQueueForCleanupInDatabase,\n  removeCleanupFromDatabase,\n  JOB_PENDING_STATUS,\n  JOB_ABORTED_STATUS,\n  JOB_ERROR_STATUS,\n  JOB_CLEANUP_STATUS,\n  JOB_COMPLETE_STATUS,\n} from './database';\nimport { AbortError } from './errors';\n\nconst PRIORITY_OFFSET = Math.floor(Number.MAX_SAFE_INTEGER / 2);\n\ntype HandlerFunction = (Array<any>, AbortSignal, (Object) => Promise<void>) => Promise<void>;\ntype CleanupFunction = (Object | void, Array<any>, Array<string> => Promise<void>) => Promise<void>;\ntype RetryDelayFunction = (number, Error) => number | false | Promise<number | false>;\ntype EmitCallback = (string, Array<any>) => void;\n\ntype Options = {\n  logger?: Logger\n};\n\nexport default class BatteryQueue extends EventEmitter {\n  declare logger: Logger;\n  declare dequeueQueue: PQueue;\n  declare handlerMap: Map<string, HandlerFunction>;\n  declare retryJobDelayMap: Map<string, RetryDelayFunction>;\n  declare retryCleanupDelayMap: Map<string, RetryDelayFunction>;\n  declare cleanupMap: Map<string, CleanupFunction>;\n  declare queueMap: Map<string, PQueue>;\n  declare abortControllerMap: Map<string, Map<number, AbortController>>;\n  declare isClearing: boolean;\n  declare onIdlePromise: Promise<void> | void;\n  declare jobIds: Set<number>;\n  declare emitCallbacks: Array<EmitCallback>;\n  declare port: MessagePort;\n\n  constructor(options?: Options = {}) {\n    super();\n    this.dequeueQueue = new PQueue({ concurrency: 1 });\n    this.handlerMap = new Map();\n    this.cleanupMap = new Map();\n    this.retryJobDelayMap = new Map();\n    this.retryCleanupDelayMap = new Map();\n    this.queueMap = new Map();\n    this.jobIds = new Set();\n    this.abortControllerMap = new Map();\n    this.isClearing = false;\n    this.emitCallbacks = [];\n    this.logger = options.logger || makeLogger('Battery Queue');\n  }\n\n  emit(type:string, ...args:Array<any>) {\n    for (const emitCallback of this.emitCallbacks) {\n      emitCallback(type, args);\n    }\n    return super.emit(type, ...args);\n  }\n\n  setRetryJobDelay(type:string, retryJobDelayFunction:RetryDelayFunction) {\n    if (this.retryJobDelayMap.has(type)) {\n      throw new Error(`Retry job delay handler for type \"${type}\" already exists`);\n    }\n    this.retryJobDelayMap.set(type, retryJobDelayFunction);\n  }\n\n  removeRetryJobDelay(type:string) {\n    if (!this.retryJobDelayMap.has(type)) {\n      throw new Error(`Retry job delay handler for type \"${type}\" does not exist`);\n    }\n    this.retryJobDelayMap.delete(type);\n  }\n\n  async getRetryJobDelay(type:string, attempt: number, error:Error) {\n    const retryJobDelayFunction = this.retryJobDelayMap.get(type);\n    if (typeof retryJobDelayFunction !== 'function') {\n      return false;\n    }\n    const result = await retryJobDelayFunction(attempt, error);\n    if (typeof result !== 'number' && result !== false) {\n      throw new Error(`Retry job delay function for type \"${type}\" returned invalid response, should be a number (milliseconds) or false`);\n    }\n    return result;\n  }\n\n  setRetryCleanupDelay(type:string, retryCleanupDelayFunction:RetryDelayFunction) {\n    if (this.retryCleanupDelayMap.has(type)) {\n      throw new Error(`Retry cleanup delay handler for type \"${type}\" already exists`);\n    }\n    this.retryCleanupDelayMap.set(type, retryCleanupDelayFunction);\n  }\n\n  removeRetryCleanupDelay(type:string) {\n    if (!this.retryCleanupDelayMap.has(type)) {\n      throw new Error(`Retry cleanup delay handler for type \"${type}\" does not exist`);\n    }\n    this.retryCleanupDelayMap.delete(type);\n  }\n\n  async getRetryCleanupDelay(type:string, attempt: number, error:Error) {\n    const retryCleanupDelayFunction = this.retryCleanupDelayMap.get(type);\n    if (typeof retryCleanupDelayFunction !== 'function') {\n      return false;\n    }\n    const result = await retryCleanupDelayFunction(attempt, error);\n    if (typeof result !== 'number' && result !== false) {\n      throw new Error(`Retry cleanup delay function for type \"${type}\" returned invalid response, should be a number (milliseconds) or false`);\n    }\n    return result;\n  }\n\n  setHandler(type:string, handler: HandlerFunction) {\n    if (this.handlerMap.has(type)) {\n      throw new Error(`Handler for type \"${type}\" already exists`);\n    }\n    this.handlerMap.set(type, handler);\n  }\n\n  removeHandler(type:string) {\n    if (!this.handlerMap.has(type)) {\n      throw new Error(`Handler for type \"${type}\" does not exist`);\n    }\n    this.handlerMap.delete(type);\n  }\n\n  setCleanup(type:string, cleanup: CleanupFunction) {\n    if (this.cleanupMap.has(type)) {\n      throw new Error(`Cleanup for type \"${type}\" already exists`);\n    }\n    this.cleanupMap.set(type, cleanup);\n  }\n\n  removeCleanup(type:string) {\n    if (!this.handlerMap.has(type)) {\n      throw new Error(`Cleanup for type \"${type}\" does not exist`);\n    }\n    this.cleanupMap.delete(type);\n  }\n\n  async clear() {\n    this.isClearing = true;\n    await this.onIdle();\n    this.emit('clearing');\n    await clearDatabase();\n    this.dequeueQueue.start();\n    this.isClearing = false;\n  }\n\n  addToQueue(queueId:string, priority: number, func: () => Promise<void>) {\n    const queue = this.queueMap.get(queueId);\n    if (typeof queue !== 'undefined') {\n      queue.add(func, { priority });\n      return;\n    }\n    const newQueue = new PQueue({ concurrency: 1, autoStart: false });\n    this.queueMap.set(queueId, newQueue);\n    newQueue.add(func, { priority });\n    newQueue.on('idle', async () => {\n      if (!this.isClearing) {\n        await new Promise((resolve) => {\n          const timeout = setTimeout(() => {\n            this.removeListener('clearing', handleClearing);\n            resolve();\n          }, 5000);\n          const handleClearing = () => {\n            clearTimeout(timeout);\n            this.removeListener('clearing', handleClearing);\n            resolve();\n          };\n          this.addListener('clearing', handleClearing);\n        });\n      }\n      if (newQueue.pending > 0 || newQueue.size > 0) {\n        return;\n      }\n      this.queueMap.delete(queueId);\n    });\n  }\n\n  async abortQueue(queueId: string) {\n    this.logger.info(`Aborting queue ${queueId}`);\n    // Changes:\n    // * JOB_ERROR_STATUS -> JOB_CLEANUP_STATUS\n    // * JOB_COMPLETE_STATUS -> JOB_CLEANUP_STATUS\n    // * JOB_PENDING_STATUS -> JOB_ABORTED_STATUS\n    await markQueueForCleanupInDatabase(queueId);\n    // Abort active jobs\n    const queueAbortControllerMap = this.abortControllerMap.get(queueId);\n    if (typeof queueAbortControllerMap !== 'undefined') {\n      for (const abortController of queueAbortControllerMap.values()) {\n        abortController.abort();\n      }\n    }\n    this.abortControllerMap.delete(queueId);\n  }\n\n  dequeue():void | Promise<void> {\n    if (this.dequeueQueue.size === 0) {\n      // Add a subsequent dequeue\n      this.dequeueQueue.add(this._dequeue.bind(this)); // eslint-disable-line no-underscore-dangle\n    }\n    return this.dequeueQueue.onIdle();\n  }\n\n  async _dequeue() { // eslint-disable-line consistent-return\n    const jobs = await dequeueFromDatabase();\n    const queueIds = new Set();\n    for (const { id, queueId, args, type, status, attempt, startAfter } of jobs) {\n      if (this.jobIds.has(id)) {\n        continue;\n      }\n      // Pause queues before adding items into them to avoid starting things out of priority\n      if (!queueIds.has(queueId)) {\n        const queue = this.queueMap.get(queueId);\n        if (typeof queue !== 'undefined') {\n          queue.pause();\n        }\n        queueIds.add(queueId);\n      }\n      if (status === JOB_PENDING_STATUS) {\n        this.startJob(id, queueId, args, type, attempt + 1, startAfter);\n      } else if (status === JOB_ERROR_STATUS) {\n        this.startErrorHandler(id, queueId, args, type);\n      } else if (status === JOB_CLEANUP_STATUS) {\n        this.startCleanup(id, queueId, args, type);\n      } else {\n        throw new Error(`Unknown job status ${status} in job ${id} of queue ${queueId}`);\n      }\n    }\n    for (const queueId of queueIds) {\n      const queue = this.queueMap.get(queueId);\n      if (typeof queue !== 'undefined') {\n        queue.start();\n      } else {\n        this.logger.error(`Unable to start queue ${queueId} after dequeue; queue does not exist`);\n      }\n    }\n  }\n\n  async onIdle(maxDuration?: number = 5000) {\n    if (typeof this.onIdlePromise === 'undefined') {\n      this.onIdlePromise = (async () => {\n        const timeout = Date.now() + maxDuration;\n        while (true) { // eslint-disable-line no-constant-condition\n          if (Date.now() > timeout) {\n            this.logger.warn(`Idle timeout after ${maxDuration}ms`);\n            break;\n          }\n          await this.dequeueQueue.onIdle();\n          for (const [queueId, queue] of this.queueMap) {\n            const interval = setInterval(() => {\n              this.logger.info(`Waiting on queue ${queueId}`);\n            }, 250);\n            await queue.onIdle();\n            clearInterval(interval);\n          }\n          const jobsInterval = setInterval(() => {\n            this.logger.info('Waiting on jobs');\n          }, 250);\n          const jobs = await dequeueFromDatabase();\n          clearInterval(jobsInterval);\n          if (jobs.length > 0) {\n            const interval = setInterval(() => {\n              this.logger.info('Waiting on dequeue');\n            }, 250);\n            await this.dequeue();\n            clearInterval(interval);\n            continue;\n          }\n          break;\n        }\n        delete this.onIdlePromise;\n        this.emit('idle');\n      })();\n    }\n    await this.onIdlePromise;\n  }\n\n  getAbortController(id:number, queueId:string) {\n    let queueAbortControllerMap = this.abortControllerMap.get(queueId);\n    if (typeof queueAbortControllerMap === 'undefined') {\n      queueAbortControllerMap = new Map();\n      this.abortControllerMap.set(queueId, queueAbortControllerMap);\n    }\n    const abortController = queueAbortControllerMap.get(id);\n    if (typeof abortController !== 'undefined') {\n      return abortController;\n    }\n    const newAbortController = new AbortController();\n    queueAbortControllerMap.set(id, newAbortController);\n    return newAbortController;\n  }\n\n  removeAbortController(id:number, queueId:string) {\n    const queueAbortControllerMap = this.abortControllerMap.get(queueId);\n    if (typeof queueAbortControllerMap === 'undefined') {\n      this.logger.warn(`Abort controller map for ${id} in queue ${queueId} does not exist`);\n      return;\n    }\n    const abortController = queueAbortControllerMap.get(id);\n    if (typeof abortController === 'undefined') {\n      this.logger.warn(`Abort controller for ${id} in queue ${queueId} does not exist`);\n      return;\n    }\n    queueAbortControllerMap.delete(id);\n  }\n\n  async runCleanup(id:number, queueId:string, args:Array<any>, type:string) {\n    this.emit('cleanupStart', { id });\n    const cleanup = this.cleanupMap.get(type);\n    if (typeof cleanup !== 'function') {\n      this.logger.warn(`No cleanup for job type ${type}`);\n      await removeCleanupFromDatabase(id);\n      this.jobIds.delete(id);\n      this.emit('cleanup', { id });\n      return;\n    }\n    const cleanupJob = await getCleanupFromDatabase(id);\n    const { data, startAfter } = typeof cleanupJob === 'undefined' ? { data: undefined, startAfter: 0 } : cleanupJob;\n    const delay = startAfter - Date.now();\n    if (delay > 0) {\n      this.logger.warn(`Delaying retry of ${type} job #${id} cleanup in queue ${queueId} by ${delay}ms to ${new Date(startAfter).toLocaleString()}`);\n      await new Promise((resolve) => setTimeout(resolve, delay));\n    }\n    try {\n      await cleanup(data, args, (path:Array<string>) => removePathFromCleanupDataInDatabase(id, path));\n    } catch (error) {\n      const attempt = await incrementCleanupAttemptInDatabase(id, queueId);\n      if (error.name === 'FatalCleanupError') {\n        this.logger.error(`Fatal error in ${type} job #${id} cleanup in queue ${queueId} attempt ${attempt}`);\n        this.logger.errorStack(error);\n        await removeCleanupFromDatabase(id);\n        this.jobIds.delete(id);\n        this.emit('fatalCleanupError', { id, queueId });\n        return;\n      }\n      const retryCleanupDelay = await this.getRetryCleanupDelay(type, attempt, error);\n      if (retryCleanupDelay === false) {\n        this.logger.error(`Error in ${type} job #${id} cleanup in queue ${queueId} attempt ${attempt} with no additional attempts requested`);\n        this.logger.errorStack(error);\n        await removeCleanupFromDatabase(id);\n        this.jobIds.delete(id);\n        this.emit('fatalCleanupError', { id, queueId });\n        return;\n      }\n      this.logger.error(`Error in ${type} job #${id} cleanup in queue ${queueId} attempt ${attempt}, retrying ${retryCleanupDelay > 0 ? `in ${retryCleanupDelay}ms'}` : 'immediately'}`);\n      this.logger.errorStack(error);\n      if (retryCleanupDelay > 0) {\n        this.emit('retryCleanupDelay', { id, queueId, retryCleanupDelay });\n        const newStartAfter = Date.now() + retryCleanupDelay;\n        await markCleanupStartAfterInDatabase(id, newStartAfter);\n      }\n      await this.runCleanup(id, queueId, args, type);\n      return;\n    }\n    await removeCleanupFromDatabase(id);\n    this.jobIds.delete(id);\n    this.emit('cleanup', { id });\n  }\n\n  startCleanup(id:number, queueId:string, args:Array<any>, type:string) {\n    this.logger.info(`Adding ${type} cleanup job #${id} to queue ${queueId}`);\n    this.jobIds.add(id);\n    const priority = PRIORITY_OFFSET + id;\n    const run = async () => {\n      this.logger.info(`Starting ${type} cleanup #${id} in queue ${queueId}`);\n      await this.runCleanup(id, queueId, args, type);\n      await markJobAbortedInDatabase(id);\n      await this.dequeue();\n    };\n    this.addToQueue(queueId, priority, run);\n  }\n\n  startErrorHandler(id:number, queueId:string, args:Array<any>, type:string) {\n    this.logger.info(`Adding ${type} error handler job #${id} to queue ${queueId}`);\n    this.jobIds.add(id);\n    const priority = PRIORITY_OFFSET + id;\n    const run = async () => {\n      this.logger.info(`Starting ${type} error handler #${id} in queue ${queueId}`);\n      await this.runCleanup(id, queueId, args, type);\n      await markJobPendingInDatabase(id);\n      this.logger.info(`Retrying ${type} job #${id} in queue ${queueId}`);\n      this.emit('retry', { id });\n      await this.dequeue();\n    };\n    this.addToQueue(queueId, priority, run);\n  }\n\n  async delayJobStart(id:number, queueId:string, type:string, signal: AbortSignal, startAfter: number) {\n    const duration = startAfter - Date.now();\n    if (duration > 0) {\n      this.logger.info(`Delaying start of ${type} job #${id} in queue ${queueId} by ${duration}ms`);\n      await new Promise((resolve, reject) => {\n        const timeout = setTimeout(() => {\n          signal.removeEventListener('abort', handleAbort);\n          resolve();\n        }, duration);\n        const handleAbort = () => {\n          clearTimeout(timeout);\n          signal.removeEventListener('abort', handleAbort);\n          reject(new AbortError('Aborted'));\n        };\n        signal.addEventListener('abort', handleAbort);\n      });\n    }\n  }\n\n  startJob(id:number, queueId:string, args:Array<any>, type:string, attempt:number, startAfter: number) {\n    this.logger.info(`Adding ${type} job #${id} to queue ${queueId}`);\n    this.jobIds.add(id);\n    const priority = PRIORITY_OFFSET - id;\n    const updateCleanupData = (data:Object) => updateCleanupInDatabase(id, queueId, data);\n    const run = async () => {\n      this.logger.info(`Starting ${type} job #${id} in queue ${queueId} attempt ${attempt}`);\n      const handler = this.handlerMap.get(type);\n      if (typeof handler !== 'function') {\n        this.logger.warn(`No handler for job type ${type}`);\n        await markJobCompleteInDatabase(id);\n        this.emit('complete', { id });\n        this.jobIds.delete(id);\n        await this.dequeue();\n        return;\n      }\n      const abortController = this.getAbortController(id, queueId);\n      await this.delayJobStart(id, queueId, type, abortController.signal, startAfter);\n      // Mark as error in database so the job is cleaned up and retried if execution\n      // stops before job completion or error\n      await markJobErrorInDatabase(id);\n      try {\n        await handler(args, abortController.signal, updateCleanupData);\n        if (abortController.signal.aborted) {\n          throw new AbortError('Aborted');\n        }\n        this.removeAbortController(id, queueId);\n      } catch (error) {\n        this.removeAbortController(id, queueId);\n        await incrementJobAttemptInDatabase(id);\n        if (error.name === 'FatalError') {\n          this.logger.error(`Fatal error in ${type} job #${id} in queue ${queueId} attempt ${attempt}`);\n          this.logger.errorStack(error);\n          await this.abortQueue(queueId);\n          await markJobCleanupInDatabase(id);\n          this.emit('fatalError', { queueId });\n          this.jobIds.delete(id);\n          await this.dequeue();\n          return;\n        }\n        if (error.name === 'AbortError') {\n          this.logger.error(`Abort error in ${type} job #${id} in queue ${queueId} attempt ${attempt}`);\n          this.logger.errorStack(error);\n          await markJobCleanupInDatabase(id);\n          this.jobIds.delete(id);\n          await this.dequeue();\n          return;\n        }\n        const retryDelay = await this.getRetryJobDelay(type, attempt, error);\n        if (retryDelay === false) {\n          this.logger.error(`Error in ${type} job #${id} in queue ${queueId} attempt ${attempt} with no additional attempts requested`);\n          this.logger.errorStack(error);\n          await this.abortQueue(queueId);\n          await markJobCleanupInDatabase(id);\n          this.emit('fatalError', { queueId });\n          this.jobIds.delete(id);\n          await this.dequeue();\n          return;\n        }\n        this.logger.error(`Error in ${type} job #${id} in queue ${queueId} attempt ${attempt}, retrying ${retryDelay > 0 ? `in ${retryDelay}ms'}` : 'immediately'}`);\n        this.logger.errorStack(error);\n        if (retryDelay > 0) {\n          this.emit('retryDelay', { id, queueId, retryDelay });\n          const newStartAfter = Date.now() + retryDelay;\n          await markJobStartAfterInDatabase(id, newStartAfter);\n        }\n        this.jobIds.delete(id);\n        await this.dequeue();\n        return;\n      }\n      const job = await getJobFromDatabase(id);\n      if (typeof job === 'undefined') {\n        throw new Error(`Unable to find ${type} job #${id} in queue ${queueId}, this should not happen`);\n      }\n      if (job.status === JOB_CLEANUP_STATUS) {\n        throw new Error(`Found cleanup status for ${type} job #${id} in queue ${queueId}, this should not happen`);\n      }\n      if (job.status === JOB_COMPLETE_STATUS) {\n        throw new Error(`Found complete status for ${type} job #${id} in queue ${queueId}, this should not happen`);\n      }\n      if (job.status === JOB_ABORTED_STATUS) {\n        // Job was aborted while running\n        this.logger.error(`Found aborted status for ${type} job #${id} in queue ${queueId} following error, starting cleanup`);\n        await markJobCleanupInDatabase(id);\n        this.jobIds.delete(id);\n        await this.dequeue();\n        return;\n      }\n      await markJobCompleteInDatabase(id);\n      this.emit('complete', { id });\n      this.jobIds.delete(id);\n      await this.dequeue();\n    };\n    this.addToQueue(queueId, priority, run);\n    this.emit('dequeue', { id });\n  }\n\n  handleInitializationMessage(event:ExtendableMessageEvent) {\n    if (!(event instanceof ExtendableMessageEvent)) {\n      return;\n    }\n    const { data } = event;\n    if (!data || typeof data !== 'object') {\n      return;\n    }\n    const { type } = data;\n    if (type !== 'BATTERY_QUEUE_WORKER_INITIALIZATION') {\n      return;\n    }\n    if (!Array.isArray(event.ports)) {\n      return;\n    }\n    const port = event.ports[0];\n    if (!(port instanceof MessagePort)) {\n      return;\n    }\n    port.postMessage({ type: 'BATTERY_QUEUE_WORKER_CONFIRMATION' });\n    this.logger.info('Linked to interface');\n    port.onmessage = this.handlePortMessage.bind(this);\n    this.emitCallbacks.push((t:string, args:Array<any>) => {\n      port.postMessage({ type: t, args });\n    });\n    this.port = port;\n  }\n\n  async handlePortMessage(event:MessageEvent) {\n    if (!(event instanceof MessageEvent)) {\n      return;\n    }\n    const { data } = event;\n    if (!data || typeof data !== 'object') {\n      this.logger.warn('Invalid message data');\n      this.logger.warnObject(event);\n      return;\n    }\n    const { type, value } = data;\n    if (typeof type !== 'string') {\n      this.logger.warn('Unknown message type');\n      this.logger.warnObject(event);\n      return;\n    }\n    if (value === null || typeof value !== 'object') {\n      throw new Error('Message payload should be an object');\n    }\n    const { id } = value;\n    if (typeof id !== 'number') {\n      throw new Error('Message payload should include property id with type number');\n    }\n    switch (type) {\n      case 'clear':\n        try {\n          await this.clear();\n          this.emit('clearComplete', { id });\n        } catch (error) {\n          this.emit('clearError', { errorObject: errorObjectParser.serializeError(error), id });\n          this.logger.error('Unable to handle clear message');\n          this.logger.errorStack(error);\n        }\n        break;\n      case 'abortQueue':\n        try {\n          const { queueId } = value;\n          if (typeof queueId !== 'string') {\n            throw new Error('Message abort queue payload should include property queueId with type string');\n          }\n          await this.abortQueue(queueId);\n          this.emit('abortQueueComplete', { id });\n        } catch (error) {\n          this.emit('abortQueueError', { errorObject: errorObjectParser.serializeError(error), id });\n          this.logger.error('Unable to handle abort queue message');\n          this.logger.errorStack(error);\n        }\n        break;\n      case 'dequeue':\n        try {\n          await this.dequeue();\n          this.emit('dequeueComplete', { id });\n        } catch (error) {\n          this.emit('dequeueError', { errorObject: errorObjectParser.serializeError(error), id });\n          this.logger.error('Unable to handle dequeue message');\n          this.logger.errorStack(error);\n        }\n        break;\n      case 'idle':\n        try {\n          const { maxDuration, start } = value;\n          if (typeof maxDuration !== 'number') {\n            throw new Error('Message idle payload should include property maxDuration with type number');\n          }\n          if (typeof start !== 'number') {\n            throw new Error('Message idle payload should include property start with type number');\n          }\n          await this.onIdle(maxDuration - (Date.now() - start));\n          this.emit('idleComplete', { id });\n        } catch (error) {\n          this.emit('idleError', { errorObject: errorObjectParser.serializeError(error), id });\n          this.logger.error('Unable to handle idle message');\n          this.logger.errorStack(error);\n        }\n        break;\n      default:\n        this.logger.warn(`Unknown worker interface message type ${type}`);\n    }\n  }\n\n  listenForServiceWorkerInterface() {\n    self.addEventListener('message', this.handleInitializationMessage.bind(this));\n  }\n}\n\n"],"file":"queue.js"}