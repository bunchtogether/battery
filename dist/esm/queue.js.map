{"version":3,"sources":["../../src/queue.js"],"names":["PQueue","EventEmitter","makeLogger","jobEmitter","localJobEmitter","clearDatabase","dequeueFromDatabase","dequeueFromDatabaseNotIn","incrementJobAttemptInDatabase","incrementCleanupAttemptInDatabase","markJobCompleteInDatabase","markJobPendingInDatabase","markJobErrorInDatabase","markJobCleanupInDatabase","markJobAbortedInDatabase","markJobStartAfterInDatabase","markCleanupStartAfterInDatabase","updateCleanupValuesInDatabase","getCleanupFromDatabase","removePathFromCleanupDataInDatabase","markQueueForCleanupInDatabase","removeCleanupFromDatabase","JOB_PENDING_STATUS","JOB_ERROR_STATUS","JOB_CLEANUP_STATUS","AbortError","PRIORITY_OFFSET","Math","floor","Number","MAX_SAFE_INTEGER","BatteryQueue","constructor","options","dequeueQueue","concurrency","handlerMap","Map","cleanupMap","retryJobDelayMap","retryCleanupDelayMap","queueMap","jobIds","Set","abortControllerMap","isClearing","emitCallbacks","logger","addListener","error","errorStack","enableStartOnJob","didRequestDequeue","handleJobAdd","self","queueMicrotask","dequeue","disableStartOnJob","removeListener","emit","type","args","emitCallback","getQueueIds","queueIds","keys","setRetryJobDelay","retryJobDelayFunction","has","Error","set","removeRetryJobDelay","delete","getRetryJobDelay","attempt","get","result","retryDelayError","setRetryCleanupDelay","retryCleanupDelayFunction","removeRetryCleanupDelay","getRetryCleanupDelay","setHandler","handler","removeHandler","setCleanup","cleanup","removeCleanup","clear","onIdle","start","addToQueue","queueId","priority","func","queue","add","newQueue","autoStart","on","Promise","resolve","timeout","setTimeout","handleClearing","handleActive","clearTimeout","pending","size","abortQueue","info","queueAbortControllerMap","abortController","values","abort","jobs","startJobs","bind","newJobs","Array","isArray","id","status","startAfter","pause","startJob","startErrorHandler","startCleanup","maxDuration","onIdlePromise","Date","now","warn","interval","setInterval","clearInterval","jobsInterval","length","getAbortController","newAbortController","AbortController","removeAbortController","runCleanup","cleanupJob","data","undefined","delay","toLocaleString","path","name","retryCleanupDelay","newStartAfter","run","signal","aborted","delayJobStart","duration","reject","removeEventListener","handleAbort","addEventListener","updateCleanupData","retryDelay","handlePortMessage","event","MessageEvent","warnObject","port","MessagePort","onmessage","requestId","requestArgs","listenForServiceWorkerInterface","activeEmitCallback","handleJobDelete","handleJobUpdate","handleJobsClear","tag","lastChance","waitUntil","catch","ExtendableMessageEvent","ports","filter","x","previousPort","close","postMessage","t","push","errorObject"],"mappings":"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","sourcesContent":["// @flow\n\nimport PQueue from 'p-queue';\nimport EventEmitter from 'events';\nimport type { Logger } from './logger';\nimport makeLogger from './logger';\nimport type { Job } from './database';\nimport {\n  jobEmitter,\n  localJobEmitter,\n  clearDatabase,\n  dequeueFromDatabase,\n  dequeueFromDatabaseNotIn,\n  incrementJobAttemptInDatabase,\n  incrementCleanupAttemptInDatabase,\n  markJobCompleteInDatabase,\n  markJobPendingInDatabase,\n  markJobErrorInDatabase,\n  markJobCleanupInDatabase,\n  markJobAbortedInDatabase,\n  markJobStartAfterInDatabase,\n  markCleanupStartAfterInDatabase,\n  updateCleanupValuesInDatabase,\n  getCleanupFromDatabase,\n  removePathFromCleanupDataInDatabase,\n  markQueueForCleanupInDatabase,\n  removeCleanupFromDatabase,\n  JOB_PENDING_STATUS,\n  JOB_ERROR_STATUS,\n  JOB_CLEANUP_STATUS,\n} from './database';\nimport { AbortError } from './errors';\n\nconst PRIORITY_OFFSET = Math.floor(Number.MAX_SAFE_INTEGER / 2);\n\ntype HandlerFunction = (Array<any>, AbortSignal, (Object) => Promise<void>) => Promise<void>;\ntype CleanupFunction = (Object | void, Array<any>, Array<string> => Promise<void>) => Promise<void>;\ntype RetryDelayFunction = (number, Error) => number | false | Promise<number | false>;\ntype EmitCallback = (string, Array<any>) => void;\n\ntype Options = {\n  logger?: Logger,\n  startOnJob?: boolean\n};\n\nexport default class BatteryQueue extends EventEmitter {\n  declare logger: Logger;\n  declare dequeueQueue: PQueue;\n  declare handlerMap: Map<string, HandlerFunction>;\n  declare retryJobDelayMap: Map<string, RetryDelayFunction>;\n  declare retryCleanupDelayMap: Map<string, RetryDelayFunction>;\n  declare cleanupMap: Map<string, CleanupFunction>;\n  declare queueMap: Map<string, PQueue>;\n  declare abortControllerMap: Map<string, Map<number, AbortController>>;\n  declare isClearing: boolean;\n  declare onIdlePromise: Promise<void> | void;\n  declare jobIds: Set<number>;\n  declare emitCallbacks: Array<EmitCallback>;\n  declare port: MessagePort | void;\n  declare handleJobAdd: void | () => void;\n\n  constructor(options?: Options = {}) {\n    super();\n    this.dequeueQueue = new PQueue({ concurrency: 1 });\n    this.handlerMap = new Map();\n    this.cleanupMap = new Map();\n    this.retryJobDelayMap = new Map();\n    this.retryCleanupDelayMap = new Map();\n    this.queueMap = new Map();\n    this.jobIds = new Set();\n    this.abortControllerMap = new Map();\n    this.isClearing = false;\n    this.emitCallbacks = [];\n    this.logger = options.logger || makeLogger('Battery Queue');\n    this.addListener('error', (error) => {\n      this.logger.errorStack(error);\n    });\n  }\n\n  enableStartOnJob() {\n    let didRequestDequeue = false;\n    const handleJobAdd = () => {\n      if (didRequestDequeue) {\n        return;\n      }\n      didRequestDequeue = true;\n      self.queueMicrotask(() => {\n        didRequestDequeue = false;\n        this.dequeue();\n      });\n    };\n    jobEmitter.addListener('jobAdd', handleJobAdd);\n    this.handleJobAdd = handleJobAdd;\n  }\n\n  disableStartOnJob() {\n    const handleJobAdd = this.handleJobAdd;\n    if (typeof handleJobAdd === 'function') {\n      jobEmitter.removeListener('jobAdd', handleJobAdd);\n      delete this.handleJobAdd;\n    }\n  }\n\n  emit(type:string, ...args:Array<any>) {\n    for (const emitCallback of this.emitCallbacks) {\n      emitCallback(type, args);\n    }\n    return super.emit(type, ...args);\n  }\n\n  async getQueueIds() {\n    await this.dequeue();\n    const queueIds:Set<string> = new Set(this.queueMap.keys());\n    return queueIds;\n  }\n\n  setRetryJobDelay(type:string, retryJobDelayFunction:RetryDelayFunction) {\n    if (this.retryJobDelayMap.has(type)) {\n      throw new Error(`Retry job delay handler for type \"${type}\" already exists`);\n    }\n    this.retryJobDelayMap.set(type, retryJobDelayFunction);\n  }\n\n  removeRetryJobDelay(type:string) {\n    if (!this.retryJobDelayMap.has(type)) {\n      throw new Error(`Retry job delay handler for type \"${type}\" does not exist`);\n    }\n    this.retryJobDelayMap.delete(type);\n  }\n\n  async getRetryJobDelay(type:string, attempt: number, error:Error) {\n    const retryJobDelayFunction = this.retryJobDelayMap.get(type);\n    if (typeof retryJobDelayFunction !== 'function') {\n      return false;\n    }\n    let result = false;\n    try {\n      result = await retryJobDelayFunction(attempt, error);\n    } catch (retryDelayError) {\n      this.logger.error(`Error in retry job delay handler for type \"${type}\" on attempt ${attempt}`);\n      this.emit('error', retryDelayError);\n      return false;\n    }\n    if (typeof result !== 'number' && result !== false) {\n      throw new Error(`Retry job delay function for type \"${type}\" returned invalid response, should be a number (milliseconds) or false`);\n    }\n    return result;\n  }\n\n  setRetryCleanupDelay(type:string, retryCleanupDelayFunction:RetryDelayFunction) {\n    if (this.retryCleanupDelayMap.has(type)) {\n      throw new Error(`Retry cleanup delay handler for type \"${type}\" already exists`);\n    }\n    this.retryCleanupDelayMap.set(type, retryCleanupDelayFunction);\n  }\n\n  removeRetryCleanupDelay(type:string) {\n    if (!this.retryCleanupDelayMap.has(type)) {\n      throw new Error(`Retry cleanup delay handler for type \"${type}\" does not exist`);\n    }\n    this.retryCleanupDelayMap.delete(type);\n  }\n\n  async getRetryCleanupDelay(type:string, attempt: number, error:Error) {\n    const retryCleanupDelayFunction = this.retryCleanupDelayMap.get(type);\n    if (typeof retryCleanupDelayFunction !== 'function') {\n      return false;\n    }\n    let result = false;\n    try {\n      result = await retryCleanupDelayFunction(attempt, error);\n    } catch (retryDelayError) {\n      this.logger.error(`Error in retry cleanup delay handler for type \"${type}\" on attempt ${attempt}`);\n      this.emit('error', retryDelayError);\n      return false;\n    }\n    if (typeof result !== 'number' && result !== false) {\n      throw new Error(`Retry cleanup delay function for type \"${type}\" returned invalid response, should be a number (milliseconds) or false`);\n    }\n    return result;\n  }\n\n  setHandler(type:string, handler: HandlerFunction) {\n    if (this.handlerMap.has(type)) {\n      throw new Error(`Handler for type \"${type}\" already exists`);\n    }\n    this.handlerMap.set(type, handler);\n  }\n\n  removeHandler(type:string) {\n    if (!this.handlerMap.has(type)) {\n      throw new Error(`Handler for type \"${type}\" does not exist`);\n    }\n    this.handlerMap.delete(type);\n  }\n\n  setCleanup(type:string, cleanup: CleanupFunction) {\n    if (this.cleanupMap.has(type)) {\n      throw new Error(`Cleanup for type \"${type}\" already exists`);\n    }\n    this.cleanupMap.set(type, cleanup);\n  }\n\n  removeCleanup(type:string) {\n    if (!this.cleanupMap.has(type)) {\n      throw new Error(`Cleanup for type \"${type}\" does not exist`);\n    }\n    this.cleanupMap.delete(type);\n  }\n\n  async clear() {\n    this.isClearing = true;\n    await this.onIdle();\n    this.emit('clearing');\n    await clearDatabase();\n    this.dequeueQueue.start();\n    this.isClearing = false;\n  }\n\n  addToQueue(queueId:string, priority: number, func: () => Promise<void>) {\n    const queue = this.queueMap.get(queueId);\n    if (typeof queue !== 'undefined') {\n      queue.add(func, { priority });\n      return;\n    }\n    const newQueue = new PQueue({ concurrency: 1, autoStart: false });\n    this.queueMap.set(queueId, newQueue);\n    newQueue.add(func, { priority });\n    newQueue.on('idle', async () => {\n      if (!this.isClearing) {\n        await new Promise((resolve) => {\n          const timeout = setTimeout(() => {\n            this.removeListener('clearing', handleClearing);\n            newQueue.removeListener('active', handleActive);\n            resolve();\n          }, 5000);\n          const handleClearing = () => {\n            clearTimeout(timeout);\n            this.removeListener('clearing', handleClearing);\n            newQueue.removeListener('active', handleActive);\n            resolve();\n          };\n          const handleActive = () => {\n            clearTimeout(timeout);\n            this.removeListener('clearing', handleClearing);\n            newQueue.removeListener('active', handleActive);\n            resolve();\n          };\n          this.addListener('clearing', handleClearing);\n          newQueue.addListener('active', handleActive);\n        });\n      }\n      if (newQueue.pending > 0 || newQueue.size > 0) {\n        return;\n      }\n      this.queueMap.delete(queueId);\n      this.emit('queueInactive', queueId);\n    });\n    this.emit('queueActive', queueId);\n  }\n\n  async abortQueue(queueId: string) {\n    this.logger.info(`Aborting queue ${queueId}`);\n    // Abort active jobs\n    const queueAbortControllerMap = this.abortControllerMap.get(queueId);\n    if (typeof queueAbortControllerMap !== 'undefined') {\n      for (const abortController of queueAbortControllerMap.values()) {\n        abortController.abort();\n      }\n    }\n    // Changes:\n    // * JOB_ERROR_STATUS -> JOB_CLEANUP_STATUS\n    // * JOB_COMPLETE_STATUS -> JOB_CLEANUP_STATUS\n    // * JOB_PENDING_STATUS -> JOB_ABORTED_STATUS\n    const jobs = await markQueueForCleanupInDatabase(queueId);\n    await this.startJobs(jobs);\n  }\n\n  dequeue():void | Promise<void> {\n    if (this.dequeueQueue.size === 0) {\n      // Add a subsequent dequeue\n      this.dequeueQueue.add(this.startJobs.bind(this));\n    }\n    return this.dequeueQueue.onIdle();\n  }\n\n  async startJobs(newJobs?:Array<Job>) { // eslint-disable-line consistent-return\n    const jobs = Array.isArray(newJobs) ? newJobs : await dequeueFromDatabaseNotIn([...this.jobIds.keys()]);\n    const queueIds = new Set();\n    for (const { id, queueId, args, type, status, attempt, startAfter } of jobs) {\n      if (this.jobIds.has(id)) {\n        continue;\n      }\n      // Pause queues before adding items into them to avoid starting things out of priority\n      if (!queueIds.has(queueId)) {\n        const queue = this.queueMap.get(queueId);\n        if (typeof queue !== 'undefined') {\n          queue.pause();\n        }\n        queueIds.add(queueId);\n      }\n      if (status === JOB_PENDING_STATUS) {\n        this.startJob(id, queueId, args, type, attempt + 1, startAfter);\n      } else if (status === JOB_ERROR_STATUS) {\n        this.startErrorHandler(id, queueId, args, type, attempt, startAfter);\n      } else if (status === JOB_CLEANUP_STATUS) {\n        this.startCleanup(id, queueId, args, type);\n      } else {\n        throw new Error(`Unknown job status ${status} in job ${id} of queue ${queueId}`);\n      }\n    }\n    for (const queueId of queueIds) {\n      const queue = this.queueMap.get(queueId);\n      if (typeof queue !== 'undefined') {\n        queue.start();\n      } else {\n        this.logger.error(`Unable to start queue ${queueId} after dequeue; queue does not exist`);\n      }\n    }\n  }\n\n  async onIdle(maxDuration?: number) {\n    if (typeof this.onIdlePromise === 'undefined') {\n      this.onIdlePromise = (async () => {\n        const timeout = typeof maxDuration === 'number' ? Date.now() + maxDuration : -1;\n        const start = Date.now();\n        while (true) { // eslint-disable-line no-constant-condition\n          if (timeout !== -1 && Date.now() > timeout) {\n            this.logger.warn(`Idle timeout after ${Date.now() - start}ms`);\n            break;\n          }\n          await this.dequeueQueue.onIdle();\n          for (const [queueId, queue] of this.queueMap) {\n            const interval = setInterval(() => {\n              this.logger.info(`Waiting on queue ${queueId}`);\n            }, 250);\n            await queue.onIdle();\n            clearInterval(interval);\n          }\n          const jobsInterval = setInterval(() => {\n            this.logger.info('Waiting on jobs');\n          }, 250);\n          const jobs = await dequeueFromDatabase();\n          clearInterval(jobsInterval);\n          if (jobs.length > 0) {\n            const interval = setInterval(() => {\n              this.logger.info('Waiting on dequeue');\n            }, 250);\n            await this.dequeue();\n            clearInterval(interval);\n            continue;\n          }\n          break;\n        }\n        delete this.onIdlePromise;\n        this.emit('idle');\n      })();\n    }\n    await this.onIdlePromise;\n  }\n\n  getAbortController(id:number, queueId:string) {\n    let queueAbortControllerMap = this.abortControllerMap.get(queueId);\n    if (typeof queueAbortControllerMap === 'undefined') {\n      queueAbortControllerMap = new Map();\n      this.abortControllerMap.set(queueId, queueAbortControllerMap);\n    }\n    const abortController = queueAbortControllerMap.get(id);\n    if (typeof abortController !== 'undefined') {\n      return abortController;\n    }\n    const newAbortController = new AbortController();\n    queueAbortControllerMap.set(id, newAbortController);\n    return newAbortController;\n  }\n\n  removeAbortController(id:number, queueId:string) {\n    const queueAbortControllerMap = this.abortControllerMap.get(queueId);\n    if (typeof queueAbortControllerMap === 'undefined') {\n      this.logger.warn(`Abort controller map for ${id} in queue ${queueId} does not exist`);\n      return;\n    }\n    const abortController = queueAbortControllerMap.get(id);\n    if (typeof abortController === 'undefined') {\n      this.logger.warn(`Abort controller for ${id} in queue ${queueId} does not exist`);\n      return;\n    }\n    queueAbortControllerMap.delete(id);\n    if (queueAbortControllerMap.size === 0) {\n      this.abortControllerMap.delete(queueId);\n    }\n  }\n\n  async runCleanup(id:number, queueId:string, args:Array<any>, type:string) {\n    this.emit('cleanupStart', { id });\n    const cleanup = this.cleanupMap.get(type);\n    if (typeof cleanup !== 'function') {\n      this.logger.warn(`No cleanup for job type ${type}`);\n      await removeCleanupFromDatabase(id);\n      this.jobIds.delete(id);\n      this.emit('cleanup', { id });\n      return;\n    }\n    const cleanupJob = await getCleanupFromDatabase(id);\n    const { data, startAfter } = typeof cleanupJob === 'undefined' ? { data: undefined, startAfter: 0 } : cleanupJob;\n    const delay = startAfter - Date.now();\n    if (delay > 0) {\n      this.logger.info(`Delaying retry of ${type} job #${id} cleanup in queue ${queueId} by ${delay}ms to ${new Date(startAfter).toLocaleString()}`);\n      await new Promise((resolve) => setTimeout(resolve, delay));\n    }\n    try {\n      await cleanup(data, args, (path:Array<string>) => removePathFromCleanupDataInDatabase(id, path));\n    } catch (error) {\n      const attempt = await incrementCleanupAttemptInDatabase(id, queueId);\n      if (error.name === 'FatalCleanupError') {\n        this.logger.error(`Fatal error in ${type} job #${id} cleanup in queue ${queueId} attempt ${attempt}`);\n        this.emit('error', error);\n        await removeCleanupFromDatabase(id);\n        this.jobIds.delete(id);\n        this.emit('fatalCleanupError', { id, queueId });\n        return;\n      }\n      const retryCleanupDelay = await this.getRetryCleanupDelay(type, attempt, error);\n      if (retryCleanupDelay === false) {\n        this.logger.error(`Error in ${type} job #${id} cleanup in queue ${queueId} attempt ${attempt} with no additional attempts requested`);\n        this.emit('error', error);\n        await removeCleanupFromDatabase(id);\n        this.jobIds.delete(id);\n        this.emit('fatalCleanupError', { id, queueId });\n        return;\n      }\n      this.logger.error(`Error in ${type} job #${id} cleanup in queue ${queueId} attempt ${attempt}, retrying ${retryCleanupDelay > 0 ? `in ${retryCleanupDelay}ms'}` : 'immediately'}`);\n      this.emit('error', error);\n      if (retryCleanupDelay > 0) {\n        this.emit('retryCleanupDelay', { id, queueId, retryCleanupDelay });\n        const newStartAfter = Date.now() + retryCleanupDelay;\n        await markCleanupStartAfterInDatabase(id, newStartAfter);\n      }\n      await this.runCleanup(id, queueId, args, type);\n      return;\n    }\n    await removeCleanupFromDatabase(id);\n    this.emit('cleanup', { id });\n  }\n\n  startCleanup(id:number, queueId:string, args:Array<any>, type:string) {\n    this.logger.info(`Adding ${type} cleanup job #${id} to queue ${queueId}`);\n    this.jobIds.add(id);\n    const priority = PRIORITY_OFFSET + id;\n    const run = async () => {\n      this.logger.info(`Starting ${type} cleanup #${id} in queue ${queueId}`);\n      await this.runCleanup(id, queueId, args, type);\n      await markJobAbortedInDatabase(id);\n      this.jobIds.delete(id);\n    };\n    this.addToQueue(queueId, priority, run);\n  }\n\n  startErrorHandler(id:number, queueId:string, args:Array<any>, type:string, attempt: number, startAfter: number) {\n    this.logger.info(`Adding ${type} error handler job #${id} to queue ${queueId}`);\n    this.jobIds.add(id);\n    const priority = PRIORITY_OFFSET + id;\n    const abortController = this.getAbortController(id, queueId);\n    const run = async () => {\n      this.logger.info(`Starting ${type} error handler #${id} in queue ${queueId}`);\n      await this.runCleanup(id, queueId, args, type);\n      if (abortController.signal.aborted) {\n        await markJobAbortedInDatabase(id);\n        this.removeAbortController(id, queueId);\n        this.jobIds.delete(id);\n      } else {\n        await markJobPendingInDatabase(id);\n        this.logger.info(`Retrying ${type} job #${id} in queue ${queueId}`);\n        this.emit('retry', { id });\n        this.startJob(id, queueId, args, type, attempt + 1, startAfter);\n      }\n    };\n    this.addToQueue(queueId, priority, run);\n  }\n\n  async delayJobStart(id:number, queueId:string, type:string, signal: AbortSignal, startAfter: number) {\n    if (signal.aborted) {\n      throw new AbortError(`Queue ${queueId} was aborted`);\n    }\n    const duration = startAfter - Date.now();\n    if (duration > 0) {\n      this.logger.info(`Delaying start of ${type} job #${id} in queue ${queueId} by ${duration}ms`);\n      await new Promise((resolve, reject) => {\n        const timeout = setTimeout(() => {\n          signal.removeEventListener('abort', handleAbort);\n          resolve();\n        }, duration);\n        const handleAbort = () => {\n          clearTimeout(timeout);\n          signal.removeEventListener('abort', handleAbort);\n          reject(new AbortError(`Queue ${queueId} was aborted`));\n        };\n        signal.addEventListener('abort', handleAbort);\n      });\n    }\n  }\n\n  startJob(id:number, queueId:string, args:Array<any>, type:string, attempt:number, startAfter: number) {\n    this.logger.info(`Adding ${type} job #${id} to queue ${queueId}`);\n    this.jobIds.add(id);\n    const priority = PRIORITY_OFFSET - id;\n    const updateCleanupData = (data:Object) => updateCleanupValuesInDatabase(id, queueId, data);\n    const abortController = this.getAbortController(id, queueId);\n    const run = async () => {\n      if (abortController.signal.aborted) {\n        this.emit('fatalError', { id, queueId, error: new AbortError(`Queue ${queueId} was aborted`) });\n        this.removeAbortController(id, queueId);\n        return;\n      }\n      this.logger.info(`Starting ${type} job #${id} in queue ${queueId} attempt ${attempt}`);\n      const handler = this.handlerMap.get(type);\n      if (typeof handler !== 'function') {\n        this.logger.warn(`No handler for job type ${type}`);\n        await markJobCompleteInDatabase(id);\n        this.removeAbortController(id, queueId);\n        this.jobIds.delete(id);\n        return;\n      }\n      // Mark as error in database so the job is cleaned up and retried if execution\n      // stops before job completion or error\n      await markJobErrorInDatabase(id);\n      try {\n        await this.delayJobStart(id, queueId, type, abortController.signal, startAfter);\n        await handler(args, abortController.signal, updateCleanupData);\n        if (abortController.signal.aborted) {\n          throw new AbortError(`Queue ${queueId} was aborted`);\n        }\n        await markJobCompleteInDatabase(id);\n        this.removeAbortController(id, queueId);\n        this.jobIds.delete(id);\n        return;\n      } catch (error) {\n        await incrementJobAttemptInDatabase(id);\n        if (abortController.signal.aborted) {\n          this.logger.error(`Abort signal following error in ${type} job #${id} in queue ${queueId} attempt ${attempt}`);\n          this.emit('error', error);\n          this.emit('fatalError', { id, queueId, error });\n          await markJobCleanupInDatabase(id);\n          this.removeAbortController(id, queueId);\n          this.jobIds.delete(id);\n          this.startCleanup(id, queueId, args, type);\n          return;\n        }\n        if (error.name === 'FatalError') {\n          this.logger.error(`Fatal error in ${type} job #${id} in queue ${queueId} attempt ${attempt}`);\n          this.emit('error', error);\n          this.emit('fatalError', { id, queueId, error });\n          this.jobIds.delete(id);\n          this.removeAbortController(id, queueId);\n          await this.abortQueue(queueId);\n          return;\n        }\n        const retryDelay = await this.getRetryJobDelay(type, attempt, error);\n        if (retryDelay === false) {\n          this.logger.error(`Error in ${type} job #${id} in queue ${queueId} attempt ${attempt} with no additional attempts requested`);\n          this.emit('error', error);\n          this.emit('fatalError', { id, queueId, error });\n          this.jobIds.delete(id);\n          this.removeAbortController(id, queueId);\n          await this.abortQueue(queueId);\n          return;\n        }\n        this.logger.error(`Error in ${type} job #${id} in queue ${queueId} attempt ${attempt}, retrying ${retryDelay > 0 ? `in ${retryDelay}ms'}` : 'immediately'}`);\n        this.emit('error', error);\n        if (retryDelay > 0) {\n          this.emit('retryDelay', { id, queueId, retryDelay });\n          const newStartAfter = Date.now() + retryDelay;\n          await markJobStartAfterInDatabase(id, newStartAfter);\n          this.jobIds.delete(id);\n          this.startErrorHandler(id, queueId, args, type, attempt, newStartAfter);\n        } else {\n          this.jobIds.delete(id);\n          this.startErrorHandler(id, queueId, args, type, attempt, startAfter);\n        }\n      }\n    };\n    this.addToQueue(queueId, priority, run);\n    this.emit('dequeue', { id });\n  }\n\n  async handlePortMessage(event:MessageEvent) {\n    if (!(event instanceof MessageEvent)) {\n      return;\n    }\n    const { data } = event;\n    if (!data || typeof data !== 'object') {\n      this.logger.warn('Invalid message data');\n      this.logger.warnObject(event);\n      return;\n    }\n    const { type, args } = data;\n    if (typeof type !== 'string') {\n      this.logger.warn('Unknown message type');\n      this.logger.warnObject(event);\n      return;\n    }\n    if (!Array.isArray(args)) {\n      this.logger.warn('Unknown arguments type');\n      this.logger.warnObject(event);\n      return;\n    }\n    const port = this.port;\n    switch (type) {\n      case 'unlink':\n        this.logger.warn('Unlinking worker interface');\n        if (port instanceof MessagePort) {\n          port.onmessage = null;\n          delete this.port;\n        }\n        return;\n      case 'jobAdd':\n        jobEmitter.emit('jobAdd', ...args);\n        return;\n      case 'jobDelete':\n        jobEmitter.emit('jobDelete', ...args);\n        return;\n      case 'jobUpdate':\n        jobEmitter.emit('jobUpdate', ...args);\n        return;\n      case 'jobsClear':\n        jobEmitter.emit('jobsClear', ...args);\n        return;\n      default:\n        break;\n    }\n    const [requestId, ...requestArgs] = args;\n    if (typeof requestId !== 'number') {\n      throw new Error('Request arguments should start with a requestId number');\n    }\n    switch (type) {\n      case 'clear':\n        try {\n          await this.clear();\n          this.emit('clearComplete', requestId);\n        } catch (error) {\n          this.emit('clearError', requestId, error);\n          this.logger.error('Unable to handle clear message');\n          this.emit('error', error);\n        }\n        break;\n      case 'abortQueue':\n        try {\n          const [queueId] = requestArgs;\n          if (typeof queueId !== 'string') {\n            throw new Error(`Invalid \"queueId\" argument with type ${typeof queueId}, should be type string`);\n          }\n          await this.abortQueue(queueId);\n          this.emit('abortQueueComplete', requestId);\n        } catch (error) {\n          this.emit('abortQueueError', requestId, error);\n          this.logger.error('Unable to handle abort queue message');\n          this.emit('error', error);\n        }\n        break;\n      case 'dequeue':\n        try {\n          await this.dequeue();\n          this.emit('dequeueComplete', requestId);\n        } catch (error) {\n          this.emit('dequeueError', requestId, error);\n          this.logger.error('Unable to handle dequeue message');\n          this.emit('error', error);\n        }\n        break;\n      case 'enableStartOnJob':\n        try {\n          this.enableStartOnJob();\n          this.emit('enableStartOnJobComplete', requestId);\n        } catch (error) {\n          this.emit('enableStartOnJobError', requestId, error);\n          this.logger.error('Unable to handle enableStartOnJob message');\n          this.emit('error', error);\n        }\n        break;\n      case 'disableStartOnJob':\n        try {\n          this.disableStartOnJob();\n          this.emit('disableStartOnJobComplete', requestId);\n        } catch (error) {\n          this.emit('disableStartOnJobError', requestId, error);\n          this.logger.error('Unable to handle disableStartOnJob message');\n          this.emit('error', error);\n        }\n        break;\n      case 'getQueueIds':\n        try {\n          const queueIds = await this.getQueueIds();\n          this.emit('getQueuesComplete', requestId, [...queueIds]);\n        } catch (error) {\n          this.emit('getQueuesError', requestId, error);\n          this.logger.error('Unable to handle getQueueIds message');\n          this.emit('error', error);\n        }\n        break;\n      case 'idle':\n        try {\n          const [maxDuration, start] = requestArgs;\n          if (typeof maxDuration !== 'number') {\n            throw new Error(`Invalid \"queueId\" argument with type ${typeof maxDuration}, should be type number`);\n          }\n          if (typeof start !== 'number') {\n            throw new Error(`Invalid \"queueId\" argument with type ${typeof start}, should be type number`);\n          }\n          await this.onIdle(maxDuration - (Date.now() - start));\n          this.emit('idleComplete', requestId);\n        } catch (error) {\n          this.emit('idleError', requestId, error);\n          this.logger.error('Unable to handle idle message');\n          this.emit('error', error);\n        }\n        break;\n      default:\n        this.logger.warn(`Unknown worker interface message type ${type}`);\n    }\n  }\n\n  listenForServiceWorkerInterface() {\n    let activeEmitCallback;\n    let handleJobAdd;\n    let handleJobDelete;\n    let handleJobUpdate;\n    let handleJobsClear;\n\n    self.addEventListener('sync', (event) => {\n      this.logger.info(`SyncManager event ${event.tag}${event.lastChance ? ', last chance' : ''}`);\n      if (event.tag === 'syncManagerOnIdle') {\n        this.logger.info('Starting SyncManager handler');\n        this.emit('syncManagerOnIdle');\n        event.waitUntil(this.onIdle().catch((error) => {\n          this.logger.error(`SyncManager event handler failed${event.lastChance ? ' on last chance' : ''}`);\n          this.logger.errorStack(error);\n        }));\n      } else {\n        this.logger.warn(`Received unknown SyncManager event tag ${event.tag}`);\n      }\n    });\n\n    self.addEventListener('message', (event:ExtendableMessageEvent) => {\n      if (!(event instanceof ExtendableMessageEvent)) {\n        return;\n      }\n      const { data } = event;\n      if (!data || typeof data !== 'object') {\n        return;\n      }\n      const { type } = data;\n      if (type !== 'BATTERY_QUEUE_WORKER_INITIALIZATION') {\n        return;\n      }\n      if (!Array.isArray(event.ports)) {\n        return;\n      }\n      const port = event.ports[0];\n      if (!(port instanceof MessagePort)) {\n        return;\n      }\n      this.emitCallbacks = this.emitCallbacks.filter((x) => x !== activeEmitCallback);\n      const previousPort = this.port;\n      if (previousPort instanceof MessagePort) {\n        this.logger.info('Closing previous worker interface');\n        previousPort.close();\n      }\n      if (typeof handleJobAdd === 'function') {\n        localJobEmitter.removeListener('jobAdd', handleJobAdd);\n      }\n      if (typeof handleJobDelete === 'function') {\n        localJobEmitter.removeListener('jobDelete', handleJobDelete);\n      }\n      if (typeof handleJobUpdate === 'function') {\n        localJobEmitter.removeListener('jobUpdate', handleJobUpdate);\n      }\n      if (typeof handleJobsClear === 'function') {\n        localJobEmitter.removeListener('jobsClear', handleJobsClear);\n      }\n      port.postMessage({ type: 'BATTERY_QUEUE_WORKER_CONFIRMATION' });\n      this.logger.info('Linked to worker interface');\n      port.onmessage = this.handlePortMessage.bind(this);\n\n      handleJobAdd = (...args:Array<any>) => {\n        port.postMessage({ type: 'jobAdd', args });\n      };\n      handleJobDelete = (...args:Array<any>) => {\n        port.postMessage({ type: 'jobDelete', args });\n      };\n      handleJobUpdate = (...args:Array<any>) => {\n        port.postMessage({ type: 'jobUpdate', args });\n      };\n      handleJobsClear = (...args:Array<any>) => {\n        port.postMessage({ type: 'jobsClear', args });\n      };\n      localJobEmitter.addListener('jobAdd', handleJobAdd);\n      localJobEmitter.addListener('jobDelete', handleJobDelete);\n      localJobEmitter.addListener('jobUpdate', handleJobUpdate);\n      localJobEmitter.addListener('jobsClear', handleJobsClear);\n      const emitCallback = (t:string, args:Array<any>) => {\n        port.postMessage({ type: t, args });\n      };\n      activeEmitCallback = emitCallback;\n      this.emitCallbacks.push(emitCallback);\n      this.port = port;\n    });\n    self.addEventListener('messageerror', (event:MessageEvent) => {\n      this.logger.error('Service worker interface message error');\n      this.logger.errorObject(event);\n    });\n  }\n}\n\n"],"file":"queue.js"}