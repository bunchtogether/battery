{"version":3,"sources":["../../src/queue.js"],"names":["PQueue","EventEmitter","makeLogger","jobEmitter","localJobEmitter","clearDatabase","dequeueFromDatabase","dequeueFromDatabaseNotIn","incrementJobAttemptInDatabase","incrementCleanupAttemptInDatabase","markJobCompleteInDatabase","markJobCompleteThenRemoveFromDatabase","markJobPendingInDatabase","markJobErrorInDatabase","markJobStartAfterInDatabase","markJobAsAbortedOrRemoveFromDatabase","markCleanupStartAfterInDatabase","markQueuePendingInDatabase","updateCleanupValuesInDatabase","getCleanupFromDatabase","removePathFromCleanupDataInDatabase","getJobFromDatabase","markQueueForCleanupInDatabase","markQueueForCleanupAndRemoveInDatabase","markQueueJobsGreaterThanIdCleanupAndRemoveInDatabase","removeCleanupFromDatabase","restoreJobToDatabaseForCleanupAndRemove","getUnloadDataFromDatabase","clearUnloadDataInDatabase","getGreatestJobIdFromQueueInDatabase","JOB_PENDING_STATUS","JOB_ERROR_STATUS","JOB_CLEANUP_STATUS","JOB_CLEANUP_AND_REMOVE_STATUS","AbortError","CLEANUP_JOB_TYPE","BASE_PRIORITY","Math","floor","Number","MAX_SAFE_INTEGER","HIGH_PRIORITY_OFFSET","BatteryQueue","constructor","options","stopped","dequeueQueue","concurrency","unloadQueue","handlerMap","Map","cleanupMap","durationEstimateHandlerMap","durationEstimateMap","durationEstimateUpdaterMap","retryJobDelayMap","retryCleanupDelayMap","queueCurrentJobTypeMap","queueMap","jobIds","Set","abortControllerMap","isClearing","isUnloading","ports","logger","addListener","error","errorStack","abortJob","queueId","jobId","queueAbortControllerMap","get","abortController","abort","enableStartOnJob","disableStartOnJob","didRequestJobAddDequeue","handleJobAdd","self","queueMicrotask","dequeue","handleJobDelete","id","handleJobUpdate","type","status","didAbort","then","job","has","args","prioritize","startCleanup","catch","removeListener","emit","port","keys","postMessage","getQueueIds","queueIds","setUnload","handleUnload","Error","removeUnload","setRetryJobDelay","retryJobDelayFunction","set","removeRetryJobDelay","delete","getRetryJobDelay","attempt","result","retryDelayError","setRetryCleanupDelay","retryCleanupDelayFunction","removeRetryCleanupDelay","getRetryCleanupDelay","setHandler","handler","removeHandler","setCleanup","cleanup","removeCleanup","setDurationEstimateHandler","timeEstimationHandler","removeDurationEstimateHandler","addDurationEstimate","duration","pending","queueDurationEstimateMap","emitDurationEstimate","removeDurationEstimate","updateDurationEstimates","updateDurationEstimate","values","getDurationEstimate","totalDuration","totalPending","setCurrentJobType","getCurrentJobType","clear","onIdle","start","addToQueue","priority","autoStart","func","queue","add","newQueue","on","undefined","Promise","resolve","timeout","setTimeout","handleClearing","handleActive","clearTimeout","size","abortQueue","info","jobs","startJobs","retryQueue","lastJobId","abortAndRemoveQueue","abortAndRemoveQueueJobsGreaterThanId","bind","newJobs","Array","isArray","startAfter","pause","startJob","startErrorHandler","stop","stopPromise","idlePromises","interval","setInterval","isPaused","push","finally","clearInterval","all","maxDuration","onIdlePromise","Date","now","warn","jobsInterval","length","getAbortController","newAbortController","AbortController","removeAbortController","runCleanup","cleanupJob","data","delay","toLocaleString","path","name","retryCleanupDelay","newStartAfter","run","signal","aborted","delayJobStart","reject","removeEventListener","handleAbort","addEventListener","updateCleanupData","updateDuration","durationEstimateHandler","durationEstimate","handlerDidRun","shouldKeepJobInDatabase","estimatedToActualRatio","round","retryDelay","handlePortMessage","event","MessageEvent","portHandlers","warnObject","t","messageArgs","heartbeatExpiresTimeout","heartbeatExpiresTimestamp","unloadClient","removePort","requestId","requestArgs","currentJobType","runUnloadHandlers","handleHeartbeat","unloadData","handleJobsClear","onmessage","onmessageerror","close","listenForServiceWorkerInterface","tag","lastChance","waitUntil","ExtendableMessageEvent","MessagePort","_event","errorObject"],"mappings":"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","sourcesContent":["// @flow\n\nimport PQueue from 'p-queue';\nimport EventEmitter from 'events';\nimport type { Logger } from './logger';\nimport makeLogger from './logger';\nimport type { Job } from './database';\nimport {\n  jobEmitter,\n  localJobEmitter,\n  clearDatabase,\n  dequeueFromDatabase,\n  dequeueFromDatabaseNotIn,\n  incrementJobAttemptInDatabase,\n  incrementCleanupAttemptInDatabase,\n  markJobCompleteInDatabase,\n  markJobCompleteThenRemoveFromDatabase,\n  markJobPendingInDatabase,\n  markJobErrorInDatabase,\n  markJobStartAfterInDatabase,\n  markJobAsAbortedOrRemoveFromDatabase,\n  markCleanupStartAfterInDatabase,\n  markQueuePendingInDatabase,\n  updateCleanupValuesInDatabase,\n  getCleanupFromDatabase,\n  removePathFromCleanupDataInDatabase,\n  getJobFromDatabase,\n  markQueueForCleanupInDatabase,\n  markQueueForCleanupAndRemoveInDatabase,\n  markQueueJobsGreaterThanIdCleanupAndRemoveInDatabase,\n  removeCleanupFromDatabase,\n  restoreJobToDatabaseForCleanupAndRemove,\n  getUnloadDataFromDatabase,\n  clearUnloadDataInDatabase,\n  getGreatestJobIdFromQueueInDatabase,\n  JOB_PENDING_STATUS,\n  JOB_ERROR_STATUS,\n  JOB_CLEANUP_STATUS,\n  JOB_CLEANUP_AND_REMOVE_STATUS,\n} from './database';\nimport { AbortError } from './errors';\n\nexport const CLEANUP_JOB_TYPE = 'CLEANUP_JOB_TYPE';\n\nconst BASE_PRIORITY = Math.floor(Number.MAX_SAFE_INTEGER / 2);\nconst HIGH_PRIORITY_OFFSET = Math.floor(Number.MAX_SAFE_INTEGER / 8);\n\ntype HandlerFunction = (Array<any>, AbortSignal, (Object) => Promise<void>, (number, number) => void) => Promise<void | false>;\ntype CleanupFunction = (Object | void, Array<any>, Array<string> => Promise<void>) => Promise<void>;\ntype DurationEstimateFunction = (Array<any>) => number;\ntype RetryDelayFunction = (number, Error) => number | false | Promise<number | false>;\ntype UnloadFunction = (Object | void) => Promise<void> | void;\n\ntype Options = {\n  logger?: Logger,\n  startOnJob?: boolean\n};\n\nexport default class BatteryQueue extends EventEmitter {\n  declare logger: Logger;\n  declare dequeueQueue: PQueue;\n  declare unloadQueue: PQueue;\n  declare handlerMap: Map<string, HandlerFunction>;\n  declare retryJobDelayMap: Map<string, RetryDelayFunction>;\n  declare retryCleanupDelayMap: Map<string, RetryDelayFunction>;\n  declare cleanupMap: Map<string, CleanupFunction>;\n  declare queueCurrentJobTypeMap: Map<string, string>;\n  declare durationEstimateHandlerMap: Map<string, DurationEstimateFunction>;\n  declare durationEstimateMap: Map<string, Map<number, [number, number]>>;\n  declare durationEstimateUpdaterMap: Map<number, () => number>;\n  declare queueMap: Map<string, PQueue>;\n  declare handleUnload: void | UnloadFunction;\n  declare abortControllerMap: Map<string, Map<number, AbortController>>;\n  declare isClearing: boolean;\n  declare isUnloading: boolean;\n  declare onIdlePromise: Promise<void> | void;\n  declare stopPromise: Promise<void> | void;\n  declare jobIds: Set<number>;\n  declare heartbeatExpiresTimestamp: number | void;\n\n  declare ports: Map<MessagePort, {\n    handleJobAdd: (Event) => void,\n    handleJobUpdate: (Event) => void,\n    handleJobDelete: (Event) => void,\n    handleJobsClear: (Event) => void,\n    heartbeatExpiresTimeout?: TimeoutID\n  }>;\n\n  declare handleJobAdd: void | () => void;\n  declare handleJobUpdate: void | (number, string, string, number) => void;\n  declare handleJobDelete: void | (number, string) => void;\n  declare stopped: boolean;\n\n  constructor(options?: Options = {}) {\n    super();\n    this.stopped = false;\n    this.dequeueQueue = new PQueue({ concurrency: 1 });\n    this.unloadQueue = new PQueue({ concurrency: 1 });\n    this.handlerMap = new Map();\n    this.cleanupMap = new Map();\n    this.durationEstimateHandlerMap = new Map();\n    this.durationEstimateMap = new Map();\n    this.durationEstimateUpdaterMap = new Map();\n    this.retryJobDelayMap = new Map();\n    this.retryCleanupDelayMap = new Map();\n    this.queueCurrentJobTypeMap = new Map();\n    this.queueMap = new Map();\n    this.jobIds = new Set();\n    this.durationEstimateUpdaterMap = new Map();\n    this.abortControllerMap = new Map();\n    this.isClearing = false;\n    this.isUnloading = false;\n    this.ports = new Map();\n    this.logger = options.logger || makeLogger('Battery Queue');\n    this.addListener('error', (error) => {\n      this.logger.errorStack(error);\n    });\n  }\n\n  abortJob(queueId:string, jobId:number) {\n    const queueAbortControllerMap = this.abortControllerMap.get(queueId);\n    if (typeof queueAbortControllerMap !== 'undefined') {\n      const abortController = queueAbortControllerMap.get(jobId);\n      if (typeof abortController !== 'undefined') {\n        abortController.abort();\n        return true;\n      }\n    }\n    return false;\n  }\n\n  enableStartOnJob() {\n    this.disableStartOnJob(); // Prevent handlers from being added multiple times\n    let didRequestJobAddDequeue = false;\n    const handleJobAdd = () => {\n      if (didRequestJobAddDequeue) {\n        return;\n      }\n      didRequestJobAddDequeue = true;\n      self.queueMicrotask(() => {\n        didRequestJobAddDequeue = false;\n        this.dequeue();\n      });\n    };\n    jobEmitter.addListener('jobAdd', handleJobAdd);\n    this.handleJobAdd = handleJobAdd;\n    const handleJobDelete = (id:number, queueId:string) => {\n      this.abortJob(queueId, id);\n    };\n    jobEmitter.addListener('jobDelete', handleJobDelete);\n    this.handleJobDelete = handleJobDelete;\n\n    const handleJobUpdate = (id:number, queueId:string, type:string, status:number) => {\n      if (status !== JOB_CLEANUP_AND_REMOVE_STATUS && status !== JOB_CLEANUP_STATUS) {\n        return;\n      }\n      const didAbort = this.abortJob(queueId, id);\n      if (didAbort) {\n        return;\n      }\n      getJobFromDatabase(id).then((job:Job | void) => {\n        if (typeof job === 'undefined') {\n          this.logger.error(`Unable to cleanup and remove ${type} job #${id} in queue ${queueId}, job does not exist`);\n          return;\n        }\n        if (this.jobIds.has(id)) {\n          return;\n        }\n        const { args, prioritize } = job;\n        this.startCleanup(id, queueId, args, type, true, prioritize);\n      }).catch((error) => {\n        this.logger.error(`Error while cleaning up and removing ${type} job #${id} in queue ${queueId}`);\n        this.logger.errorStack(error);\n      });\n    };\n    jobEmitter.addListener('jobUpdate', handleJobUpdate);\n    this.handleJobUpdate = handleJobUpdate;\n  }\n\n  disableStartOnJob() {\n    const handleJobAdd = this.handleJobAdd;\n    if (typeof handleJobAdd === 'function') {\n      jobEmitter.removeListener('jobAdd', handleJobAdd);\n      delete this.handleJobAdd;\n    }\n    const handleJobUpdate = this.handleJobUpdate;\n    if (typeof handleJobUpdate === 'function') {\n      jobEmitter.removeListener('jobUpdate', handleJobUpdate);\n      delete this.handleJobUpdate;\n    }\n    const handleJobDelete = this.handleJobDelete;\n    if (typeof handleJobDelete === 'function') {\n      jobEmitter.removeListener('jobDelete', handleJobDelete);\n      delete this.handleJobDelete;\n    }\n  }\n\n  emit(type:string, ...args:Array<any>) {\n    for (const port of this.ports.keys()) {\n      port.postMessage({ type, args });\n    }\n    return super.emit(type, ...args);\n  }\n\n  async getQueueIds() {\n    await this.dequeue();\n    const queueIds:Set<string> = new Set(this.queueMap.keys());\n    return queueIds;\n  }\n\n  setUnload(handleUnload:UnloadFunction) {\n    if (typeof this.handleUnload === 'function') {\n      throw new Error('Unload handler already exists');\n    }\n    this.handleUnload = handleUnload;\n  }\n\n  removeUnload() {\n    if (typeof this.handleUnload !== 'function') {\n      throw new Error('Unload handler does not exist');\n    }\n    delete this.handleUnload;\n  }\n\n  setRetryJobDelay(type:string, retryJobDelayFunction:RetryDelayFunction) {\n    if (this.retryJobDelayMap.has(type)) {\n      throw new Error(`Retry job delay handler for type \"${type}\" already exists`);\n    }\n    this.retryJobDelayMap.set(type, retryJobDelayFunction);\n  }\n\n  removeRetryJobDelay(type:string) {\n    if (!this.retryJobDelayMap.has(type)) {\n      throw new Error(`Retry job delay handler for type \"${type}\" does not exist`);\n    }\n    this.retryJobDelayMap.delete(type);\n  }\n\n  async getRetryJobDelay(type:string, attempt: number, error:Error) {\n    const retryJobDelayFunction = this.retryJobDelayMap.get(type);\n    if (typeof retryJobDelayFunction !== 'function') {\n      return false;\n    }\n    let result = false;\n    try {\n      result = await retryJobDelayFunction(attempt, error);\n    } catch (retryDelayError) {\n      this.logger.error(`Error in retry job delay handler for type \"${type}\" on attempt ${attempt}`);\n      this.emit('error', retryDelayError);\n      return false;\n    }\n    if (typeof result !== 'number' && result !== false) {\n      throw new Error(`Retry job delay function for type \"${type}\" returned invalid response, should be a number (milliseconds) or false`);\n    }\n    return result;\n  }\n\n  setRetryCleanupDelay(type:string, retryCleanupDelayFunction:RetryDelayFunction) {\n    if (this.retryCleanupDelayMap.has(type)) {\n      throw new Error(`Retry cleanup delay handler for type \"${type}\" already exists`);\n    }\n    this.retryCleanupDelayMap.set(type, retryCleanupDelayFunction);\n  }\n\n  removeRetryCleanupDelay(type:string) {\n    if (!this.retryCleanupDelayMap.has(type)) {\n      throw new Error(`Retry cleanup delay handler for type \"${type}\" does not exist`);\n    }\n    this.retryCleanupDelayMap.delete(type);\n  }\n\n  async getRetryCleanupDelay(type:string, attempt: number, error:Error) {\n    const retryCleanupDelayFunction = this.retryCleanupDelayMap.get(type);\n    if (typeof retryCleanupDelayFunction !== 'function') {\n      return false;\n    }\n    let result = false;\n    try {\n      result = await retryCleanupDelayFunction(attempt, error);\n    } catch (retryDelayError) {\n      this.logger.error(`Error in retry cleanup delay handler for type \"${type}\" on attempt ${attempt}`);\n      this.emit('error', retryDelayError);\n      return false;\n    }\n    if (typeof result !== 'number' && result !== false) {\n      throw new Error(`Retry cleanup delay function for type \"${type}\" returned invalid response, should be a number (milliseconds) or false`);\n    }\n    return result;\n  }\n\n  setHandler(type:string, handler: HandlerFunction) {\n    if (this.handlerMap.has(type)) {\n      throw new Error(`Handler for type \"${type}\" already exists`);\n    }\n    this.handlerMap.set(type, handler);\n  }\n\n  removeHandler(type:string) {\n    if (!this.handlerMap.has(type)) {\n      throw new Error(`Handler for type \"${type}\" does not exist`);\n    }\n    this.handlerMap.delete(type);\n  }\n\n  setCleanup(type:string, cleanup: CleanupFunction) {\n    if (this.cleanupMap.has(type)) {\n      throw new Error(`Cleanup for type \"${type}\" already exists`);\n    }\n    this.cleanupMap.set(type, cleanup);\n  }\n\n  removeCleanup(type:string) {\n    if (!this.cleanupMap.has(type)) {\n      throw new Error(`Cleanup for type \"${type}\" does not exist`);\n    }\n    this.cleanupMap.delete(type);\n  }\n\n  setDurationEstimateHandler(type:string, timeEstimationHandler: DurationEstimateFunction) {\n    if (this.durationEstimateHandlerMap.has(type)) {\n      throw new Error(`Time estimation handler for type \"${type}\" already exists`);\n    }\n    this.durationEstimateHandlerMap.set(type, timeEstimationHandler);\n  }\n\n  removeDurationEstimateHandler(type:string) {\n    if (!this.durationEstimateHandlerMap.has(type)) {\n      throw new Error(`Time estimation handler for type \"${type}\" does not exist`);\n    }\n    this.durationEstimateHandlerMap.delete(type);\n  }\n\n  addDurationEstimate(queueId:string, jobId:number, duration:number, pending:number) {\n    const queueDurationEstimateMap = this.durationEstimateMap.get(queueId);\n    if (typeof queueDurationEstimateMap === 'undefined') {\n      this.durationEstimateMap.set(queueId, new Map([[jobId, [duration, pending]]]));\n      this.emitDurationEstimate(queueId);\n      return;\n    }\n    queueDurationEstimateMap.set(jobId, [duration, pending]);\n    this.emitDurationEstimate(queueId);\n  }\n\n  removeDurationEstimate(queueId:string, jobId?:number) {\n    if (typeof jobId !== 'number') {\n      this.durationEstimateMap.delete(queueId);\n      this.emitDurationEstimate(queueId);\n      return;\n    }\n    const queueDurationEstimateMap = this.durationEstimateMap.get(queueId);\n    if (typeof queueDurationEstimateMap === 'undefined') {\n      this.emitDurationEstimate(queueId);\n      return;\n    }\n    queueDurationEstimateMap.delete(jobId);\n    this.emitDurationEstimate(queueId);\n  }\n\n  updateDurationEstimates() {\n    for (const updateDurationEstimate of this.durationEstimateUpdaterMap.values()) {\n      updateDurationEstimate();\n    }\n  }\n\n  getDurationEstimate(queueId:string) {\n    const queueDurationEstimateMap = this.durationEstimateMap.get(queueId);\n    let totalDuration = 0;\n    let totalPending = 0;\n    if (typeof queueDurationEstimateMap === 'undefined') {\n      return [totalDuration, totalPending];\n    }\n    for (const [duration, pending] of queueDurationEstimateMap.values()) {\n      totalDuration += duration;\n      totalPending += pending;\n    }\n    return [totalDuration, totalPending];\n  }\n\n  emitDurationEstimate(queueId:string) {\n    const [totalDuration, totalPending] = this.getDurationEstimate(queueId);\n    this.emit('queueDuration', queueId, totalDuration, totalPending);\n  }\n\n  setCurrentJobType(queueId:string, type?:void | string) {\n    if (typeof type === 'string') {\n      this.queueCurrentJobTypeMap.set(queueId, type);\n    } else {\n      this.queueCurrentJobTypeMap.delete(queueId);\n    }\n    this.emit('queueJobType', queueId, type);\n  }\n\n  getCurrentJobType(queueId:string) {\n    return this.queueCurrentJobTypeMap.get(queueId);\n  }\n\n  async clear() {\n    this.isClearing = true;\n    await this.onIdle();\n    this.emit('clearing');\n    await clearDatabase();\n    this.dequeueQueue.start();\n    this.isClearing = false;\n  }\n\n  addToQueue(queueId:string, priority: number, autoStart: boolean, func: () => Promise<void>) {\n    if (this.stopped) {\n      return;\n    }\n    const queue = this.queueMap.get(queueId);\n    if (typeof queue !== 'undefined') {\n      queue.add(func, { priority });\n      return;\n    }\n    const newQueue = new PQueue({ concurrency: 1, autoStart });\n    this.queueMap.set(queueId, newQueue);\n    newQueue.add(func, { priority });\n    newQueue.on('idle', async () => {\n      this.setCurrentJobType(queueId, undefined);\n      if (!this.isClearing) {\n        await new Promise((resolve) => {\n          const timeout = setTimeout(() => {\n            this.removeListener('clearing', handleClearing);\n            newQueue.removeListener('active', handleActive);\n            resolve();\n          }, 5000);\n          const handleClearing = () => {\n            clearTimeout(timeout);\n            this.removeListener('clearing', handleClearing);\n            newQueue.removeListener('active', handleActive);\n            resolve();\n          };\n          const handleActive = () => {\n            clearTimeout(timeout);\n            this.removeListener('clearing', handleClearing);\n            newQueue.removeListener('active', handleActive);\n            resolve();\n          };\n          this.addListener('clearing', handleClearing);\n          newQueue.addListener('active', handleActive);\n        });\n      }\n      if (newQueue.pending > 0 || newQueue.size > 0) {\n        return;\n      }\n      this.queueMap.delete(queueId);\n      this.emit('queueInactive', queueId);\n    });\n    this.emit('queueActive', queueId);\n  }\n\n  async abortQueue(queueId: string) {\n    this.logger.info(`Aborting queue ${queueId}`);\n    this.removeDurationEstimate(queueId);\n    // Abort active jobs\n    const queueAbortControllerMap = this.abortControllerMap.get(queueId);\n    if (typeof queueAbortControllerMap !== 'undefined') {\n      for (const abortController of queueAbortControllerMap.values()) {\n        abortController.abort();\n      }\n    }\n    // Changes:\n    // * JOB_ERROR_STATUS -> JOB_CLEANUP_STATUS\n    // * JOB_COMPLETE_STATUS -> JOB_CLEANUP_STATUS\n    // * JOB_CLEANUP_AND_REMOVE_STATUS -> JOB_CLEANUP_AND_REMOVE_STATUS\n    // * JOB_PENDING_STATUS -> JOB_ABORTED_STATUS\n    const jobs = await markQueueForCleanupInDatabase(queueId);\n    await this.startJobs(jobs);\n  }\n\n  async retryQueue(queueId: string) {\n    this.logger.info(`Retrying queue ${queueId}`);\n    const lastJobId = await getGreatestJobIdFromQueueInDatabase(queueId);\n    const priority = BASE_PRIORITY - lastJobId - 0.5;\n    this.addToQueue(queueId, priority, true, async () => {\n      // Resets job attempts. Changes:\n      // * JOB_ABORTED_STATUS -> JOB_PENDING_STATUS\n      // * JOB_ERROR_STATUS -> JOB_ERROR_STATUS\n      // * JOB_CLEANUP_STATUS -> JOB_CLEANUP_STATUS\n      // * JOB_COMPLETE_STATUS -> JOB_COMPLETE_STATUS\n      // * JOB_CLEANUP_AND_REMOVE_STATUS -> JOB_CLEANUP_AND_REMOVE_STATUS\n      const jobs = await markQueuePendingInDatabase(queueId);\n      await this.startJobs(jobs);\n    });\n  }\n\n  async abortAndRemoveQueue(queueId: string) {\n    this.logger.info(`Aborting and removing queue ${queueId}`);\n    this.removeDurationEstimate(queueId);\n    // Abort active jobs\n    const queueAbortControllerMap = this.abortControllerMap.get(queueId);\n    if (typeof queueAbortControllerMap !== 'undefined') {\n      for (const abortController of queueAbortControllerMap.values()) {\n        abortController.abort();\n      }\n    }\n    // Changes:\n    // * JOB_ERROR_STATUS -> JOB_CLEANUP_AND_REMOVE_STATUS\n    // * JOB_COMPLETE_STATUS -> JOB_CLEANUP_AND_REMOVE_STATUS\n    // * JOB_CLEANUP_STATUS -> JOB_CLEANUP_AND_REMOVE_STATUS\n    // * JOB_CLEANUP_AND_REMOVE_STATUS -> JOB_CLEANUP_AND_REMOVE_STATUS\n    // * Removes other statuses\n    const jobs = await markQueueForCleanupAndRemoveInDatabase(queueId);\n    await this.startJobs(jobs);\n    this.emit('abortAndRemoveQueue', queueId);\n  }\n\n  async abortAndRemoveQueueJobsGreaterThanId(queueId: string, id: number) {\n    this.logger.info(`Aborting and removing jobs with ID greater than ${id} in queue ${queueId}`);\n    // Abort active jobs\n    const queueAbortControllerMap = this.abortControllerMap.get(queueId);\n    if (typeof queueAbortControllerMap !== 'undefined') {\n      for (const [jobId, abortController] of queueAbortControllerMap) {\n        if (jobId > id) {\n          this.removeDurationEstimate(queueId, jobId);\n          abortController.abort();\n        }\n      }\n    }\n    // Changes:\n    // * JOB_ERROR_STATUS -> JOB_CLEANUP_AND_REMOVE_STATUS\n    // * JOB_COMPLETE_STATUS -> JOB_CLEANUP_AND_REMOVE_STATUS\n    // * JOB_CLEANUP_STATUS -> JOB_CLEANUP_AND_REMOVE_STATUS\n    // * JOB_CLEANUP_AND_REMOVE_STATUS -> JOB_CLEANUP_AND_REMOVE_STATUS\n    // * Removes other statuses\n    const jobs = await markQueueJobsGreaterThanIdCleanupAndRemoveInDatabase(queueId, id);\n    await this.startJobs(jobs);\n    this.emit('abortAndRemoveQueueJobs', queueId, id);\n  }\n\n  async dequeue():Promise<void> {\n    if (this.stopped) {\n      return;\n    }\n    if (this.dequeueQueue.size === 0) {\n      // Add a subsequent dequeue\n      this.dequeueQueue.add(this.startJobs.bind(this));\n    }\n    await this.dequeueQueue.onIdle();\n  }\n\n  async startJobs(newJobs?:Array<Job>) { // eslint-disable-line consistent-return\n    const jobs = Array.isArray(newJobs) ? newJobs : await dequeueFromDatabaseNotIn([...this.jobIds.keys()]);\n    const queueIds = new Set();\n    for (const { id, queueId, args, type, status, attempt, startAfter, prioritize } of jobs) {\n      if (this.jobIds.has(id)) {\n        continue;\n      }\n      // Pause queues before adding items into them to avoid starting things out of priority\n      if (!queueIds.has(queueId)) {\n        const queue = this.queueMap.get(queueId);\n        if (typeof queue !== 'undefined') {\n          queue.pause();\n        }\n        queueIds.add(queueId);\n      }\n      if (status === JOB_PENDING_STATUS) {\n        this.startJob(id, queueId, args, type, attempt + 1, startAfter, false, prioritize);\n      } else if (status === JOB_ERROR_STATUS) {\n        this.startErrorHandler(id, queueId, args, type, attempt, startAfter, false, prioritize);\n      } else if (status === JOB_CLEANUP_STATUS) {\n        this.startCleanup(id, queueId, args, type, false, prioritize);\n      } else if (status === JOB_CLEANUP_AND_REMOVE_STATUS) {\n        this.startCleanup(id, queueId, args, type, false, prioritize);\n      } else {\n        throw new Error(`Unknown job status ${status} in job ${id} of queue ${queueId}`);\n      }\n    }\n    for (const queueId of queueIds) {\n      const queue = this.queueMap.get(queueId);\n      if (typeof queue !== 'undefined') {\n        queue.start();\n      } else {\n        this.logger.error(`Unable to start queue ${queueId} after dequeue; queue does not exist`);\n      }\n    }\n  }\n\n  async stop() {\n    if (typeof this.stopPromise === 'undefined') {\n      this.stopped = true;\n      this.stopPromise = (async () => {\n        await this.dequeueQueue.onIdle();\n        const idlePromises = [];\n        for (const [queueId, queue] of this.queueMap) {\n          const interval = setInterval(() => {\n            this.logger.info(`Waiting on queue ${queueId} stop() request. Queue ${queue.isPaused ? 'is paused' : 'is not paused'}, with ${queue.pending} ${queue.pending === 1 ? 'job' : 'jobs'} pending and ${queue.size} ${queue.size === 1 ? 'job' : 'jobs'} remaining.`);\n          }, 250);\n          queue.clear();\n          idlePromises.push(queue.onIdle().finally(() => {\n            clearInterval(interval);\n          }));\n        }\n        await Promise.all(idlePromises);\n        this.jobIds.clear();\n        this.abortControllerMap.clear();\n        delete this.stopPromise;\n        this.emit('stop');\n        this.stopped = false;\n      })();\n    }\n    await this.stopPromise;\n  }\n\n  async onIdle(maxDuration?: number) {\n    if (typeof this.onIdlePromise === 'undefined') {\n      this.onIdlePromise = (async () => {\n        const timeout = typeof maxDuration === 'number' ? Date.now() + maxDuration : -1;\n        const start = Date.now();\n        while (true) { // eslint-disable-line no-constant-condition\n          if (timeout !== -1 && Date.now() > timeout) {\n            this.logger.warn(`Idle timeout after ${Date.now() - start}ms`);\n            break;\n          }\n          await this.dequeueQueue.onIdle();\n          for (const [queueId, queue] of this.queueMap) {\n            const interval = setInterval(() => {\n              this.logger.info(`Waiting on queue ${queueId} onIdle() request. Queue ${queue.isPaused ? 'is paused' : 'is not paused'}, with ${queue.pending} ${queue.pending === 1 ? 'job' : 'jobs'} pending and ${queue.size} ${queue.size === 1 ? 'job' : 'jobs'} remaining.`);\n            }, 250);\n            await queue.onIdle();\n            clearInterval(interval);\n          }\n          const jobsInterval = setInterval(() => {\n            this.logger.info('Waiting on jobs');\n          }, 250);\n          const jobs = await dequeueFromDatabase();\n          clearInterval(jobsInterval);\n          if (jobs.length > 0) {\n            const interval = setInterval(() => {\n              this.logger.info('Waiting on dequeue');\n            }, 250);\n            await this.dequeue();\n            clearInterval(interval);\n            continue;\n          }\n          break;\n        }\n        delete this.onIdlePromise;\n        this.emit('idle');\n      })();\n    }\n    await this.onIdlePromise;\n  }\n\n  getAbortController(id:number, queueId:string) {\n    let queueAbortControllerMap = this.abortControllerMap.get(queueId);\n    if (typeof queueAbortControllerMap === 'undefined') {\n      queueAbortControllerMap = new Map();\n      this.abortControllerMap.set(queueId, queueAbortControllerMap);\n    }\n    const abortController = queueAbortControllerMap.get(id);\n    if (typeof abortController !== 'undefined') {\n      return abortController;\n    }\n    const newAbortController = new AbortController();\n    queueAbortControllerMap.set(id, newAbortController);\n    return newAbortController;\n  }\n\n  removeAbortController(id:number, queueId:string) {\n    const queueAbortControllerMap = this.abortControllerMap.get(queueId);\n    if (typeof queueAbortControllerMap === 'undefined') {\n      this.logger.warn(`Abort controller map for ${id} in queue ${queueId} does not exist`);\n      return;\n    }\n    const abortController = queueAbortControllerMap.get(id);\n    if (typeof abortController === 'undefined') {\n      this.logger.warn(`Abort controller for ${id} in queue ${queueId} does not exist`);\n      return;\n    }\n    queueAbortControllerMap.delete(id);\n    if (queueAbortControllerMap.size === 0) {\n      this.abortControllerMap.delete(queueId);\n    }\n  }\n\n  async runCleanup(id:number, queueId:string, args:Array<any>, type:string) {\n    this.emit('cleanupStart', { id });\n    const cleanup = this.cleanupMap.get(type);\n    if (typeof cleanup !== 'function') {\n      this.logger.warn(`No cleanup for job type ${type}`);\n      await removeCleanupFromDatabase(id);\n      this.emit('cleanup', { id });\n      return;\n    }\n    const cleanupJob = await getCleanupFromDatabase(id);\n    const { data, startAfter } = typeof cleanupJob === 'undefined' ? { data: undefined, startAfter: 0 } : cleanupJob;\n    const delay = startAfter - Date.now();\n    if (delay > 0) {\n      this.logger.info(`Delaying retry of ${type} job #${id} cleanup in queue ${queueId} by ${delay}ms to ${new Date(startAfter).toLocaleString()}`);\n      await new Promise((resolve) => setTimeout(resolve, delay));\n    }\n    try {\n      await cleanup(data, args, (path:Array<string>) => removePathFromCleanupDataInDatabase(id, path));\n    } catch (error) {\n      const attempt = await incrementCleanupAttemptInDatabase(id, queueId);\n      if (error.name === 'FatalError') {\n        this.logger.error(`Fatal error in ${type} job #${id} cleanup in queue ${queueId} attempt ${attempt}`);\n        this.emit('error', error);\n        await removeCleanupFromDatabase(id);\n        this.emit('fatalCleanupError', { id, queueId });\n        return;\n      }\n      const retryCleanupDelay = await this.getRetryCleanupDelay(type, attempt, error);\n      if (retryCleanupDelay === false) {\n        this.logger.error(`Error in ${type} job #${id} cleanup in queue ${queueId} attempt ${attempt} with no additional attempts requested`);\n        this.emit('error', error);\n        await removeCleanupFromDatabase(id);\n        this.emit('fatalCleanupError', { id, queueId });\n        return;\n      }\n      this.logger.error(`Error in ${type} job #${id} cleanup in queue ${queueId} attempt ${attempt}, retrying ${retryCleanupDelay > 0 ? `in ${retryCleanupDelay}ms` : 'immediately'}`);\n      this.emit('error', error);\n      if (retryCleanupDelay > 0) {\n        this.emit('retryCleanupDelay', { id, queueId, retryCleanupDelay });\n        const newStartAfter = Date.now() + retryCleanupDelay;\n        await markCleanupStartAfterInDatabase(id, newStartAfter);\n      }\n      await this.runCleanup(id, queueId, args, type);\n      return;\n    }\n    await removeCleanupFromDatabase(id);\n    this.emit('cleanup', { id });\n  }\n\n  startCleanup(id:number, queueId:string, args:Array<any>, type:string, autoStart:boolean, prioritize: boolean) {\n    this.logger.info(`Adding ${type} cleanup job #${id} to queue ${queueId}`);\n    this.jobIds.add(id);\n    this.removeDurationEstimate(queueId, id);\n    const priority = BASE_PRIORITY + id - (prioritize ? HIGH_PRIORITY_OFFSET : 0);\n    const run = async () => {\n      this.setCurrentJobType(queueId, CLEANUP_JOB_TYPE);\n      this.logger.info(`Starting ${type} cleanup #${id} in queue ${queueId}`);\n      await this.runCleanup(id, queueId, args, type);\n      // Job could be marked for removal while cleanup is running\n      await markJobAsAbortedOrRemoveFromDatabase(id);\n      this.jobIds.delete(id);\n      this.logger.info(`Completed ${type} cleanup #${id} in queue ${queueId}`);\n    };\n    this.addToQueue(queueId, priority, autoStart, run);\n  }\n\n  startErrorHandler(id:number, queueId:string, args:Array<any>, type:string, attempt: number, startAfter: number, autoStart:boolean, prioritize: boolean) {\n    this.logger.info(`Adding ${type} error handler job #${id} to queue ${queueId}`);\n    this.jobIds.add(id);\n    const priority = BASE_PRIORITY + id - (prioritize ? HIGH_PRIORITY_OFFSET : 0);\n    const abortController = this.getAbortController(id, queueId);\n    const run = async () => {\n      this.setCurrentJobType(queueId, CLEANUP_JOB_TYPE);\n      this.logger.info(`Starting ${type} error handler #${id} in queue ${queueId}`);\n      await this.runCleanup(id, queueId, args, type);\n      if (abortController.signal.aborted) {\n        // Job could be marked for removal while error handler is running\n        await markJobAsAbortedOrRemoveFromDatabase(id);\n        this.removeAbortController(id, queueId);\n        this.jobIds.delete(id);\n      } else {\n        await markJobPendingInDatabase(id);\n        this.logger.info(`Retrying ${type} job #${id} in queue ${queueId}`);\n        this.emit('retry', { id });\n        this.startJob(id, queueId, args, type, attempt + 1, startAfter, true, prioritize);\n      }\n      this.logger.info(`Completed ${type} error handler #${id} in queue ${queueId}`);\n    };\n    this.addToQueue(queueId, priority, autoStart, run);\n  }\n\n  async delayJobStart(id:number, queueId:string, type:string, signal: AbortSignal, startAfter: number) {\n    if (signal.aborted) {\n      throw new AbortError(`Queue ${queueId} was aborted`);\n    }\n    const duration = startAfter - Date.now();\n    if (duration > 0) {\n      this.logger.info(`Delaying start of ${type} job #${id} in queue ${queueId} by ${duration}ms`);\n      await new Promise((resolve, reject) => {\n        const timeout = setTimeout(() => {\n          signal.removeEventListener('abort', handleAbort);\n          resolve();\n        }, duration);\n        const handleAbort = () => {\n          clearTimeout(timeout);\n          signal.removeEventListener('abort', handleAbort);\n          reject(new AbortError(`Queue ${queueId} was aborted`));\n        };\n        signal.addEventListener('abort', handleAbort);\n      });\n    }\n  }\n\n  startJob(id:number, queueId:string, args:Array<any>, type:string, attempt:number, startAfter: number, autoStart:boolean, prioritize: boolean) {\n    this.logger.info(`Adding ${type} job #${id} to queue ${queueId}`);\n    this.jobIds.add(id);\n    const priority = BASE_PRIORITY - id + (prioritize ? HIGH_PRIORITY_OFFSET : 0);\n    const updateCleanupData = (data:Object) => updateCleanupValuesInDatabase(id, queueId, data);\n    const updateDuration = (duration:number, pending:number) => {\n      this.addDurationEstimate(queueId, id, duration, pending);\n    };\n    const updateDurationEstimate = () => {\n      const durationEstimateHandler = this.durationEstimateHandlerMap.get(type);\n      if (typeof durationEstimateHandler === 'function') {\n        try {\n          const durationEstimate = durationEstimateHandler(args);\n          this.addDurationEstimate(queueId, id, durationEstimate, durationEstimate);\n          return durationEstimate;\n        } catch (error) {\n          this.logger.error(`Unable to estimate duration of ${type} job #${id} in queue ${queueId}`);\n          this.logger.errorStack(error);\n        }\n      }\n      return 0;\n    };\n    updateDurationEstimate();\n    this.durationEstimateUpdaterMap.set(id, updateDurationEstimate);\n    const abortController = this.getAbortController(id, queueId);\n    const run = async () => {\n      const start = Date.now();\n      const durationEstimate = updateDurationEstimate();\n      this.durationEstimateUpdaterMap.delete(id);\n      if (abortController.signal.aborted) {\n        this.emit('fatalError', { id, queueId, error: new AbortError(`Queue ${queueId} was aborted`) });\n        this.removeAbortController(id, queueId);\n        this.jobIds.delete(id);\n        this.removeDurationEstimate(queueId, id);\n        return;\n      }\n      const handler = this.handlerMap.get(type);\n      if (typeof handler !== 'function') {\n        this.logger.warn(`No handler for job type ${type}`);\n        await markJobCompleteInDatabase(id);\n        this.removeAbortController(id, queueId);\n        this.jobIds.delete(id);\n        this.addDurationEstimate(queueId, id, Date.now() - start, 0);\n        return;\n      }\n      this.setCurrentJobType(queueId, type);\n      let handlerDidRun = false;\n      try {\n        // Mark as error in database so the job is cleaned up and retried if execution\n        // stops before job completion or error.\n        await markJobErrorInDatabase(id);\n        await this.delayJobStart(id, queueId, type, abortController.signal, startAfter);\n        this.logger.info(`Starting ${type} job #${id} in queue ${queueId} attempt ${attempt}`);\n        handlerDidRun = true;\n        const shouldKeepJobInDatabase = await handler(args, abortController.signal, updateCleanupData, updateDuration);\n        if (abortController.signal.aborted) {\n          throw new AbortError(`Queue ${queueId} was aborted`);\n        }\n        if (shouldKeepJobInDatabase === false) {\n          await markJobCompleteThenRemoveFromDatabase(id);\n        } else {\n          await markJobCompleteInDatabase(id);\n        }\n        this.removeAbortController(id, queueId);\n        this.jobIds.delete(id);\n        const duration = Date.now() - start;\n        if (typeof durationEstimate === 'number') {\n          const estimatedToActualRatio = durationEstimate / duration;\n          if (duration > 250 && (estimatedToActualRatio < 0.8 || estimatedToActualRatio > 1.25)) {\n            this.logger.warn(`Duration estimate of ${type} job #${id} (${durationEstimate}ms) was ${Math.round(100 * estimatedToActualRatio)}% of actual value (${duration}ms)`);\n          }\n        }\n        this.addDurationEstimate(queueId, id, duration, 0);\n        this.logger.info(`Completed ${type} job #${id} in queue ${queueId} attempt ${attempt} in ${duration}ms`);\n        return;\n      } catch (error) {\n        if (error.name === 'JobDoesNotExistError') {\n          this.logger.error(`Job does not exist error for ${type} job #${id} in queue ${queueId} attempt ${attempt}`);\n          if (handlerDidRun) {\n            this.emit('fatalError', { id, queueId, error });\n            await restoreJobToDatabaseForCleanupAndRemove(id, queueId, type, args, { prioritize });\n            this.jobIds.delete(id);\n            this.removeAbortController(id, queueId);\n            this.startCleanup(id, queueId, args, type, true, prioritize);\n          } else {\n            this.emit('fatalError', { id, queueId, error });\n            this.jobIds.delete(id);\n            this.removeAbortController(id, queueId);\n            this.removeDurationEstimate(queueId, id);\n          }\n          return;\n        }\n        if (abortController.signal.aborted) {\n          if (error.name !== 'AbortError') {\n            this.logger.error(`Abort signal following error in ${type} job #${id} in queue ${queueId} attempt ${attempt}`);\n            this.emit('error', error);\n          } else {\n            this.logger.warn(`Received abort signal for ${type} job #${id} in queue ${queueId} attempt ${attempt}`);\n          }\n          if (handlerDidRun) {\n            this.emit('fatalError', { id, queueId, error });\n            this.jobIds.delete(id);\n            this.removeAbortController(id, queueId);\n            this.startCleanup(id, queueId, args, type, true, prioritize);\n          } else {\n            this.emit('fatalError', { id, queueId, error });\n            await markJobAsAbortedOrRemoveFromDatabase(id);\n            this.jobIds.delete(id);\n            this.removeAbortController(id, queueId);\n            this.removeDurationEstimate(queueId, id);\n          }\n          return;\n        }\n        await incrementJobAttemptInDatabase(id);\n        if (error.name === 'FatalError') {\n          this.logger.error(`Fatal error in ${type} job #${id} in queue ${queueId} attempt ${attempt}`);\n          this.emit('error', error);\n          this.emit('fatalError', { id, queueId, error });\n          this.jobIds.delete(id);\n          this.removeAbortController(id, queueId);\n          await this.abortQueue(queueId);\n          return;\n        }\n        const retryDelay = await this.getRetryJobDelay(type, attempt, error);\n        if (retryDelay === false) {\n          this.logger.error(`Error in ${type} job #${id} in queue ${queueId} attempt ${attempt} with no additional attempts requested`);\n          this.emit('error', error);\n          this.emit('fatalError', { id, queueId, error });\n          this.jobIds.delete(id);\n          this.removeAbortController(id, queueId);\n          await this.abortQueue(queueId);\n          return;\n        }\n        this.logger.error(`Error in ${type} job #${id} in queue ${queueId} attempt ${attempt}, retrying ${retryDelay > 0 ? `in ${retryDelay}ms` : 'immediately'}`);\n        this.emit('error', error);\n        if (retryDelay > 0) {\n          this.emit('retryDelay', { id, queueId, retryDelay });\n          const newStartAfter = Date.now() + retryDelay;\n          await markJobStartAfterInDatabase(id, newStartAfter);\n          this.jobIds.delete(id);\n          this.startErrorHandler(id, queueId, args, type, attempt, newStartAfter, true, prioritize);\n        } else {\n          this.jobIds.delete(id);\n          this.startErrorHandler(id, queueId, args, type, attempt, startAfter, true, prioritize);\n        }\n      }\n    };\n    this.addToQueue(queueId, priority, autoStart, run);\n    this.emit('dequeue', { id });\n  }\n\n  async handlePortMessage(port: MessagePort, event:MessageEvent) {\n    if (!(event instanceof MessageEvent)) {\n      return;\n    }\n\n    const portHandlers = this.ports.get(port);\n\n    if (typeof portHandlers !== 'object') {\n      this.logger.warn('Port handlers do not exist');\n      this.logger.warnObject(event);\n      return;\n    }\n\n    const { data } = event;\n    if (!data || typeof data !== 'object') {\n      this.logger.warn('Invalid message data');\n      this.logger.warnObject(event);\n      return;\n    }\n    const { type, args } = data;\n    if (typeof type !== 'string') {\n      this.logger.warn('Unknown message type');\n      this.logger.warnObject(event);\n      return;\n    }\n    if (!Array.isArray(args)) {\n      this.logger.warn('Unknown arguments type');\n      this.logger.warnObject(event);\n      return;\n    }\n    const emit = (t:string, ...messageArgs:Array<any>) => {\n      port.postMessage({ type: t, args: messageArgs });\n    };\n    switch (type) {\n      case 'heartbeat':\n        try {\n          const [interval] = args;\n          if (typeof interval !== 'number') {\n            throw new Error(`Invalid \"interval\" argument with type ${typeof interval}, should be type number`);\n          }\n          clearTimeout(portHandlers.heartbeatExpiresTimeout);\n          this.heartbeatExpiresTimestamp = Date.now() + Math.round(interval * 2.5);\n          portHandlers.heartbeatExpiresTimeout = setTimeout(async () => {\n            this.logger.warn(`Heartbeat timeout after ${Math.round(interval * 2.1)}ms`);\n            await this.unloadClient();\n            this.removePort(port);\n          }, Math.round(interval * 2.1));\n          emit('heartbeat', ...args);\n          super.emit('heartbeat', ...args);\n        } catch (error) {\n          this.logger.error('Heartbeat error');\n          this.logger.errorStack(error);\n        }\n        return;\n      case 'jobAdd':\n        jobEmitter.emit('jobAdd', ...args);\n        return;\n      case 'jobDelete':\n        jobEmitter.emit('jobDelete', ...args);\n        return;\n      case 'jobUpdate':\n        jobEmitter.emit('jobUpdate', ...args);\n        return;\n      case 'jobsClear':\n        jobEmitter.emit('jobsClear', ...args);\n        return;\n      default:\n        break;\n    }\n    const [requestId, ...requestArgs] = args;\n    if (typeof requestId !== 'number') {\n      throw new Error('Request arguments should start with a requestId number');\n    }\n    switch (type) {\n      case 'unlink':\n        this.logger.warn('Unlinking worker interface');\n        try {\n          if (this.ports.size === 1) {\n            await this.stop();\n          }\n          emit('unlinkComplete', requestId);\n          this.removePort(port);\n        } catch (error) {\n          emit('unlinkError', requestId, error);\n          this.logger.error('Unable to handle unlink message');\n          this.emit('error', error);\n        }\n        break;\n      case 'clear':\n        try {\n          await this.clear();\n          emit('clearComplete', requestId);\n        } catch (error) {\n          emit('clearError', requestId, error);\n          this.logger.error('Unable to handle clear message');\n          this.emit('error', error);\n        }\n        break;\n      case 'abortAndRemoveQueueJobsGreaterThanId':\n        try {\n          const [queueId, id] = requestArgs;\n          if (typeof queueId !== 'string') {\n            throw new Error(`Invalid \"queueId\" argument with type ${typeof queueId}, should be type string`);\n          }\n          if (typeof id !== 'number') {\n            throw new Error(`Invalid \"id\" argument with type ${typeof id}, should be type number`);\n          }\n          await this.abortAndRemoveQueueJobsGreaterThanId(queueId, id);\n          emit('abortAndRemoveQueueJobsGreaterThanIdComplete', requestId);\n        } catch (error) {\n          emit('abortAndRemoveQueueJobsGreaterThanIdError', requestId, error);\n          this.logger.error('Unable to handle abort and remove queue jobs greater than ID message');\n          this.emit('error', error);\n        }\n        break;\n      case 'abortAndRemoveQueue':\n        try {\n          const [queueId] = requestArgs;\n          if (typeof queueId !== 'string') {\n            throw new Error(`Invalid \"queueId\" argument with type ${typeof queueId}, should be type string`);\n          }\n          await this.abortAndRemoveQueue(queueId);\n          emit('abortAndRemoveQueueComplete', requestId);\n        } catch (error) {\n          emit('abortAndRemoveQueueError', requestId, error);\n          this.logger.error('Unable to handle abort and remove queue message');\n          this.emit('error', error);\n        }\n        break;\n      case 'updateDurationEstimates':\n        try {\n          await this.updateDurationEstimates();\n          emit('updateDurationEstimatesComplete', requestId);\n        } catch (error) {\n          emit('updateDurationEstimatesError', requestId, error);\n          this.logger.error('Unable to handle update duration estimates message');\n          this.emit('error', error);\n        }\n        break;\n      case 'abortQueue':\n        try {\n          const [queueId] = requestArgs;\n          if (typeof queueId !== 'string') {\n            throw new Error(`Invalid \"queueId\" argument with type ${typeof queueId}, should be type string`);\n          }\n          await this.abortQueue(queueId);\n          emit('abortQueueComplete', requestId);\n        } catch (error) {\n          emit('abortQueueError', requestId, error);\n          this.logger.error('Unable to handle abort queue message');\n          this.emit('error', error);\n        }\n        break;\n      case 'retryQueue':\n        try {\n          const [queueId] = requestArgs;\n          if (typeof queueId !== 'string') {\n            throw new Error(`Invalid \"queueId\" argument with type ${typeof queueId}, should be type string`);\n          }\n          await this.retryQueue(queueId);\n          emit('retryQueueComplete', requestId);\n        } catch (error) {\n          emit('retryQueueError', requestId, error);\n          this.logger.error('Unable to handle retry queue message');\n          this.emit('error', error);\n        }\n        break;\n      case 'dequeue':\n        try {\n          await this.dequeue();\n          emit('dequeueComplete', requestId);\n        } catch (error) {\n          emit('dequeueError', requestId, error);\n          this.logger.error('Unable to handle dequeue message');\n          this.emit('error', error);\n        }\n        break;\n      case 'enableStartOnJob':\n        try {\n          this.enableStartOnJob();\n          emit('enableStartOnJobComplete', requestId);\n        } catch (error) {\n          emit('enableStartOnJobError', requestId, error);\n          this.logger.error('Unable to handle enableStartOnJob message');\n          this.emit('error', error);\n        }\n        break;\n      case 'disableStartOnJob':\n        try {\n          this.disableStartOnJob();\n          emit('disableStartOnJobComplete', requestId);\n        } catch (error) {\n          emit('disableStartOnJobError', requestId, error);\n          this.logger.error('Unable to handle disableStartOnJob message');\n          this.emit('error', error);\n        }\n        break;\n      case 'getQueueIds':\n        try {\n          const queueIds = await this.getQueueIds();\n          emit('getQueuesComplete', requestId, [...queueIds]);\n        } catch (error) {\n          emit('getQueuesError', requestId, error);\n          this.logger.error('Unable to handle getQueueIds message');\n          this.emit('error', error);\n        }\n        break;\n      case 'getDurationEstimate':\n        try {\n          const [queueId] = requestArgs;\n          if (typeof queueId !== 'string') {\n            throw new Error(`Invalid \"queueId\" argument with type ${typeof queueId}, should be type string`);\n          }\n          const values = await this.getDurationEstimate(queueId);\n          emit('getDurationEstimateComplete', requestId, values);\n        } catch (error) {\n          emit('getDurationEstimateError', requestId, error);\n          this.logger.error('Unable to handle get duration estimate message');\n          this.emit('error', error);\n        }\n        break;\n      case 'getCurrentJobType':\n        try {\n          const [queueId] = requestArgs;\n          if (typeof queueId !== 'string') {\n            throw new Error(`Invalid \"queueId\" argument with type ${typeof queueId}, should be type string`);\n          }\n          const currentJobType = this.getCurrentJobType(queueId);\n          emit('getCurrentJobTypeComplete', requestId, currentJobType);\n        } catch (error) {\n          emit('getCurrentJobTypeError', requestId, error);\n          this.logger.error('Unable to handle get current job type message');\n          this.emit('error', error);\n        }\n        break;\n      case 'runUnloadHandlers':\n        try {\n          await this.runUnloadHandlers();\n          emit('runUnloadHandlersComplete', requestId);\n        } catch (error) {\n          emit('runUnloadHandlersError', requestId, error);\n          this.logger.error('Unable to run unload handlers message');\n          this.emit('error', error);\n        }\n        break;\n      case 'idle':\n        try {\n          const [maxDuration, start] = requestArgs;\n          if (typeof maxDuration !== 'number') {\n            throw new Error(`Invalid \"queueId\" argument with type ${typeof maxDuration}, should be type number`);\n          }\n          if (typeof start !== 'number') {\n            throw new Error(`Invalid \"queueId\" argument with type ${typeof start}, should be type number`);\n          }\n          await this.onIdle(maxDuration - (Date.now() - start));\n          emit('idleComplete', requestId);\n        } catch (error) {\n          emit('idleError', requestId, error);\n          this.logger.error('Unable to handle idle message');\n          this.emit('error', error);\n        }\n        break;\n      default:\n        this.logger.warn(`Unknown worker interface message type ${type}`);\n    }\n  }\n\n  async unloadClient() {\n    this.logger.info('Detected client unload');\n    if (this.isUnloading) {\n      this.logger.warn('Unload already in progress');\n      return;\n    }\n    try {\n      for (const { heartbeatExpiresTimeout } of this.ports.values()) {\n        clearTimeout(heartbeatExpiresTimeout);\n      }\n      const heartbeatExpiresTimestamp = this.heartbeatExpiresTimestamp;\n      if (typeof heartbeatExpiresTimestamp !== 'number') {\n        this.logger.warn('Heartbeat expires timestamp does not exist');\n        return;\n      }\n      this.isUnloading = true;\n      delete this.heartbeatExpiresTimestamp;\n      const delay = heartbeatExpiresTimestamp - Date.now();\n      if (delay > 0) {\n        await new Promise((resolve) => {\n          const timeout = setTimeout(() => {\n            clearTimeout(timeout);\n            this.removeListener('heartbeat', handleHeartbeat);\n            resolve();\n          }, delay);\n          const handleHeartbeat = () => {\n            clearTimeout(timeout);\n            this.removeListener('heartbeat', handleHeartbeat);\n            resolve();\n          };\n          this.addListener('heartbeat', handleHeartbeat);\n        });\n      }\n      if (typeof this.heartbeatExpiresTimestamp === 'number') {\n        this.logger.info('Cancelling client unload, heartbeat detected');\n        return;\n      }\n      this.logger.info('Unloading');\n      await this.runUnloadHandlers();\n      for (const port of this.ports.keys()) {\n        port.postMessage({ type: 'unloadClient', args: [] });\n      }\n      await this.onIdle();\n    } finally {\n      this.isUnloading = false;\n    }\n  }\n\n  runUnloadHandlers() {\n    return this.unloadQueue.add(async () => {\n      const handleUnload = this.handleUnload;\n      if (typeof handleUnload === 'function') {\n        try {\n          const unloadData = await getUnloadDataFromDatabase();\n          await handleUnload(unloadData);\n          await clearUnloadDataInDatabase();\n        } catch (error) {\n          this.logger.error('Error in unload handler');\n          this.logger.errorStack(error);\n        }\n      }\n    });\n  }\n\n  removePort(port:MessagePort) {\n    const portHandlers = this.ports.get(port);\n    if (typeof portHandlers === 'undefined') {\n      this.logger.info('Unable to remove port, port handler map does not exist');\n      return;\n    }\n    const {\n      handleJobAdd,\n      handleJobDelete,\n      handleJobUpdate,\n      handleJobsClear,\n      heartbeatExpiresTimeout,\n    } = portHandlers;\n\n    localJobEmitter.removeListener('jobAdd', handleJobAdd);\n    localJobEmitter.removeListener('jobDelete', handleJobDelete);\n    localJobEmitter.removeListener('jobUpdate', handleJobUpdate);\n    localJobEmitter.removeListener('jobsClear', handleJobsClear);\n    clearTimeout(heartbeatExpiresTimeout);\n\n    port.postMessage({ type: 'closed', args: [] });\n\n    port.onmessage = null; // eslint-disable-line no-param-reassign\n    port.onmessageerror = null; // eslint-disable-line no-param-reassign\n    port.close();\n\n    this.ports.delete(port);\n  }\n\n  listenForServiceWorkerInterface() {\n    self.addEventListener('sync', (event) => {\n      this.logger.info(`SyncManager event ${event.tag}${event.lastChance ? ', last chance' : ''}`);\n      if (event.tag === 'syncManagerOnIdle') {\n        this.logger.info('Starting SyncManager idle handler');\n        this.emit('syncManagerOnIdle');\n        event.waitUntil(this.onIdle().catch((error) => {\n          this.logger.error(`SyncManager event handler failed${event.lastChance ? ' on last chance' : ''}`);\n          this.logger.errorStack(error);\n        }));\n      } else if (event.tag === 'unload') {\n        this.logger.info('Starting SyncManager unload client handler');\n        event.waitUntil(this.unloadClient().catch((error) => {\n          this.logger.error(`SyncManager event handler failed${event.lastChance ? ' on last chance' : ''}`);\n          this.logger.errorStack(error);\n        }));\n      } else {\n        this.logger.warn(`Received unknown SyncManager event tag ${event.tag}`);\n      }\n    });\n\n    self.addEventListener('message', (event:ExtendableMessageEvent) => {\n      if (!(event instanceof ExtendableMessageEvent)) {\n        return;\n      }\n      const { data } = event;\n      if (!data || typeof data !== 'object') {\n        return;\n      }\n      const { type } = data;\n      if (type !== 'BATTERY_QUEUE_WORKER_INITIALIZATION') {\n        return;\n      }\n      if (!Array.isArray(event.ports)) {\n        return;\n      }\n      const port = event.ports[0];\n      if (!(port instanceof MessagePort)) {\n        return;\n      }\n      if (this.ports.has(port)) {\n        return;\n      }\n\n      port.onmessage = (_event:MessageEvent) => this.handlePortMessage(port, _event); // eslint-disable-line no-param-reassign\n\n      port.onmessageerror = (_event:MessageEvent) => {\n        this.logger.error('MessagePort unable to deserialize message');\n        this.logger.errorObject(_event);\n      };\n\n      const handleJobAdd = (...args:Array<any>) => {\n        port.postMessage({ type: 'jobAdd', args });\n      };\n      const handleJobDelete = (...args:Array<any>) => {\n        port.postMessage({ type: 'jobDelete', args });\n      };\n      const handleJobUpdate = (...args:Array<any>) => {\n        port.postMessage({ type: 'jobUpdate', args });\n      };\n      const handleJobsClear = (...args:Array<any>) => {\n        port.postMessage({ type: 'jobsClear', args });\n      };\n\n      localJobEmitter.addListener('jobAdd', handleJobAdd);\n      localJobEmitter.addListener('jobDelete', handleJobDelete);\n      localJobEmitter.addListener('jobUpdate', handleJobUpdate);\n      localJobEmitter.addListener('jobsClear', handleJobsClear);\n\n\n      const portHandlers = {\n        handleJobAdd,\n        handleJobDelete,\n        handleJobUpdate,\n        handleJobsClear,\n      };\n\n      this.ports.set(port, portHandlers);\n\n      port.postMessage({ type: 'BATTERY_QUEUE_WORKER_CONFIRMATION' });\n\n      this.logger.info('Linked to worker interface');\n    });\n    self.addEventListener('messageerror', (event:MessageEvent) => {\n      this.logger.error('Service worker interface message error');\n      this.logger.errorObject(event);\n    });\n  }\n}\n\n"],"file":"queue.js"}