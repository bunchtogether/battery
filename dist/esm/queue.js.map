{"version":3,"sources":["../../src/queue.js"],"names":["PQueue","errorObjectParser","EventEmitter","makeLogger","clearDatabase","dequeueFromDatabase","incrementAttemptInDatabase","markJobCompleteInDatabase","markJobPendingInDatabase","markJobErrorInDatabase","markJobCleanupInDatabase","markJobAbortedInDatabase","markJobStartAfterInDatabase","updateCleanupInDatabase","getCleanupFromDatabase","getJobFromDatabase","removePathFromCleanupDataInDatabase","markQueueForCleanupInDatabase","removeCleanupFromDatabase","JOB_PENDING_STATUS","JOB_ABORTED_STATUS","JOB_ERROR_STATUS","JOB_CLEANUP_STATUS","JOB_COMPLETE_STATUS","AbortError","PRIORITY_OFFSET","Math","floor","Number","MAX_SAFE_INTEGER","BatteryQueue","constructor","options","dequeueQueue","concurrency","handlerMap","Map","cleanupMap","retryDelayMap","queueMap","jobIds","Set","abortControllerMap","isClearing","emitCallbacks","logger","emit","type","args","emitCallback","setRetryDelay","delayOrFunction","set","error","removeRetryDelay","delete","addHandler","handler","handlers","get","push","removeHandler","filter","f","length","addCleanup","cleanup","cleanups","removeCleanup","clear","onIdle","start","addToQueue","queueId","priority","func","queue","add","newQueue","autoStart","on","Promise","resolve","timeout","setTimeout","removeListener","handleClearing","clearTimeout","addListener","pending","size","abortQueue","info","queueAbortControllerMap","abortController","values","abort","dequeue","_dequeue","bind","jobs","queueIds","id","status","attempt","maxAttempts","startAfter","has","pause","startJob","startErrorHandler","startCleanup","Error","maxDuration","onIdlePromise","Date","now","warn","interval","setInterval","clearInterval","jobsInterval","getAbortController","newAbortController","AbortController","removeAbortController","removePathFromCleanupData","path","run","Array","isArray","cleanupData","delayStart","signal","duration","reject","removeEventListener","handleAbort","addEventListener","updateCleanupData","data","hasError","hasFatalError","delayRetryErrorMs","aborted","errorStack","name","delay","job","newStartAfter","toLocaleString","retryDelayFunction","delayRetryMs","handleInitializationMessage","event","ExtendableMessageEvent","ports","port","MessagePort","postMessage","onmessage","handlePortMessage","t","MessageEvent","warnObject","value","errorObject","serializeError","listenForServiceWorkerInterface","self"],"mappings":"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","sourcesContent":["// @flow\n\nimport PQueue from 'p-queue';\nimport errorObjectParser from 'serialize-error';\nimport EventEmitter from 'events';\nimport type { Logger } from './logger';\nimport makeLogger from './logger';\nimport {\n  clearDatabase,\n  dequeueFromDatabase,\n  incrementAttemptInDatabase,\n  markJobCompleteInDatabase,\n  markJobPendingInDatabase,\n  markJobErrorInDatabase,\n  markJobCleanupInDatabase,\n  markJobAbortedInDatabase,\n  markJobStartAfterInDatabase,\n  updateCleanupInDatabase,\n  getCleanupFromDatabase,\n  getJobFromDatabase,\n  removePathFromCleanupDataInDatabase,\n  markQueueForCleanupInDatabase,\n  removeCleanupFromDatabase,\n  JOB_PENDING_STATUS,\n  JOB_ABORTED_STATUS,\n  JOB_ERROR_STATUS,\n  JOB_CLEANUP_STATUS,\n  JOB_COMPLETE_STATUS,\n} from './database';\nimport { AbortError } from './errors';\n\nconst PRIORITY_OFFSET = Math.floor(Number.MAX_SAFE_INTEGER / 2);\n\ntype HandlerFunction = (Array<any>, AbortSignal, (Object) => Promise<void>) => Promise<void>;\ntype CleanupFunction = (Object | void, Array<any>, Array<string> => Promise<void>) => Promise<void>;\ntype RetryDelayFunction = (number) => number;\ntype EmitCallback = (string, Array<any>) => void;\n\ntype Options = {\n  logger?: Logger\n};\n\nexport default class BatteryQueue extends EventEmitter {\n  declare logger: Logger;\n  declare dequeueQueue: PQueue;\n  declare handlerMap: Map<string, Array<HandlerFunction>>;\n  declare retryDelayMap: Map<string, (number) => number>;\n  declare cleanupMap: Map<string, Array<CleanupFunction>>;\n  declare queueMap: Map<string, PQueue>;\n  declare abortControllerMap: Map<string, Map<number, AbortController>>;\n  declare isClearing: boolean;\n  declare onIdlePromise: Promise<void> | void;\n  declare jobIds: Set<number>;\n  declare emitCallbacks: Array<EmitCallback>;\n\n  constructor(options?: Options = {}) {\n    super();\n    this.dequeueQueue = new PQueue({ concurrency: 1 });\n    this.handlerMap = new Map();\n    this.cleanupMap = new Map();\n    this.retryDelayMap = new Map();\n    this.queueMap = new Map();\n    this.jobIds = new Set();\n    this.abortControllerMap = new Map();\n    this.isClearing = false;\n    this.emitCallbacks = [];\n    this.logger = options.logger || makeLogger('Battery Queue');\n  }\n\n  emit(type:string, ...args:Array<any>) {\n    for (const emitCallback of this.emitCallbacks) {\n      emitCallback(type, args);\n    }\n    return super.emit(type, ...args);\n  }\n\n  setRetryDelay(type:string, delayOrFunction:number | RetryDelayFunction) {\n    if (typeof delayOrFunction === 'number') {\n      this.retryDelayMap.set(type, () => delayOrFunction);\n    } else if (typeof delayOrFunction === 'function') {\n      this.retryDelayMap.set(type, delayOrFunction);\n    } else {\n      this.logger.error(`Unable to set retry delay for ${type}, unknown handler type ${typeof delayOrFunction}`);\n    }\n  }\n\n  removeRetryDelay(type:string) {\n    this.retryDelayMap.delete(type);\n  }\n\n  addHandler(type:string, handler: HandlerFunction) {\n    const handlers = this.handlerMap.get(type) || [];\n    handlers.push(handler);\n    this.handlerMap.set(type, handlers);\n  }\n\n  removeHandler(type:string, handler: HandlerFunction) {\n    const handlers = (this.handlerMap.get(type) || []).filter((f) => f !== handler);\n    if (handlers.length > 0) {\n      this.handlerMap.set(type, handlers);\n    } else {\n      this.handlerMap.delete(type);\n    }\n  }\n\n  addCleanup(type:string, cleanup: CleanupFunction) {\n    const cleanups = this.cleanupMap.get(type) || [];\n    cleanups.push(cleanup);\n    this.cleanupMap.set(type, cleanups);\n  }\n\n  removeCleanup(type:string, cleanup: CleanupFunction) {\n    const cleanups = (this.cleanupMap.get(type) || []).filter((f) => f !== cleanup);\n    if (cleanups.length > 0) {\n      this.cleanupMap.set(type, cleanups);\n    } else {\n      this.cleanupMap.delete(type);\n    }\n  }\n\n  async clear() {\n    this.isClearing = true;\n    await this.onIdle();\n    this.emit('clearing');\n    await clearDatabase();\n    this.dequeueQueue.start();\n    this.isClearing = false;\n  }\n\n  addToQueue(queueId:string, priority: number, func: () => Promise<void>) {\n    const queue = this.queueMap.get(queueId);\n    if (typeof queue !== 'undefined') {\n      queue.add(func, { priority });\n      return;\n    }\n    const newQueue = new PQueue({ concurrency: 1, autoStart: false });\n    this.queueMap.set(queueId, newQueue);\n    newQueue.add(func, { priority });\n    newQueue.on('idle', async () => {\n      if (!this.isClearing) {\n        await new Promise((resolve) => {\n          const timeout = setTimeout(() => {\n            this.removeListener('clearing', handleClearing);\n            resolve();\n          }, 5000);\n          const handleClearing = () => {\n            clearTimeout(timeout);\n            this.removeListener('clearing', handleClearing);\n            resolve();\n          };\n          this.addListener('clearing', handleClearing);\n        });\n      }\n      if (newQueue.pending > 0 || newQueue.size > 0) {\n        return;\n      }\n      this.queueMap.delete(queueId);\n    });\n  }\n\n  async abortQueue(queueId: string) {\n    this.logger.info(`Aborting queue ${queueId}`);\n    // Changes:\n    // * JOB_ERROR_STATUS -> JOB_CLEANUP_STATUS\n    // * JOB_COMPLETE_STATUS -> JOB_CLEANUP_STATUS\n    // * JOB_PENDING_STATUS -> JOB_ABORTED_STATUS\n    await markQueueForCleanupInDatabase(queueId);\n    // Abort active jobs\n    const queueAbortControllerMap = this.abortControllerMap.get(queueId);\n    if (typeof queueAbortControllerMap !== 'undefined') {\n      for (const abortController of queueAbortControllerMap.values()) {\n        abortController.abort();\n      }\n    }\n    this.abortControllerMap.delete(queueId);\n  }\n\n  dequeue():void | Promise<void> {\n    if (this.dequeueQueue.size === 0) {\n      // Add a subsequent dequeue\n      this.dequeueQueue.add(this._dequeue.bind(this)); // eslint-disable-line no-underscore-dangle\n    }\n    return this.dequeueQueue.onIdle();\n  }\n\n  async _dequeue() { // eslint-disable-line consistent-return\n    const jobs = await dequeueFromDatabase();\n    const queueIds = new Set();\n    for (const { id, queueId, args, type, status, attempt, maxAttempts, startAfter } of jobs) {\n      // Pause queues before adding items into them to avoid starting things out of priority\n      if (!queueIds.has(queueId)) {\n        const queue = this.queueMap.get(queueId);\n        if (typeof queue !== 'undefined') {\n          queue.pause();\n        }\n        queueIds.add(queueId);\n      }\n      if (status === JOB_PENDING_STATUS) {\n        this.startJob(id, queueId, args, type, attempt, maxAttempts, startAfter);\n      } else if (status === JOB_ERROR_STATUS) {\n        this.startErrorHandler(id, queueId, args, type);\n      } else if (status === JOB_CLEANUP_STATUS) {\n        this.startCleanup(id, queueId, args, type);\n      } else {\n        throw new Error(`Unknown job status ${status} in job ${id} of queue ${queueId}`);\n      }\n    }\n    for (const queueId of queueIds) {\n      const queue = this.queueMap.get(queueId);\n      if (typeof queue !== 'undefined') {\n        queue.start();\n      } else {\n        this.logger.error(`Unable to start queue ${queueId} after dequeue; queue does not exist`);\n      }\n    }\n  }\n\n  async onIdle(maxDuration?: number = 5000) {\n    if (typeof this.onIdlePromise === 'undefined') {\n      this.onIdlePromise = (async () => {\n        const timeout = Date.now() + maxDuration;\n        while (true) {\n          if (Date.now() > timeout) {\n            this.logger.warn(`Idle timeout after ${maxDuration}ms`);\n            break;\n          }\n          await this.dequeueQueue.onIdle();\n          for (const [queueId, queue] of this.queueMap) {\n            const interval = setInterval(() => {\n              this.logger.info(`Waiting on queue ${queueId}`);\n            }, 250);\n            await queue.onIdle();\n            clearInterval(interval);\n          }\n          const jobsInterval = setInterval(() => {\n            this.logger.info('Waiting on jobs');\n          }, 250);\n          const jobs = await dequeueFromDatabase();\n          clearInterval(jobsInterval);\n          if (jobs.length > 0) {\n            const interval = setInterval(() => {\n              this.logger.info('Waiting on dequeue');\n            }, 250);\n            await this.dequeue();\n            clearInterval(interval);\n            continue;\n          }\n          break;\n        }\n        delete this.onIdlePromise;\n        this.emit('idle');\n      })();\n    }\n    await this.onIdlePromise;\n  }\n\n  getAbortController(id:number, queueId:string) {\n    let queueAbortControllerMap = this.abortControllerMap.get(queueId);\n    if (typeof queueAbortControllerMap === 'undefined') {\n      queueAbortControllerMap = new Map();\n      this.abortControllerMap.set(queueId, queueAbortControllerMap);\n    }\n    const abortController = queueAbortControllerMap.get(id);\n    if (typeof abortController !== 'undefined') {\n      return abortController;\n    }\n    const newAbortController = new AbortController();\n    queueAbortControllerMap.set(id, newAbortController);\n    return newAbortController;\n  }\n\n  removeAbortController(id:number, queueId:string) {\n    const queueAbortControllerMap = this.abortControllerMap.get(queueId);\n    if (typeof queueAbortControllerMap === 'undefined') {\n      this.logger.warn(`Abort controller map for ${id} in queue ${queueId} does not exist`);\n      return;\n    }\n    const abortController = queueAbortControllerMap.get(id);\n    if (typeof abortController === 'undefined') {\n      this.logger.warn(`Abort controller for ${id} in queue ${queueId} does not exist`);\n      return;\n    }\n    queueAbortControllerMap.delete(id);\n  }\n\n  startCleanup(id:number, queueId:string, args:Array<any>, type:string) {\n    if (this.jobIds.has(id)) {\n      this.logger.info(`Skipping active ${type} cleanup #${id} in queue ${queueId}`);\n      return;\n    }\n    this.logger.info(`Adding ${type} cleanup job #${id} to queue ${queueId}`);\n    this.jobIds.add(id);\n    const priority = PRIORITY_OFFSET + id;\n    const removePathFromCleanupData = (path:Array<string>) => removePathFromCleanupDataInDatabase(id, queueId, path);\n    const run = async () => {\n      this.logger.info(`Starting ${type} cleanup job #${id} in queue ${queueId}`);\n      const cleanups = this.cleanupMap.get(type);\n      if (Array.isArray(cleanups)) {\n        const cleanupData = await getCleanupFromDatabase(id);\n        for (const cleanup of cleanups) {\n          await cleanup(cleanupData, args, removePathFromCleanupData);\n        }\n      } else {\n        this.logger.warn(`No cleanup for job type ${type}`);\n      }\n      await removeCleanupFromDatabase(id);\n      this.jobIds.delete(id);\n      this.emit('cleanup', { id });\n      await markJobAbortedInDatabase(id);\n    };\n    this.addToQueue(queueId, priority, run);\n    this.emit('dequeueCleanup', { id });\n  }\n\n  startErrorHandler(id:number, queueId:string, args:Array<any>, type:string) {\n    if (this.jobIds.has(id)) {\n      this.logger.info(`Skipping active ${type} error handler job #${id} in queue ${queueId}`);\n      return;\n    }\n    this.logger.info(`Adding ${type} error handler job #${id} to queue ${queueId}`);\n    this.jobIds.add(id);\n    const priority = PRIORITY_OFFSET + id;\n    const removePathFromCleanupData = (path:Array<string>) => removePathFromCleanupDataInDatabase(id, queueId, path);\n    const run = async () => {\n      this.logger.info(`Starting ${type} error handler job #${id} in queue ${queueId}`);\n      const cleanups = this.cleanupMap.get(type);\n      if (Array.isArray(cleanups)) {\n        const cleanupData = await getCleanupFromDatabase(id);\n        for (const cleanup of cleanups) {\n          await cleanup(cleanupData, args, removePathFromCleanupData);\n        }\n      } else {\n        this.logger.warn(`No cleanup for job type ${type}`);\n      }\n      await removeCleanupFromDatabase(id);\n      this.jobIds.delete(id);\n      this.emit('cleanup', { id });\n      const [attempt, maxAttempts] = await incrementAttemptInDatabase(id);\n      if (attempt >= maxAttempts) {\n        this.logger.warn(`Not retrying ${type} job #${id} in queue ${queueId} after ${maxAttempts} failed ${maxAttempts === 1 ? 'attempt' : 'attempts'}, cleaning up queue`);\n        await markJobAbortedInDatabase(id);\n        this.emit('fatalError', { queueId });\n        await this.abortQueue(queueId);\n      } else {\n        await markJobPendingInDatabase(id);\n        this.logger.info(`Retrying ${type} job #${id} in queue ${queueId}, ${maxAttempts - attempt} ${maxAttempts - attempt === 1 ? 'attempt' : 'attempts'} remaining`);\n        this.emit('retry', { id });\n      }\n      await this.dequeue();\n    };\n    this.addToQueue(queueId, priority, run);\n    this.emit('dequeueCleanup', { id });\n  }\n\n  async delayStart(id:number, queueId:string, type:string, signal: AbortSignal, startAfter: number) {\n    const duration = startAfter - Date.now();\n    if (duration > 0) {\n      this.logger.info(`Delaying start of ${type} job #${id} in queue ${queueId} by ${duration}ms`);\n      await new Promise((resolve, reject) => {\n        const timeout = setTimeout(() => {\n          signal.removeEventListener('abort', handleAbort);\n          resolve();\n        }, duration);\n        const handleAbort = () => {\n          clearTimeout(timeout);\n          signal.removeEventListener('abort', handleAbort);\n          reject(new AbortError('Aborted'));\n        };\n        signal.addEventListener('abort', handleAbort);\n      });\n    }\n  }\n\n  startJob(id:number, queueId:string, args:Array<any>, type:string, attempt:number, maxAttempts:number, startAfter: number) {\n    if (this.jobIds.has(id)) {\n      this.logger.info(`Skipping active ${type} job #${id} in queue ${queueId}`);\n      return;\n    }\n    this.logger.info(`Adding ${type} job #${id} to queue ${queueId}`);\n    this.jobIds.add(id);\n    const priority = PRIORITY_OFFSET - id;\n    const abortController = this.getAbortController(id, queueId);\n    const updateCleanupData = (data:Object) => updateCleanupInDatabase(id, queueId, data);\n    const run = async () => {\n      await this.delayStart(id, queueId, type, abortController.signal, startAfter);\n      this.logger.info(`Starting ${type} job #${id} in queue ${queueId} attempt ${attempt + 1} with ${maxAttempts - attempt - 1} ${maxAttempts - attempt - 1 === 1 ? 'attempt' : 'attempts'} remaining`);\n      const handlers = this.handlerMap.get(type);\n      let hasError = false;\n      let hasFatalError = false;\n      let delayRetryErrorMs = 0;\n      if (Array.isArray(handlers)) {\n        for (const handler of handlers) {\n          try {\n            await handler(args, abortController.signal, updateCleanupData);\n            if (abortController.signal.aborted) {\n              throw new AbortError('Aborted');\n            }\n          } catch (error) {\n            this.logger.error(`Error in ${type} job #${id} in queue ${queueId} attempt ${attempt + 1} with ${maxAttempts - attempt - 1} ${maxAttempts - attempt - 1 === 1 ? 'attempt' : 'attempts'} remaining`);\n            this.logger.errorStack(error);\n            hasError = true;\n            if (error.name === 'FatalQueueError') {\n              hasFatalError = true;\n            }\n            if (error.name === 'DelayRetryError') {\n              delayRetryErrorMs = error.delay || 0;\n            }\n            break;\n          }\n        }\n      } else {\n        this.logger.warn(`No handler for job type ${type}`);\n      }\n      this.removeAbortController(id, queueId);\n      this.jobIds.delete(id);\n      if (!hasError) {\n        // Rely on AbortController to prevent items in aborted queues from being marked as complete\n        await markJobCompleteInDatabase(id);\n        this.emit('complete', { id });\n        return;\n      }\n      const job = await getJobFromDatabase(id);\n      if (typeof job === 'undefined') {\n        this.logger.error(`Unable to get ${type} job #${id} in queue ${queueId} following error`);\n        return;\n      }\n      if (job.status === JOB_CLEANUP_STATUS) {\n        throw new Error(`Found cleanup status for ${type} job #${id} in queue ${queueId} following error, this should not happen`);\n      }\n      if (job.status === JOB_COMPLETE_STATUS) {\n        throw new Error(`Found complete status for ${type} job #${id} in queue ${queueId} following error, this should not happen`);\n      }\n      if (job.status === JOB_ERROR_STATUS) {\n        throw new Error(`Found error status for ${type} job #${id} in queue ${queueId} following error, this should not happen`);\n      }\n      if (job.status === JOB_ABORTED_STATUS) {\n        // Job was aborted while running\n        this.logger.error(`Found aborted status for ${type} job #${id} in queue ${queueId} following error, starting cleanup`);\n        await markJobErrorInDatabase(id);\n      } else if (hasFatalError) {\n        await markJobCleanupInDatabase(id);\n        this.emit('fatalError', { queueId });\n        await this.abortQueue(queueId);\n      } else if (delayRetryErrorMs > 0) {\n        const newStartAfter = Date.now() + delayRetryErrorMs;\n        this.logger.warn(`Delaying retry of ${type} job #${id} in queue ${queueId} by ${delayRetryErrorMs}ms to ${new Date(newStartAfter).toLocaleString()} following DelayRetryError`);\n        this.emit('delayRetry', { id, queueId, delay: delayRetryErrorMs });\n        await markJobStartAfterInDatabase(id, newStartAfter);\n        await markJobErrorInDatabase(id);\n      } else {\n        const retryDelayFunction = this.retryDelayMap.get(type);\n        if (typeof retryDelayFunction === 'function') {\n          const delayRetryMs = retryDelayFunction(attempt + 1);\n          if (delayRetryMs > 0) {\n            const newStartAfter = Date.now() + delayRetryMs;\n            this.logger.warn(`Delaying retry of ${type} job #${id} in queue ${queueId} by ${delayRetryMs}ms to ${new Date(newStartAfter).toLocaleString()}`);\n            this.emit('delayRetry', { id, queueId, delay: delayRetryMs });\n            await markJobStartAfterInDatabase(id, newStartAfter);\n          }\n        }\n        await markJobErrorInDatabase(id);\n      }\n      await this.dequeue();\n    };\n    this.addToQueue(queueId, priority, run);\n    this.emit('dequeue', { id });\n  }\n\n  handleInitializationMessage(event:ExtendableMessageEvent) {\n    if (!(event instanceof ExtendableMessageEvent)) {\n      return;\n    }\n    const { data } = event;\n    if (!data || typeof data !== 'object') {\n      return;\n    }\n    const { type } = data;\n    if (type !== 'BATTERY_QUEUE_WORKER_INITIALIZATION') {\n      return;\n    }\n    if (!Array.isArray(event.ports)) {\n      return;\n    }\n    const port = event.ports[0];\n    if (!(port instanceof MessagePort)) {\n      return;\n    }\n    port.postMessage({ type: 'BATTERY_QUEUE_WORKER_CONFIRMATION' });\n    this.logger.info('Linked to interface');\n    port.onmessage = this.handlePortMessage.bind(this);\n    this.emitCallbacks.push((t:string, args:Array<any>) => {\n      port.postMessage({ type: t, args });\n    });\n  }\n\n  async handlePortMessage(event:MessageEvent) {\n    if (!(event instanceof MessageEvent)) {\n      return;\n    }\n    const { data } = event;\n    if (!data || typeof data !== 'object') {\n      this.logger.warn('Invalid message data');\n      this.logger.warnObject(event);\n      return;\n    }\n    const { type, value } = data;\n    if (typeof type !== 'string') {\n      this.logger.warn('Unknown message type');\n      this.logger.warnObject(event);\n      return;\n    }\n    if (value === null || typeof value !== 'object') {\n      throw new Error('Message payload should be an object');\n    }\n    const { id } = value;\n    if (typeof id !== 'number') {\n      throw new Error('Message payload should include property id with type number');\n    }\n    switch (type) {\n      case 'clear':\n        try {\n          await this.clear();\n          this.emit('clearComplete', { id });\n        } catch (error) {\n          this.emit('clearError', { errorObject: errorObjectParser.serializeError(error), id });\n          this.logger.error('Unable to handle clear message');\n          this.logger.errorStack(error);\n        }\n        break;\n      case 'abortQueue':\n        try {\n          const { queueId } = value;\n          if (typeof queueId !== 'string') {\n            throw new Error('Message abort queue payload should include property queueId with type string');\n          }\n          await this.abortQueue(queueId);\n          this.emit('abortQueueComplete', { id });\n        } catch (error) {\n          this.emit('abortQueueError', { errorObject: errorObjectParser.serializeError(error), id });\n          this.logger.error('Unable to handle abort queue message');\n          this.logger.errorStack(error);\n        }\n        break;\n      case 'dequeue':\n        try {\n          await this.dequeue();\n          this.emit('dequeueComplete', { id });\n        } catch (error) {\n          this.emit('dequeueError', { errorObject: errorObjectParser.serializeError(error), id });\n          this.logger.error('Unable to handle dequeue message');\n          this.logger.errorStack(error);\n        }\n        break;\n      case 'idle':\n        try {\n          const { maxDuration, start } = value;\n          if (typeof maxDuration !== 'number') {\n            throw new Error('Message idle payload should include property maxDuration with type number');\n          }\n          if (typeof start !== 'number') {\n            throw new Error('Message idle payload should include property start with type number');\n          }\n          await this.onIdle(maxDuration - (Date.now() - start));\n          this.emit('idleComplete', { id });\n        } catch (error) {\n          this.emit('idleError', { errorObject: errorObjectParser.serializeError(error), id });\n          this.logger.error('Unable to handle idle message');\n          this.logger.errorStack(error);\n        }\n        break;\n      default:\n        this.logger.warn(`Unknown worker interface message type ${type}`);\n    }\n  }\n\n  listenForServiceWorkerInterface() {\n    self.addEventListener('message', this.handleInitializationMessage.bind(this));\n  }\n}\n\n"],"file":"queue.js"}