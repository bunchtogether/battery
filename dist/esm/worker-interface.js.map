{"version":3,"sources":["../../src/worker-interface.js"],"names":["EventEmitter","makeLogger","jobEmitter","localJobEmitter","canUseSyncManager","navigator","window","BatteryQueueServiceWorkerInterface","constructor","options","logger","on","isSyncing","getController","controller","serviceWorker","ServiceWorker","Error","link","port","MessagePort","ready","messageChannel","MessageChannel","port1","handleStateChange","warn","state","postMessage","type","args","error","errorStack","close","port2","onmessage","emit","self","queueMicrotask","catch","addEventListener","Promise","resolve","reject","timeout","setTimeout","removeEventListener","event","MessageEvent","data","warnObject","clearTimeout","Array","isArray","queueIds","Set","queueId","add","delete","size","handleJobAdd","handleJobDelete","handleJobUpdate","handleJobsClear","addListener","info","clear","maxDuration","requestId","Math","random","removeListener","handleClearComplete","handleClearError","responseId","abortQueue","handleAbortQueueComplete","handleAbortQueueError","dequeue","handleDequeueComplete","handleDequeueError","onIdle","handleIdleComplete","handleIdleError","Date","now","getQueueIds","handleGetQueuesComplete","handleGetQueuesError","qIds","enableStartOnJob","handleEnableStartOnJobComplete","handleEnableStartOnJobError","sync","disableStartOnJob","handledisableStartOnJobComplete","handledisableStartOnJobError","registration","register","handleOnIdleSync","handleIdle","handleUnlink"],"mappings":"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","sourcesContent":["// @flow\n\nimport EventEmitter from 'events';\nimport type { Logger } from './logger';\nimport makeLogger from './logger';\nimport { jobEmitter, localJobEmitter } from './database';\n\ntype Options = {\n  logger?: Logger\n};\n\nconst canUseSyncManager = 'serviceWorker' in navigator && 'SyncManager' in window;\n\nexport default class BatteryQueueServiceWorkerInterface extends EventEmitter {\n  declare serviceWorker: ServiceWorker;\n  declare logger: Logger;\n  declare port: MessagePort | void;\n  declare queueIds: Set<string> | void;\n  declare isSyncing: boolean;\n  declare handleJobAdd: void | () => void;\n\n  constructor(options?: Options = {}) {\n    super();\n    this.logger = options.logger || makeLogger('Battery Queue Worker Interface');\n    // This is a no-op to prevent errors from being thrown in the browser context.\n    // Errors are logged in the worker.\n    this.on('error', () => {});\n    this.isSyncing = false;\n  }\n\n  getController() {\n    const controller = navigator && navigator.serviceWorker && navigator.serviceWorker.controller;\n    if (controller instanceof ServiceWorker) {\n      return controller;\n    }\n    throw new Error('Service worker controller does not exist');\n  }\n\n  async link() {\n    if (this.port instanceof MessagePort) {\n      return this.port;\n    }\n\n    const serviceWorker = navigator && navigator.serviceWorker;\n\n    if (!serviceWorker) {\n      throw new Error('Service worker not available');\n    }\n\n    await serviceWorker.ready;\n\n    const messageChannel = new MessageChannel();\n\n    const port = messageChannel.port1;\n\n    const controller = this.getController();\n\n    const handleStateChange = () => {\n      this.logger.warn(`Service worker state change to ${controller.state}`);\n      if (controller.state !== 'redundant') {\n        return;\n      }\n      this.logger.warn('Detected redundant service worker, unlinking');\n      try {\n        port.postMessage({ type: 'unlink', args: [] });\n      } catch (error) {\n        this.logger.error('Error while posting unlink message to redundant service worker');\n        this.logger.errorStack(error);\n      }\n      try {\n        messageChannel.port1.close();\n        messageChannel.port2.close();\n      } catch (error) {\n        this.logger.error('Error while closing MessageChannel ports with redundant service worker');\n        this.logger.errorStack(error);\n      }\n      messageChannel.port1.onmessage = null;\n      delete this.port;\n      this.emit('unlink');\n      self.queueMicrotask(() => {\n        this.link().catch((error) => {\n          this.logger.error('Unable to re-link service worker');\n          this.logger.errorStack(error);\n        });\n      });\n    };\n\n    controller.addEventListener('statechange', handleStateChange);\n\n    await new Promise((resolve, reject) => {\n      const timeout = setTimeout(() => {\n        messageChannel.port1.onmessage = null;\n        controller.removeEventListener('statechange', handleStateChange);\n        reject(new Error('Unable to link to service worker'));\n      }, 1000);\n      messageChannel.port1.onmessage = (event:MessageEvent) => {\n        if (!(event instanceof MessageEvent)) {\n          return;\n        }\n        const { data } = event;\n        if (!data || typeof data !== 'object') {\n          this.logger.warn('Unknown message type');\n          this.logger.warnObject(event);\n          return;\n        }\n        const { type } = data;\n        if (typeof type !== 'string') {\n          this.logger.warn('Unknown message type');\n          this.logger.warnObject(event);\n          return;\n        }\n        if (type === 'BATTERY_QUEUE_WORKER_CONFIRMATION') {\n          clearTimeout(timeout);\n          resolve();\n        }\n      };\n      // $FlowFixMe\n      controller.postMessage({ type: 'BATTERY_QUEUE_WORKER_INITIALIZATION' }, [\n        messageChannel.port2,\n      ]);\n    });\n\n\n    messageChannel.port1.onmessage = (event:MessageEvent) => {\n      if (!(event instanceof MessageEvent)) {\n        return;\n      }\n      const { data } = event;\n      if (!data || typeof data !== 'object') {\n        this.logger.warn('Invalid message data');\n        this.logger.warnObject(event);\n        return;\n      }\n      const { type, args } = data;\n      if (typeof type !== 'string') {\n        this.logger.warn('Unknown message type');\n        this.logger.warnObject(event);\n        return;\n      }\n      if (!Array.isArray(args)) {\n        this.logger.warn('Unknown arguments type');\n        this.logger.warnObject(event);\n        return;\n      }\n      const queueIds = this.queueIds;\n      switch (type) {\n        case 'jobAdd':\n          jobEmitter.emit('jobAdd', ...args);\n          return;\n        case 'jobDelete':\n          jobEmitter.emit('jobDelete', ...args);\n          return;\n        case 'jobUpdate':\n          jobEmitter.emit('jobUpdate', ...args);\n          return;\n        case 'jobsClear':\n          jobEmitter.emit('jobsClear', ...args);\n          return;\n        case 'queueActive':\n          if (queueIds instanceof Set) {\n            const queueId = args[0];\n            if (typeof queueId === 'string') {\n              queueIds.add(queueId);\n            }\n          }\n          break;\n        case 'queueInactive':\n          if (queueIds instanceof Set) {\n            const queueId = args[0];\n            if (typeof queueId === 'string') {\n              queueIds.delete(queueId);\n              if (queueIds.size === 0) {\n                delete this.queueIds;\n              }\n            }\n          }\n          break;\n        default:\n          break;\n      }\n      this.emit(type, ...args);\n    };\n\n\n    const handleJobAdd = (...args:Array<any>) => {\n      port.postMessage({ type: 'jobAdd', args });\n    };\n    const handleJobDelete = (...args:Array<any>) => {\n      port.postMessage({ type: 'jobDelete', args });\n    };\n    const handleJobUpdate = (...args:Array<any>) => {\n      port.postMessage({ type: 'jobUpdate', args });\n    };\n    const handleJobsClear = (...args:Array<any>) => {\n      port.postMessage({ type: 'jobsClear', args });\n    };\n    localJobEmitter.addListener('jobAdd', handleJobAdd);\n    localJobEmitter.addListener('jobDelete', handleJobDelete);\n    localJobEmitter.addListener('jobUpdate', handleJobUpdate);\n    localJobEmitter.addListener('jobsClear', handleJobsClear);\n\n    this.port = messageChannel.port1;\n\n    this.logger.info('Linked to worker');\n    this.emit('link');\n    return messageChannel.port1;\n  }\n\n  async clear(maxDuration?: number = 1000) {\n    const port = await this.link();\n    await new Promise((resolve, reject) => {\n      const requestId = Math.random();\n      const timeout = setTimeout(() => {\n        this.removeListener('clearComplete', handleClearComplete);\n        this.removeListener('clearError', handleClearError);\n        reject(new Error(`Did not receive clear response within ${maxDuration}ms`));\n      }, maxDuration);\n      const handleClearComplete = (responseId:number) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('clearComplete', handleClearComplete);\n        this.removeListener('clearError', handleClearError);\n        resolve();\n      };\n      const handleClearError = (responseId:number, error:Error) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('clearComplete', handleClearComplete);\n        this.removeListener('clearError', handleClearError);\n        reject(error);\n      };\n      this.addListener('clearComplete', handleClearComplete);\n      this.addListener('clearError', handleClearError);\n      port.postMessage({ type: 'clear', args: [requestId] });\n    });\n  }\n\n  async abortQueue(queueId:string, maxDuration?: number = 1000) {\n    const port = await this.link();\n    await new Promise((resolve, reject) => {\n      const requestId = Math.random();\n      const timeout = setTimeout(() => {\n        this.removeListener('abortQueueComplete', handleAbortQueueComplete);\n        this.removeListener('abortQueueError', handleAbortQueueError);\n        reject(new Error(`Did not receive abort queue response within ${maxDuration}ms`));\n      }, maxDuration);\n      const handleAbortQueueComplete = (responseId:number) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('abortQueueComplete', handleAbortQueueComplete);\n        this.removeListener('abortQueueError', handleAbortQueueError);\n        resolve();\n      };\n      const handleAbortQueueError = (responseId:number, error:Error) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('abortQueueComplete', handleAbortQueueComplete);\n        this.removeListener('abortQueueError', handleAbortQueueError);\n        reject(error);\n      };\n      this.addListener('abortQueueComplete', handleAbortQueueComplete);\n      this.addListener('abortQueueError', handleAbortQueueError);\n      port.postMessage({ type: 'abortQueue', args: [requestId, queueId] });\n    });\n  }\n\n  async dequeue(maxDuration?: number = 1000) {\n    const port = await this.link();\n    await new Promise((resolve, reject) => {\n      const requestId = Math.random();\n      const timeout = setTimeout(() => {\n        this.removeListener('dequeueComplete', handleDequeueComplete);\n        this.removeListener('dequeueError', handleDequeueError);\n        reject(new Error(`Did not receive dequeue response within ${maxDuration}ms`));\n      }, maxDuration);\n      const handleDequeueComplete = (responseId:number) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('dequeueComplete', handleDequeueComplete);\n        this.removeListener('dequeueError', handleDequeueError);\n        resolve();\n      };\n      const handleDequeueError = (responseId:number, error:Error) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('dequeueComplete', handleDequeueComplete);\n        this.removeListener('dequeueError', handleDequeueError);\n        reject(error);\n      };\n      this.addListener('dequeueComplete', handleDequeueComplete);\n      this.addListener('dequeueError', handleDequeueError);\n      port.postMessage({ type: 'dequeue', args: [requestId] });\n    });\n  }\n\n  async onIdle(maxDuration?: number = 1000) {\n    const port = await this.link();\n    await new Promise((resolve, reject) => {\n      const requestId = Math.random();\n      const timeout = setTimeout(() => {\n        this.removeListener('idleComplete', handleIdleComplete);\n        this.removeListener('idleError', handleIdleError);\n        reject(new Error(`Did not receive idle response within ${maxDuration}ms`));\n      }, maxDuration);\n      const handleIdleComplete = (responseId:number) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('idleComplete', handleIdleComplete);\n        this.removeListener('idleError', handleIdleError);\n        resolve();\n      };\n      const handleIdleError = (responseId:number, error:Error) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('idleComplete', handleIdleComplete);\n        this.removeListener('idleError', handleIdleError);\n        reject(error);\n      };\n      this.addListener('idleComplete', handleIdleComplete);\n      this.addListener('idleError', handleIdleError);\n      port.postMessage({ type: 'idle', args: [requestId, maxDuration, Date.now()] });\n    });\n  }\n\n  async getQueueIds(maxDuration?: number = 1000) {\n    if (this.queueIds instanceof Set) {\n      return this.queueIds;\n    }\n    const port = await this.link();\n    const queueIds = await new Promise((resolve, reject) => {\n      const requestId = Math.random();\n      const timeout = setTimeout(() => {\n        this.removeListener('getQueuesComplete', handleGetQueuesComplete);\n        this.removeListener('getQueuesError', handleGetQueuesError);\n        reject(new Error(`Did not receive idle response within ${maxDuration}ms`));\n      }, maxDuration);\n      const handleGetQueuesComplete = (responseId:number, qIds:Array<string>) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('getQueuesComplete', handleGetQueuesComplete);\n        this.removeListener('getQueuesError', handleGetQueuesError);\n        resolve((new Set(qIds): Set<string>));\n      };\n      const handleGetQueuesError = (responseId:number, error:Error) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('getQueuesComplete', handleGetQueuesComplete);\n        this.removeListener('getQueuesError', handleGetQueuesError);\n        reject(error);\n      };\n      this.addListener('getQueuesComplete', handleGetQueuesComplete);\n      this.addListener('getQueuesError', handleGetQueuesError);\n      port.postMessage({ type: 'getQueueIds', args: [requestId] });\n    });\n    if (queueIds.size > 0) {\n      this.queueIds = queueIds;\n    }\n    return queueIds;\n  }\n\n  async enableStartOnJob(maxDuration?: number = 1000) {\n    const port = await this.link();\n    await new Promise((resolve, reject) => {\n      const requestId = Math.random();\n      const timeout = setTimeout(() => {\n        this.removeListener('enableStartOnJobComplete', handleEnableStartOnJobComplete);\n        this.removeListener('enableStartOnJobError', handleEnableStartOnJobError);\n        reject(new Error(`Did not receive enableStartOnJob response within ${maxDuration}ms`));\n      }, maxDuration);\n      const handleEnableStartOnJobComplete = (responseId:number) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('enableStartOnJobComplete', handleEnableStartOnJobComplete);\n        this.removeListener('enableStartOnJobError', handleEnableStartOnJobError);\n        resolve();\n      };\n      const handleEnableStartOnJobError = (responseId:number, error:Error) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('enableStartOnJobComplete', handleEnableStartOnJobComplete);\n        this.removeListener('enableStartOnJobError', handleEnableStartOnJobError);\n        reject(error);\n      };\n      this.addListener('enableStartOnJobComplete', handleEnableStartOnJobComplete);\n      this.addListener('enableStartOnJobError', handleEnableStartOnJobError);\n      port.postMessage({ type: 'enableStartOnJob', args: [requestId] });\n    });\n    const handleJobAdd = () => {\n      this.sync();\n    };\n    jobEmitter.addListener('jobAdd', handleJobAdd);\n    this.handleJobAdd = handleJobAdd;\n  }\n\n  async disableStartOnJob(maxDuration?: number = 1000) {\n    const handleJobAdd = this.handleJobAdd;\n    if (typeof handleJobAdd === 'function') {\n      jobEmitter.removeListener('jobAdd', handleJobAdd);\n    }\n    const port = await this.link();\n    await new Promise((resolve, reject) => {\n      const requestId = Math.random();\n      const timeout = setTimeout(() => {\n        this.removeListener('disableStartOnJobComplete', handledisableStartOnJobComplete);\n        this.removeListener('disableStartOnJobError', handledisableStartOnJobError);\n        reject(new Error(`Did not receive disableStartOnJob response within ${maxDuration}ms`));\n      }, maxDuration);\n      const handledisableStartOnJobComplete = (responseId:number) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('disableStartOnJobComplete', handledisableStartOnJobComplete);\n        this.removeListener('disableStartOnJobError', handledisableStartOnJobError);\n        resolve();\n      };\n      const handledisableStartOnJobError = (responseId:number, error:Error) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('disableStartOnJobComplete', handledisableStartOnJobComplete);\n        this.removeListener('disableStartOnJobError', handledisableStartOnJobError);\n        reject(error);\n      };\n      this.addListener('disableStartOnJobComplete', handledisableStartOnJobComplete);\n      this.addListener('disableStartOnJobError', handledisableStartOnJobError);\n      port.postMessage({ type: 'disableStartOnJob', args: [requestId] });\n    });\n  }\n\n  async sync() {\n    if (!canUseSyncManager) {\n      return;\n    }\n    if (this.isSyncing) {\n      return;\n    }\n    this.isSyncing = true;\n    try {\n      await this.link();\n      this.logger.info('Sending sync event');\n      const serviceWorker = navigator && navigator.serviceWorker;\n      if (!serviceWorker) {\n        throw new Error('Service worker not available');\n      }\n      const registration = await serviceWorker.ready;\n      // $FlowFixMe\n      registration.sync.register('syncManagerOnIdle');\n      await new Promise((resolve, reject) => {\n        const timeout = setTimeout(() => {\n          this.removeListener('syncManagerOnIdle', handleOnIdleSync);\n          reject(new Error('Unable to sync, did not receive syncManagerOnIdle acknowledgement'));\n        }, 5000);\n        const handleOnIdleSync = () => {\n          clearTimeout(timeout);\n          this.removeListener('syncManagerOnIdle', handleOnIdleSync);\n          resolve();\n        };\n        this.addListener('syncManagerOnIdle', handleOnIdleSync);\n      });\n      await new Promise((resolve) => {\n        const handleIdle = () => {\n          this.removeListener('idle', handleIdle);\n          this.removeListener('unlink', handleUnlink);\n          resolve();\n        };\n        const handleUnlink = () => {\n          this.removeListener('idle', handleIdle);\n          this.removeListener('unlink', handleUnlink);\n          resolve();\n        };\n        this.addListener('idle', handleIdle);\n        this.addListener('unlink', handleUnlink);\n      });\n    } catch (error) {\n      this.logger.error('Unable to sync');\n      this.emit('error', error);\n      this.logger.errorStack(error);\n    }\n    this.isSyncing = false;\n  }\n}\n"],"file":"worker-interface.js"}