{"version":3,"sources":["../../src/worker-interface.js"],"names":["EventEmitter","makeLogger","jobEmitter","localJobEmitter","canUseSyncManager","navigator","window","RedundantServiceWorkerError","Error","BatteryQueueServiceWorkerInterface","constructor","options","logger","on","isSyncing","getRegistrationAndController","serviceWorker","registration","ready","controller","state","hadControllerChange","info","Promise","resolve","timeout","setTimeout","removeEventListener","handleStateChange","handleControllerChange","clearTimeout","addEventListener","cleanup","linkPromise","error","errorStack","port","MessagePort","postMessage","type","args","Math","random","clearInterval","portHeartbeatInterval","handlePortHeartbeat","removeListener","handleBeforeUnload","capture","handleJobAdd","portHandleJobAdd","handleJobDelete","portHandleJobDelete","handleJobUpdate","portHandleJobUpdate","handleJobsClear","portHandleJobsClear","close","onmessage","emit","unlink","maxDuration","requestId","handleUnlinkComplete","handleUnlinkError","responseId","addListener","link","_link","finally","messageChannel","MessageChannel","port1","handleUpdateFound","installingWorker","installing","activeWorker","active","warn","reject","handleStateChangeBeforeLink","event","MessageEvent","data","warnObject","port2","Array","isArray","queueIds","Set","queueId","add","delete","size","didReceiveHeartbeat","missedHeartbeatCount","sendHeartbeat","setInterval","sync","register","clear","handleClearComplete","handleClearError","updateDurationEstimates","handleUpdateDurationEstimatesComplete","handleUpdateDurationEstimatesError","abortQueue","handleAbortQueueComplete","handleAbortQueueError","abortAndRemoveQueue","abortAndRemoveQueueJobsGreaterThanId","id","handleAbortAndRemoveQueueJobsGreaterThanIdComplete","handleAbortAndRemoveQueueJobsGreaterThanIdError","retryQueue","handleRetryQueueComplete","handleRetryQueueError","dequeue","handleDequeueComplete","handleDequeueError","runUnloadHandlers","handleRunUnloadHandlersComplete","handleRunUnloadHandlersError","onIdle","handleIdleComplete","handleIdleError","Date","now","getQueueIds","handleGetQueuesComplete","handleGetQueuesError","qIds","enableStartOnJob","handleEnableStartOnJobComplete","handleEnableStartOnJobError","disableStartOnJob","handledisableStartOnJobComplete","handledisableStartOnJobError","getDurationEstimate","handleGetDurationEstimateComplete","handleGetDurationEstimateError","values","getCurrentJobType","handleGetCurrentJobTypeComplete","handleGetCurrentJobTypeError","handleOnIdleSync","handleIdle","handleUnlink"],"mappings":"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","sourcesContent":["// @flow\n\nimport EventEmitter from 'events';\nimport type { Logger } from './logger';\nimport makeLogger from './logger';\nimport { jobEmitter, localJobEmitter } from './database';\n\ntype Options = {\n  logger?: Logger\n};\n\nconst canUseSyncManager = 'serviceWorker' in navigator && 'SyncManager' in window;\n\nclass RedundantServiceWorkerError extends Error {}\n\nexport default class BatteryQueueServiceWorkerInterface extends EventEmitter {\n  declare serviceWorker: ServiceWorker;\n  declare logger: Logger;\n  declare port: MessagePort | void;\n  declare portHeartbeatInterval: void | IntervalID;\n  declare handlePortHeartbeat: void | () => void;\n  declare handleBeforeUnload: void | () => void;\n  declare queueIds: Set<string> | void;\n  declare isSyncing: boolean;\n  declare handleJobAdd: void | () => void;\n  declare linkPromise: void | Promise<MessagePort>;\n  declare portHandleJobAdd: (...args:Array<any>) => void;\n  declare portHandleJobDelete: (...args:Array<any>) => void;\n  declare portHandleJobUpdate: (...args:Array<any>) => void;\n  declare portHandleJobsClear: (...args:Array<any>) => void;\n\n  constructor(options?: Options = {}) {\n    super();\n    this.logger = options.logger || makeLogger('Battery Queue Worker Interface');\n    // This is a no-op to prevent errors from being thrown in the browser context.\n    // Errors are logged in the worker.\n    this.on('error', () => {});\n    this.isSyncing = false;\n  }\n\n  async getRegistrationAndController() {\n    const serviceWorker = navigator && navigator.serviceWorker;\n\n    if (!serviceWorker) {\n      throw new Error('Service worker not available');\n    }\n\n    const registration = await serviceWorker.ready;\n\n    const { controller } = serviceWorker;\n\n    if (!controller) {\n      throw new Error('Service worker controller not available');\n    }\n\n    while (controller.state !== 'activated') {\n      const state = controller.state;\n      let hadControllerChange = false;\n      this.logger.info(`Service worker in \"${state}\" state, waiting for state or controller change`);\n      await new Promise((resolve) => {\n        const timeout = setTimeout(() => {\n          controller.removeEventListener('statechange', handleStateChange);\n          serviceWorker.removeEventListener('controllerchange', handleControllerChange);\n          throw new Error(`Unable to get service worker controller, state did not change from \"${state}\" within 5000ms`);\n        }, 5000);\n        const handleStateChange = () => {\n          if (controller.state !== 'activated') {\n            return;\n          }\n          clearTimeout(timeout);\n          controller.removeEventListener('statechange', handleStateChange);\n          serviceWorker.removeEventListener('controllerchange', handleControllerChange);\n          resolve();\n        };\n        const handleControllerChange = () => {\n          hadControllerChange = true;\n          clearTimeout(timeout);\n          controller.removeEventListener('statechange', handleStateChange);\n          serviceWorker.removeEventListener('controllerchange', handleControllerChange);\n          resolve();\n        };\n        serviceWorker.addEventListener('controllerchange', handleControllerChange);\n        controller.addEventListener('statechange', handleStateChange);\n      });\n      if (hadControllerChange) {\n        return this.getRegistrationAndController();\n      }\n    }\n    return [registration, controller];\n  }\n\n  async cleanup() {\n    this.logger.info('Cleaning up');\n    const linkPromise = this.linkPromise;\n    if (typeof linkPromise !== 'undefined') {\n      try {\n        await linkPromise;\n      } catch (error) {\n        this.logger.error('Link promise error while waiting to cleanup');\n        this.logger.errorStack(error);\n      }\n    }\n    const port = this.port;\n    if (!(port instanceof MessagePort)) {\n      return;\n    }\n    port.postMessage({ type: 'unlink', args: [Math.random()] });\n    delete this.port;\n    clearInterval(this.portHeartbeatInterval);\n    delete this.portHeartbeatInterval;\n    const handlePortHeartbeat = this.handlePortHeartbeat;\n    if (typeof handlePortHeartbeat === 'function') {\n      this.removeListener('heartbeat', this.handlePortHeartbeat);\n    }\n    const handleBeforeUnload = this.handleBeforeUnload;\n    if (typeof handlePortHeartbeat === 'function') {\n      window.removeEventListener('beforeunload', handleBeforeUnload, { capture: true });\n    }\n    const handleJobAdd = this.portHandleJobAdd;\n    if (typeof handleJobAdd === 'function') {\n      localJobEmitter.removeListener('jobAdd', handleJobAdd);\n    }\n    const handleJobDelete = this.portHandleJobDelete;\n    if (typeof handleJobDelete === 'function') {\n      localJobEmitter.removeListener('jobDelete', handleJobDelete);\n    }\n    const handleJobUpdate = this.portHandleJobUpdate;\n    if (typeof handleJobUpdate === 'function') {\n      localJobEmitter.removeListener('jobDelete', handleJobUpdate);\n    }\n    const handleJobsClear = this.portHandleJobsClear;\n    if (typeof handleJobsClear === 'function') {\n      localJobEmitter.removeListener('jobsClear', handleJobsClear);\n    }\n    try {\n      port.close();\n    } catch (error) {\n      this.logger.error('Error while closing MessageChannel port during cleanup');\n      this.logger.errorStack(error);\n    }\n    port.onmessage = null;\n    this.emit('unlink');\n    this.logger.info('Unlinked after close');\n  }\n\n  async unlink(maxDuration?: number = 60000) {\n    const linkPromise = this.linkPromise;\n    if (typeof linkPromise !== 'undefined') {\n      try {\n        await linkPromise;\n      } catch (error) {\n        this.logger.error('Link promise error while waiting to unlink');\n        this.logger.errorStack(error);\n      }\n    }\n    const port = this.port;\n    if (!(port instanceof MessagePort)) {\n      return;\n    }\n    delete this.port;\n    clearInterval(this.portHeartbeatInterval);\n    delete this.portHeartbeatInterval;\n    const handlePortHeartbeat = this.handlePortHeartbeat;\n    if (typeof handlePortHeartbeat === 'function') {\n      this.removeListener('heartbeat', this.handlePortHeartbeat);\n    }\n    const handleBeforeUnload = this.handleBeforeUnload;\n    if (typeof handlePortHeartbeat === 'function') {\n      window.removeEventListener('beforeunload', handleBeforeUnload, { capture: true });\n    }\n    const handleJobAdd = this.portHandleJobAdd;\n    if (typeof handleJobAdd === 'function') {\n      localJobEmitter.removeListener('jobAdd', handleJobAdd);\n    }\n    const handleJobDelete = this.portHandleJobDelete;\n    if (typeof handleJobDelete === 'function') {\n      localJobEmitter.removeListener('jobDelete', handleJobDelete);\n    }\n    const handleJobUpdate = this.portHandleJobUpdate;\n    if (typeof handleJobUpdate === 'function') {\n      localJobEmitter.removeListener('jobDelete', handleJobUpdate);\n    }\n    const handleJobsClear = this.portHandleJobsClear;\n    if (typeof handleJobsClear === 'function') {\n      localJobEmitter.removeListener('jobsClear', handleJobsClear);\n    }\n\n    await new Promise((resolve) => {\n      const requestId = Math.random();\n      const timeout = setTimeout(() => {\n        this.removeListener('unlinkComplete', handleUnlinkComplete);\n        this.removeListener('unlinkError', handleUnlinkError);\n        this.logger.error(`Did not receive unlink response within ${maxDuration}ms`);\n        resolve();\n      }, maxDuration);\n      const handleUnlinkComplete = (responseId:number) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('unlinkComplete', handleUnlinkComplete);\n        this.removeListener('unlinkError', handleUnlinkError);\n        resolve();\n      };\n      const handleUnlinkError = (responseId:number, error:Error) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('unlinkComplete', handleUnlinkComplete);\n        this.removeListener('unlinkError', handleUnlinkError);\n        this.logger.error('Received unlink error');\n        this.logger.errorStack(error);\n        resolve();\n      };\n      this.addListener('unlinkComplete', handleUnlinkComplete);\n      this.addListener('unlinkError', handleUnlinkError);\n      port.postMessage({ type: 'unlink', args: [requestId] });\n    });\n    try {\n      port.close();\n    } catch (error) {\n      this.logger.error('Error while closing MessageChannel port during unlink');\n      this.logger.errorStack(error);\n    }\n    port.onmessage = null;\n    this.emit('unlink');\n    this.logger.info('Unlinked');\n  }\n\n  async link() {\n    if (this.port instanceof MessagePort) {\n      return this.port;\n    }\n    if (this.linkPromise) {\n      return this.linkPromise;\n    }\n    const linkPromise = this._link().finally(() => { // eslint-disable-line no-underscore-dangle\n      delete this.linkPromise;\n    });\n    this.linkPromise = linkPromise;\n    return linkPromise;\n  }\n\n  async _link() {\n    if (this.port instanceof MessagePort) {\n      return this.port;\n    }\n\n    const [registration, controller] = await this.getRegistrationAndController();\n\n    const messageChannel = new MessageChannel();\n\n    const port = messageChannel.port1;\n    this.port = messageChannel.port1;\n\n    const handleUpdateFound = async () => {\n      const installingWorker = registration.installing;\n      const activeWorker = registration.active;\n      if (!installingWorker) {\n        return;\n      }\n      if (!activeWorker) {\n        return;\n      }\n      registration.removeEventListener('updatefound', handleUpdateFound);\n      controller.removeEventListener('statechange', handleStateChange);\n      try {\n        await this.unlink();\n        this.logger.info('Unlinked service worker after detecting new service worker');\n      } catch (error) {\n        this.logger.error('Unable to unlink service worker after detecting new service worker');\n        this.logger.errorStack(error);\n      }\n    };\n\n    const handleStateChange = async () => {\n      this.logger.warn(`Service worker state change to ${controller.state}`);\n      if (controller.state !== 'redundant') {\n        return;\n      }\n      registration.removeEventListener('updatefound', handleUpdateFound);\n      controller.removeEventListener('statechange', handleStateChange);\n      try {\n        await this.unlink();\n        this.logger.info('Unlinked service worker after detecting redundant service worker');\n      } catch (error) {\n        this.logger.error('Unable to unlink service worker after detecting redundant service worker');\n        this.logger.errorStack(error);\n      }\n    };\n\n    registration.addEventListener('updatefound', handleUpdateFound);\n    controller.addEventListener('statechange', handleStateChange);\n\n    try {\n      await new Promise((resolve, reject) => {\n        const timeout = setTimeout(() => {\n          messageChannel.port1.onmessage = null;\n          controller.removeEventListener('statechange', handleStateChangeBeforeLink);\n          reject(new Error('Unable to link to service worker'));\n        }, 1000);\n        const handleStateChangeBeforeLink = () => {\n          if (controller.state !== 'redundant') {\n            return;\n          }\n          clearTimeout(timeout);\n          controller.removeEventListener('statechange', handleStateChangeBeforeLink);\n          reject(new RedundantServiceWorkerError('Service worker in redundant state'));\n        };\n        controller.addEventListener('statechange', handleStateChangeBeforeLink);\n        messageChannel.port1.onmessage = (event:MessageEvent) => {\n          if (!(event instanceof MessageEvent)) {\n            return;\n          }\n          const { data } = event;\n          if (!data || typeof data !== 'object') {\n            this.logger.warn('Unknown message type');\n            this.logger.warnObject(event);\n            return;\n          }\n          const { type } = data;\n          if (typeof type !== 'string') {\n            this.logger.warn('Unknown message type');\n            this.logger.warnObject(event);\n            return;\n          }\n          if (type === 'BATTERY_QUEUE_WORKER_CONFIRMATION') {\n            clearTimeout(timeout);\n            controller.removeEventListener('statechange', handleStateChangeBeforeLink);\n            resolve();\n          }\n        };\n        // $FlowFixMe\n        controller.postMessage({ type: 'BATTERY_QUEUE_WORKER_INITIALIZATION' }, [\n          messageChannel.port2,\n        ]);\n      });\n    } catch (error) {\n      registration.removeEventListener('updatefound', handleUpdateFound);\n      controller.removeEventListener('statechange', handleStateChange);\n      if (error instanceof RedundantServiceWorkerError) {\n        return messageChannel.port1;\n      }\n      throw error;\n    }\n\n    messageChannel.port1.onmessage = (event:MessageEvent) => {\n      if (!(event instanceof MessageEvent)) {\n        return;\n      }\n      const { data } = event;\n      if (!data || typeof data !== 'object') {\n        this.logger.warn('Invalid message data');\n        this.logger.warnObject(event);\n        return;\n      }\n      const { type, args } = data;\n      if (typeof type !== 'string') {\n        this.logger.warn('Unknown message type');\n        this.logger.warnObject(event);\n        return;\n      }\n      if (!Array.isArray(args)) {\n        this.logger.warn('Unknown arguments type');\n        this.logger.warnObject(event);\n        return;\n      }\n      const queueIds = this.queueIds;\n      switch (type) {\n        case 'jobAdd':\n          jobEmitter.emit('jobAdd', ...args);\n          return;\n        case 'jobDelete':\n          jobEmitter.emit('jobDelete', ...args);\n          return;\n        case 'jobUpdate':\n          jobEmitter.emit('jobUpdate', ...args);\n          return;\n        case 'jobsClear':\n          jobEmitter.emit('jobsClear', ...args);\n          return;\n        case 'closed':\n          this.logger.warn('Received unexpected \"closed\" event');\n          this.cleanup();\n          return;\n        case 'queueActive':\n          if (queueIds instanceof Set) {\n            const queueId = args[0];\n            if (typeof queueId === 'string') {\n              queueIds.add(queueId);\n            }\n          }\n          break;\n        case 'queueInactive':\n          if (queueIds instanceof Set) {\n            const queueId = args[0];\n            if (typeof queueId === 'string') {\n              queueIds.delete(queueId);\n              if (queueIds.size === 0) {\n                delete this.queueIds;\n              }\n            }\n          }\n          break;\n        default:\n          break;\n      }\n      this.emit(type, ...args);\n    };\n\n\n    const handleJobAdd = (...args:Array<any>) => {\n      port.postMessage({ type: 'jobAdd', args });\n    };\n    const handleJobDelete = (...args:Array<any>) => {\n      port.postMessage({ type: 'jobDelete', args });\n    };\n    const handleJobUpdate = (...args:Array<any>) => {\n      port.postMessage({ type: 'jobUpdate', args });\n    };\n    const handleJobsClear = (...args:Array<any>) => {\n      port.postMessage({ type: 'jobsClear', args });\n    };\n\n    localJobEmitter.addListener('jobAdd', handleJobAdd);\n    localJobEmitter.addListener('jobDelete', handleJobDelete);\n    localJobEmitter.addListener('jobUpdate', handleJobUpdate);\n    localJobEmitter.addListener('jobsClear', handleJobsClear);\n\n    this.portHandleJobAdd = handleJobAdd;\n    this.portHandleJobDelete = handleJobDelete;\n    this.portHandleJobUpdate = handleJobUpdate;\n    this.portHandleJobsClear = handleJobsClear;\n\n    let didReceiveHeartbeat = true;\n    let missedHeartbeatCount = 0;\n\n    const handlePortHeartbeat = () => {\n      missedHeartbeatCount = 0;\n      didReceiveHeartbeat = true;\n    };\n    this.addListener('heartbeat', handlePortHeartbeat);\n    this.handlePortHeartbeat = handlePortHeartbeat;\n\n    const sendHeartbeat = () => {\n      if (!didReceiveHeartbeat) {\n        missedHeartbeatCount += 1;\n        this.logger.error(`Did not receive ${missedHeartbeatCount} port ${missedHeartbeatCount === 1 ? 'heartbeat' : 'heartbeats'}`);\n        if (missedHeartbeatCount > 2) {\n          this.cleanup();\n          return;\n        }\n      }\n      didReceiveHeartbeat = false;\n      port.postMessage({ type: 'heartbeat', args: [10000] });\n    };\n    this.portHeartbeatInterval = setInterval(sendHeartbeat, 10000);\n    sendHeartbeat();\n    const handleBeforeUnload = () => {\n      if (!canUseSyncManager) {\n        return;\n      }\n      // $FlowFixMe\n      registration.sync.register('unload');\n    };\n    this.handleBeforeUnload = handleBeforeUnload;\n    window.addEventListener('beforeunload', handleBeforeUnload, { capture: true });\n\n    this.logger.info('Linked to worker');\n    this.emit('link');\n    return messageChannel.port1;\n  }\n\n  async clear(maxDuration?: number = 1000) {\n    const port = await this.link();\n    await new Promise((resolve, reject) => {\n      const requestId = Math.random();\n      const timeout = setTimeout(() => {\n        this.removeListener('clearComplete', handleClearComplete);\n        this.removeListener('clearError', handleClearError);\n        reject(new Error(`Did not receive clear response within ${maxDuration}ms`));\n      }, maxDuration);\n      const handleClearComplete = (responseId:number) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('clearComplete', handleClearComplete);\n        this.removeListener('clearError', handleClearError);\n        resolve();\n      };\n      const handleClearError = (responseId:number, error:Error) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('clearComplete', handleClearComplete);\n        this.removeListener('clearError', handleClearError);\n        reject(error);\n      };\n      this.addListener('clearComplete', handleClearComplete);\n      this.addListener('clearError', handleClearError);\n      port.postMessage({ type: 'clear', args: [requestId] });\n    });\n  }\n\n  async updateDurationEstimates(maxDuration?: number = 1000) {\n    const port = await this.link();\n    await new Promise((resolve, reject) => {\n      const requestId = Math.random();\n      const timeout = setTimeout(() => {\n        this.removeListener('updateDurationEstimatesComplete', handleUpdateDurationEstimatesComplete);\n        this.removeListener('updateDurationEstimatesError', handleUpdateDurationEstimatesError);\n        reject(new Error(`Did not receive update duration estimates response within ${maxDuration}ms`));\n      }, maxDuration);\n      const handleUpdateDurationEstimatesComplete = (responseId:number) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('updateDurationEstimatesComplete', handleUpdateDurationEstimatesComplete);\n        this.removeListener('updateDurationEstimatesError', handleUpdateDurationEstimatesError);\n        resolve();\n      };\n      const handleUpdateDurationEstimatesError = (responseId:number, error:Error) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('updateDurationEstimatesComplete', handleUpdateDurationEstimatesComplete);\n        this.removeListener('updateDurationEstimatesError', handleUpdateDurationEstimatesError);\n        reject(error);\n      };\n      this.addListener('updateDurationEstimatesComplete', handleUpdateDurationEstimatesComplete);\n      this.addListener('updateDurationEstimatesError', handleUpdateDurationEstimatesError);\n      port.postMessage({ type: 'updateDurationEstimates', args: [requestId] });\n    });\n  }\n\n  async abortQueue(queueId:string, maxDuration?: number = 1000) {\n    const port = await this.link();\n    await new Promise((resolve, reject) => {\n      const requestId = Math.random();\n      const timeout = setTimeout(() => {\n        this.removeListener('abortQueueComplete', handleAbortQueueComplete);\n        this.removeListener('abortQueueError', handleAbortQueueError);\n        reject(new Error(`Did not receive abort queue response within ${maxDuration}ms`));\n      }, maxDuration);\n      const handleAbortQueueComplete = (responseId:number) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('abortQueueComplete', handleAbortQueueComplete);\n        this.removeListener('abortQueueError', handleAbortQueueError);\n        resolve();\n      };\n      const handleAbortQueueError = (responseId:number, error:Error) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('abortQueueComplete', handleAbortQueueComplete);\n        this.removeListener('abortQueueError', handleAbortQueueError);\n        reject(error);\n      };\n      this.addListener('abortQueueComplete', handleAbortQueueComplete);\n      this.addListener('abortQueueError', handleAbortQueueError);\n      port.postMessage({ type: 'abortQueue', args: [requestId, queueId] });\n    });\n  }\n\n  async abortAndRemoveQueue(queueId:string, maxDuration?: number = 1000) {\n    const port = await this.link();\n    await new Promise((resolve, reject) => {\n      const requestId = Math.random();\n      const timeout = setTimeout(() => {\n        this.removeListener('abortAndRemoveQueueComplete', handleAbortQueueComplete);\n        this.removeListener('abortAndRemoveQueueError', handleAbortQueueError);\n        reject(new Error(`Did not receive abort queue response within ${maxDuration}ms`));\n      }, maxDuration);\n      const handleAbortQueueComplete = (responseId:number) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('abortAndRemoveQueueComplete', handleAbortQueueComplete);\n        this.removeListener('abortAndRemoveQueueError', handleAbortQueueError);\n        resolve();\n      };\n      const handleAbortQueueError = (responseId:number, error:Error) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('abortAndRemoveQueueComplete', handleAbortQueueComplete);\n        this.removeListener('abortAndRemoveQueueError', handleAbortQueueError);\n        reject(error);\n      };\n      this.addListener('abortAndRemoveQueueComplete', handleAbortQueueComplete);\n      this.addListener('abortAndRemoveQueueError', handleAbortQueueError);\n      port.postMessage({ type: 'abortAndRemoveQueue', args: [requestId, queueId] });\n    });\n  }\n\n  async abortAndRemoveQueueJobsGreaterThanId(queueId:string, id:number, maxDuration?: number = 1000) {\n    const port = await this.link();\n    await new Promise((resolve, reject) => {\n      const requestId = Math.random();\n      const timeout = setTimeout(() => {\n        this.removeListener('abortAndRemoveQueueJobsGreaterThanIdComplete', handleAbortAndRemoveQueueJobsGreaterThanIdComplete);\n        this.removeListener('abortAndRemoveQueueJobsGreaterThanIdError', handleAbortAndRemoveQueueJobsGreaterThanIdError);\n        reject(new Error(`Did not receive abort queue response within ${maxDuration}ms`));\n      }, maxDuration);\n      const handleAbortAndRemoveQueueJobsGreaterThanIdComplete = (responseId:number) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('abortAndRemoveQueueJobsGreaterThanIdComplete', handleAbortAndRemoveQueueJobsGreaterThanIdComplete);\n        this.removeListener('abortAndRemoveQueueJobsGreaterThanIdError', handleAbortAndRemoveQueueJobsGreaterThanIdError);\n        resolve();\n      };\n      const handleAbortAndRemoveQueueJobsGreaterThanIdError = (responseId:number, error:Error) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('abortAndRemoveQueueJobsGreaterThanIdComplete', handleAbortAndRemoveQueueJobsGreaterThanIdComplete);\n        this.removeListener('abortAndRemoveQueueJobsGreaterThanIdError', handleAbortAndRemoveQueueJobsGreaterThanIdError);\n        reject(error);\n      };\n      this.addListener('abortAndRemoveQueueJobsGreaterThanIdComplete', handleAbortAndRemoveQueueJobsGreaterThanIdComplete);\n      this.addListener('abortAndRemoveQueueJobsGreaterThanIdError', handleAbortAndRemoveQueueJobsGreaterThanIdError);\n      port.postMessage({ type: 'abortAndRemoveQueueJobsGreaterThanId', args: [requestId, queueId, id] });\n    });\n  }\n\n  async retryQueue(queueId:string, maxDuration?: number = 1000) {\n    const port = await this.link();\n    await new Promise((resolve, reject) => {\n      const requestId = Math.random();\n      const timeout = setTimeout(() => {\n        this.removeListener('retryQueueComplete', handleRetryQueueComplete);\n        this.removeListener('retryQueueError', handleRetryQueueError);\n        reject(new Error(`Did not receive retry queue response within ${maxDuration}ms`));\n      }, maxDuration);\n      const handleRetryQueueComplete = (responseId:number) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('retryQueueComplete', handleRetryQueueComplete);\n        this.removeListener('retryQueueError', handleRetryQueueError);\n        resolve();\n      };\n      const handleRetryQueueError = (responseId:number, error:Error) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('retryQueueComplete', handleRetryQueueComplete);\n        this.removeListener('retryQueueError', handleRetryQueueError);\n        reject(error);\n      };\n      this.addListener('retryQueueComplete', handleRetryQueueComplete);\n      this.addListener('retryQueueError', handleRetryQueueError);\n      port.postMessage({ type: 'retryQueue', args: [requestId, queueId] });\n    });\n  }\n\n  async dequeue(maxDuration?: number = 1000) {\n    const port = await this.link();\n    await new Promise((resolve, reject) => {\n      const requestId = Math.random();\n      const timeout = setTimeout(() => {\n        this.removeListener('dequeueComplete', handleDequeueComplete);\n        this.removeListener('dequeueError', handleDequeueError);\n        reject(new Error(`Did not receive dequeue response within ${maxDuration}ms`));\n      }, maxDuration);\n      const handleDequeueComplete = (responseId:number) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('dequeueComplete', handleDequeueComplete);\n        this.removeListener('dequeueError', handleDequeueError);\n        resolve();\n      };\n      const handleDequeueError = (responseId:number, error:Error) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('dequeueComplete', handleDequeueComplete);\n        this.removeListener('dequeueError', handleDequeueError);\n        reject(error);\n      };\n      this.addListener('dequeueComplete', handleDequeueComplete);\n      this.addListener('dequeueError', handleDequeueError);\n      port.postMessage({ type: 'dequeue', args: [requestId] });\n    });\n  }\n\n  async runUnloadHandlers(maxDuration?: number = 10000) {\n    const port = await this.link();\n    await new Promise((resolve, reject) => {\n      const requestId = Math.random();\n      const timeout = setTimeout(() => {\n        this.removeListener('runUnloadHandlersComplete', handleRunUnloadHandlersComplete);\n        this.removeListener('runUnloadHandlersError', handleRunUnloadHandlersError);\n        reject(new Error(`Did not receive run unload handlers response within ${maxDuration}ms`));\n      }, maxDuration);\n      const handleRunUnloadHandlersComplete = (responseId:number) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('runUnloadHandlersComplete', handleRunUnloadHandlersComplete);\n        this.removeListener('runUnloadHandlersError', handleRunUnloadHandlersError);\n        resolve();\n      };\n      const handleRunUnloadHandlersError = (responseId:number, error:Error) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('runUnloadHandlersComplete', handleRunUnloadHandlersComplete);\n        this.removeListener('runUnloadHandlersError', handleRunUnloadHandlersError);\n        reject(error);\n      };\n      this.addListener('runUnloadHandlersComplete', handleRunUnloadHandlersComplete);\n      this.addListener('runUnloadHandlersError', handleRunUnloadHandlersError);\n      port.postMessage({ type: 'runUnloadHandlers', args: [requestId] });\n    });\n  }\n\n  async onIdle(maxDuration?: number = 1000) {\n    const port = await this.link();\n    await new Promise((resolve, reject) => {\n      const requestId = Math.random();\n      const timeout = setTimeout(() => {\n        this.removeListener('idleComplete', handleIdleComplete);\n        this.removeListener('idleError', handleIdleError);\n        reject(new Error(`Did not receive idle response within ${maxDuration}ms`));\n      }, maxDuration);\n      const handleIdleComplete = (responseId:number) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('idleComplete', handleIdleComplete);\n        this.removeListener('idleError', handleIdleError);\n        resolve();\n      };\n      const handleIdleError = (responseId:number, error:Error) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('idleComplete', handleIdleComplete);\n        this.removeListener('idleError', handleIdleError);\n        reject(error);\n      };\n      this.addListener('idleComplete', handleIdleComplete);\n      this.addListener('idleError', handleIdleError);\n      port.postMessage({ type: 'idle', args: [requestId, maxDuration, Date.now()] });\n    });\n  }\n\n  async getQueueIds(maxDuration?: number = 1000) {\n    if (this.queueIds instanceof Set) {\n      return this.queueIds;\n    }\n    const port = await this.link();\n    const queueIds = await new Promise((resolve, reject) => {\n      const requestId = Math.random();\n      const timeout = setTimeout(() => {\n        this.removeListener('getQueuesComplete', handleGetQueuesComplete);\n        this.removeListener('getQueuesError', handleGetQueuesError);\n        reject(new Error(`Did not receive idle response within ${maxDuration}ms`));\n      }, maxDuration);\n      const handleGetQueuesComplete = (responseId:number, qIds:Array<string>) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('getQueuesComplete', handleGetQueuesComplete);\n        this.removeListener('getQueuesError', handleGetQueuesError);\n        resolve((new Set(qIds): Set<string>));\n      };\n      const handleGetQueuesError = (responseId:number, error:Error) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('getQueuesComplete', handleGetQueuesComplete);\n        this.removeListener('getQueuesError', handleGetQueuesError);\n        reject(error);\n      };\n      this.addListener('getQueuesComplete', handleGetQueuesComplete);\n      this.addListener('getQueuesError', handleGetQueuesError);\n      port.postMessage({ type: 'getQueueIds', args: [requestId] });\n    });\n    if (queueIds.size > 0) {\n      this.queueIds = queueIds;\n    }\n    return queueIds;\n  }\n\n  async enableStartOnJob(maxDuration?: number = 1000) {\n    const port = await this.link();\n    await new Promise((resolve, reject) => {\n      const requestId = Math.random();\n      const timeout = setTimeout(() => {\n        this.removeListener('enableStartOnJobComplete', handleEnableStartOnJobComplete);\n        this.removeListener('enableStartOnJobError', handleEnableStartOnJobError);\n        reject(new Error(`Did not receive enableStartOnJob response within ${maxDuration}ms`));\n      }, maxDuration);\n      const handleEnableStartOnJobComplete = (responseId:number) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('enableStartOnJobComplete', handleEnableStartOnJobComplete);\n        this.removeListener('enableStartOnJobError', handleEnableStartOnJobError);\n        resolve();\n      };\n      const handleEnableStartOnJobError = (responseId:number, error:Error) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('enableStartOnJobComplete', handleEnableStartOnJobComplete);\n        this.removeListener('enableStartOnJobError', handleEnableStartOnJobError);\n        reject(error);\n      };\n      this.addListener('enableStartOnJobComplete', handleEnableStartOnJobComplete);\n      this.addListener('enableStartOnJobError', handleEnableStartOnJobError);\n      port.postMessage({ type: 'enableStartOnJob', args: [requestId] });\n    });\n    const handleJobAdd = () => {\n      this.sync();\n    };\n    jobEmitter.addListener('jobAdd', handleJobAdd);\n    this.handleJobAdd = handleJobAdd;\n  }\n\n  async disableStartOnJob(maxDuration?: number = 1000) {\n    const handleJobAdd = this.handleJobAdd;\n    if (typeof handleJobAdd === 'function') {\n      jobEmitter.removeListener('jobAdd', handleJobAdd);\n    }\n    const port = await this.link();\n    await new Promise((resolve, reject) => {\n      const requestId = Math.random();\n      const timeout = setTimeout(() => {\n        this.removeListener('disableStartOnJobComplete', handledisableStartOnJobComplete);\n        this.removeListener('disableStartOnJobError', handledisableStartOnJobError);\n        reject(new Error(`Did not receive disableStartOnJob response within ${maxDuration}ms`));\n      }, maxDuration);\n      const handledisableStartOnJobComplete = (responseId:number) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('disableStartOnJobComplete', handledisableStartOnJobComplete);\n        this.removeListener('disableStartOnJobError', handledisableStartOnJobError);\n        resolve();\n      };\n      const handledisableStartOnJobError = (responseId:number, error:Error) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('disableStartOnJobComplete', handledisableStartOnJobComplete);\n        this.removeListener('disableStartOnJobError', handledisableStartOnJobError);\n        reject(error);\n      };\n      this.addListener('disableStartOnJobComplete', handledisableStartOnJobComplete);\n      this.addListener('disableStartOnJobError', handledisableStartOnJobError);\n      port.postMessage({ type: 'disableStartOnJob', args: [requestId] });\n    });\n  }\n\n  async getDurationEstimate(queueId:string, maxDuration?: number = 1000) {\n    const port = await this.link();\n    return new Promise((resolve, reject) => {\n      const requestId = Math.random();\n      const timeout = setTimeout(() => {\n        this.removeListener('getDurationEstimateComplete', handleGetDurationEstimateComplete);\n        this.removeListener('getDurationEstimateError', handleGetDurationEstimateError);\n        reject(new Error(`Did not receive duration estimate response within ${maxDuration}ms`));\n      }, maxDuration);\n      const handleGetDurationEstimateComplete = (responseId:number, values:[number, number]) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('getDurationEstimateComplete', handleGetDurationEstimateComplete);\n        this.removeListener('getDurationEstimateError', handleGetDurationEstimateError);\n        resolve(values);\n      };\n      const handleGetDurationEstimateError = (responseId:number, error:Error) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('getDurationEstimateComplete', handleGetDurationEstimateComplete);\n        this.removeListener('getDurationEstimateError', handleGetDurationEstimateError);\n        reject(error);\n      };\n      this.addListener('getDurationEstimateComplete', handleGetDurationEstimateComplete);\n      this.addListener('getDurationEstimateError', handleGetDurationEstimateError);\n      port.postMessage({ type: 'getDurationEstimate', args: [requestId, queueId] });\n    });\n  }\n\n  async getCurrentJobType(queueId:string, maxDuration?: number = 1000) {\n    const port = await this.link();\n    return new Promise((resolve, reject) => {\n      const requestId = Math.random();\n      const timeout = setTimeout(() => {\n        this.removeListener('getCurrentJobTypeComplete', handleGetCurrentJobTypeComplete);\n        this.removeListener('getCurrentJobTypeError', handleGetCurrentJobTypeError);\n        reject(new Error(`Did not receive duration estimate response within ${maxDuration}ms`));\n      }, maxDuration);\n      const handleGetCurrentJobTypeComplete = (responseId:number, type:string | void) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('getCurrentJobTypeComplete', handleGetCurrentJobTypeComplete);\n        this.removeListener('getCurrentJobTypeError', handleGetCurrentJobTypeError);\n        resolve(type);\n      };\n      const handleGetCurrentJobTypeError = (responseId:number, error:Error) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('getCurrentJobTypeComplete', handleGetCurrentJobTypeComplete);\n        this.removeListener('getCurrentJobTypeError', handleGetCurrentJobTypeError);\n        reject(error);\n      };\n      this.addListener('getCurrentJobTypeComplete', handleGetCurrentJobTypeComplete);\n      this.addListener('getCurrentJobTypeError', handleGetCurrentJobTypeError);\n      port.postMessage({ type: 'getCurrentJobType', args: [requestId, queueId] });\n    });\n  }\n\n  async sync() {\n    if (!canUseSyncManager) {\n      return;\n    }\n    if (this.isSyncing) {\n      return;\n    }\n    this.isSyncing = true;\n    try {\n      await this.link();\n      this.logger.info('Sending sync event');\n      const serviceWorker = navigator && navigator.serviceWorker;\n      if (!serviceWorker) {\n        throw new Error('Service worker not available');\n      }\n      const registration = await serviceWorker.ready;\n      // $FlowFixMe\n      registration.sync.register('syncManagerOnIdle');\n      await new Promise((resolve, reject) => {\n        const timeout = setTimeout(() => {\n          this.removeListener('syncManagerOnIdle', handleOnIdleSync);\n          reject(new Error('Unable to sync, did not receive syncManagerOnIdle acknowledgement'));\n        }, 5000);\n        const handleOnIdleSync = () => {\n          clearTimeout(timeout);\n          this.removeListener('syncManagerOnIdle', handleOnIdleSync);\n          resolve();\n        };\n        this.addListener('syncManagerOnIdle', handleOnIdleSync);\n      });\n      await new Promise((resolve) => {\n        const handleIdle = () => {\n          this.removeListener('idle', handleIdle);\n          this.removeListener('unlink', handleUnlink);\n          resolve();\n        };\n        const handleUnlink = () => {\n          this.removeListener('idle', handleIdle);\n          this.removeListener('unlink', handleUnlink);\n          resolve();\n        };\n        this.addListener('idle', handleIdle);\n        this.addListener('unlink', handleUnlink);\n      });\n    } catch (error) {\n      this.logger.error('Unable to sync');\n      this.emit('error', error);\n      this.logger.errorStack(error);\n    }\n    this.isSyncing = false;\n  }\n}\n"],"file":"worker-interface.js"}