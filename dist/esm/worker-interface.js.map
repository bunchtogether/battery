{"version":3,"sources":["../../src/worker-interface.js"],"names":["EventEmitter","makeLogger","jobEmitter","localJobEmitter","BatteryQueueServiceWorkerInterface","constructor","options","logger","on","getController","controller","navigator","serviceWorker","ServiceWorker","Error","link","port","MessagePort","ready","messageChannel","MessageChannel","Promise","resolve","reject","timeout","setTimeout","port1","onmessage","event","MessageEvent","data","warn","warnObject","type","clearTimeout","postMessage","port2","args","Array","isArray","queueIds","emit","Set","queueId","add","delete","size","handleJobAdd","handleJobDelete","handleJobUpdate","handleJobsClear","addListener","info","clear","maxDuration","requestId","Math","random","removeListener","handleClearComplete","handleClearError","responseId","error","abortQueue","handleAbortQueueComplete","handleAbortQueueError","dequeue","handleDequeueComplete","handleDequeueError","onIdle","handleIdleComplete","handleIdleError","Date","now","getQueueIds","handleGetQueuesComplete","handleGetQueuesError","qIds"],"mappings":"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","sourcesContent":["// @flow\n\nimport EventEmitter from 'events';\nimport type { Logger } from './logger';\nimport makeLogger from './logger';\nimport { jobEmitter, localJobEmitter } from './database';\n\ntype Options = {\n  logger?: Logger\n};\n\nexport default class BatteryQueueServiceWorkerInterface extends EventEmitter {\n  declare serviceWorker: ServiceWorker;\n  declare logger: Logger;\n  declare port: MessagePort | void;\n  declare queueIds: Set<string> | void;\n\n  constructor(options?: Options = {}) {\n    super();\n    this.logger = options.logger || makeLogger('Battery Queue Worker Interface');\n    // This is a no-op to prevent errors from being thrown in the browser context.\n    // Errors are logged in the worker.\n    this.on('error', () => {});\n  }\n\n  getController() {\n    const controller = navigator && navigator.serviceWorker && navigator.serviceWorker.controller;\n    if (controller instanceof ServiceWorker) {\n      return controller;\n    }\n    throw new Error('Service worker controller does not exist');\n  }\n\n  async link() {\n    if (this.port instanceof MessagePort) {\n      return this.port;\n    }\n\n    const serviceWorker = navigator && navigator.serviceWorker;\n\n    if (!serviceWorker) {\n      throw new Error('Service worker not available');\n    }\n\n    await serviceWorker.ready;\n\n    const messageChannel = new MessageChannel();\n\n    await new Promise((resolve, reject) => {\n      const timeout = setTimeout(() => {\n        messageChannel.port1.onmessage = null;\n        reject(new Error('Unable to link to service worker'));\n      }, 1000);\n      messageChannel.port1.onmessage = (event:MessageEvent) => {\n        if (!(event instanceof MessageEvent)) {\n          return;\n        }\n        const { data } = event;\n        if (!data || typeof data !== 'object') {\n          this.logger.warn('Unknown message type');\n          this.logger.warnObject(event);\n          return;\n        }\n        const { type } = data;\n        if (typeof type !== 'string') {\n          this.logger.warn('Unknown message type');\n          this.logger.warnObject(event);\n          return;\n        }\n        if (type === 'BATTERY_QUEUE_WORKER_CONFIRMATION') {\n          clearTimeout(timeout);\n          resolve();\n        }\n      };\n      const controller = this.getController();\n      // $FlowFixMe\n      controller.postMessage({ type: 'BATTERY_QUEUE_WORKER_INITIALIZATION' }, [\n        messageChannel.port2,\n      ]);\n    });\n\n\n    messageChannel.port1.onmessage = (event:MessageEvent) => {\n      if (!(event instanceof MessageEvent)) {\n        return;\n      }\n      const { data } = event;\n      if (!data || typeof data !== 'object') {\n        this.logger.warn('Invalid message data');\n        this.logger.warnObject(event);\n        return;\n      }\n      const { type, args } = data;\n      if (typeof type !== 'string') {\n        this.logger.warn('Unknown message type');\n        this.logger.warnObject(event);\n        return;\n      }\n      if (!Array.isArray(args)) {\n        this.logger.warn('Unknown arguments type');\n        this.logger.warnObject(event);\n        return;\n      }\n      const queueIds = this.queueIds;\n      switch (type) {\n        case 'jobAdd':\n          jobEmitter.emit('jobAdd', ...args);\n          return;\n        case 'jobDelete':\n          jobEmitter.emit('jobDelete', ...args);\n          return;\n        case 'jobUpdate':\n          jobEmitter.emit('jobUpdate', ...args);\n          return;\n        case 'jobsClear':\n          jobEmitter.emit('jobsClear', ...args);\n          return;\n        case 'queueActive':\n          if (queueIds instanceof Set) {\n            const queueId = args[0];\n            if (typeof queueId === 'string') {\n              queueIds.add(queueId);\n            }\n          }\n          break;\n        case 'queueInactive':\n          if (queueIds instanceof Set) {\n            const queueId = args[0];\n            if (typeof queueId === 'string') {\n              queueIds.delete(queueId);\n              if (queueIds.size === 0) {\n                delete this.queueIds;\n              }\n            }\n          }\n          break;\n        default:\n          break;\n      }\n      this.emit(type, ...args);\n    };\n    const port = messageChannel.port1;\n\n    const handleJobAdd = (...args:Array<any>) => {\n      port.postMessage({ type: 'jobAdd', args });\n    };\n    const handleJobDelete = (...args:Array<any>) => {\n      port.postMessage({ type: 'jobDelete', args });\n    };\n    const handleJobUpdate = (...args:Array<any>) => {\n      port.postMessage({ type: 'jobUpdate', args });\n    };\n    const handleJobsClear = (...args:Array<any>) => {\n      port.postMessage({ type: 'jobsClear', args });\n    };\n    localJobEmitter.addListener('jobAdd', handleJobAdd);\n    localJobEmitter.addListener('jobDelete', handleJobDelete);\n    localJobEmitter.addListener('jobUpdate', handleJobUpdate);\n    localJobEmitter.addListener('jobsClear', handleJobsClear);\n\n    this.port = messageChannel.port1;\n\n    this.logger.info('Linked to worker');\n\n    return messageChannel.port1;\n  }\n\n  async clear(maxDuration?: number = 1000) {\n    const port = await this.link();\n    await new Promise((resolve, reject) => {\n      const requestId = Math.random();\n      const timeout = setTimeout(() => {\n        this.removeListener('clearComplete', handleClearComplete);\n        this.removeListener('clearError', handleClearError);\n        reject(new Error(`Did not receive clear response within ${maxDuration}ms`));\n      }, maxDuration);\n      const handleClearComplete = (responseId:number) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('clearComplete', handleClearComplete);\n        this.removeListener('clearError', handleClearError);\n        resolve();\n      };\n      const handleClearError = (responseId:number, error:Error) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('clearComplete', handleClearComplete);\n        this.removeListener('clearError', handleClearError);\n        reject(error);\n      };\n      this.addListener('clearComplete', handleClearComplete);\n      this.addListener('clearError', handleClearError);\n      port.postMessage({ type: 'clear', args: [requestId] });\n    });\n  }\n\n  async abortQueue(queueId:string, maxDuration?: number = 1000) {\n    const port = await this.link();\n    await new Promise((resolve, reject) => {\n      const requestId = Math.random();\n      const timeout = setTimeout(() => {\n        this.removeListener('abortQueueComplete', handleAbortQueueComplete);\n        this.removeListener('abortQueueError', handleAbortQueueError);\n        reject(new Error(`Did not receive abort queue response within ${maxDuration}ms`));\n      }, maxDuration);\n      const handleAbortQueueComplete = (responseId:number) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('abortQueueComplete', handleAbortQueueComplete);\n        this.removeListener('abortQueueError', handleAbortQueueError);\n        resolve();\n      };\n      const handleAbortQueueError = (responseId:number, error:Error) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('abortQueueComplete', handleAbortQueueComplete);\n        this.removeListener('abortQueueError', handleAbortQueueError);\n        reject(error);\n      };\n      this.addListener('abortQueueComplete', handleAbortQueueComplete);\n      this.addListener('abortQueueError', handleAbortQueueError);\n      port.postMessage({ type: 'abortQueue', args: [requestId, queueId] });\n    });\n  }\n\n  async dequeue(maxDuration?: number = 1000) {\n    const port = await this.link();\n    await new Promise((resolve, reject) => {\n      const requestId = Math.random();\n      const timeout = setTimeout(() => {\n        this.removeListener('dequeueComplete', handleDequeueComplete);\n        this.removeListener('dequeueError', handleDequeueError);\n        reject(new Error(`Did not receive dequeue response within ${maxDuration}ms`));\n      }, maxDuration);\n      const handleDequeueComplete = (responseId:number) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('dequeueComplete', handleDequeueComplete);\n        this.removeListener('dequeueError', handleDequeueError);\n        resolve();\n      };\n      const handleDequeueError = (responseId:number, error:Error) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('dequeueComplete', handleDequeueComplete);\n        this.removeListener('dequeueError', handleDequeueError);\n        reject(error);\n      };\n      this.addListener('dequeueComplete', handleDequeueComplete);\n      this.addListener('dequeueError', handleDequeueError);\n      port.postMessage({ type: 'dequeue', args: [requestId] });\n    });\n  }\n\n  async onIdle(maxDuration?: number = 1000) {\n    const port = await this.link();\n    await new Promise((resolve, reject) => {\n      const requestId = Math.random();\n      const timeout = setTimeout(() => {\n        this.removeListener('idleComplete', handleIdleComplete);\n        this.removeListener('idleError', handleIdleError);\n        reject(new Error(`Did not receive idle response within ${maxDuration}ms`));\n      }, maxDuration);\n      const handleIdleComplete = (responseId:number) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('idleComplete', handleIdleComplete);\n        this.removeListener('idleError', handleIdleError);\n        resolve();\n      };\n      const handleIdleError = (responseId:number, error:Error) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('idleComplete', handleIdleComplete);\n        this.removeListener('idleError', handleIdleError);\n        reject(error);\n      };\n      this.addListener('idleComplete', handleIdleComplete);\n      this.addListener('idleError', handleIdleError);\n      port.postMessage({ type: 'idle', args: [requestId, maxDuration, Date.now()] });\n    });\n  }\n\n  async getQueueIds(maxDuration?: number = 1000) {\n    if (this.queueIds instanceof Set) {\n      return this.queueIds;\n    }\n    const port = await this.link();\n    const queueIds = await new Promise((resolve, reject) => {\n      const requestId = Math.random();\n      const timeout = setTimeout(() => {\n        this.removeListener('getQueuesComplete', handleGetQueuesComplete);\n        this.removeListener('getQueuesError', handleGetQueuesError);\n        reject(new Error(`Did not receive idle response within ${maxDuration}ms`));\n      }, maxDuration);\n      const handleGetQueuesComplete = (responseId:number, qIds:Array<string>) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('getQueuesComplete', handleGetQueuesComplete);\n        this.removeListener('getQueuesError', handleGetQueuesError);\n        resolve((new Set(qIds): Set<string>));\n      };\n      const handleGetQueuesError = (responseId:number, error:Error) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('getQueuesComplete', handleGetQueuesComplete);\n        this.removeListener('getQueuesError', handleGetQueuesError);\n        reject(error);\n      };\n      this.addListener('getQueuesComplete', handleGetQueuesComplete);\n      this.addListener('getQueuesError', handleGetQueuesError);\n      port.postMessage({ type: 'getQueueIds', args: [requestId] });\n    });\n    if (queueIds.size > 0) {\n      this.queueIds = queueIds;\n    }\n    return queueIds;\n  }\n}\n"],"file":"worker-interface.js"}