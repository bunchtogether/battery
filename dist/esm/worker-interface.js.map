{"version":3,"sources":["../../src/worker-interface.js"],"names":["EventEmitter","makeLogger","jobEmitter","localJobEmitter","canUseSyncManager","navigator","window","RedundantServiceWorkerError","Error","BatteryQueueServiceWorkerInterface","constructor","options","logger","on","isSyncing","getController","serviceWorker","ready","controller","state","hadControllerChange","info","Promise","resolve","timeout","setTimeout","removeEventListener","handleStateChange","handleControllerChange","clearTimeout","addEventListener","unlink","linkPromise","error","errorStack","port","MessagePort","postMessage","type","args","close","onmessage","clearInterval","portHeartbeatInterval","handlePortHeartbeat","removeListener","emit","link","_link","finally","messageChannel","MessageChannel","port1","warn","reject","handleStateChangeBeforeLink","event","MessageEvent","data","warnObject","port2","Array","isArray","queueIds","Set","queueId","add","delete","size","handleJobAdd","handleJobDelete","handleJobUpdate","handleJobsClear","addListener","didLogHeartbeatTimeout","didReceiveHeartbeat","sendHeartbeat","setInterval","clear","maxDuration","requestId","Math","random","handleClearComplete","handleClearError","responseId","abortQueue","handleAbortQueueComplete","handleAbortQueueError","dequeue","handleDequeueComplete","handleDequeueError","onIdle","handleIdleComplete","handleIdleError","Date","now","getQueueIds","handleGetQueuesComplete","handleGetQueuesError","qIds","enableStartOnJob","handleEnableStartOnJobComplete","handleEnableStartOnJobError","sync","disableStartOnJob","handledisableStartOnJobComplete","handledisableStartOnJobError","registration","register","handleOnIdleSync","handleIdle","handleUnlink"],"mappings":"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","sourcesContent":["// @flow\n\nimport EventEmitter from 'events';\nimport type { Logger } from './logger';\nimport makeLogger from './logger';\nimport { jobEmitter, localJobEmitter } from './database';\n\ntype Options = {\n  logger?: Logger\n};\n\nconst canUseSyncManager = 'serviceWorker' in navigator && 'SyncManager' in window;\n\nclass RedundantServiceWorkerError extends Error {}\n\nexport default class BatteryQueueServiceWorkerInterface extends EventEmitter {\n  declare serviceWorker: ServiceWorker;\n  declare logger: Logger;\n  declare port: MessagePort | void;\n  declare portHeartbeatInterval: void | IntervalID;\n  declare handlePortHeartbeat: () => void;\n  declare queueIds: Set<string> | void;\n  declare isSyncing: boolean;\n  declare handleJobAdd: void | () => void;\n  declare linkPromise: void | Promise<MessagePort>;\n\n  constructor(options?: Options = {}) {\n    super();\n    this.logger = options.logger || makeLogger('Battery Queue Worker Interface');\n    // This is a no-op to prevent errors from being thrown in the browser context.\n    // Errors are logged in the worker.\n    this.on('error', () => {});\n    this.isSyncing = false;\n  }\n\n  async getController() {\n    const serviceWorker = navigator && navigator.serviceWorker;\n\n    if (!serviceWorker) {\n      throw new Error('Service worker not available');\n    }\n\n    await serviceWorker.ready;\n\n    const { controller } = serviceWorker;\n\n    if (!controller) {\n      throw new Error('Service worker controller not available');\n    }\n\n    while (controller.state !== 'activated') {\n      const state = controller.state;\n      let hadControllerChange = false;\n      this.logger.info(`Service worker in \"${state}\" state, waiting for state or controller change`);\n      await new Promise((resolve) => {\n        const timeout = setTimeout(() => {\n          controller.removeEventListener('statechange', handleStateChange);\n          serviceWorker.removeEventListener('controllerchange', handleControllerChange);\n          throw new Error(`Unable to get service worker controller, state did not change from \"${state}\" within 5000ms`);\n        }, 5000);\n        const handleStateChange = () => {\n          if (controller.state !== 'activated') {\n            return;\n          }\n          clearTimeout(timeout);\n          controller.removeEventListener('statechange', handleStateChange);\n          serviceWorker.removeEventListener('controllerchange', handleControllerChange);\n          resolve();\n        };\n        const handleControllerChange = () => {\n          hadControllerChange = true;\n          clearTimeout(timeout);\n          controller.removeEventListener('statechange', handleStateChange);\n          serviceWorker.removeEventListener('controllerchange', handleControllerChange);\n          resolve();\n        };\n        serviceWorker.addEventListener('controllerchange', handleControllerChange);\n        controller.addEventListener('statechange', handleStateChange);\n      });\n      if (hadControllerChange) {\n        return this.getController();\n      }\n    }\n    return controller;\n  }\n\n  async unlink() {\n    const linkPromise = this.linkPromise;\n    if (typeof linkPromise !== 'undefined') {\n      try {\n        await linkPromise;\n      } catch (error) {\n        this.logger.error('Link promise error while waiting to unlink');\n        this.logger.errorStack(error);\n      }\n    }\n    const port = this.port;\n    if (!(port instanceof MessagePort)) {\n      return;\n    }\n    try {\n      port.postMessage({ type: 'unlink', args: [] });\n    } catch (error) {\n      this.logger.error('Error while posting unlink message to redundant service worker');\n      this.logger.errorStack(error);\n    }\n    try {\n      port.close();\n    } catch (error) {\n      this.logger.error('Error while closing MessageChannel port with redundant service worker');\n      this.logger.errorStack(error);\n    }\n    port.onmessage = null;\n    delete this.port;\n    clearInterval(this.portHeartbeatInterval);\n    delete this.portHeartbeatInterval;\n    const handlePortHeartbeat = this.handlePortHeartbeat;\n    if (typeof handlePortHeartbeat === 'function') {\n      this.removeListener('heartbeat', this.handlePortHeartbeat);\n    }\n    this.emit('unlink');\n    this.logger.info('Unlinked');\n  }\n\n  async link() {\n    if (this.port instanceof MessagePort) {\n      return this.port;\n    }\n    if (this.linkPromise) {\n      return this.linkPromise;\n    }\n    const linkPromise = this._link().finally(() => { // eslint-disable-line no-underscore-dangle\n      delete this.linkPromise;\n    });\n    this.linkPromise = linkPromise;\n    return linkPromise;\n  }\n\n  async _link() {\n    if (this.port instanceof MessagePort) {\n      return this.port;\n    }\n\n    const controller = await this.getController();\n\n    const messageChannel = new MessageChannel();\n\n    const port = messageChannel.port1;\n    this.port = messageChannel.port1;\n\n    const handleStateChange = async () => {\n      this.logger.warn(`Service worker state change to ${controller.state}`);\n      if (controller.state !== 'redundant') {\n        return;\n      }\n      try {\n        await this.unlink();\n        await this.link();\n      } catch (error) {\n        this.logger.error('Unable to re-link service worker');\n        this.logger.errorStack(error);\n      }\n    };\n\n    controller.addEventListener('statechange', handleStateChange);\n\n    try {\n      await new Promise((resolve, reject) => {\n        const timeout = setTimeout(() => {\n          messageChannel.port1.onmessage = null;\n          controller.removeEventListener('statechange', handleStateChangeBeforeLink);\n          reject(new Error('Unable to link to service worker'));\n        }, 1000);\n        const handleStateChangeBeforeLink = () => {\n          if (controller.state !== 'redundant') {\n            return;\n          }\n          clearTimeout(timeout);\n          controller.removeEventListener('statechange', handleStateChangeBeforeLink);\n          reject(new RedundantServiceWorkerError('Service worker in redundant state'));\n        };\n        controller.addEventListener('statechange', handleStateChangeBeforeLink);\n        messageChannel.port1.onmessage = (event:MessageEvent) => {\n          if (!(event instanceof MessageEvent)) {\n            return;\n          }\n          const { data } = event;\n          if (!data || typeof data !== 'object') {\n            this.logger.warn('Unknown message type');\n            this.logger.warnObject(event);\n            return;\n          }\n          const { type } = data;\n          if (typeof type !== 'string') {\n            this.logger.warn('Unknown message type');\n            this.logger.warnObject(event);\n            return;\n          }\n          if (type === 'BATTERY_QUEUE_WORKER_CONFIRMATION') {\n            clearTimeout(timeout);\n            controller.removeEventListener('statechange', handleStateChangeBeforeLink);\n            resolve();\n          }\n        };\n        // $FlowFixMe\n        controller.postMessage({ type: 'BATTERY_QUEUE_WORKER_INITIALIZATION' }, [\n          messageChannel.port2,\n        ]);\n      });\n    } catch (error) {\n      if (error instanceof RedundantServiceWorkerError) {\n        return messageChannel.port1;\n      }\n      controller.removeEventListener('statechange', handleStateChange);\n      throw error;\n    }\n\n    messageChannel.port1.onmessage = (event:MessageEvent) => {\n      if (!(event instanceof MessageEvent)) {\n        return;\n      }\n      const { data } = event;\n      if (!data || typeof data !== 'object') {\n        this.logger.warn('Invalid message data');\n        this.logger.warnObject(event);\n        return;\n      }\n      const { type, args } = data;\n      if (typeof type !== 'string') {\n        this.logger.warn('Unknown message type');\n        this.logger.warnObject(event);\n        return;\n      }\n      if (!Array.isArray(args)) {\n        this.logger.warn('Unknown arguments type');\n        this.logger.warnObject(event);\n        return;\n      }\n      const queueIds = this.queueIds;\n      switch (type) {\n        case 'jobAdd':\n          jobEmitter.emit('jobAdd', ...args);\n          return;\n        case 'jobDelete':\n          jobEmitter.emit('jobDelete', ...args);\n          return;\n        case 'jobUpdate':\n          jobEmitter.emit('jobUpdate', ...args);\n          return;\n        case 'jobsClear':\n          jobEmitter.emit('jobsClear', ...args);\n          return;\n        case 'queueActive':\n          if (queueIds instanceof Set) {\n            const queueId = args[0];\n            if (typeof queueId === 'string') {\n              queueIds.add(queueId);\n            }\n          }\n          break;\n        case 'queueInactive':\n          if (queueIds instanceof Set) {\n            const queueId = args[0];\n            if (typeof queueId === 'string') {\n              queueIds.delete(queueId);\n              if (queueIds.size === 0) {\n                delete this.queueIds;\n              }\n            }\n          }\n          break;\n        default:\n          break;\n      }\n      this.emit(type, ...args);\n    };\n\n\n    const handleJobAdd = (...args:Array<any>) => {\n      port.postMessage({ type: 'jobAdd', args });\n    };\n    const handleJobDelete = (...args:Array<any>) => {\n      port.postMessage({ type: 'jobDelete', args });\n    };\n    const handleJobUpdate = (...args:Array<any>) => {\n      port.postMessage({ type: 'jobUpdate', args });\n    };\n    const handleJobsClear = (...args:Array<any>) => {\n      port.postMessage({ type: 'jobsClear', args });\n    };\n    localJobEmitter.addListener('jobAdd', handleJobAdd);\n    localJobEmitter.addListener('jobDelete', handleJobDelete);\n    localJobEmitter.addListener('jobUpdate', handleJobUpdate);\n    localJobEmitter.addListener('jobsClear', handleJobsClear);\n\n    let didLogHeartbeatTimeout = false;\n    let didReceiveHeartbeat = true;\n\n    const handlePortHeartbeat = () => {\n      didLogHeartbeatTimeout = false;\n      didReceiveHeartbeat = true;\n    };\n    this.addListener('heartbeat', handlePortHeartbeat);\n    this.handlePortHeartbeat = handlePortHeartbeat;\n\n    const sendHeartbeat = () => {\n      if (!didReceiveHeartbeat) {\n        if (!didLogHeartbeatTimeout) {\n          this.logger.error('Did not receive port heartbeat');\n          didLogHeartbeatTimeout = true;\n        }\n      }\n      didReceiveHeartbeat = false;\n      port.postMessage({ type: 'heartbeat', args: [10000] });\n    };\n    this.portHeartbeatInterval = setInterval(sendHeartbeat, 10000);\n    sendHeartbeat();\n    this.logger.info('Linked to worker');\n    this.emit('link');\n    return messageChannel.port1;\n  }\n\n  async clear(maxDuration?: number = 1000) {\n    const port = await this.link();\n    await new Promise((resolve, reject) => {\n      const requestId = Math.random();\n      const timeout = setTimeout(() => {\n        this.removeListener('clearComplete', handleClearComplete);\n        this.removeListener('clearError', handleClearError);\n        reject(new Error(`Did not receive clear response within ${maxDuration}ms`));\n      }, maxDuration);\n      const handleClearComplete = (responseId:number) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('clearComplete', handleClearComplete);\n        this.removeListener('clearError', handleClearError);\n        resolve();\n      };\n      const handleClearError = (responseId:number, error:Error) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('clearComplete', handleClearComplete);\n        this.removeListener('clearError', handleClearError);\n        reject(error);\n      };\n      this.addListener('clearComplete', handleClearComplete);\n      this.addListener('clearError', handleClearError);\n      port.postMessage({ type: 'clear', args: [requestId] });\n    });\n  }\n\n  async abortQueue(queueId:string, maxDuration?: number = 1000) {\n    const port = await this.link();\n    await new Promise((resolve, reject) => {\n      const requestId = Math.random();\n      const timeout = setTimeout(() => {\n        this.removeListener('abortQueueComplete', handleAbortQueueComplete);\n        this.removeListener('abortQueueError', handleAbortQueueError);\n        reject(new Error(`Did not receive abort queue response within ${maxDuration}ms`));\n      }, maxDuration);\n      const handleAbortQueueComplete = (responseId:number) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('abortQueueComplete', handleAbortQueueComplete);\n        this.removeListener('abortQueueError', handleAbortQueueError);\n        resolve();\n      };\n      const handleAbortQueueError = (responseId:number, error:Error) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('abortQueueComplete', handleAbortQueueComplete);\n        this.removeListener('abortQueueError', handleAbortQueueError);\n        reject(error);\n      };\n      this.addListener('abortQueueComplete', handleAbortQueueComplete);\n      this.addListener('abortQueueError', handleAbortQueueError);\n      port.postMessage({ type: 'abortQueue', args: [requestId, queueId] });\n    });\n  }\n\n  async dequeue(maxDuration?: number = 1000) {\n    const port = await this.link();\n    await new Promise((resolve, reject) => {\n      const requestId = Math.random();\n      const timeout = setTimeout(() => {\n        this.removeListener('dequeueComplete', handleDequeueComplete);\n        this.removeListener('dequeueError', handleDequeueError);\n        reject(new Error(`Did not receive dequeue response within ${maxDuration}ms`));\n      }, maxDuration);\n      const handleDequeueComplete = (responseId:number) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('dequeueComplete', handleDequeueComplete);\n        this.removeListener('dequeueError', handleDequeueError);\n        resolve();\n      };\n      const handleDequeueError = (responseId:number, error:Error) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('dequeueComplete', handleDequeueComplete);\n        this.removeListener('dequeueError', handleDequeueError);\n        reject(error);\n      };\n      this.addListener('dequeueComplete', handleDequeueComplete);\n      this.addListener('dequeueError', handleDequeueError);\n      port.postMessage({ type: 'dequeue', args: [requestId] });\n    });\n  }\n\n  async onIdle(maxDuration?: number = 1000) {\n    const port = await this.link();\n    await new Promise((resolve, reject) => {\n      const requestId = Math.random();\n      const timeout = setTimeout(() => {\n        this.removeListener('idleComplete', handleIdleComplete);\n        this.removeListener('idleError', handleIdleError);\n        reject(new Error(`Did not receive idle response within ${maxDuration}ms`));\n      }, maxDuration);\n      const handleIdleComplete = (responseId:number) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('idleComplete', handleIdleComplete);\n        this.removeListener('idleError', handleIdleError);\n        resolve();\n      };\n      const handleIdleError = (responseId:number, error:Error) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('idleComplete', handleIdleComplete);\n        this.removeListener('idleError', handleIdleError);\n        reject(error);\n      };\n      this.addListener('idleComplete', handleIdleComplete);\n      this.addListener('idleError', handleIdleError);\n      port.postMessage({ type: 'idle', args: [requestId, maxDuration, Date.now()] });\n    });\n  }\n\n  async getQueueIds(maxDuration?: number = 1000) {\n    if (this.queueIds instanceof Set) {\n      return this.queueIds;\n    }\n    const port = await this.link();\n    const queueIds = await new Promise((resolve, reject) => {\n      const requestId = Math.random();\n      const timeout = setTimeout(() => {\n        this.removeListener('getQueuesComplete', handleGetQueuesComplete);\n        this.removeListener('getQueuesError', handleGetQueuesError);\n        reject(new Error(`Did not receive idle response within ${maxDuration}ms`));\n      }, maxDuration);\n      const handleGetQueuesComplete = (responseId:number, qIds:Array<string>) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('getQueuesComplete', handleGetQueuesComplete);\n        this.removeListener('getQueuesError', handleGetQueuesError);\n        resolve((new Set(qIds): Set<string>));\n      };\n      const handleGetQueuesError = (responseId:number, error:Error) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('getQueuesComplete', handleGetQueuesComplete);\n        this.removeListener('getQueuesError', handleGetQueuesError);\n        reject(error);\n      };\n      this.addListener('getQueuesComplete', handleGetQueuesComplete);\n      this.addListener('getQueuesError', handleGetQueuesError);\n      port.postMessage({ type: 'getQueueIds', args: [requestId] });\n    });\n    if (queueIds.size > 0) {\n      this.queueIds = queueIds;\n    }\n    return queueIds;\n  }\n\n  async enableStartOnJob(maxDuration?: number = 1000) {\n    const port = await this.link();\n    await new Promise((resolve, reject) => {\n      const requestId = Math.random();\n      const timeout = setTimeout(() => {\n        this.removeListener('enableStartOnJobComplete', handleEnableStartOnJobComplete);\n        this.removeListener('enableStartOnJobError', handleEnableStartOnJobError);\n        reject(new Error(`Did not receive enableStartOnJob response within ${maxDuration}ms`));\n      }, maxDuration);\n      const handleEnableStartOnJobComplete = (responseId:number) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('enableStartOnJobComplete', handleEnableStartOnJobComplete);\n        this.removeListener('enableStartOnJobError', handleEnableStartOnJobError);\n        resolve();\n      };\n      const handleEnableStartOnJobError = (responseId:number, error:Error) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('enableStartOnJobComplete', handleEnableStartOnJobComplete);\n        this.removeListener('enableStartOnJobError', handleEnableStartOnJobError);\n        reject(error);\n      };\n      this.addListener('enableStartOnJobComplete', handleEnableStartOnJobComplete);\n      this.addListener('enableStartOnJobError', handleEnableStartOnJobError);\n      port.postMessage({ type: 'enableStartOnJob', args: [requestId] });\n    });\n    const handleJobAdd = () => {\n      this.sync();\n    };\n    jobEmitter.addListener('jobAdd', handleJobAdd);\n    this.handleJobAdd = handleJobAdd;\n  }\n\n  async disableStartOnJob(maxDuration?: number = 1000) {\n    const handleJobAdd = this.handleJobAdd;\n    if (typeof handleJobAdd === 'function') {\n      jobEmitter.removeListener('jobAdd', handleJobAdd);\n    }\n    const port = await this.link();\n    await new Promise((resolve, reject) => {\n      const requestId = Math.random();\n      const timeout = setTimeout(() => {\n        this.removeListener('disableStartOnJobComplete', handledisableStartOnJobComplete);\n        this.removeListener('disableStartOnJobError', handledisableStartOnJobError);\n        reject(new Error(`Did not receive disableStartOnJob response within ${maxDuration}ms`));\n      }, maxDuration);\n      const handledisableStartOnJobComplete = (responseId:number) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('disableStartOnJobComplete', handledisableStartOnJobComplete);\n        this.removeListener('disableStartOnJobError', handledisableStartOnJobError);\n        resolve();\n      };\n      const handledisableStartOnJobError = (responseId:number, error:Error) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('disableStartOnJobComplete', handledisableStartOnJobComplete);\n        this.removeListener('disableStartOnJobError', handledisableStartOnJobError);\n        reject(error);\n      };\n      this.addListener('disableStartOnJobComplete', handledisableStartOnJobComplete);\n      this.addListener('disableStartOnJobError', handledisableStartOnJobError);\n      port.postMessage({ type: 'disableStartOnJob', args: [requestId] });\n    });\n  }\n\n  async sync() {\n    if (!canUseSyncManager) {\n      return;\n    }\n    if (this.isSyncing) {\n      return;\n    }\n    this.isSyncing = true;\n    try {\n      await this.link();\n      this.logger.info('Sending sync event');\n      const serviceWorker = navigator && navigator.serviceWorker;\n      if (!serviceWorker) {\n        throw new Error('Service worker not available');\n      }\n      const registration = await serviceWorker.ready;\n      // $FlowFixMe\n      registration.sync.register('syncManagerOnIdle');\n      await new Promise((resolve, reject) => {\n        const timeout = setTimeout(() => {\n          this.removeListener('syncManagerOnIdle', handleOnIdleSync);\n          reject(new Error('Unable to sync, did not receive syncManagerOnIdle acknowledgement'));\n        }, 5000);\n        const handleOnIdleSync = () => {\n          clearTimeout(timeout);\n          this.removeListener('syncManagerOnIdle', handleOnIdleSync);\n          resolve();\n        };\n        this.addListener('syncManagerOnIdle', handleOnIdleSync);\n      });\n      await new Promise((resolve) => {\n        const handleIdle = () => {\n          this.removeListener('idle', handleIdle);\n          this.removeListener('unlink', handleUnlink);\n          resolve();\n        };\n        const handleUnlink = () => {\n          this.removeListener('idle', handleIdle);\n          this.removeListener('unlink', handleUnlink);\n          resolve();\n        };\n        this.addListener('idle', handleIdle);\n        this.addListener('unlink', handleUnlink);\n      });\n    } catch (error) {\n      this.logger.error('Unable to sync');\n      this.emit('error', error);\n      this.logger.errorStack(error);\n    }\n    this.isSyncing = false;\n  }\n}\n"],"file":"worker-interface.js"}