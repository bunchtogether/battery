{"version":3,"sources":["../../src/logger.js"],"names":["loggers","log","color","name","value","label","args","length","console","group","arg","err","error","dir","groupEnd","logger","debug","info","warn","debugObject","obj","infoObject","warnObject","errorObject","errorStack","Error","Object","keys","forEach","key","hasValues","stack","split","line","message"],"mappings":"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","sourcesContent":["// @flow\n\nimport { stringify } from 'flatted';\n\nconst loggers = {};\n\nconst log = (color:string, name:string, value:string | number, ...args:Array<any>) => {\n  const label = `%c${name}: %c${value}`;\n  if (args.length === 0) {\n    console.log(label, 'color:#333; font-weight: bold', `color:${color}`); // eslint-disable-line\n    return;\n  }\n  console.group(label, 'color:#333; font-weight: bold', `color:${color}`); // eslint-disable-line\n  for (const arg of args) {\n    if (typeof arg === 'undefined') {\n      continue;\n    } else if (typeof arg === 'string') {\n      console.log(`%c${arg}`, 'color:#666'); // eslint-disable-line no-console\n    } else {\n      if (arg && arg.err) {\n        console.error(arg.err); // eslint-disable-line no-console\n      } else if (arg && arg.error) {\n        console.error(arg.error); // eslint-disable-line no-console\n      }\n      console.dir(arg); // eslint-disable-line no-console\n    }\n  }\n  console.groupEnd(); // eslint-disable-line no-console\n};\n\nexport type Logger = {\n  debug: (string | number, ...Array<any>) => void,\n  info: (string | number, ...Array<any>) => void,\n  warn: (string | number, ...Array<any>) => void,\n  error: (string | number, ...Array<any>) => void,\n  debugObject: (Object) => void,\n  infoObject: (Object) => void,\n  warnObject: (Object) => void,\n  errorObject: (Object) => void,\n  errorStack: (Error | MediaError) => void\n};\n\nexport default (name: string) => {\n  if (loggers[name]) {\n    return loggers[name];\n  }\n\n  const logger = {\n    debug: (value:string | number, ...args:Array<any>) => {\n      log('blue', name, value, ...args);\n    },\n    info: (value:string | number, ...args:Array<any>) => {\n      log('green', name, value, ...args);\n    },\n    warn: (value:string | number, ...args:Array<any>) => {\n      log('orange', name, value, ...args);\n    },\n    error: (value:string | number, ...args:Array<any>) => {\n      log('red', name, value, ...args);\n    },\n    debugObject: (obj: Object = {}) => {\n      console.log(obj); // eslint-disable-line no-console\n    },\n    infoObject: (obj: Object = {}) => {\n      console.log(obj); // eslint-disable-line no-console\n    },\n    warnObject: (obj: Object = {}) => {\n      console.log(obj); // eslint-disable-line no-console\n    },\n    errorObject: (obj: Object = {}) => {\n      console.error(obj); // eslint-disable-line no-console\n    },\n    errorStack: (error:Error | MediaError) => {\n      if (typeof error === 'string') {\n        logger.error(error);\n        return;\n      }\n      if (typeof error === 'undefined') {\n        error = new Error('\"undefined\" passed to errorStack handler'); // eslint-disable-line no-param-reassign\n      }\n      const obj: { [string]: any } = {};\n      Object.keys(error).forEach((key: string) => {\n        if (key !== 'toString' && key !== 'message') {\n          // $FlowFixMe\n          obj[key] = error[key];\n        }\n      });\n      const hasValues = obj && Object.keys(obj).length > 0;\n      // $FlowFixMe\n      const { stack } = error;\n      if (typeof stack === 'string') {\n        stack.split('\\n').forEach((line) => log('red', name, `${line}`));\n      } else if (error.message) {\n        log('red', name, error.message);\n      } else if (!hasValues) {\n        log('red', name, 'Unknown error');\n      }\n      if (hasValues) {\n        stringify(obj, null, 2).split('\\n').forEach((line) => log('red', name, `${line}`));\n      }\n    },\n  };\n\n  loggers[name] = logger;\n  return logger;\n};\n"],"file":"logger.js"}