{"version":3,"sources":["../../src/queue.js"],"names":["PRIORITY_OFFSET","Math","floor","Number","MAX_SAFE_INTEGER","BatteryQueue","options","dequeueQueue","PQueue","concurrency","handlerMap","Map","cleanupMap","retryJobDelayMap","retryCleanupDelayMap","queueMap","jobIds","Set","abortControllerMap","isClearing","emitCallbacks","logger","addListener","error","errorStack","disableStartOnJob","didRequestJobAddDequeue","handleJobAdd","self","queueMicrotask","dequeue","jobEmitter","handleJobDelete","id","queueId","has","queueAbortControllerMap","get","abortController","abort","handleJobUpdate","type","status","JOB_CLEANUP_AND_REMOVE_STATUS","then","job","args","console","log","startCleanup","catch","removeListener","emitCallback","queueIds","keys","retryJobDelayFunction","Error","set","delete","attempt","result","emit","retryCleanupDelayFunction","handler","cleanup","onIdle","start","priority","func","queue","add","newQueue","autoStart","on","Promise","resolve","timeout","setTimeout","handleClearing","handleActive","clearTimeout","pending","size","info","values","jobs","startJobs","bind","newJobs","Array","isArray","startAfter","pause","JOB_PENDING_STATUS","startJob","JOB_ERROR_STATUS","startErrorHandler","JOB_CLEANUP_STATUS","maxDuration","onIdlePromise","Date","now","warn","interval","setInterval","clearInterval","jobsInterval","length","newAbortController","AbortController","cleanupJob","data","undefined","delay","toLocaleString","path","name","getRetryCleanupDelay","retryCleanupDelay","newStartAfter","runCleanup","run","addToQueue","getAbortController","signal","aborted","removeAbortController","AbortError","duration","reject","removeEventListener","handleAbort","addEventListener","updateCleanupData","handlerDidRun","delayJobStart","abortQueue","getRetryJobDelay","retryDelay","event","MessageEvent","warnObject","port","MessagePort","onmessage","requestId","requestArgs","clear","enableStartOnJob","getQueueIds","activeEmitCallback","handleJobsClear","tag","lastChance","waitUntil","ExtendableMessageEvent","ports","filter","x","previousPort","close","localJobEmitter","postMessage","handlePortMessage","t","push","errorObject","EventEmitter"],"mappings":"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","sourcesContent":["// @flow\n\nimport PQueue from 'p-queue';\nimport EventEmitter from 'events';\nimport type { Logger } from './logger';\nimport makeLogger from './logger';\nimport type { Job } from './database';\nimport {\n  jobEmitter,\n  localJobEmitter,\n  clearDatabase,\n  dequeueFromDatabase,\n  dequeueFromDatabaseNotIn,\n  incrementJobAttemptInDatabase,\n  incrementCleanupAttemptInDatabase,\n  markJobCompleteInDatabase,\n  markJobPendingInDatabase,\n  markJobErrorInDatabase,\n  markJobStartAfterInDatabase,\n  markJobAsAbortedOrRemoveFromDatabase,\n  markCleanupStartAfterInDatabase,\n  updateCleanupValuesInDatabase,\n  getCleanupFromDatabase,\n  removePathFromCleanupDataInDatabase,\n  getJobFromDatabase,\n  markQueueForCleanupInDatabase,\n  removeCleanupFromDatabase,\n  restoreJobToDatabaseForCleanupAndRemove,\n  JOB_PENDING_STATUS,\n  JOB_ERROR_STATUS,\n  JOB_CLEANUP_STATUS,\n  JOB_CLEANUP_AND_REMOVE_STATUS,\n} from './database';\nimport { AbortError } from './errors';\n\nconst PRIORITY_OFFSET = Math.floor(Number.MAX_SAFE_INTEGER / 2);\n\ntype HandlerFunction = (Array<any>, AbortSignal, (Object) => Promise<void>) => Promise<void>;\ntype CleanupFunction = (Object | void, Array<any>, Array<string> => Promise<void>) => Promise<void>;\ntype RetryDelayFunction = (number, Error) => number | false | Promise<number | false>;\ntype EmitCallback = (string, Array<any>) => void;\n\ntype Options = {\n  logger?: Logger,\n  startOnJob?: boolean\n};\n\nexport default class BatteryQueue extends EventEmitter {\n  declare logger: Logger;\n  declare dequeueQueue: PQueue;\n  declare handlerMap: Map<string, HandlerFunction>;\n  declare retryJobDelayMap: Map<string, RetryDelayFunction>;\n  declare retryCleanupDelayMap: Map<string, RetryDelayFunction>;\n  declare cleanupMap: Map<string, CleanupFunction>;\n  declare queueMap: Map<string, PQueue>;\n  declare abortControllerMap: Map<string, Map<number, AbortController>>;\n  declare isClearing: boolean;\n  declare onIdlePromise: Promise<void> | void;\n  declare jobIds: Set<number>;\n  declare emitCallbacks: Array<EmitCallback>;\n  declare port: MessagePort | void;\n  declare handleJobAdd: void | () => void;\n  declare handleJobUpdate: void | (number, string, string, number) => void;\n  declare handleJobDelete: void | (number, string) => void;\n\n  constructor(options?: Options = {}) {\n    super();\n    this.dequeueQueue = new PQueue({ concurrency: 1 });\n    this.handlerMap = new Map();\n    this.cleanupMap = new Map();\n    this.retryJobDelayMap = new Map();\n    this.retryCleanupDelayMap = new Map();\n    this.queueMap = new Map();\n    this.jobIds = new Set();\n    this.abortControllerMap = new Map();\n    this.isClearing = false;\n    this.emitCallbacks = [];\n    this.logger = options.logger || makeLogger('Battery Queue');\n    this.addListener('error', (error) => {\n      this.logger.errorStack(error);\n    });\n  }\n\n  enableStartOnJob() {\n    this.disableStartOnJob(); // Prevent handlers from being added multiple times\n    let didRequestJobAddDequeue = false;\n    const handleJobAdd = () => {\n      if (didRequestJobAddDequeue) {\n        return;\n      }\n      didRequestJobAddDequeue = true;\n      self.queueMicrotask(() => {\n        didRequestJobAddDequeue = false;\n        this.dequeue();\n      });\n    };\n    jobEmitter.addListener('jobAdd', handleJobAdd);\n    this.handleJobAdd = handleJobAdd;\n    const handleJobDelete = (id:number, queueId:string) => {\n      if (this.jobIds.has(id)) {\n        const queueAbortControllerMap = this.abortControllerMap.get(queueId);\n        if (typeof queueAbortControllerMap !== 'undefined') {\n          const abortController = queueAbortControllerMap.get(id);\n          if (typeof abortController !== 'undefined') {\n            abortController.abort();\n          }\n        }\n      }\n    };\n    jobEmitter.addListener('jobDelete', handleJobDelete);\n    this.handleJobDelete = handleJobDelete;\n\n    const handleJobUpdate = (id:number, queueId:string, type:string, status:number) => {\n      if (status !== JOB_CLEANUP_AND_REMOVE_STATUS) {\n        return;\n      }\n      if (this.jobIds.has(id)) {\n        const queueAbortControllerMap = this.abortControllerMap.get(queueId);\n        if (typeof queueAbortControllerMap !== 'undefined') {\n          const abortController = queueAbortControllerMap.get(id);\n          if (typeof abortController !== 'undefined') {\n            abortController.abort();\n          }\n        }\n        return;\n      }\n      getJobFromDatabase(id).then((job:Job | void) => {\n        if (typeof job === 'undefined') {\n          this.logger.error(`Unable to cleanup and remove ${type} job #${id} in queue ${queueId}, job does not exist`);\n          return;\n        }\n        if (this.jobIds.has(id)) {\n          return;\n        }\n        const { args } = job;\n        console.log('START CLEANUP');\n        this.startCleanup(id, queueId, args, type);\n      }).catch((error) => {\n        this.logger.error(`Error while cleaning up and removing ${type} job #${id} in queue ${queueId}`);\n        this.logger.errorStack(error);\n      });\n    };\n    jobEmitter.addListener('jobUpdate', handleJobUpdate);\n    this.handleJobUpdate = handleJobUpdate;\n  }\n\n  disableStartOnJob() {\n    const handleJobAdd = this.handleJobAdd;\n    if (typeof handleJobAdd === 'function') {\n      jobEmitter.removeListener('jobAdd', handleJobAdd);\n      delete this.handleJobAdd;\n    }\n    const handleJobUpdate = this.handleJobUpdate;\n    if (typeof handleJobUpdate === 'function') {\n      jobEmitter.removeListener('jobUpdate', handleJobUpdate);\n      delete this.handleJobUpdate;\n    }\n    const handleJobDelete = this.handleJobDelete;\n    if (typeof handleJobDelete === 'function') {\n      jobEmitter.removeListener('jobDelete', handleJobDelete);\n      delete this.handleJobDelete;\n    }\n  }\n\n  emit(type:string, ...args:Array<any>) {\n    for (const emitCallback of this.emitCallbacks) {\n      emitCallback(type, args);\n    }\n    return super.emit(type, ...args);\n  }\n\n  async getQueueIds() {\n    await this.dequeue();\n    const queueIds:Set<string> = new Set(this.queueMap.keys());\n    return queueIds;\n  }\n\n  setRetryJobDelay(type:string, retryJobDelayFunction:RetryDelayFunction) {\n    if (this.retryJobDelayMap.has(type)) {\n      throw new Error(`Retry job delay handler for type \"${type}\" already exists`);\n    }\n    this.retryJobDelayMap.set(type, retryJobDelayFunction);\n  }\n\n  removeRetryJobDelay(type:string) {\n    if (!this.retryJobDelayMap.has(type)) {\n      throw new Error(`Retry job delay handler for type \"${type}\" does not exist`);\n    }\n    this.retryJobDelayMap.delete(type);\n  }\n\n  async getRetryJobDelay(type:string, attempt: number, error:Error) {\n    const retryJobDelayFunction = this.retryJobDelayMap.get(type);\n    if (typeof retryJobDelayFunction !== 'function') {\n      return false;\n    }\n    let result = false;\n    try {\n      result = await retryJobDelayFunction(attempt, error);\n    } catch (retryDelayError) {\n      this.logger.error(`Error in retry job delay handler for type \"${type}\" on attempt ${attempt}`);\n      this.emit('error', retryDelayError);\n      return false;\n    }\n    if (typeof result !== 'number' && result !== false) {\n      throw new Error(`Retry job delay function for type \"${type}\" returned invalid response, should be a number (milliseconds) or false`);\n    }\n    return result;\n  }\n\n  setRetryCleanupDelay(type:string, retryCleanupDelayFunction:RetryDelayFunction) {\n    if (this.retryCleanupDelayMap.has(type)) {\n      throw new Error(`Retry cleanup delay handler for type \"${type}\" already exists`);\n    }\n    this.retryCleanupDelayMap.set(type, retryCleanupDelayFunction);\n  }\n\n  removeRetryCleanupDelay(type:string) {\n    if (!this.retryCleanupDelayMap.has(type)) {\n      throw new Error(`Retry cleanup delay handler for type \"${type}\" does not exist`);\n    }\n    this.retryCleanupDelayMap.delete(type);\n  }\n\n  async getRetryCleanupDelay(type:string, attempt: number, error:Error) {\n    const retryCleanupDelayFunction = this.retryCleanupDelayMap.get(type);\n    if (typeof retryCleanupDelayFunction !== 'function') {\n      return false;\n    }\n    let result = false;\n    try {\n      result = await retryCleanupDelayFunction(attempt, error);\n    } catch (retryDelayError) {\n      this.logger.error(`Error in retry cleanup delay handler for type \"${type}\" on attempt ${attempt}`);\n      this.emit('error', retryDelayError);\n      return false;\n    }\n    if (typeof result !== 'number' && result !== false) {\n      throw new Error(`Retry cleanup delay function for type \"${type}\" returned invalid response, should be a number (milliseconds) or false`);\n    }\n    return result;\n  }\n\n  setHandler(type:string, handler: HandlerFunction) {\n    if (this.handlerMap.has(type)) {\n      throw new Error(`Handler for type \"${type}\" already exists`);\n    }\n    this.handlerMap.set(type, handler);\n  }\n\n  removeHandler(type:string) {\n    if (!this.handlerMap.has(type)) {\n      throw new Error(`Handler for type \"${type}\" does not exist`);\n    }\n    this.handlerMap.delete(type);\n  }\n\n  setCleanup(type:string, cleanup: CleanupFunction) {\n    if (this.cleanupMap.has(type)) {\n      throw new Error(`Cleanup for type \"${type}\" already exists`);\n    }\n    this.cleanupMap.set(type, cleanup);\n  }\n\n  removeCleanup(type:string) {\n    if (!this.cleanupMap.has(type)) {\n      throw new Error(`Cleanup for type \"${type}\" does not exist`);\n    }\n    this.cleanupMap.delete(type);\n  }\n\n  async clear() {\n    this.isClearing = true;\n    await this.onIdle();\n    this.emit('clearing');\n    await clearDatabase();\n    this.dequeueQueue.start();\n    this.isClearing = false;\n  }\n\n  addToQueue(queueId:string, priority: number, func: () => Promise<void>) {\n    const queue = this.queueMap.get(queueId);\n    if (typeof queue !== 'undefined') {\n      queue.add(func, { priority });\n      return;\n    }\n    const newQueue = new PQueue({ concurrency: 1, autoStart: false });\n    this.queueMap.set(queueId, newQueue);\n    newQueue.add(func, { priority });\n    newQueue.on('idle', async () => {\n      if (!this.isClearing) {\n        await new Promise((resolve) => {\n          const timeout = setTimeout(() => {\n            this.removeListener('clearing', handleClearing);\n            newQueue.removeListener('active', handleActive);\n            resolve();\n          }, 5000);\n          const handleClearing = () => {\n            clearTimeout(timeout);\n            this.removeListener('clearing', handleClearing);\n            newQueue.removeListener('active', handleActive);\n            resolve();\n          };\n          const handleActive = () => {\n            clearTimeout(timeout);\n            this.removeListener('clearing', handleClearing);\n            newQueue.removeListener('active', handleActive);\n            resolve();\n          };\n          this.addListener('clearing', handleClearing);\n          newQueue.addListener('active', handleActive);\n        });\n      }\n      if (newQueue.pending > 0 || newQueue.size > 0) {\n        return;\n      }\n      this.queueMap.delete(queueId);\n      this.emit('queueInactive', queueId);\n    });\n    this.emit('queueActive', queueId);\n  }\n\n  async abortQueue(queueId: string) {\n    this.logger.info(`Aborting queue ${queueId}`);\n    // Abort active jobs\n    const queueAbortControllerMap = this.abortControllerMap.get(queueId);\n    if (typeof queueAbortControllerMap !== 'undefined') {\n      for (const abortController of queueAbortControllerMap.values()) {\n        abortController.abort();\n      }\n    }\n    // Changes:\n    // * JOB_ERROR_STATUS -> JOB_CLEANUP_STATUS\n    // * JOB_COMPLETE_STATUS -> JOB_CLEANUP_STATUS\n    // * JOB_PENDING_STATUS -> JOB_ABORTED_STATUS\n    const jobs = await markQueueForCleanupInDatabase(queueId);\n    await this.startJobs(jobs);\n  }\n\n  dequeue():void | Promise<void> {\n    if (this.dequeueQueue.size === 0) {\n      // Add a subsequent dequeue\n      this.dequeueQueue.add(this.startJobs.bind(this));\n    }\n    return this.dequeueQueue.onIdle();\n  }\n\n  async startJobs(newJobs?:Array<Job>) { // eslint-disable-line consistent-return\n    const jobs = Array.isArray(newJobs) ? newJobs : await dequeueFromDatabaseNotIn([...this.jobIds.keys()]);\n    const queueIds = new Set();\n    for (const { id, queueId, args, type, status, attempt, startAfter } of jobs) {\n      if (this.jobIds.has(id)) {\n        continue;\n      }\n      // Pause queues before adding items into them to avoid starting things out of priority\n      if (!queueIds.has(queueId)) {\n        const queue = this.queueMap.get(queueId);\n        if (typeof queue !== 'undefined') {\n          queue.pause();\n        }\n        queueIds.add(queueId);\n      }\n      if (status === JOB_PENDING_STATUS) {\n        this.startJob(id, queueId, args, type, attempt + 1, startAfter);\n      } else if (status === JOB_ERROR_STATUS) {\n        this.startErrorHandler(id, queueId, args, type, attempt, startAfter);\n      } else if (status === JOB_CLEANUP_STATUS) {\n        this.startCleanup(id, queueId, args, type);\n      } else if (status === JOB_CLEANUP_AND_REMOVE_STATUS) {\n        this.startCleanup(id, queueId, args, type);\n      } else {\n        throw new Error(`Unknown job status ${status} in job ${id} of queue ${queueId}`);\n      }\n    }\n    for (const queueId of queueIds) {\n      const queue = this.queueMap.get(queueId);\n      if (typeof queue !== 'undefined') {\n        queue.start();\n      } else {\n        this.logger.error(`Unable to start queue ${queueId} after dequeue; queue does not exist`);\n      }\n    }\n  }\n\n  async onIdle(maxDuration?: number) {\n    if (typeof this.onIdlePromise === 'undefined') {\n      this.onIdlePromise = (async () => {\n        const timeout = typeof maxDuration === 'number' ? Date.now() + maxDuration : -1;\n        const start = Date.now();\n        while (true) { // eslint-disable-line no-constant-condition\n          if (timeout !== -1 && Date.now() > timeout) {\n            this.logger.warn(`Idle timeout after ${Date.now() - start}ms`);\n            break;\n          }\n          await this.dequeueQueue.onIdle();\n          for (const [queueId, queue] of this.queueMap) {\n            const interval = setInterval(() => {\n              this.logger.info(`Waiting on queue ${queueId}`);\n            }, 250);\n            await queue.onIdle();\n            clearInterval(interval);\n          }\n          const jobsInterval = setInterval(() => {\n            this.logger.info('Waiting on jobs');\n          }, 250);\n          const jobs = await dequeueFromDatabase();\n          clearInterval(jobsInterval);\n          if (jobs.length > 0) {\n            const interval = setInterval(() => {\n              this.logger.info('Waiting on dequeue');\n            }, 250);\n            await this.dequeue();\n            clearInterval(interval);\n            continue;\n          }\n          break;\n        }\n        delete this.onIdlePromise;\n        this.emit('idle');\n      })();\n    }\n    await this.onIdlePromise;\n  }\n\n  getAbortController(id:number, queueId:string) {\n    let queueAbortControllerMap = this.abortControllerMap.get(queueId);\n    if (typeof queueAbortControllerMap === 'undefined') {\n      queueAbortControllerMap = new Map();\n      this.abortControllerMap.set(queueId, queueAbortControllerMap);\n    }\n    const abortController = queueAbortControllerMap.get(id);\n    if (typeof abortController !== 'undefined') {\n      return abortController;\n    }\n    const newAbortController = new AbortController();\n    queueAbortControllerMap.set(id, newAbortController);\n    return newAbortController;\n  }\n\n  removeAbortController(id:number, queueId:string) {\n    const queueAbortControllerMap = this.abortControllerMap.get(queueId);\n    if (typeof queueAbortControllerMap === 'undefined') {\n      this.logger.warn(`Abort controller map for ${id} in queue ${queueId} does not exist`);\n      return;\n    }\n    const abortController = queueAbortControllerMap.get(id);\n    if (typeof abortController === 'undefined') {\n      this.logger.warn(`Abort controller for ${id} in queue ${queueId} does not exist`);\n      return;\n    }\n    queueAbortControllerMap.delete(id);\n    if (queueAbortControllerMap.size === 0) {\n      this.abortControllerMap.delete(queueId);\n    }\n  }\n\n  async runCleanup(id:number, queueId:string, args:Array<any>, type:string) {\n    this.emit('cleanupStart', { id });\n    const cleanup = this.cleanupMap.get(type);\n    if (typeof cleanup !== 'function') {\n      this.logger.warn(`No cleanup for job type ${type}`);\n      await removeCleanupFromDatabase(id);\n      this.emit('cleanup', { id });\n      return;\n    }\n    const cleanupJob = await getCleanupFromDatabase(id);\n    const { data, startAfter } = typeof cleanupJob === 'undefined' ? { data: undefined, startAfter: 0 } : cleanupJob;\n    const delay = startAfter - Date.now();\n    if (delay > 0) {\n      this.logger.info(`Delaying retry of ${type} job #${id} cleanup in queue ${queueId} by ${delay}ms to ${new Date(startAfter).toLocaleString()}`);\n      await new Promise((resolve) => setTimeout(resolve, delay));\n    }\n    try {\n      await cleanup(data, args, (path:Array<string>) => removePathFromCleanupDataInDatabase(id, path));\n    } catch (error) {\n      const attempt = await incrementCleanupAttemptInDatabase(id, queueId);\n      if (error.name === 'FatalCleanupError') {\n        this.logger.error(`Fatal error in ${type} job #${id} cleanup in queue ${queueId} attempt ${attempt}`);\n        this.emit('error', error);\n        await removeCleanupFromDatabase(id);\n        this.emit('fatalCleanupError', { id, queueId });\n        return;\n      }\n      const retryCleanupDelay = await this.getRetryCleanupDelay(type, attempt, error);\n      if (retryCleanupDelay === false) {\n        this.logger.error(`Error in ${type} job #${id} cleanup in queue ${queueId} attempt ${attempt} with no additional attempts requested`);\n        this.emit('error', error);\n        await removeCleanupFromDatabase(id);\n        this.emit('fatalCleanupError', { id, queueId });\n        return;\n      }\n      this.logger.error(`Error in ${type} job #${id} cleanup in queue ${queueId} attempt ${attempt}, retrying ${retryCleanupDelay > 0 ? `in ${retryCleanupDelay}ms'}` : 'immediately'}`);\n      this.emit('error', error);\n      if (retryCleanupDelay > 0) {\n        this.emit('retryCleanupDelay', { id, queueId, retryCleanupDelay });\n        const newStartAfter = Date.now() + retryCleanupDelay;\n        await markCleanupStartAfterInDatabase(id, newStartAfter);\n      }\n      await this.runCleanup(id, queueId, args, type);\n      return;\n    }\n    await removeCleanupFromDatabase(id);\n    this.emit('cleanup', { id });\n  }\n\n  startCleanup(id:number, queueId:string, args:Array<any>, type:string) {\n    this.logger.info(`Adding ${type} cleanup job #${id} to queue ${queueId}`);\n    this.jobIds.add(id);\n    const priority = PRIORITY_OFFSET + id;\n    const run = async () => {\n      this.logger.info(`Starting ${type} cleanup #${id} in queue ${queueId}`);\n      await this.runCleanup(id, queueId, args, type);\n      // Job could be marked for removal while cleanup is running\n      await markJobAsAbortedOrRemoveFromDatabase(id);\n      this.jobIds.delete(id);\n    };\n    this.addToQueue(queueId, priority, run);\n  }\n\n  startErrorHandler(id:number, queueId:string, args:Array<any>, type:string, attempt: number, startAfter: number) {\n    this.logger.info(`Adding ${type} error handler job #${id} to queue ${queueId}`);\n    this.jobIds.add(id);\n    const priority = PRIORITY_OFFSET + id;\n    const abortController = this.getAbortController(id, queueId);\n    const run = async () => {\n      this.logger.info(`Starting ${type} error handler #${id} in queue ${queueId}`);\n      await this.runCleanup(id, queueId, args, type);\n      if (abortController.signal.aborted) {\n        // Job could be marked for removal while error handler is running\n        await markJobAsAbortedOrRemoveFromDatabase(id);\n        this.removeAbortController(id, queueId);\n        this.jobIds.delete(id);\n      } else {\n        await markJobPendingInDatabase(id);\n        this.logger.info(`Retrying ${type} job #${id} in queue ${queueId}`);\n        this.emit('retry', { id });\n        this.startJob(id, queueId, args, type, attempt + 1, startAfter);\n      }\n    };\n    this.addToQueue(queueId, priority, run);\n  }\n\n  async delayJobStart(id:number, queueId:string, type:string, signal: AbortSignal, startAfter: number) {\n    if (signal.aborted) {\n      throw new AbortError(`Queue ${queueId} was aborted`);\n    }\n    const duration = startAfter - Date.now();\n    if (duration > 0) {\n      this.logger.info(`Delaying start of ${type} job #${id} in queue ${queueId} by ${duration}ms`);\n      await new Promise((resolve, reject) => {\n        const timeout = setTimeout(() => {\n          signal.removeEventListener('abort', handleAbort);\n          resolve();\n        }, duration);\n        const handleAbort = () => {\n          clearTimeout(timeout);\n          signal.removeEventListener('abort', handleAbort);\n          reject(new AbortError(`Queue ${queueId} was aborted`));\n        };\n        signal.addEventListener('abort', handleAbort);\n      });\n    }\n  }\n\n  startJob(id:number, queueId:string, args:Array<any>, type:string, attempt:number, startAfter: number) {\n    this.logger.info(`Adding ${type} job #${id} to queue ${queueId}`);\n    this.jobIds.add(id);\n    const priority = PRIORITY_OFFSET - id;\n    const updateCleanupData = (data:Object) => updateCleanupValuesInDatabase(id, queueId, data);\n    const abortController = this.getAbortController(id, queueId);\n    const run = async () => {\n      if (abortController.signal.aborted) {\n        this.emit('fatalError', { id, queueId, error: new AbortError(`Queue ${queueId} was aborted`) });\n        this.removeAbortController(id, queueId);\n        this.jobIds.delete(id);\n        return;\n      }\n      this.logger.info(`Starting ${type} job #${id} in queue ${queueId} attempt ${attempt}`);\n      const handler = this.handlerMap.get(type);\n      if (typeof handler !== 'function') {\n        this.logger.warn(`No handler for job type ${type}`);\n        await markJobCompleteInDatabase(id);\n        this.removeAbortController(id, queueId);\n        this.jobIds.delete(id);\n        return;\n      }\n      let handlerDidRun = false;\n      try {\n        // Mark as error in database so the job is cleaned up and retried if execution\n        // stops before job completion or error.\n        await markJobErrorInDatabase(id);\n        await this.delayJobStart(id, queueId, type, abortController.signal, startAfter);\n        handlerDidRun = true;\n        await handler(args, abortController.signal, updateCleanupData);\n        if (abortController.signal.aborted) {\n          throw new AbortError(`Queue ${queueId} was aborted`);\n        }\n        await markJobCompleteInDatabase(id);\n        this.removeAbortController(id, queueId);\n        this.jobIds.delete(id);\n        return;\n      } catch (error) {\n        if (error.name === 'JobDoesNotExistError') {\n          this.logger.error(`Job does not exist error for ${type} job #${id} in queue ${queueId} attempt ${attempt}`);\n          if (handlerDidRun) {\n            this.emit('fatalError', { id, queueId, error });\n            await restoreJobToDatabaseForCleanupAndRemove(id, queueId, type, args);\n            this.jobIds.delete(id);\n            this.removeAbortController(id, queueId);\n            this.startCleanup(id, queueId, args, type);\n          } else {\n            this.emit('fatalError', { id, queueId, error });\n            this.jobIds.delete(id);\n            this.removeAbortController(id, queueId);\n          }\n          return;\n        }\n        if (abortController.signal.aborted) {\n          if (error.name !== 'AbortError') {\n            this.logger.error(`Abort signal following error in ${type} job #${id} in queue ${queueId} attempt ${attempt}`);\n            this.emit('error', error);\n          } else {\n            this.logger.warn(`Received abort signal for ${type} job #${id} in queue ${queueId} attempt ${attempt}`);\n          }\n          if (handlerDidRun) {\n            this.emit('fatalError', { id, queueId, error });\n            this.jobIds.delete(id);\n            this.removeAbortController(id, queueId);\n            this.startCleanup(id, queueId, args, type);\n          } else {\n            this.emit('fatalError', { id, queueId, error });\n            await markJobAsAbortedOrRemoveFromDatabase(id);\n            this.jobIds.delete(id);\n            this.removeAbortController(id, queueId);\n          }\n          return;\n        }\n        await incrementJobAttemptInDatabase(id);\n        if (error.name === 'FatalError') {\n          this.logger.error(`Fatal error in ${type} job #${id} in queue ${queueId} attempt ${attempt}`);\n          this.emit('error', error);\n          this.emit('fatalError', { id, queueId, error });\n          this.jobIds.delete(id);\n          this.removeAbortController(id, queueId);\n          await this.abortQueue(queueId);\n          return;\n        }\n        const retryDelay = await this.getRetryJobDelay(type, attempt, error);\n        if (retryDelay === false) {\n          this.logger.error(`Error in ${type} job #${id} in queue ${queueId} attempt ${attempt} with no additional attempts requested`);\n          this.emit('error', error);\n          this.emit('fatalError', { id, queueId, error });\n          this.jobIds.delete(id);\n          this.removeAbortController(id, queueId);\n          await this.abortQueue(queueId);\n          return;\n        }\n        this.logger.error(`Error in ${type} job #${id} in queue ${queueId} attempt ${attempt}, retrying ${retryDelay > 0 ? `in ${retryDelay}ms'}` : 'immediately'}`);\n        this.emit('error', error);\n        if (retryDelay > 0) {\n          this.emit('retryDelay', { id, queueId, retryDelay });\n          const newStartAfter = Date.now() + retryDelay;\n          await markJobStartAfterInDatabase(id, newStartAfter);\n          this.jobIds.delete(id);\n          this.startErrorHandler(id, queueId, args, type, attempt, newStartAfter);\n        } else {\n          this.jobIds.delete(id);\n          this.startErrorHandler(id, queueId, args, type, attempt, startAfter);\n        }\n      }\n    };\n    this.addToQueue(queueId, priority, run);\n    this.emit('dequeue', { id });\n  }\n\n  async handlePortMessage(event:MessageEvent) {\n    if (!(event instanceof MessageEvent)) {\n      return;\n    }\n    const { data } = event;\n    if (!data || typeof data !== 'object') {\n      this.logger.warn('Invalid message data');\n      this.logger.warnObject(event);\n      return;\n    }\n    const { type, args } = data;\n    if (typeof type !== 'string') {\n      this.logger.warn('Unknown message type');\n      this.logger.warnObject(event);\n      return;\n    }\n    if (!Array.isArray(args)) {\n      this.logger.warn('Unknown arguments type');\n      this.logger.warnObject(event);\n      return;\n    }\n    const port = this.port;\n    switch (type) {\n      case 'unlink':\n        this.logger.warn('Unlinking worker interface');\n        if (port instanceof MessagePort) {\n          port.onmessage = null;\n          delete this.port;\n        }\n        return;\n      case 'jobAdd':\n        jobEmitter.emit('jobAdd', ...args);\n        return;\n      case 'jobDelete':\n        jobEmitter.emit('jobDelete', ...args);\n        return;\n      case 'jobUpdate':\n        jobEmitter.emit('jobUpdate', ...args);\n        return;\n      case 'jobsClear':\n        jobEmitter.emit('jobsClear', ...args);\n        return;\n      default:\n        break;\n    }\n    const [requestId, ...requestArgs] = args;\n    if (typeof requestId !== 'number') {\n      throw new Error('Request arguments should start with a requestId number');\n    }\n    switch (type) {\n      case 'clear':\n        try {\n          await this.clear();\n          this.emit('clearComplete', requestId);\n        } catch (error) {\n          this.emit('clearError', requestId, error);\n          this.logger.error('Unable to handle clear message');\n          this.emit('error', error);\n        }\n        break;\n      case 'abortQueue':\n        try {\n          const [queueId] = requestArgs;\n          if (typeof queueId !== 'string') {\n            throw new Error(`Invalid \"queueId\" argument with type ${typeof queueId}, should be type string`);\n          }\n          await this.abortQueue(queueId);\n          this.emit('abortQueueComplete', requestId);\n        } catch (error) {\n          this.emit('abortQueueError', requestId, error);\n          this.logger.error('Unable to handle abort queue message');\n          this.emit('error', error);\n        }\n        break;\n      case 'dequeue':\n        try {\n          await this.dequeue();\n          this.emit('dequeueComplete', requestId);\n        } catch (error) {\n          this.emit('dequeueError', requestId, error);\n          this.logger.error('Unable to handle dequeue message');\n          this.emit('error', error);\n        }\n        break;\n      case 'enableStartOnJob':\n        try {\n          this.enableStartOnJob();\n          this.emit('enableStartOnJobComplete', requestId);\n        } catch (error) {\n          this.emit('enableStartOnJobError', requestId, error);\n          this.logger.error('Unable to handle enableStartOnJob message');\n          this.emit('error', error);\n        }\n        break;\n      case 'disableStartOnJob':\n        try {\n          this.disableStartOnJob();\n          this.emit('disableStartOnJobComplete', requestId);\n        } catch (error) {\n          this.emit('disableStartOnJobError', requestId, error);\n          this.logger.error('Unable to handle disableStartOnJob message');\n          this.emit('error', error);\n        }\n        break;\n      case 'getQueueIds':\n        try {\n          const queueIds = await this.getQueueIds();\n          this.emit('getQueuesComplete', requestId, [...queueIds]);\n        } catch (error) {\n          this.emit('getQueuesError', requestId, error);\n          this.logger.error('Unable to handle getQueueIds message');\n          this.emit('error', error);\n        }\n        break;\n      case 'idle':\n        try {\n          const [maxDuration, start] = requestArgs;\n          if (typeof maxDuration !== 'number') {\n            throw new Error(`Invalid \"queueId\" argument with type ${typeof maxDuration}, should be type number`);\n          }\n          if (typeof start !== 'number') {\n            throw new Error(`Invalid \"queueId\" argument with type ${typeof start}, should be type number`);\n          }\n          await this.onIdle(maxDuration - (Date.now() - start));\n          this.emit('idleComplete', requestId);\n        } catch (error) {\n          this.emit('idleError', requestId, error);\n          this.logger.error('Unable to handle idle message');\n          this.emit('error', error);\n        }\n        break;\n      default:\n        this.logger.warn(`Unknown worker interface message type ${type}`);\n    }\n  }\n\n  listenForServiceWorkerInterface() {\n    let activeEmitCallback;\n    let handleJobAdd;\n    let handleJobDelete;\n    let handleJobUpdate;\n    let handleJobsClear;\n\n    self.addEventListener('sync', (event) => {\n      this.logger.info(`SyncManager event ${event.tag}${event.lastChance ? ', last chance' : ''}`);\n      if (event.tag === 'syncManagerOnIdle') {\n        this.logger.info('Starting SyncManager handler');\n        this.emit('syncManagerOnIdle');\n        event.waitUntil(this.onIdle().catch((error) => {\n          this.logger.error(`SyncManager event handler failed${event.lastChance ? ' on last chance' : ''}`);\n          this.logger.errorStack(error);\n        }));\n      } else {\n        this.logger.warn(`Received unknown SyncManager event tag ${event.tag}`);\n      }\n    });\n\n    self.addEventListener('message', (event:ExtendableMessageEvent) => {\n      if (!(event instanceof ExtendableMessageEvent)) {\n        return;\n      }\n      const { data } = event;\n      if (!data || typeof data !== 'object') {\n        return;\n      }\n      const { type } = data;\n      if (type !== 'BATTERY_QUEUE_WORKER_INITIALIZATION') {\n        return;\n      }\n      if (!Array.isArray(event.ports)) {\n        return;\n      }\n      const port = event.ports[0];\n      if (!(port instanceof MessagePort)) {\n        return;\n      }\n      this.emitCallbacks = this.emitCallbacks.filter((x) => x !== activeEmitCallback);\n      const previousPort = this.port;\n      if (previousPort instanceof MessagePort) {\n        this.logger.info('Closing previous worker interface');\n        previousPort.close();\n      }\n      if (typeof handleJobAdd === 'function') {\n        localJobEmitter.removeListener('jobAdd', handleJobAdd);\n      }\n      if (typeof handleJobDelete === 'function') {\n        localJobEmitter.removeListener('jobDelete', handleJobDelete);\n      }\n      if (typeof handleJobUpdate === 'function') {\n        localJobEmitter.removeListener('jobUpdate', handleJobUpdate);\n      }\n      if (typeof handleJobsClear === 'function') {\n        localJobEmitter.removeListener('jobsClear', handleJobsClear);\n      }\n      port.postMessage({ type: 'BATTERY_QUEUE_WORKER_CONFIRMATION' });\n      this.logger.info('Linked to worker interface');\n      port.onmessage = this.handlePortMessage.bind(this);\n\n      handleJobAdd = (...args:Array<any>) => {\n        port.postMessage({ type: 'jobAdd', args });\n      };\n      handleJobDelete = (...args:Array<any>) => {\n        port.postMessage({ type: 'jobDelete', args });\n      };\n      handleJobUpdate = (...args:Array<any>) => {\n        port.postMessage({ type: 'jobUpdate', args });\n      };\n      handleJobsClear = (...args:Array<any>) => {\n        port.postMessage({ type: 'jobsClear', args });\n      };\n      localJobEmitter.addListener('jobAdd', handleJobAdd);\n      localJobEmitter.addListener('jobDelete', handleJobDelete);\n      localJobEmitter.addListener('jobUpdate', handleJobUpdate);\n      localJobEmitter.addListener('jobsClear', handleJobsClear);\n      const emitCallback = (t:string, args:Array<any>) => {\n        port.postMessage({ type: t, args });\n      };\n      activeEmitCallback = emitCallback;\n      this.emitCallbacks.push(emitCallback);\n      this.port = port;\n    });\n    self.addEventListener('messageerror', (event:MessageEvent) => {\n      this.logger.error('Service worker interface message error');\n      this.logger.errorObject(event);\n    });\n  }\n}\n\n"],"file":"queue.js"}