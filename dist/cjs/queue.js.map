{"version":3,"sources":["../../src/queue.js"],"names":["PRIORITY_OFFSET","Math","floor","Number","MAX_SAFE_INTEGER","BatteryQueue","options","dequeueQueue","PQueue","concurrency","handlerMap","Map","cleanupMap","retryDelayMap","queueMap","jobIds","Set","abortControllerMap","isClearing","emitCallbacks","logger","type","args","emitCallback","delayOrFunction","set","error","delete","handler","handlers","get","push","filter","f","length","cleanup","cleanups","onIdle","emit","start","queueId","priority","func","queue","add","newQueue","autoStart","on","Promise","resolve","timeout","setTimeout","removeListener","handleClearing","clearTimeout","addListener","pending","size","info","queueAbortControllerMap","values","abortController","abort","_dequeue","bind","jobs","queueIds","id","status","attempt","maxAttempts","startAfter","has","pause","JOB_PENDING_STATUS","startJob","JOB_ERROR_STATUS","startErrorHandler","JOB_CLEANUP_STATUS","startCleanup","Error","maxDuration","onIdlePromise","Date","now","warn","interval","setInterval","clearInterval","jobsInterval","dequeue","newAbortController","AbortController","removePathFromCleanupData","path","run","Array","isArray","cleanupData","addToQueue","abortQueue","signal","duration","reject","removeEventListener","handleAbort","AbortError","addEventListener","getAbortController","updateCleanupData","data","delayStart","hasError","hasFatalError","delayRetryErrorMs","aborted","errorStack","name","delay","removeAbortController","job","JOB_COMPLETE_STATUS","JOB_ABORTED_STATUS","newStartAfter","toLocaleString","retryDelayFunction","delayRetryMs","event","ExtendableMessageEvent","ports","port","MessagePort","postMessage","onmessage","handlePortMessage","t","MessageEvent","warnObject","value","clear","errorObject","errorObjectParser","serializeError","self","handleInitializationMessage","EventEmitter"],"mappings":"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","sourcesContent":["// @flow\n\nimport PQueue from 'p-queue';\nimport errorObjectParser from 'serialize-error';\nimport EventEmitter from 'events';\nimport type { Logger } from './logger';\nimport makeLogger from './logger';\nimport {\n  clearDatabase,\n  dequeueFromDatabase,\n  incrementAttemptInDatabase,\n  markJobCompleteInDatabase,\n  markJobPendingInDatabase,\n  markJobErrorInDatabase,\n  markJobCleanupInDatabase,\n  markJobAbortedInDatabase,\n  markJobStartAfterInDatabase,\n  updateCleanupInDatabase,\n  getCleanupFromDatabase,\n  getJobFromDatabase,\n  removePathFromCleanupDataInDatabase,\n  markQueueForCleanupInDatabase,\n  removeCleanupFromDatabase,\n  JOB_PENDING_STATUS,\n  JOB_ABORTED_STATUS,\n  JOB_ERROR_STATUS,\n  JOB_CLEANUP_STATUS,\n  JOB_COMPLETE_STATUS,\n} from './database';\nimport { AbortError } from './errors';\n\nconst PRIORITY_OFFSET = Math.floor(Number.MAX_SAFE_INTEGER / 2);\n\ntype HandlerFunction = (Array<any>, AbortSignal, (Object) => Promise<void>) => Promise<void>;\ntype CleanupFunction = (Object | void, Array<any>, Array<string> => Promise<void>) => Promise<void>;\ntype RetryDelayFunction = (number) => number;\ntype EmitCallback = (string, Array<any>) => void;\n\ntype Options = {\n  logger?: Logger\n};\n\nexport default class BatteryQueue extends EventEmitter {\n  declare logger: Logger;\n  declare dequeueQueue: PQueue;\n  declare handlerMap: Map<string, Array<HandlerFunction>>;\n  declare retryDelayMap: Map<string, (number) => number>;\n  declare cleanupMap: Map<string, Array<CleanupFunction>>;\n  declare queueMap: Map<string, PQueue>;\n  declare abortControllerMap: Map<string, Map<number, AbortController>>;\n  declare isClearing: boolean;\n  declare onIdlePromise: Promise<void> | void;\n  declare jobIds: Set<number>;\n  declare emitCallbacks: Array<EmitCallback>;\n\n  constructor(options?: Options = {}) {\n    super();\n    this.dequeueQueue = new PQueue({ concurrency: 1 });\n    this.handlerMap = new Map();\n    this.cleanupMap = new Map();\n    this.retryDelayMap = new Map();\n    this.queueMap = new Map();\n    this.jobIds = new Set();\n    this.abortControllerMap = new Map();\n    this.isClearing = false;\n    this.emitCallbacks = [];\n    this.logger = options.logger || makeLogger('Battery Queue');\n  }\n\n  emit(type:string, ...args:Array<any>) {\n    for (const emitCallback of this.emitCallbacks) {\n      emitCallback(type, args);\n    }\n    return super.emit(type, ...args);\n  }\n\n  setRetryDelay(type:string, delayOrFunction:number | RetryDelayFunction) {\n    if (typeof delayOrFunction === 'number') {\n      this.retryDelayMap.set(type, () => delayOrFunction);\n    } else if (typeof delayOrFunction === 'function') {\n      this.retryDelayMap.set(type, delayOrFunction);\n    } else {\n      this.logger.error(`Unable to set retry delay for ${type}, unknown handler type ${typeof delayOrFunction}`);\n    }\n  }\n\n  removeRetryDelay(type:string) {\n    this.retryDelayMap.delete(type);\n  }\n\n  addHandler(type:string, handler: HandlerFunction) {\n    const handlers = this.handlerMap.get(type) || [];\n    handlers.push(handler);\n    this.handlerMap.set(type, handlers);\n  }\n\n  removeHandler(type:string, handler: HandlerFunction) {\n    const handlers = (this.handlerMap.get(type) || []).filter((f) => f !== handler);\n    if (handlers.length > 0) {\n      this.handlerMap.set(type, handlers);\n    } else {\n      this.handlerMap.delete(type);\n    }\n  }\n\n  addCleanup(type:string, cleanup: CleanupFunction) {\n    const cleanups = this.cleanupMap.get(type) || [];\n    cleanups.push(cleanup);\n    this.cleanupMap.set(type, cleanups);\n  }\n\n  removeCleanup(type:string, cleanup: CleanupFunction) {\n    const cleanups = (this.cleanupMap.get(type) || []).filter((f) => f !== cleanup);\n    if (cleanups.length > 0) {\n      this.cleanupMap.set(type, cleanups);\n    } else {\n      this.cleanupMap.delete(type);\n    }\n  }\n\n  async clear() {\n    this.isClearing = true;\n    await this.onIdle();\n    this.emit('clearing');\n    await clearDatabase();\n    this.dequeueQueue.start();\n    this.isClearing = false;\n  }\n\n  addToQueue(queueId:string, priority: number, func: () => Promise<void>) {\n    const queue = this.queueMap.get(queueId);\n    if (typeof queue !== 'undefined') {\n      queue.add(func, { priority });\n      return;\n    }\n    const newQueue = new PQueue({ concurrency: 1, autoStart: false });\n    this.queueMap.set(queueId, newQueue);\n    newQueue.add(func, { priority });\n    newQueue.on('idle', async () => {\n      if (!this.isClearing) {\n        await new Promise((resolve) => {\n          const timeout = setTimeout(() => {\n            this.removeListener('clearing', handleClearing);\n            resolve();\n          }, 5000);\n          const handleClearing = () => {\n            clearTimeout(timeout);\n            this.removeListener('clearing', handleClearing);\n            resolve();\n          };\n          this.addListener('clearing', handleClearing);\n        });\n      }\n      if (newQueue.pending > 0 || newQueue.size > 0) {\n        return;\n      }\n      this.queueMap.delete(queueId);\n    });\n  }\n\n  async abortQueue(queueId: string) {\n    this.logger.info(`Aborting queue ${queueId}`);\n    // Changes:\n    // * JOB_ERROR_STATUS -> JOB_CLEANUP_STATUS\n    // * JOB_COMPLETE_STATUS -> JOB_CLEANUP_STATUS\n    // * JOB_PENDING_STATUS -> JOB_ABORTED_STATUS\n    await markQueueForCleanupInDatabase(queueId);\n    // Abort active jobs\n    const queueAbortControllerMap = this.abortControllerMap.get(queueId);\n    if (typeof queueAbortControllerMap !== 'undefined') {\n      for (const abortController of queueAbortControllerMap.values()) {\n        abortController.abort();\n      }\n    }\n    this.abortControllerMap.delete(queueId);\n  }\n\n  dequeue():void | Promise<void> {\n    if (this.dequeueQueue.size === 0) {\n      // Add a subsequent dequeue\n      this.dequeueQueue.add(this._dequeue.bind(this)); // eslint-disable-line no-underscore-dangle\n    }\n    return this.dequeueQueue.onIdle();\n  }\n\n  async _dequeue() { // eslint-disable-line consistent-return\n    const jobs = await dequeueFromDatabase();\n    const queueIds = new Set();\n    for (const { id, queueId, args, type, status, attempt, maxAttempts, startAfter } of jobs) {\n      // Pause queues before adding items into them to avoid starting things out of priority\n      if (!queueIds.has(queueId)) {\n        const queue = this.queueMap.get(queueId);\n        if (typeof queue !== 'undefined') {\n          queue.pause();\n        }\n        queueIds.add(queueId);\n      }\n      if (status === JOB_PENDING_STATUS) {\n        this.startJob(id, queueId, args, type, attempt, maxAttempts, startAfter);\n      } else if (status === JOB_ERROR_STATUS) {\n        this.startErrorHandler(id, queueId, args, type);\n      } else if (status === JOB_CLEANUP_STATUS) {\n        this.startCleanup(id, queueId, args, type);\n      } else {\n        throw new Error(`Unknown job status ${status} in job ${id} of queue ${queueId}`);\n      }\n    }\n    for (const queueId of queueIds) {\n      const queue = this.queueMap.get(queueId);\n      if (typeof queue !== 'undefined') {\n        queue.start();\n      } else {\n        this.logger.error(`Unable to start queue ${queueId} after dequeue; queue does not exist`);\n      }\n    }\n  }\n\n  async onIdle(maxDuration?: number = 5000) {\n    if (typeof this.onIdlePromise === 'undefined') {\n      this.onIdlePromise = (async () => {\n        const timeout = Date.now() + maxDuration;\n        while (true) {\n          if (Date.now() > timeout) {\n            this.logger.warn(`Idle timeout after ${maxDuration}ms`);\n            break;\n          }\n          await this.dequeueQueue.onIdle();\n          for (const [queueId, queue] of this.queueMap) {\n            const interval = setInterval(() => {\n              this.logger.info(`Waiting on queue ${queueId}`);\n            }, 250);\n            await queue.onIdle();\n            clearInterval(interval);\n          }\n          const jobsInterval = setInterval(() => {\n            this.logger.info('Waiting on jobs');\n          }, 250);\n          const jobs = await dequeueFromDatabase();\n          clearInterval(jobsInterval);\n          if (jobs.length > 0) {\n            const interval = setInterval(() => {\n              this.logger.info('Waiting on dequeue');\n            }, 250);\n            await this.dequeue();\n            clearInterval(interval);\n            continue;\n          }\n          break;\n        }\n        delete this.onIdlePromise;\n        this.emit('idle');\n      })();\n    }\n    await this.onIdlePromise;\n  }\n\n  getAbortController(id:number, queueId:string) {\n    let queueAbortControllerMap = this.abortControllerMap.get(queueId);\n    if (typeof queueAbortControllerMap === 'undefined') {\n      queueAbortControllerMap = new Map();\n      this.abortControllerMap.set(queueId, queueAbortControllerMap);\n    }\n    const abortController = queueAbortControllerMap.get(id);\n    if (typeof abortController !== 'undefined') {\n      return abortController;\n    }\n    const newAbortController = new AbortController();\n    queueAbortControllerMap.set(id, newAbortController);\n    return newAbortController;\n  }\n\n  removeAbortController(id:number, queueId:string) {\n    const queueAbortControllerMap = this.abortControllerMap.get(queueId);\n    if (typeof queueAbortControllerMap === 'undefined') {\n      this.logger.warn(`Abort controller map for ${id} in queue ${queueId} does not exist`);\n      return;\n    }\n    const abortController = queueAbortControllerMap.get(id);\n    if (typeof abortController === 'undefined') {\n      this.logger.warn(`Abort controller for ${id} in queue ${queueId} does not exist`);\n      return;\n    }\n    queueAbortControllerMap.delete(id);\n  }\n\n  startCleanup(id:number, queueId:string, args:Array<any>, type:string) {\n    if (this.jobIds.has(id)) {\n      this.logger.info(`Skipping active ${type} cleanup #${id} in queue ${queueId}`);\n      return;\n    }\n    this.logger.info(`Adding ${type} cleanup job #${id} to queue ${queueId}`);\n    this.jobIds.add(id);\n    const priority = PRIORITY_OFFSET + id;\n    const removePathFromCleanupData = (path:Array<string>) => removePathFromCleanupDataInDatabase(id, queueId, path);\n    const run = async () => {\n      this.logger.info(`Starting ${type} cleanup job #${id} in queue ${queueId}`);\n      const cleanups = this.cleanupMap.get(type);\n      if (Array.isArray(cleanups)) {\n        const cleanupData = await getCleanupFromDatabase(id);\n        for (const cleanup of cleanups) {\n          await cleanup(cleanupData, args, removePathFromCleanupData);\n        }\n      } else {\n        this.logger.warn(`No cleanup for job type ${type}`);\n      }\n      await removeCleanupFromDatabase(id);\n      this.jobIds.delete(id);\n      this.emit('cleanup', { id });\n      await markJobAbortedInDatabase(id);\n    };\n    this.addToQueue(queueId, priority, run);\n    this.emit('dequeueCleanup', { id });\n  }\n\n  startErrorHandler(id:number, queueId:string, args:Array<any>, type:string) {\n    if (this.jobIds.has(id)) {\n      this.logger.info(`Skipping active ${type} error handler job #${id} in queue ${queueId}`);\n      return;\n    }\n    this.logger.info(`Adding ${type} error handler job #${id} to queue ${queueId}`);\n    this.jobIds.add(id);\n    const priority = PRIORITY_OFFSET + id;\n    const removePathFromCleanupData = (path:Array<string>) => removePathFromCleanupDataInDatabase(id, queueId, path);\n    const run = async () => {\n      this.logger.info(`Starting ${type} error handler job #${id} in queue ${queueId}`);\n      const cleanups = this.cleanupMap.get(type);\n      if (Array.isArray(cleanups)) {\n        const cleanupData = await getCleanupFromDatabase(id);\n        for (const cleanup of cleanups) {\n          await cleanup(cleanupData, args, removePathFromCleanupData);\n        }\n      } else {\n        this.logger.warn(`No cleanup for job type ${type}`);\n      }\n      await removeCleanupFromDatabase(id);\n      this.jobIds.delete(id);\n      this.emit('cleanup', { id });\n      const [attempt, maxAttempts] = await incrementAttemptInDatabase(id);\n      if (attempt >= maxAttempts) {\n        this.logger.warn(`Not retrying ${type} job #${id} in queue ${queueId} after ${maxAttempts} failed ${maxAttempts === 1 ? 'attempt' : 'attempts'}, cleaning up queue`);\n        await markJobAbortedInDatabase(id);\n        this.emit('fatalError', { queueId });\n        await this.abortQueue(queueId);\n      } else {\n        await markJobPendingInDatabase(id);\n        this.logger.info(`Retrying ${type} job #${id} in queue ${queueId}, ${maxAttempts - attempt} ${maxAttempts - attempt === 1 ? 'attempt' : 'attempts'} remaining`);\n        this.emit('retry', { id });\n      }\n      await this.dequeue();\n    };\n    this.addToQueue(queueId, priority, run);\n    this.emit('dequeueCleanup', { id });\n  }\n\n  async delayStart(id:number, queueId:string, type:string, signal: AbortSignal, startAfter: number) {\n    const duration = startAfter - Date.now();\n    if (duration > 0) {\n      this.logger.info(`Delaying start of ${type} job #${id} in queue ${queueId} by ${duration}ms`);\n      await new Promise((resolve, reject) => {\n        const timeout = setTimeout(() => {\n          signal.removeEventListener('abort', handleAbort);\n          resolve();\n        }, duration);\n        const handleAbort = () => {\n          clearTimeout(timeout);\n          signal.removeEventListener('abort', handleAbort);\n          reject(new AbortError('Aborted'));\n        };\n        signal.addEventListener('abort', handleAbort);\n      });\n    }\n  }\n\n  startJob(id:number, queueId:string, args:Array<any>, type:string, attempt:number, maxAttempts:number, startAfter: number) {\n    if (this.jobIds.has(id)) {\n      this.logger.info(`Skipping active ${type} job #${id} in queue ${queueId}`);\n      return;\n    }\n    this.logger.info(`Adding ${type} job #${id} to queue ${queueId}`);\n    this.jobIds.add(id);\n    const priority = PRIORITY_OFFSET - id;\n    const abortController = this.getAbortController(id, queueId);\n    const updateCleanupData = (data:Object) => updateCleanupInDatabase(id, queueId, data);\n    const run = async () => {\n      await this.delayStart(id, queueId, type, abortController.signal, startAfter);\n      this.logger.info(`Starting ${type} job #${id} in queue ${queueId} attempt ${attempt + 1} with ${maxAttempts - attempt - 1} ${maxAttempts - attempt - 1 === 1 ? 'attempt' : 'attempts'} remaining`);\n      const handlers = this.handlerMap.get(type);\n      let hasError = false;\n      let hasFatalError = false;\n      let delayRetryErrorMs = 0;\n      if (Array.isArray(handlers)) {\n        for (const handler of handlers) {\n          try {\n            await handler(args, abortController.signal, updateCleanupData);\n            if (abortController.signal.aborted) {\n              throw new AbortError('Aborted');\n            }\n          } catch (error) {\n            this.logger.error(`Error in ${type} job #${id} in queue ${queueId} attempt ${attempt + 1} with ${maxAttempts - attempt - 1} ${maxAttempts - attempt - 1 === 1 ? 'attempt' : 'attempts'} remaining`);\n            this.logger.errorStack(error);\n            hasError = true;\n            if (error.name === 'FatalQueueError') {\n              hasFatalError = true;\n            }\n            if (error.name === 'DelayRetryError') {\n              delayRetryErrorMs = error.delay || 0;\n            }\n            break;\n          }\n        }\n      } else {\n        this.logger.warn(`No handler for job type ${type}`);\n      }\n      this.removeAbortController(id, queueId);\n      this.jobIds.delete(id);\n      if (!hasError) {\n        // Rely on AbortController to prevent items in aborted queues from being marked as complete\n        await markJobCompleteInDatabase(id);\n        this.emit('complete', { id });\n        return;\n      }\n      const job = await getJobFromDatabase(id);\n      if (typeof job === 'undefined') {\n        this.logger.error(`Unable to get ${type} job #${id} in queue ${queueId} following error`);\n        return;\n      }\n      if (job.status === JOB_CLEANUP_STATUS) {\n        throw new Error(`Found cleanup status for ${type} job #${id} in queue ${queueId} following error, this should not happen`);\n      }\n      if (job.status === JOB_COMPLETE_STATUS) {\n        throw new Error(`Found complete status for ${type} job #${id} in queue ${queueId} following error, this should not happen`);\n      }\n      if (job.status === JOB_ERROR_STATUS) {\n        throw new Error(`Found error status for ${type} job #${id} in queue ${queueId} following error, this should not happen`);\n      }\n      if (job.status === JOB_ABORTED_STATUS) {\n        // Job was aborted while running\n        this.logger.error(`Found aborted status for ${type} job #${id} in queue ${queueId} following error, starting cleanup`);\n        await markJobErrorInDatabase(id);\n      } else if (hasFatalError) {\n        await markJobCleanupInDatabase(id);\n        this.emit('fatalError', { queueId });\n        await this.abortQueue(queueId);\n      } else if (delayRetryErrorMs > 0) {\n        const newStartAfter = Date.now() + delayRetryErrorMs;\n        this.logger.warn(`Delaying retry of ${type} job #${id} in queue ${queueId} by ${delayRetryErrorMs}ms to ${new Date(newStartAfter).toLocaleString()} following DelayRetryError`);\n        this.emit('delayRetry', { id, queueId, delay: delayRetryErrorMs });\n        await markJobStartAfterInDatabase(id, newStartAfter);\n        await markJobErrorInDatabase(id);\n      } else {\n        const retryDelayFunction = this.retryDelayMap.get(type);\n        if (typeof retryDelayFunction === 'function') {\n          const delayRetryMs = retryDelayFunction(attempt + 1);\n          if (delayRetryMs > 0) {\n            const newStartAfter = Date.now() + delayRetryMs;\n            this.logger.warn(`Delaying retry of ${type} job #${id} in queue ${queueId} by ${delayRetryMs}ms to ${new Date(newStartAfter).toLocaleString()}`);\n            this.emit('delayRetry', { id, queueId, delay: delayRetryMs });\n            await markJobStartAfterInDatabase(id, newStartAfter);\n          }\n        }\n        await markJobErrorInDatabase(id);\n      }\n      await this.dequeue();\n    };\n    this.addToQueue(queueId, priority, run);\n    this.emit('dequeue', { id });\n  }\n\n  handleInitializationMessage(event:ExtendableMessageEvent) {\n    if (!(event instanceof ExtendableMessageEvent)) {\n      return;\n    }\n    const { data } = event;\n    if (!data || typeof data !== 'object') {\n      return;\n    }\n    const { type } = data;\n    if (type !== 'BATTERY_QUEUE_WORKER_INITIALIZATION') {\n      return;\n    }\n    if (!Array.isArray(event.ports)) {\n      return;\n    }\n    const port = event.ports[0];\n    if (!(port instanceof MessagePort)) {\n      return;\n    }\n    port.postMessage({ type: 'BATTERY_QUEUE_WORKER_CONFIRMATION' });\n    this.logger.info('Linked to interface');\n    port.onmessage = this.handlePortMessage.bind(this);\n    this.emitCallbacks.push((t:string, args:Array<any>) => {\n      port.postMessage({ type: t, args });\n    });\n  }\n\n  async handlePortMessage(event:MessageEvent) {\n    if (!(event instanceof MessageEvent)) {\n      return;\n    }\n    const { data } = event;\n    if (!data || typeof data !== 'object') {\n      this.logger.warn('Invalid message data');\n      this.logger.warnObject(event);\n      return;\n    }\n    const { type, value } = data;\n    if (typeof type !== 'string') {\n      this.logger.warn('Unknown message type');\n      this.logger.warnObject(event);\n      return;\n    }\n    if (value === null || typeof value !== 'object') {\n      throw new Error('Message payload should be an object');\n    }\n    const { id } = value;\n    if (typeof id !== 'number') {\n      throw new Error('Message payload should include property id with type number');\n    }\n    switch (type) {\n      case 'clear':\n        try {\n          await this.clear();\n          this.emit('clearComplete', { id });\n        } catch (error) {\n          this.emit('clearError', { errorObject: errorObjectParser.serializeError(error), id });\n          this.logger.error('Unable to handle clear message');\n          this.logger.errorStack(error);\n        }\n        break;\n      case 'abortQueue':\n        try {\n          const { queueId } = value;\n          if (typeof queueId !== 'string') {\n            throw new Error('Message abort queue payload should include property queueId with type string');\n          }\n          await this.abortQueue(queueId);\n          this.emit('abortQueueComplete', { id });\n        } catch (error) {\n          this.emit('abortQueueError', { errorObject: errorObjectParser.serializeError(error), id });\n          this.logger.error('Unable to handle abort queue message');\n          this.logger.errorStack(error);\n        }\n        break;\n      case 'dequeue':\n        try {\n          await this.dequeue();\n          this.emit('dequeueComplete', { id });\n        } catch (error) {\n          this.emit('dequeueError', { errorObject: errorObjectParser.serializeError(error), id });\n          this.logger.error('Unable to handle dequeue message');\n          this.logger.errorStack(error);\n        }\n        break;\n      case 'idle':\n        try {\n          const { maxDuration, start } = value;\n          if (typeof maxDuration !== 'number') {\n            throw new Error('Message idle payload should include property maxDuration with type number');\n          }\n          if (typeof start !== 'number') {\n            throw new Error('Message idle payload should include property start with type number');\n          }\n          await this.onIdle(maxDuration - (Date.now() - start));\n          this.emit('idleComplete', { id });\n        } catch (error) {\n          this.emit('idleError', { errorObject: errorObjectParser.serializeError(error), id });\n          this.logger.error('Unable to handle idle message');\n          this.logger.errorStack(error);\n        }\n        break;\n      default:\n        this.logger.warn(`Unknown worker interface message type ${type}`);\n    }\n  }\n\n  listenForServiceWorkerInterface() {\n    self.addEventListener('message', this.handleInitializationMessage.bind(this));\n  }\n}\n\n"],"file":"queue.js"}