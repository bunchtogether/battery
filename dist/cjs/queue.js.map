{"version":3,"sources":["../../src/queue.js"],"names":["PRIORITY_OFFSET","Math","floor","Number","MAX_SAFE_INTEGER","BatteryQueue","options","dequeueQueue","PQueue","concurrency","unloadQueue","handlerMap","Map","cleanupMap","retryJobDelayMap","retryCleanupDelayMap","queueMap","jobIds","Set","abortControllerMap","isClearing","emitCallbacks","logger","addListener","error","errorStack","interval","clearTimeout","heartbeatExpiresTimeout","heartbeatExpiresTimestamp","Date","now","round","setTimeout","warn","unloadClient","disableStartOnJob","didRequestJobAddDequeue","handleJobAdd","self","queueMicrotask","dequeue","jobEmitter","handleJobDelete","id","queueId","has","queueAbortControllerMap","get","abortController","abort","handleJobUpdate","type","status","JOB_CLEANUP_AND_REMOVE_STATUS","JOB_CLEANUP_STATUS","then","job","args","startCleanup","queue","start","catch","removeListener","emitCallback","queueIds","keys","handleUnload","Error","retryJobDelayFunction","set","delete","attempt","result","emit","retryCleanupDelayFunction","handler","cleanup","onIdle","priority","func","add","newQueue","autoStart","on","Promise","resolve","timeout","handleClearing","handleActive","pending","size","info","values","jobs","startJobs","jobId","bind","newJobs","Array","isArray","startAfter","pause","JOB_PENDING_STATUS","startJob","JOB_ERROR_STATUS","startErrorHandler","maxDuration","onIdlePromise","setInterval","clearInterval","jobsInterval","length","newAbortController","AbortController","cleanupJob","data","undefined","delay","toLocaleString","path","name","getRetryCleanupDelay","retryCleanupDelay","newStartAfter","runCleanup","run","addToQueue","getAbortController","signal","aborted","removeAbortController","AbortError","duration","reject","removeEventListener","handleAbort","addEventListener","updateCleanupData","handlerDidRun","delayJobStart","shouldKeepJobInDatabase","abortQueue","getRetryJobDelay","retryDelay","event","MessageEvent","warnObject","port","MessagePort","onmessage","requestId","requestArgs","clear","abortAndRemoveQueueJobsGreaterThanId","abortAndRemoveQueue","enableStartOnJob","getQueueIds","runUnloadHandlers","handleHeartbeat","unloadData","activeEmitCallback","handleJobsClear","tag","lastChance","waitUntil","ExtendableMessageEvent","ports","filter","x","previousPort","close","localJobEmitter","handlePortMessage","postMessage","t","push","errorObject","EventEmitter"],"mappings":"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","sourcesContent":["// @flow\n\nimport PQueue from 'p-queue';\nimport EventEmitter from 'events';\nimport type { Logger } from './logger';\nimport makeLogger from './logger';\nimport type { Job } from './database';\nimport {\n  jobEmitter,\n  localJobEmitter,\n  clearDatabase,\n  dequeueFromDatabase,\n  dequeueFromDatabaseNotIn,\n  incrementJobAttemptInDatabase,\n  incrementCleanupAttemptInDatabase,\n  markJobCompleteInDatabase,\n  markJobCompleteThenRemoveFromDatabase,\n  markJobPendingInDatabase,\n  markJobErrorInDatabase,\n  markJobStartAfterInDatabase,\n  markJobAsAbortedOrRemoveFromDatabase,\n  markCleanupStartAfterInDatabase,\n  updateCleanupValuesInDatabase,\n  getCleanupFromDatabase,\n  removePathFromCleanupDataInDatabase,\n  getJobFromDatabase,\n  markQueueForCleanupInDatabase,\n  markQueueForCleanupAndRemoveInDatabase,\n  markQueueJobsGreaterThanIdCleanupAndRemoveInDatabase,\n  removeCleanupFromDatabase,\n  restoreJobToDatabaseForCleanupAndRemove,\n  getUnloadDataFromDatabase,\n  clearUnloadDataInDatabase,\n  JOB_PENDING_STATUS,\n  JOB_ERROR_STATUS,\n  JOB_CLEANUP_STATUS,\n  JOB_CLEANUP_AND_REMOVE_STATUS,\n} from './database';\nimport { AbortError } from './errors';\n\nconst PRIORITY_OFFSET = Math.floor(Number.MAX_SAFE_INTEGER / 2);\n\ntype HandlerFunction = (Array<any>, AbortSignal, (Object) => Promise<void>) => Promise<void | false>;\ntype CleanupFunction = (Object | void, Array<any>, Array<string> => Promise<void>) => Promise<void>;\ntype RetryDelayFunction = (number, Error) => number | false | Promise<number | false>;\ntype EmitCallback = (string, Array<any>) => void;\ntype UnloadFunction = (Object | void) => Promise<void> | void;\n\ntype Options = {\n  logger?: Logger,\n  startOnJob?: boolean\n};\n\nexport default class BatteryQueue extends EventEmitter {\n  declare logger: Logger;\n  declare dequeueQueue: PQueue;\n  declare unloadQueue: PQueue;\n  declare handlerMap: Map<string, HandlerFunction>;\n  declare retryJobDelayMap: Map<string, RetryDelayFunction>;\n  declare retryCleanupDelayMap: Map<string, RetryDelayFunction>;\n  declare cleanupMap: Map<string, CleanupFunction>;\n  declare queueMap: Map<string, PQueue>;\n  declare handleUnload: void | UnloadFunction;\n  declare abortControllerMap: Map<string, Map<number, AbortController>>;\n  declare isClearing: boolean;\n  declare onIdlePromise: Promise<void> | void;\n  declare jobIds: Set<number>;\n  declare emitCallbacks: Array<EmitCallback>;\n  declare port: MessagePort | void;\n  declare handleJobAdd: void | () => void;\n  declare handleJobUpdate: void | (number, string, string, number) => void;\n  declare handleJobDelete: void | (number, string) => void;\n  declare heartbeatExpiresTimestamp: void | number;\n  declare heartbeatExpiresTimeout: void | TimeoutID;\n\n  constructor(options?: Options = {}) {\n    super();\n    this.dequeueQueue = new PQueue({ concurrency: 1 });\n    this.unloadQueue = new PQueue({ concurrency: 1 });\n    this.handlerMap = new Map();\n    this.cleanupMap = new Map();\n    this.retryJobDelayMap = new Map();\n    this.retryCleanupDelayMap = new Map();\n    this.queueMap = new Map();\n    this.jobIds = new Set();\n    this.abortControllerMap = new Map();\n    this.isClearing = false;\n    this.emitCallbacks = [];\n    this.logger = options.logger || makeLogger('Battery Queue');\n    this.addListener('error', (error) => {\n      this.logger.errorStack(error);\n    });\n    this.addListener('heartbeat', (interval:number) => {\n      clearTimeout(this.heartbeatExpiresTimeout);\n      this.heartbeatExpiresTimestamp = Date.now() + Math.round(interval * 2.5);\n      this.heartbeatExpiresTimeout = setTimeout(() => {\n        if (typeof this.heartbeatExpiresTimestamp !== 'number') {\n          return;\n        }\n        this.logger.warn(`Heartbeat timeout after ${Math.round(interval * 2.1)}ms`);\n        this.unloadClient();\n      }, Math.round(interval * 2.1));\n    });\n  }\n\n  enableStartOnJob() {\n    this.disableStartOnJob(); // Prevent handlers from being added multiple times\n    let didRequestJobAddDequeue = false;\n    const handleJobAdd = () => {\n      if (didRequestJobAddDequeue) {\n        return;\n      }\n      didRequestJobAddDequeue = true;\n      self.queueMicrotask(() => {\n        didRequestJobAddDequeue = false;\n        this.dequeue();\n      });\n    };\n    jobEmitter.addListener('jobAdd', handleJobAdd);\n    this.handleJobAdd = handleJobAdd;\n    const handleJobDelete = (id:number, queueId:string) => {\n      if (this.jobIds.has(id)) {\n        const queueAbortControllerMap = this.abortControllerMap.get(queueId);\n        if (typeof queueAbortControllerMap !== 'undefined') {\n          const abortController = queueAbortControllerMap.get(id);\n          if (typeof abortController !== 'undefined') {\n            abortController.abort();\n          }\n        }\n      }\n    };\n    jobEmitter.addListener('jobDelete', handleJobDelete);\n    this.handleJobDelete = handleJobDelete;\n\n    const handleJobUpdate = (id:number, queueId:string, type:string, status:number) => {\n      if (status !== JOB_CLEANUP_AND_REMOVE_STATUS && status !== JOB_CLEANUP_STATUS) {\n        return;\n      }\n      if (this.jobIds.has(id)) {\n        const queueAbortControllerMap = this.abortControllerMap.get(queueId);\n        if (typeof queueAbortControllerMap !== 'undefined') {\n          const abortController = queueAbortControllerMap.get(id);\n          if (typeof abortController !== 'undefined') {\n            abortController.abort();\n          }\n        }\n        return;\n      }\n      getJobFromDatabase(id).then((job:Job | void) => {\n        if (typeof job === 'undefined') {\n          this.logger.error(`Unable to cleanup and remove ${type} job #${id} in queue ${queueId}, job does not exist`);\n          return;\n        }\n        if (this.jobIds.has(id)) {\n          return;\n        }\n        const { args } = job;\n        this.startCleanup(id, queueId, args, type);\n        const queue = this.queueMap.get(queueId);\n        if (typeof queue !== 'undefined') {\n          queue.start();\n        }\n      }).catch((error) => {\n        this.logger.error(`Error while cleaning up and removing ${type} job #${id} in queue ${queueId}`);\n        this.logger.errorStack(error);\n      });\n    };\n    jobEmitter.addListener('jobUpdate', handleJobUpdate);\n    this.handleJobUpdate = handleJobUpdate;\n  }\n\n  disableStartOnJob() {\n    const handleJobAdd = this.handleJobAdd;\n    if (typeof handleJobAdd === 'function') {\n      jobEmitter.removeListener('jobAdd', handleJobAdd);\n      delete this.handleJobAdd;\n    }\n    const handleJobUpdate = this.handleJobUpdate;\n    if (typeof handleJobUpdate === 'function') {\n      jobEmitter.removeListener('jobUpdate', handleJobUpdate);\n      delete this.handleJobUpdate;\n    }\n    const handleJobDelete = this.handleJobDelete;\n    if (typeof handleJobDelete === 'function') {\n      jobEmitter.removeListener('jobDelete', handleJobDelete);\n      delete this.handleJobDelete;\n    }\n  }\n\n  emit(type:string, ...args:Array<any>) {\n    for (const emitCallback of this.emitCallbacks) {\n      emitCallback(type, args);\n    }\n    return super.emit(type, ...args);\n  }\n\n  async getQueueIds() {\n    await this.dequeue();\n    const queueIds:Set<string> = new Set(this.queueMap.keys());\n    return queueIds;\n  }\n\n  setUnload(handleUnload:UnloadFunction) {\n    if (typeof this.handleUnload === 'function') {\n      throw new Error('Unload handler already exists');\n    }\n    this.handleUnload = handleUnload;\n  }\n\n  removeUnload() {\n    if (typeof this.handleUnload !== 'function') {\n      throw new Error('Unload handler does not exist');\n    }\n    delete this.handleUnload;\n  }\n\n  setRetryJobDelay(type:string, retryJobDelayFunction:RetryDelayFunction) {\n    if (this.retryJobDelayMap.has(type)) {\n      throw new Error(`Retry job delay handler for type \"${type}\" already exists`);\n    }\n    this.retryJobDelayMap.set(type, retryJobDelayFunction);\n  }\n\n  removeRetryJobDelay(type:string) {\n    if (!this.retryJobDelayMap.has(type)) {\n      throw new Error(`Retry job delay handler for type \"${type}\" does not exist`);\n    }\n    this.retryJobDelayMap.delete(type);\n  }\n\n  async getRetryJobDelay(type:string, attempt: number, error:Error) {\n    const retryJobDelayFunction = this.retryJobDelayMap.get(type);\n    if (typeof retryJobDelayFunction !== 'function') {\n      return false;\n    }\n    let result = false;\n    try {\n      result = await retryJobDelayFunction(attempt, error);\n    } catch (retryDelayError) {\n      this.logger.error(`Error in retry job delay handler for type \"${type}\" on attempt ${attempt}`);\n      this.emit('error', retryDelayError);\n      return false;\n    }\n    if (typeof result !== 'number' && result !== false) {\n      throw new Error(`Retry job delay function for type \"${type}\" returned invalid response, should be a number (milliseconds) or false`);\n    }\n    return result;\n  }\n\n  setRetryCleanupDelay(type:string, retryCleanupDelayFunction:RetryDelayFunction) {\n    if (this.retryCleanupDelayMap.has(type)) {\n      throw new Error(`Retry cleanup delay handler for type \"${type}\" already exists`);\n    }\n    this.retryCleanupDelayMap.set(type, retryCleanupDelayFunction);\n  }\n\n  removeRetryCleanupDelay(type:string) {\n    if (!this.retryCleanupDelayMap.has(type)) {\n      throw new Error(`Retry cleanup delay handler for type \"${type}\" does not exist`);\n    }\n    this.retryCleanupDelayMap.delete(type);\n  }\n\n  async getRetryCleanupDelay(type:string, attempt: number, error:Error) {\n    const retryCleanupDelayFunction = this.retryCleanupDelayMap.get(type);\n    if (typeof retryCleanupDelayFunction !== 'function') {\n      return false;\n    }\n    let result = false;\n    try {\n      result = await retryCleanupDelayFunction(attempt, error);\n    } catch (retryDelayError) {\n      this.logger.error(`Error in retry cleanup delay handler for type \"${type}\" on attempt ${attempt}`);\n      this.emit('error', retryDelayError);\n      return false;\n    }\n    if (typeof result !== 'number' && result !== false) {\n      throw new Error(`Retry cleanup delay function for type \"${type}\" returned invalid response, should be a number (milliseconds) or false`);\n    }\n    return result;\n  }\n\n  setHandler(type:string, handler: HandlerFunction) {\n    if (this.handlerMap.has(type)) {\n      throw new Error(`Handler for type \"${type}\" already exists`);\n    }\n    this.handlerMap.set(type, handler);\n  }\n\n  removeHandler(type:string) {\n    if (!this.handlerMap.has(type)) {\n      throw new Error(`Handler for type \"${type}\" does not exist`);\n    }\n    this.handlerMap.delete(type);\n  }\n\n  setCleanup(type:string, cleanup: CleanupFunction) {\n    if (this.cleanupMap.has(type)) {\n      throw new Error(`Cleanup for type \"${type}\" already exists`);\n    }\n    this.cleanupMap.set(type, cleanup);\n  }\n\n  removeCleanup(type:string) {\n    if (!this.cleanupMap.has(type)) {\n      throw new Error(`Cleanup for type \"${type}\" does not exist`);\n    }\n    this.cleanupMap.delete(type);\n  }\n\n  async clear() {\n    this.isClearing = true;\n    await this.onIdle();\n    this.emit('clearing');\n    await clearDatabase();\n    this.dequeueQueue.start();\n    this.isClearing = false;\n  }\n\n  addToQueue(queueId:string, priority: number, func: () => Promise<void>) {\n    const queue = this.queueMap.get(queueId);\n    if (typeof queue !== 'undefined') {\n      queue.add(func, { priority });\n      return;\n    }\n    const newQueue = new PQueue({ concurrency: 1, autoStart: false });\n    this.queueMap.set(queueId, newQueue);\n    newQueue.add(func, { priority });\n    newQueue.on('idle', async () => {\n      if (!this.isClearing) {\n        await new Promise((resolve) => {\n          const timeout = setTimeout(() => {\n            this.removeListener('clearing', handleClearing);\n            newQueue.removeListener('active', handleActive);\n            resolve();\n          }, 5000);\n          const handleClearing = () => {\n            clearTimeout(timeout);\n            this.removeListener('clearing', handleClearing);\n            newQueue.removeListener('active', handleActive);\n            resolve();\n          };\n          const handleActive = () => {\n            clearTimeout(timeout);\n            this.removeListener('clearing', handleClearing);\n            newQueue.removeListener('active', handleActive);\n            resolve();\n          };\n          this.addListener('clearing', handleClearing);\n          newQueue.addListener('active', handleActive);\n        });\n      }\n      if (newQueue.pending > 0 || newQueue.size > 0) {\n        return;\n      }\n      this.queueMap.delete(queueId);\n      this.emit('queueInactive', queueId);\n    });\n    this.emit('queueActive', queueId);\n  }\n\n  async abortQueue(queueId: string) {\n    this.logger.info(`Aborting queue ${queueId}`);\n    // Abort active jobs\n    const queueAbortControllerMap = this.abortControllerMap.get(queueId);\n    if (typeof queueAbortControllerMap !== 'undefined') {\n      for (const abortController of queueAbortControllerMap.values()) {\n        abortController.abort();\n      }\n    }\n    // Changes:\n    // * JOB_ERROR_STATUS -> JOB_CLEANUP_STATUS\n    // * JOB_COMPLETE_STATUS -> JOB_CLEANUP_STATUS\n    // * JOB_CLEANUP_AND_REMOVE_STATUS -> JOB_CLEANUP_AND_REMOVE_STATUS\n    // * JOB_PENDING_STATUS -> JOB_ABORTED_STATUS\n    const jobs = await markQueueForCleanupInDatabase(queueId);\n    await this.startJobs(jobs);\n  }\n\n  async abortAndRemoveQueue(queueId: string) {\n    this.logger.info(`Aborting and removing queue ${queueId}`);\n    // Abort active jobs\n    const queueAbortControllerMap = this.abortControllerMap.get(queueId);\n    if (typeof queueAbortControllerMap !== 'undefined') {\n      for (const abortController of queueAbortControllerMap.values()) {\n        abortController.abort();\n      }\n    }\n    // Changes:\n    // * JOB_ERROR_STATUS -> JOB_CLEANUP_AND_REMOVE_STATUS\n    // * JOB_COMPLETE_STATUS -> JOB_CLEANUP_AND_REMOVE_STATUS\n    // * JOB_CLEANUP_STATUS -> JOB_CLEANUP_AND_REMOVE_STATUS\n    // * JOB_CLEANUP_AND_REMOVE_STATUS -> JOB_CLEANUP_AND_REMOVE_STATUS\n    // * Removes other statuses\n    const jobs = await markQueueForCleanupAndRemoveInDatabase(queueId);\n    await this.startJobs(jobs);\n  }\n\n  async abortAndRemoveQueueJobsGreaterThanId(queueId: string, id: number) {\n    this.logger.info(`Aborting and removing jobs with ID greater than ${id} in queue ${queueId}`);\n    // Abort active jobs\n    const queueAbortControllerMap = this.abortControllerMap.get(queueId);\n    if (typeof queueAbortControllerMap !== 'undefined') {\n      for (const [jobId, abortController] of queueAbortControllerMap) {\n        if (jobId > id) {\n          abortController.abort();\n        }\n      }\n    }\n    // Changes:\n    // * JOB_ERROR_STATUS -> JOB_CLEANUP_AND_REMOVE_STATUS\n    // * JOB_COMPLETE_STATUS -> JOB_CLEANUP_AND_REMOVE_STATUS\n    // * JOB_CLEANUP_STATUS -> JOB_CLEANUP_AND_REMOVE_STATUS\n    // * JOB_CLEANUP_AND_REMOVE_STATUS -> JOB_CLEANUP_AND_REMOVE_STATUS\n    // * Removes other statuses\n    const jobs = await markQueueJobsGreaterThanIdCleanupAndRemoveInDatabase(queueId, id);\n    await this.startJobs(jobs);\n  }\n\n  dequeue():void | Promise<void> {\n    if (this.dequeueQueue.size === 0) {\n      // Add a subsequent dequeue\n      this.dequeueQueue.add(this.startJobs.bind(this));\n    }\n    return this.dequeueQueue.onIdle();\n  }\n\n  async startJobs(newJobs?:Array<Job>) { // eslint-disable-line consistent-return\n    const jobs = Array.isArray(newJobs) ? newJobs : await dequeueFromDatabaseNotIn([...this.jobIds.keys()]);\n    const queueIds = new Set();\n    for (const { id, queueId, args, type, status, attempt, startAfter } of jobs) {\n      if (this.jobIds.has(id)) {\n        continue;\n      }\n      // Pause queues before adding items into them to avoid starting things out of priority\n      if (!queueIds.has(queueId)) {\n        const queue = this.queueMap.get(queueId);\n        if (typeof queue !== 'undefined') {\n          queue.pause();\n        }\n        queueIds.add(queueId);\n      }\n      if (status === JOB_PENDING_STATUS) {\n        this.startJob(id, queueId, args, type, attempt + 1, startAfter);\n      } else if (status === JOB_ERROR_STATUS) {\n        this.startErrorHandler(id, queueId, args, type, attempt, startAfter);\n      } else if (status === JOB_CLEANUP_STATUS) {\n        this.startCleanup(id, queueId, args, type);\n      } else if (status === JOB_CLEANUP_AND_REMOVE_STATUS) {\n        this.startCleanup(id, queueId, args, type);\n      } else {\n        throw new Error(`Unknown job status ${status} in job ${id} of queue ${queueId}`);\n      }\n    }\n    for (const queueId of queueIds) {\n      const queue = this.queueMap.get(queueId);\n      if (typeof queue !== 'undefined') {\n        queue.start();\n      } else {\n        this.logger.error(`Unable to start queue ${queueId} after dequeue; queue does not exist`);\n      }\n    }\n  }\n\n  async onIdle(maxDuration?: number) {\n    if (typeof this.onIdlePromise === 'undefined') {\n      this.onIdlePromise = (async () => {\n        const timeout = typeof maxDuration === 'number' ? Date.now() + maxDuration : -1;\n        const start = Date.now();\n        while (true) { // eslint-disable-line no-constant-condition\n          if (timeout !== -1 && Date.now() > timeout) {\n            this.logger.warn(`Idle timeout after ${Date.now() - start}ms`);\n            break;\n          }\n          await this.dequeueQueue.onIdle();\n          for (const [queueId, queue] of this.queueMap) {\n            const interval = setInterval(() => {\n              this.logger.info(`Waiting on queue ${queueId}`);\n            }, 250);\n            await queue.onIdle();\n            clearInterval(interval);\n          }\n          const jobsInterval = setInterval(() => {\n            this.logger.info('Waiting on jobs');\n          }, 250);\n          const jobs = await dequeueFromDatabase();\n          clearInterval(jobsInterval);\n          if (jobs.length > 0) {\n            const interval = setInterval(() => {\n              this.logger.info('Waiting on dequeue');\n            }, 250);\n            await this.dequeue();\n            clearInterval(interval);\n            continue;\n          }\n          break;\n        }\n        delete this.onIdlePromise;\n        this.emit('idle');\n      })();\n    }\n    await this.onIdlePromise;\n  }\n\n  getAbortController(id:number, queueId:string) {\n    let queueAbortControllerMap = this.abortControllerMap.get(queueId);\n    if (typeof queueAbortControllerMap === 'undefined') {\n      queueAbortControllerMap = new Map();\n      this.abortControllerMap.set(queueId, queueAbortControllerMap);\n    }\n    const abortController = queueAbortControllerMap.get(id);\n    if (typeof abortController !== 'undefined') {\n      return abortController;\n    }\n    const newAbortController = new AbortController();\n    queueAbortControllerMap.set(id, newAbortController);\n    return newAbortController;\n  }\n\n  removeAbortController(id:number, queueId:string) {\n    const queueAbortControllerMap = this.abortControllerMap.get(queueId);\n    if (typeof queueAbortControllerMap === 'undefined') {\n      this.logger.warn(`Abort controller map for ${id} in queue ${queueId} does not exist`);\n      return;\n    }\n    const abortController = queueAbortControllerMap.get(id);\n    if (typeof abortController === 'undefined') {\n      this.logger.warn(`Abort controller for ${id} in queue ${queueId} does not exist`);\n      return;\n    }\n    queueAbortControllerMap.delete(id);\n    if (queueAbortControllerMap.size === 0) {\n      this.abortControllerMap.delete(queueId);\n    }\n  }\n\n  async runCleanup(id:number, queueId:string, args:Array<any>, type:string) {\n    this.emit('cleanupStart', { id });\n    const cleanup = this.cleanupMap.get(type);\n    if (typeof cleanup !== 'function') {\n      this.logger.warn(`No cleanup for job type ${type}`);\n      await removeCleanupFromDatabase(id);\n      this.emit('cleanup', { id });\n      return;\n    }\n    const cleanupJob = await getCleanupFromDatabase(id);\n    const { data, startAfter } = typeof cleanupJob === 'undefined' ? { data: undefined, startAfter: 0 } : cleanupJob;\n    const delay = startAfter - Date.now();\n    if (delay > 0) {\n      this.logger.info(`Delaying retry of ${type} job #${id} cleanup in queue ${queueId} by ${delay}ms to ${new Date(startAfter).toLocaleString()}`);\n      await new Promise((resolve) => setTimeout(resolve, delay));\n    }\n    try {\n      await cleanup(data, args, (path:Array<string>) => removePathFromCleanupDataInDatabase(id, path));\n    } catch (error) {\n      const attempt = await incrementCleanupAttemptInDatabase(id, queueId);\n      if (error.name === 'FatalError') {\n        this.logger.error(`Fatal error in ${type} job #${id} cleanup in queue ${queueId} attempt ${attempt}`);\n        this.emit('error', error);\n        await removeCleanupFromDatabase(id);\n        this.emit('fatalCleanupError', { id, queueId });\n        return;\n      }\n      const retryCleanupDelay = await this.getRetryCleanupDelay(type, attempt, error);\n      if (retryCleanupDelay === false) {\n        this.logger.error(`Error in ${type} job #${id} cleanup in queue ${queueId} attempt ${attempt} with no additional attempts requested`);\n        this.emit('error', error);\n        await removeCleanupFromDatabase(id);\n        this.emit('fatalCleanupError', { id, queueId });\n        return;\n      }\n      this.logger.error(`Error in ${type} job #${id} cleanup in queue ${queueId} attempt ${attempt}, retrying ${retryCleanupDelay > 0 ? `in ${retryCleanupDelay}ms'}` : 'immediately'}`);\n      this.emit('error', error);\n      if (retryCleanupDelay > 0) {\n        this.emit('retryCleanupDelay', { id, queueId, retryCleanupDelay });\n        const newStartAfter = Date.now() + retryCleanupDelay;\n        await markCleanupStartAfterInDatabase(id, newStartAfter);\n      }\n      await this.runCleanup(id, queueId, args, type);\n      return;\n    }\n    await removeCleanupFromDatabase(id);\n    this.emit('cleanup', { id });\n  }\n\n  startCleanup(id:number, queueId:string, args:Array<any>, type:string) {\n    this.logger.info(`Adding ${type} cleanup job #${id} to queue ${queueId}`);\n    this.jobIds.add(id);\n    const priority = PRIORITY_OFFSET + id;\n    const run = async () => {\n      this.logger.info(`Starting ${type} cleanup #${id} in queue ${queueId}`);\n      await this.runCleanup(id, queueId, args, type);\n      // Job could be marked for removal while cleanup is running\n      await markJobAsAbortedOrRemoveFromDatabase(id);\n      this.jobIds.delete(id);\n    };\n    this.addToQueue(queueId, priority, run);\n  }\n\n  startErrorHandler(id:number, queueId:string, args:Array<any>, type:string, attempt: number, startAfter: number) {\n    this.logger.info(`Adding ${type} error handler job #${id} to queue ${queueId}`);\n    this.jobIds.add(id);\n    const priority = PRIORITY_OFFSET + id;\n    const abortController = this.getAbortController(id, queueId);\n    const run = async () => {\n      this.logger.info(`Starting ${type} error handler #${id} in queue ${queueId}`);\n      await this.runCleanup(id, queueId, args, type);\n      if (abortController.signal.aborted) {\n        // Job could be marked for removal while error handler is running\n        await markJobAsAbortedOrRemoveFromDatabase(id);\n        this.removeAbortController(id, queueId);\n        this.jobIds.delete(id);\n      } else {\n        await markJobPendingInDatabase(id);\n        this.logger.info(`Retrying ${type} job #${id} in queue ${queueId}`);\n        this.emit('retry', { id });\n        this.startJob(id, queueId, args, type, attempt + 1, startAfter);\n      }\n    };\n    this.addToQueue(queueId, priority, run);\n  }\n\n  async delayJobStart(id:number, queueId:string, type:string, signal: AbortSignal, startAfter: number) {\n    if (signal.aborted) {\n      throw new AbortError(`Queue ${queueId} was aborted`);\n    }\n    const duration = startAfter - Date.now();\n    if (duration > 0) {\n      this.logger.info(`Delaying start of ${type} job #${id} in queue ${queueId} by ${duration}ms`);\n      await new Promise((resolve, reject) => {\n        const timeout = setTimeout(() => {\n          signal.removeEventListener('abort', handleAbort);\n          resolve();\n        }, duration);\n        const handleAbort = () => {\n          clearTimeout(timeout);\n          signal.removeEventListener('abort', handleAbort);\n          reject(new AbortError(`Queue ${queueId} was aborted`));\n        };\n        signal.addEventListener('abort', handleAbort);\n      });\n    }\n  }\n\n  startJob(id:number, queueId:string, args:Array<any>, type:string, attempt:number, startAfter: number) {\n    this.logger.info(`Adding ${type} job #${id} to queue ${queueId}`);\n    this.jobIds.add(id);\n    const priority = PRIORITY_OFFSET - id;\n    const updateCleanupData = (data:Object) => updateCleanupValuesInDatabase(id, queueId, data);\n    const abortController = this.getAbortController(id, queueId);\n    const run = async () => {\n      if (abortController.signal.aborted) {\n        this.emit('fatalError', { id, queueId, error: new AbortError(`Queue ${queueId} was aborted`) });\n        this.removeAbortController(id, queueId);\n        this.jobIds.delete(id);\n        return;\n      }\n      this.logger.info(`Starting ${type} job #${id} in queue ${queueId} attempt ${attempt}`);\n      const handler = this.handlerMap.get(type);\n      if (typeof handler !== 'function') {\n        this.logger.warn(`No handler for job type ${type}`);\n        await markJobCompleteInDatabase(id);\n        this.removeAbortController(id, queueId);\n        this.jobIds.delete(id);\n        return;\n      }\n      let handlerDidRun = false;\n      try {\n        // Mark as error in database so the job is cleaned up and retried if execution\n        // stops before job completion or error.\n        await markJobErrorInDatabase(id);\n        await this.delayJobStart(id, queueId, type, abortController.signal, startAfter);\n        handlerDidRun = true;\n        const shouldKeepJobInDatabase = await handler(args, abortController.signal, updateCleanupData);\n        if (abortController.signal.aborted) {\n          throw new AbortError(`Queue ${queueId} was aborted`);\n        }\n        if (shouldKeepJobInDatabase === false) {\n          await markJobCompleteThenRemoveFromDatabase(id);\n        } else {\n          await markJobCompleteInDatabase(id);\n        }\n        this.removeAbortController(id, queueId);\n        this.jobIds.delete(id);\n        return;\n      } catch (error) {\n        if (error.name === 'JobDoesNotExistError') {\n          this.logger.error(`Job does not exist error for ${type} job #${id} in queue ${queueId} attempt ${attempt}`);\n          if (handlerDidRun) {\n            this.emit('fatalError', { id, queueId, error });\n            await restoreJobToDatabaseForCleanupAndRemove(id, queueId, type, args);\n            this.jobIds.delete(id);\n            this.removeAbortController(id, queueId);\n            this.startCleanup(id, queueId, args, type);\n          } else {\n            this.emit('fatalError', { id, queueId, error });\n            this.jobIds.delete(id);\n            this.removeAbortController(id, queueId);\n          }\n          return;\n        }\n        if (abortController.signal.aborted) {\n          if (error.name !== 'AbortError') {\n            this.logger.error(`Abort signal following error in ${type} job #${id} in queue ${queueId} attempt ${attempt}`);\n            this.emit('error', error);\n          } else {\n            this.logger.warn(`Received abort signal for ${type} job #${id} in queue ${queueId} attempt ${attempt}`);\n          }\n          if (handlerDidRun) {\n            this.emit('fatalError', { id, queueId, error });\n            this.jobIds.delete(id);\n            this.removeAbortController(id, queueId);\n            this.startCleanup(id, queueId, args, type);\n          } else {\n            this.emit('fatalError', { id, queueId, error });\n            await markJobAsAbortedOrRemoveFromDatabase(id);\n            this.jobIds.delete(id);\n            this.removeAbortController(id, queueId);\n          }\n          return;\n        }\n        await incrementJobAttemptInDatabase(id);\n        if (error.name === 'FatalError') {\n          this.logger.error(`Fatal error in ${type} job #${id} in queue ${queueId} attempt ${attempt}`);\n          this.emit('error', error);\n          this.emit('fatalError', { id, queueId, error });\n          this.jobIds.delete(id);\n          this.removeAbortController(id, queueId);\n          await this.abortQueue(queueId);\n          return;\n        }\n        const retryDelay = await this.getRetryJobDelay(type, attempt, error);\n        if (retryDelay === false) {\n          this.logger.error(`Error in ${type} job #${id} in queue ${queueId} attempt ${attempt} with no additional attempts requested`);\n          this.emit('error', error);\n          this.emit('fatalError', { id, queueId, error });\n          this.jobIds.delete(id);\n          this.removeAbortController(id, queueId);\n          await this.abortQueue(queueId);\n          return;\n        }\n        this.logger.error(`Error in ${type} job #${id} in queue ${queueId} attempt ${attempt}, retrying ${retryDelay > 0 ? `in ${retryDelay}ms'}` : 'immediately'}`);\n        this.emit('error', error);\n        if (retryDelay > 0) {\n          this.emit('retryDelay', { id, queueId, retryDelay });\n          const newStartAfter = Date.now() + retryDelay;\n          await markJobStartAfterInDatabase(id, newStartAfter);\n          this.jobIds.delete(id);\n          this.startErrorHandler(id, queueId, args, type, attempt, newStartAfter);\n        } else {\n          this.jobIds.delete(id);\n          this.startErrorHandler(id, queueId, args, type, attempt, startAfter);\n        }\n      }\n    };\n    this.addToQueue(queueId, priority, run);\n    this.emit('dequeue', { id });\n  }\n\n  async handlePortMessage(event:MessageEvent) {\n    if (!(event instanceof MessageEvent)) {\n      return;\n    }\n    const { data } = event;\n    if (!data || typeof data !== 'object') {\n      this.logger.warn('Invalid message data');\n      this.logger.warnObject(event);\n      return;\n    }\n    const { type, args } = data;\n    if (typeof type !== 'string') {\n      this.logger.warn('Unknown message type');\n      this.logger.warnObject(event);\n      return;\n    }\n    if (!Array.isArray(args)) {\n      this.logger.warn('Unknown arguments type');\n      this.logger.warnObject(event);\n      return;\n    }\n    const port = this.port;\n    switch (type) {\n      case 'unlink':\n        this.logger.warn('Unlinking worker interface');\n        if (port instanceof MessagePort) {\n          port.onmessage = null;\n          delete this.port;\n        }\n        return;\n      case 'heartbeat':\n        this.emit('heartbeat', ...args);\n        return;\n      case 'jobAdd':\n        jobEmitter.emit('jobAdd', ...args);\n        return;\n      case 'jobDelete':\n        jobEmitter.emit('jobDelete', ...args);\n        return;\n      case 'jobUpdate':\n        jobEmitter.emit('jobUpdate', ...args);\n        return;\n      case 'jobsClear':\n        jobEmitter.emit('jobsClear', ...args);\n        return;\n      default:\n        break;\n    }\n    const [requestId, ...requestArgs] = args;\n    if (typeof requestId !== 'number') {\n      throw new Error('Request arguments should start with a requestId number');\n    }\n    switch (type) {\n      case 'clear':\n        try {\n          await this.clear();\n          this.emit('clearComplete', requestId);\n        } catch (error) {\n          this.emit('clearError', requestId, error);\n          this.logger.error('Unable to handle clear message');\n          this.emit('error', error);\n        }\n        break;\n      case 'abortAndRemoveQueueJobsGreaterThanId':\n        try {\n          const [queueId, id] = requestArgs;\n          if (typeof queueId !== 'string') {\n            throw new Error(`Invalid \"queueId\" argument with type ${typeof queueId}, should be type string`);\n          }\n          if (typeof id !== 'number') {\n            throw new Error(`Invalid \"id\" argument with type ${typeof id}, should be type number`);\n          }\n          await this.abortAndRemoveQueueJobsGreaterThanId(queueId, id);\n          this.emit('abortAndRemoveQueueJobsGreaterThanIdComplete', requestId);\n        } catch (error) {\n          this.emit('abortAndRemoveQueueJobsGreaterThanIdError', requestId, error);\n          this.logger.error('Unable to handle abort and remove queue jobs greater than ID message');\n          this.emit('error', error);\n        }\n        break;\n      case 'abortAndRemoveQueue':\n        try {\n          const [queueId] = requestArgs;\n          if (typeof queueId !== 'string') {\n            throw new Error(`Invalid \"queueId\" argument with type ${typeof queueId}, should be type string`);\n          }\n          await this.abortAndRemoveQueue(queueId);\n          this.emit('abortAndRemoveQueueComplete', requestId);\n        } catch (error) {\n          this.emit('abortAndRemoveQueueError', requestId, error);\n          this.logger.error('Unable to handle abort and remove queue message');\n          this.emit('error', error);\n        }\n        break;\n      case 'abortQueue':\n        try {\n          const [queueId] = requestArgs;\n          if (typeof queueId !== 'string') {\n            throw new Error(`Invalid \"queueId\" argument with type ${typeof queueId}, should be type string`);\n          }\n          await this.abortQueue(queueId);\n          this.emit('abortQueueComplete', requestId);\n        } catch (error) {\n          this.emit('abortQueueError', requestId, error);\n          this.logger.error('Unable to handle abort queue message');\n          this.emit('error', error);\n        }\n        break;\n      case 'dequeue':\n        try {\n          await this.dequeue();\n          this.emit('dequeueComplete', requestId);\n        } catch (error) {\n          this.emit('dequeueError', requestId, error);\n          this.logger.error('Unable to handle dequeue message');\n          this.emit('error', error);\n        }\n        break;\n      case 'enableStartOnJob':\n        try {\n          this.enableStartOnJob();\n          this.emit('enableStartOnJobComplete', requestId);\n        } catch (error) {\n          this.emit('enableStartOnJobError', requestId, error);\n          this.logger.error('Unable to handle enableStartOnJob message');\n          this.emit('error', error);\n        }\n        break;\n      case 'disableStartOnJob':\n        try {\n          this.disableStartOnJob();\n          this.emit('disableStartOnJobComplete', requestId);\n        } catch (error) {\n          this.emit('disableStartOnJobError', requestId, error);\n          this.logger.error('Unable to handle disableStartOnJob message');\n          this.emit('error', error);\n        }\n        break;\n      case 'getQueueIds':\n        try {\n          const queueIds = await this.getQueueIds();\n          this.emit('getQueuesComplete', requestId, [...queueIds]);\n        } catch (error) {\n          this.emit('getQueuesError', requestId, error);\n          this.logger.error('Unable to handle getQueueIds message');\n          this.emit('error', error);\n        }\n        break;\n      case 'runUnloadHandlers':\n        try {\n          await this.runUnloadHandlers();\n          this.emit('runUnloadHandlersComplete', requestId);\n        } catch (error) {\n          this.emit('runUnloadHandlersError', requestId, error);\n          this.logger.error('Unable to run unload handlers message');\n          this.emit('error', error);\n        }\n        break;\n      case 'idle':\n        try {\n          const [maxDuration, start] = requestArgs;\n          if (typeof maxDuration !== 'number') {\n            throw new Error(`Invalid \"queueId\" argument with type ${typeof maxDuration}, should be type number`);\n          }\n          if (typeof start !== 'number') {\n            throw new Error(`Invalid \"queueId\" argument with type ${typeof start}, should be type number`);\n          }\n          await this.onIdle(maxDuration - (Date.now() - start));\n          this.emit('idleComplete', requestId);\n        } catch (error) {\n          this.emit('idleError', requestId, error);\n          this.logger.error('Unable to handle idle message');\n          this.emit('error', error);\n        }\n        break;\n      default:\n        this.logger.warn(`Unknown worker interface message type ${type}`);\n    }\n  }\n\n  async unloadClient() {\n    this.logger.info('Detected client unload');\n    const heartbeatExpiresTimestamp = this.heartbeatExpiresTimestamp;\n    if (typeof heartbeatExpiresTimestamp !== 'number') {\n      return;\n    }\n    clearTimeout(this.heartbeatExpiresTimeout);\n    delete this.heartbeatExpiresTimestamp;\n    const delay = heartbeatExpiresTimestamp - Date.now();\n    if (delay > 0) {\n      await new Promise((resolve) => {\n        const timeout = setTimeout(() => {\n          clearTimeout(timeout);\n          this.removeListener('heartbeat', handleHeartbeat);\n          resolve();\n        }, delay);\n        const handleHeartbeat = () => {\n          clearTimeout(timeout);\n          this.removeListener('heartbeat', handleHeartbeat);\n          resolve();\n        };\n        this.addListener('heartbeat', handleHeartbeat);\n      });\n    }\n    if (typeof this.heartbeatExpiresTimestamp === 'number') {\n      this.logger.info('Cancelling client unload, heartbeat detected');\n      return;\n    }\n    this.logger.info('Unloading');\n    await this.runUnloadHandlers();\n    this.emit('unloadClient');\n    await this.onIdle();\n  }\n\n  runUnloadHandlers() {\n    return this.unloadQueue.add(async () => {\n      const handleUnload = this.handleUnload;\n      if (typeof handleUnload === 'function') {\n        try {\n          const unloadData = await getUnloadDataFromDatabase();\n          await handleUnload(unloadData);\n          await clearUnloadDataInDatabase();\n        } catch (error) {\n          this.logger.error('Error in unload handler');\n          this.logger.errorStack(error);\n        }\n      }\n    });\n  }\n\n  listenForServiceWorkerInterface() {\n    let activeEmitCallback;\n    let handleJobAdd;\n    let handleJobDelete;\n    let handleJobUpdate;\n    let handleJobsClear;\n\n    self.addEventListener('sync', (event) => {\n      this.logger.info(`SyncManager event ${event.tag}${event.lastChance ? ', last chance' : ''}`);\n      if (event.tag === 'syncManagerOnIdle') {\n        this.logger.info('Starting SyncManager idle handler');\n        this.emit('syncManagerOnIdle');\n        event.waitUntil(this.onIdle().catch((error) => {\n          this.logger.error(`SyncManager event handler failed${event.lastChance ? ' on last chance' : ''}`);\n          this.logger.errorStack(error);\n        }));\n      } else if (event.tag === 'unload') {\n        this.logger.info('Starting SyncManager unload client handler');\n        event.waitUntil(this.unloadClient().catch((error) => {\n          this.logger.error(`SyncManager event handler failed${event.lastChance ? ' on last chance' : ''}`);\n          this.logger.errorStack(error);\n        }));\n      } else {\n        this.logger.warn(`Received unknown SyncManager event tag ${event.tag}`);\n      }\n    });\n\n    self.addEventListener('message', (event:ExtendableMessageEvent) => {\n      if (!(event instanceof ExtendableMessageEvent)) {\n        return;\n      }\n      const { data } = event;\n      if (!data || typeof data !== 'object') {\n        return;\n      }\n      const { type } = data;\n      if (type !== 'BATTERY_QUEUE_WORKER_INITIALIZATION') {\n        return;\n      }\n      if (!Array.isArray(event.ports)) {\n        return;\n      }\n      const port = event.ports[0];\n      if (!(port instanceof MessagePort)) {\n        return;\n      }\n      this.emitCallbacks = this.emitCallbacks.filter((x) => x !== activeEmitCallback);\n      const previousPort = this.port;\n      if (previousPort instanceof MessagePort) {\n        this.logger.info('Closing previous worker interface');\n        previousPort.close();\n      }\n      if (typeof handleJobAdd === 'function') {\n        localJobEmitter.removeListener('jobAdd', handleJobAdd);\n      }\n      if (typeof handleJobDelete === 'function') {\n        localJobEmitter.removeListener('jobDelete', handleJobDelete);\n      }\n      if (typeof handleJobUpdate === 'function') {\n        localJobEmitter.removeListener('jobUpdate', handleJobUpdate);\n      }\n      if (typeof handleJobsClear === 'function') {\n        localJobEmitter.removeListener('jobsClear', handleJobsClear);\n      }\n      port.onmessage = this.handlePortMessage.bind(this);\n\n      handleJobAdd = (...args:Array<any>) => {\n        port.postMessage({ type: 'jobAdd', args });\n      };\n      handleJobDelete = (...args:Array<any>) => {\n        port.postMessage({ type: 'jobDelete', args });\n      };\n      handleJobUpdate = (...args:Array<any>) => {\n        port.postMessage({ type: 'jobUpdate', args });\n      };\n      handleJobsClear = (...args:Array<any>) => {\n        port.postMessage({ type: 'jobsClear', args });\n      };\n      localJobEmitter.addListener('jobAdd', handleJobAdd);\n      localJobEmitter.addListener('jobDelete', handleJobDelete);\n      localJobEmitter.addListener('jobUpdate', handleJobUpdate);\n      localJobEmitter.addListener('jobsClear', handleJobsClear);\n      const emitCallback = (t:string, args:Array<any>) => {\n        port.postMessage({ type: t, args });\n      };\n      activeEmitCallback = emitCallback;\n      this.emitCallbacks.push(emitCallback);\n      this.port = port;\n      port.postMessage({ type: 'BATTERY_QUEUE_WORKER_CONFIRMATION' });\n      this.logger.info('Linked to worker interface');\n    });\n    self.addEventListener('messageerror', (event:MessageEvent) => {\n      this.logger.error('Service worker interface message error');\n      this.logger.errorObject(event);\n    });\n  }\n}\n\n"],"file":"queue.js"}