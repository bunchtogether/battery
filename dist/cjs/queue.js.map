{"version":3,"sources":["../../src/queue.js"],"names":["PRIORITY_OFFSET","Math","floor","Number","MAX_SAFE_INTEGER","BatteryQueue","options","dequeueQueue","PQueue","concurrency","handlerMap","Map","cleanupMap","retryJobDelayMap","retryCleanupDelayMap","queueMap","jobIds","Set","abortControllerMap","isClearing","emitCallbacks","logger","addListener","error","errorStack","interval","clearTimeout","heartbeatExpiresTimeout","heartbeatExpiresTimestamp","Date","now","round","setTimeout","warn","unloadClient","disableStartOnJob","didRequestJobAddDequeue","handleJobAdd","self","queueMicrotask","dequeue","jobEmitter","handleJobDelete","id","queueId","has","queueAbortControllerMap","get","abortController","abort","handleJobUpdate","type","status","JOB_CLEANUP_AND_REMOVE_STATUS","then","job","args","startCleanup","catch","removeListener","emitCallback","queueIds","keys","retryJobDelayFunction","Error","set","delete","attempt","result","emit","retryCleanupDelayFunction","handler","cleanup","onIdle","start","priority","func","queue","add","newQueue","autoStart","on","Promise","resolve","timeout","handleClearing","handleActive","pending","size","info","values","jobs","startJobs","bind","newJobs","Array","isArray","startAfter","pause","JOB_PENDING_STATUS","startJob","JOB_ERROR_STATUS","startErrorHandler","JOB_CLEANUP_STATUS","maxDuration","onIdlePromise","setInterval","clearInterval","jobsInterval","length","newAbortController","AbortController","cleanupJob","data","undefined","delay","toLocaleString","path","name","getRetryCleanupDelay","retryCleanupDelay","newStartAfter","runCleanup","run","addToQueue","getAbortController","signal","aborted","removeAbortController","AbortError","duration","reject","removeEventListener","handleAbort","addEventListener","updateCleanupData","handlerDidRun","delayJobStart","abortQueue","getRetryJobDelay","retryDelay","event","MessageEvent","warnObject","port","MessagePort","onmessage","requestId","requestArgs","clear","enableStartOnJob","getQueueIds","handleHeartbeat","error2","activeEmitCallback","handleJobsClear","tag","lastChance","waitUntil","ExtendableMessageEvent","ports","filter","x","previousPort","close","localJobEmitter","handlePortMessage","postMessage","t","push","errorObject","EventEmitter"],"mappings":"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","sourcesContent":["// @flow\n\nimport PQueue from 'p-queue';\nimport EventEmitter from 'events';\nimport type { Logger } from './logger';\nimport makeLogger from './logger';\nimport type { Job } from './database';\nimport {\n  jobEmitter,\n  localJobEmitter,\n  clearDatabase,\n  dequeueFromDatabase,\n  dequeueFromDatabaseNotIn,\n  incrementJobAttemptInDatabase,\n  incrementCleanupAttemptInDatabase,\n  markJobCompleteInDatabase,\n  markJobPendingInDatabase,\n  markJobErrorInDatabase,\n  markJobStartAfterInDatabase,\n  markJobAsAbortedOrRemoveFromDatabase,\n  markCleanupStartAfterInDatabase,\n  updateCleanupValuesInDatabase,\n  getCleanupFromDatabase,\n  removePathFromCleanupDataInDatabase,\n  getJobFromDatabase,\n  markQueueForCleanupInDatabase,\n  removeCleanupFromDatabase,\n  restoreJobToDatabaseForCleanupAndRemove,\n  removeAbortQueueOnUnload,\n  getScheduledAbortOnUnloadQueues,\n  getAllAbortOnUnloadQueues,\n  JOB_PENDING_STATUS,\n  JOB_ERROR_STATUS,\n  JOB_CLEANUP_STATUS,\n  JOB_CLEANUP_AND_REMOVE_STATUS,\n} from './database';\nimport { AbortError } from './errors';\n\nconst PRIORITY_OFFSET = Math.floor(Number.MAX_SAFE_INTEGER / 2);\n\ntype HandlerFunction = (Array<any>, AbortSignal, (Object) => Promise<void>) => Promise<void>;\ntype CleanupFunction = (Object | void, Array<any>, Array<string> => Promise<void>) => Promise<void>;\ntype RetryDelayFunction = (number, Error) => number | false | Promise<number | false>;\ntype EmitCallback = (string, Array<any>) => void;\n\ntype Options = {\n  logger?: Logger,\n  startOnJob?: boolean\n};\n\nexport default class BatteryQueue extends EventEmitter {\n  declare logger: Logger;\n  declare dequeueQueue: PQueue;\n  declare handlerMap: Map<string, HandlerFunction>;\n  declare retryJobDelayMap: Map<string, RetryDelayFunction>;\n  declare retryCleanupDelayMap: Map<string, RetryDelayFunction>;\n  declare cleanupMap: Map<string, CleanupFunction>;\n  declare queueMap: Map<string, PQueue>;\n  declare abortControllerMap: Map<string, Map<number, AbortController>>;\n  declare isClearing: boolean;\n  declare onIdlePromise: Promise<void> | void;\n  declare jobIds: Set<number>;\n  declare emitCallbacks: Array<EmitCallback>;\n  declare port: MessagePort | void;\n  declare handleJobAdd: void | () => void;\n  declare handleJobUpdate: void | (number, string, string, number) => void;\n  declare handleJobDelete: void | (number, string) => void;\n  declare heartbeatExpiresTimestamp: void | number;\n  declare heartbeatExpiresTimeout: void | TimeoutID;\n\n  constructor(options?: Options = {}) {\n    super();\n    this.dequeueQueue = new PQueue({ concurrency: 1 });\n    this.handlerMap = new Map();\n    this.cleanupMap = new Map();\n    this.retryJobDelayMap = new Map();\n    this.retryCleanupDelayMap = new Map();\n    this.queueMap = new Map();\n    this.jobIds = new Set();\n    this.abortControllerMap = new Map();\n    this.isClearing = false;\n    this.emitCallbacks = [];\n    this.logger = options.logger || makeLogger('Battery Queue');\n    this.addListener('error', (error) => {\n      this.logger.errorStack(error);\n    });\n    this.addListener('heartbeat', (interval:number) => {\n      clearTimeout(this.heartbeatExpiresTimeout);\n      this.heartbeatExpiresTimestamp = Date.now() + Math.round(interval * 2.5);\n      this.heartbeatExpiresTimeout = setTimeout(() => {\n        if (typeof this.heartbeatExpiresTimestamp !== 'number') {\n          return;\n        }\n        this.logger.warn(`Heartbeat timeout after ${Math.round(interval * 2.1)}ms`);\n        this.unloadClient();\n      }, Math.round(interval * 2.1));\n    });\n  }\n\n  enableStartOnJob() {\n    this.disableStartOnJob(); // Prevent handlers from being added multiple times\n    let didRequestJobAddDequeue = false;\n    const handleJobAdd = () => {\n      if (didRequestJobAddDequeue) {\n        return;\n      }\n      didRequestJobAddDequeue = true;\n      self.queueMicrotask(() => {\n        didRequestJobAddDequeue = false;\n        this.dequeue();\n      });\n    };\n    jobEmitter.addListener('jobAdd', handleJobAdd);\n    this.handleJobAdd = handleJobAdd;\n    const handleJobDelete = (id:number, queueId:string) => {\n      if (this.jobIds.has(id)) {\n        const queueAbortControllerMap = this.abortControllerMap.get(queueId);\n        if (typeof queueAbortControllerMap !== 'undefined') {\n          const abortController = queueAbortControllerMap.get(id);\n          if (typeof abortController !== 'undefined') {\n            abortController.abort();\n          }\n        }\n      }\n    };\n    jobEmitter.addListener('jobDelete', handleJobDelete);\n    this.handleJobDelete = handleJobDelete;\n\n    const handleJobUpdate = (id:number, queueId:string, type:string, status:number) => {\n      if (status !== JOB_CLEANUP_AND_REMOVE_STATUS) {\n        return;\n      }\n      if (this.jobIds.has(id)) {\n        const queueAbortControllerMap = this.abortControllerMap.get(queueId);\n        if (typeof queueAbortControllerMap !== 'undefined') {\n          const abortController = queueAbortControllerMap.get(id);\n          if (typeof abortController !== 'undefined') {\n            abortController.abort();\n          }\n        }\n        return;\n      }\n      getJobFromDatabase(id).then((job:Job | void) => {\n        if (typeof job === 'undefined') {\n          this.logger.error(`Unable to cleanup and remove ${type} job #${id} in queue ${queueId}, job does not exist`);\n          return;\n        }\n        if (this.jobIds.has(id)) {\n          return;\n        }\n        const { args } = job;\n        this.startCleanup(id, queueId, args, type);\n      }).catch((error) => {\n        this.logger.error(`Error while cleaning up and removing ${type} job #${id} in queue ${queueId}`);\n        this.logger.errorStack(error);\n      });\n    };\n    jobEmitter.addListener('jobUpdate', handleJobUpdate);\n    this.handleJobUpdate = handleJobUpdate;\n  }\n\n  disableStartOnJob() {\n    const handleJobAdd = this.handleJobAdd;\n    if (typeof handleJobAdd === 'function') {\n      jobEmitter.removeListener('jobAdd', handleJobAdd);\n      delete this.handleJobAdd;\n    }\n    const handleJobUpdate = this.handleJobUpdate;\n    if (typeof handleJobUpdate === 'function') {\n      jobEmitter.removeListener('jobUpdate', handleJobUpdate);\n      delete this.handleJobUpdate;\n    }\n    const handleJobDelete = this.handleJobDelete;\n    if (typeof handleJobDelete === 'function') {\n      jobEmitter.removeListener('jobDelete', handleJobDelete);\n      delete this.handleJobDelete;\n    }\n  }\n\n  emit(type:string, ...args:Array<any>) {\n    for (const emitCallback of this.emitCallbacks) {\n      emitCallback(type, args);\n    }\n    return super.emit(type, ...args);\n  }\n\n  async getQueueIds() {\n    await this.dequeue();\n    const queueIds:Set<string> = new Set(this.queueMap.keys());\n    return queueIds;\n  }\n\n  setRetryJobDelay(type:string, retryJobDelayFunction:RetryDelayFunction) {\n    if (this.retryJobDelayMap.has(type)) {\n      throw new Error(`Retry job delay handler for type \"${type}\" already exists`);\n    }\n    this.retryJobDelayMap.set(type, retryJobDelayFunction);\n  }\n\n  removeRetryJobDelay(type:string) {\n    if (!this.retryJobDelayMap.has(type)) {\n      throw new Error(`Retry job delay handler for type \"${type}\" does not exist`);\n    }\n    this.retryJobDelayMap.delete(type);\n  }\n\n  async getRetryJobDelay(type:string, attempt: number, error:Error) {\n    const retryJobDelayFunction = this.retryJobDelayMap.get(type);\n    if (typeof retryJobDelayFunction !== 'function') {\n      return false;\n    }\n    let result = false;\n    try {\n      result = await retryJobDelayFunction(attempt, error);\n    } catch (retryDelayError) {\n      this.logger.error(`Error in retry job delay handler for type \"${type}\" on attempt ${attempt}`);\n      this.emit('error', retryDelayError);\n      return false;\n    }\n    if (typeof result !== 'number' && result !== false) {\n      throw new Error(`Retry job delay function for type \"${type}\" returned invalid response, should be a number (milliseconds) or false`);\n    }\n    return result;\n  }\n\n  setRetryCleanupDelay(type:string, retryCleanupDelayFunction:RetryDelayFunction) {\n    if (this.retryCleanupDelayMap.has(type)) {\n      throw new Error(`Retry cleanup delay handler for type \"${type}\" already exists`);\n    }\n    this.retryCleanupDelayMap.set(type, retryCleanupDelayFunction);\n  }\n\n  removeRetryCleanupDelay(type:string) {\n    if (!this.retryCleanupDelayMap.has(type)) {\n      throw new Error(`Retry cleanup delay handler for type \"${type}\" does not exist`);\n    }\n    this.retryCleanupDelayMap.delete(type);\n  }\n\n  async getRetryCleanupDelay(type:string, attempt: number, error:Error) {\n    const retryCleanupDelayFunction = this.retryCleanupDelayMap.get(type);\n    if (typeof retryCleanupDelayFunction !== 'function') {\n      return false;\n    }\n    let result = false;\n    try {\n      result = await retryCleanupDelayFunction(attempt, error);\n    } catch (retryDelayError) {\n      this.logger.error(`Error in retry cleanup delay handler for type \"${type}\" on attempt ${attempt}`);\n      this.emit('error', retryDelayError);\n      return false;\n    }\n    if (typeof result !== 'number' && result !== false) {\n      throw new Error(`Retry cleanup delay function for type \"${type}\" returned invalid response, should be a number (milliseconds) or false`);\n    }\n    return result;\n  }\n\n  setHandler(type:string, handler: HandlerFunction) {\n    if (this.handlerMap.has(type)) {\n      throw new Error(`Handler for type \"${type}\" already exists`);\n    }\n    this.handlerMap.set(type, handler);\n  }\n\n  removeHandler(type:string) {\n    if (!this.handlerMap.has(type)) {\n      throw new Error(`Handler for type \"${type}\" does not exist`);\n    }\n    this.handlerMap.delete(type);\n  }\n\n  setCleanup(type:string, cleanup: CleanupFunction) {\n    if (this.cleanupMap.has(type)) {\n      throw new Error(`Cleanup for type \"${type}\" already exists`);\n    }\n    this.cleanupMap.set(type, cleanup);\n  }\n\n  removeCleanup(type:string) {\n    if (!this.cleanupMap.has(type)) {\n      throw new Error(`Cleanup for type \"${type}\" does not exist`);\n    }\n    this.cleanupMap.delete(type);\n  }\n\n  async clear() {\n    this.isClearing = true;\n    await this.onIdle();\n    this.emit('clearing');\n    await clearDatabase();\n    this.dequeueQueue.start();\n    this.isClearing = false;\n  }\n\n  addToQueue(queueId:string, priority: number, func: () => Promise<void>) {\n    const queue = this.queueMap.get(queueId);\n    if (typeof queue !== 'undefined') {\n      queue.add(func, { priority });\n      return;\n    }\n    const newQueue = new PQueue({ concurrency: 1, autoStart: false });\n    this.queueMap.set(queueId, newQueue);\n    newQueue.add(func, { priority });\n    newQueue.on('idle', async () => {\n      if (!this.isClearing) {\n        await new Promise((resolve) => {\n          const timeout = setTimeout(() => {\n            this.removeListener('clearing', handleClearing);\n            newQueue.removeListener('active', handleActive);\n            resolve();\n          }, 5000);\n          const handleClearing = () => {\n            clearTimeout(timeout);\n            this.removeListener('clearing', handleClearing);\n            newQueue.removeListener('active', handleActive);\n            resolve();\n          };\n          const handleActive = () => {\n            clearTimeout(timeout);\n            this.removeListener('clearing', handleClearing);\n            newQueue.removeListener('active', handleActive);\n            resolve();\n          };\n          this.addListener('clearing', handleClearing);\n          newQueue.addListener('active', handleActive);\n        });\n      }\n      if (newQueue.pending > 0 || newQueue.size > 0) {\n        return;\n      }\n      this.queueMap.delete(queueId);\n      this.emit('queueInactive', queueId);\n    });\n    this.emit('queueActive', queueId);\n  }\n\n  async abortQueue(queueId: string) {\n    this.logger.info(`Aborting queue ${queueId}`);\n    // Abort active jobs\n    const queueAbortControllerMap = this.abortControllerMap.get(queueId);\n    if (typeof queueAbortControllerMap !== 'undefined') {\n      for (const abortController of queueAbortControllerMap.values()) {\n        abortController.abort();\n      }\n    }\n    // Changes:\n    // * JOB_ERROR_STATUS -> JOB_CLEANUP_STATUS\n    // * JOB_COMPLETE_STATUS -> JOB_CLEANUP_STATUS\n    // * JOB_PENDING_STATUS -> JOB_ABORTED_STATUS\n    const jobs = await markQueueForCleanupInDatabase(queueId);\n    await this.startJobs(jobs);\n  }\n\n  dequeue():void | Promise<void> {\n    if (this.dequeueQueue.size === 0) {\n      // Add a subsequent dequeue\n      this.dequeueQueue.add(this.startJobs.bind(this));\n    }\n    return this.dequeueQueue.onIdle();\n  }\n\n  async startJobs(newJobs?:Array<Job>) { // eslint-disable-line consistent-return\n    const jobs = Array.isArray(newJobs) ? newJobs : await dequeueFromDatabaseNotIn([...this.jobIds.keys()]);\n    const queueIds = new Set();\n    for (const { id, queueId, args, type, status, attempt, startAfter } of jobs) {\n      if (this.jobIds.has(id)) {\n        continue;\n      }\n      // Pause queues before adding items into them to avoid starting things out of priority\n      if (!queueIds.has(queueId)) {\n        const queue = this.queueMap.get(queueId);\n        if (typeof queue !== 'undefined') {\n          queue.pause();\n        }\n        queueIds.add(queueId);\n      }\n      if (status === JOB_PENDING_STATUS) {\n        this.startJob(id, queueId, args, type, attempt + 1, startAfter);\n      } else if (status === JOB_ERROR_STATUS) {\n        this.startErrorHandler(id, queueId, args, type, attempt, startAfter);\n      } else if (status === JOB_CLEANUP_STATUS) {\n        this.startCleanup(id, queueId, args, type);\n      } else if (status === JOB_CLEANUP_AND_REMOVE_STATUS) {\n        this.startCleanup(id, queueId, args, type);\n      } else {\n        throw new Error(`Unknown job status ${status} in job ${id} of queue ${queueId}`);\n      }\n    }\n    for (const queueId of queueIds) {\n      const queue = this.queueMap.get(queueId);\n      if (typeof queue !== 'undefined') {\n        queue.start();\n      } else {\n        this.logger.error(`Unable to start queue ${queueId} after dequeue; queue does not exist`);\n      }\n    }\n  }\n\n  async onIdle(maxDuration?: number) {\n    if (typeof this.onIdlePromise === 'undefined') {\n      this.onIdlePromise = (async () => {\n        const timeout = typeof maxDuration === 'number' ? Date.now() + maxDuration : -1;\n        const start = Date.now();\n        while (true) { // eslint-disable-line no-constant-condition\n          if (timeout !== -1 && Date.now() > timeout) {\n            this.logger.warn(`Idle timeout after ${Date.now() - start}ms`);\n            break;\n          }\n          await this.dequeueQueue.onIdle();\n          for (const [queueId, queue] of this.queueMap) {\n            const interval = setInterval(() => {\n              this.logger.info(`Waiting on queue ${queueId}`);\n            }, 250);\n            await queue.onIdle();\n            clearInterval(interval);\n          }\n          const jobsInterval = setInterval(() => {\n            this.logger.info('Waiting on jobs');\n          }, 250);\n          const jobs = await dequeueFromDatabase();\n          clearInterval(jobsInterval);\n          if (jobs.length > 0) {\n            const interval = setInterval(() => {\n              this.logger.info('Waiting on dequeue');\n            }, 250);\n            await this.dequeue();\n            clearInterval(interval);\n            continue;\n          }\n          break;\n        }\n        delete this.onIdlePromise;\n        this.emit('idle');\n      })();\n    }\n    await this.onIdlePromise;\n  }\n\n  getAbortController(id:number, queueId:string) {\n    let queueAbortControllerMap = this.abortControllerMap.get(queueId);\n    if (typeof queueAbortControllerMap === 'undefined') {\n      queueAbortControllerMap = new Map();\n      this.abortControllerMap.set(queueId, queueAbortControllerMap);\n    }\n    const abortController = queueAbortControllerMap.get(id);\n    if (typeof abortController !== 'undefined') {\n      return abortController;\n    }\n    const newAbortController = new AbortController();\n    queueAbortControllerMap.set(id, newAbortController);\n    return newAbortController;\n  }\n\n  removeAbortController(id:number, queueId:string) {\n    const queueAbortControllerMap = this.abortControllerMap.get(queueId);\n    if (typeof queueAbortControllerMap === 'undefined') {\n      this.logger.warn(`Abort controller map for ${id} in queue ${queueId} does not exist`);\n      return;\n    }\n    const abortController = queueAbortControllerMap.get(id);\n    if (typeof abortController === 'undefined') {\n      this.logger.warn(`Abort controller for ${id} in queue ${queueId} does not exist`);\n      return;\n    }\n    queueAbortControllerMap.delete(id);\n    if (queueAbortControllerMap.size === 0) {\n      this.abortControllerMap.delete(queueId);\n    }\n  }\n\n  async runCleanup(id:number, queueId:string, args:Array<any>, type:string) {\n    this.emit('cleanupStart', { id });\n    const cleanup = this.cleanupMap.get(type);\n    if (typeof cleanup !== 'function') {\n      this.logger.warn(`No cleanup for job type ${type}`);\n      await removeCleanupFromDatabase(id);\n      this.emit('cleanup', { id });\n      return;\n    }\n    const cleanupJob = await getCleanupFromDatabase(id);\n    const { data, startAfter } = typeof cleanupJob === 'undefined' ? { data: undefined, startAfter: 0 } : cleanupJob;\n    const delay = startAfter - Date.now();\n    if (delay > 0) {\n      this.logger.info(`Delaying retry of ${type} job #${id} cleanup in queue ${queueId} by ${delay}ms to ${new Date(startAfter).toLocaleString()}`);\n      await new Promise((resolve) => setTimeout(resolve, delay));\n    }\n    try {\n      await cleanup(data, args, (path:Array<string>) => removePathFromCleanupDataInDatabase(id, path));\n    } catch (error) {\n      const attempt = await incrementCleanupAttemptInDatabase(id, queueId);\n      if (error.name === 'FatalCleanupError') {\n        this.logger.error(`Fatal error in ${type} job #${id} cleanup in queue ${queueId} attempt ${attempt}`);\n        this.emit('error', error);\n        await removeCleanupFromDatabase(id);\n        this.emit('fatalCleanupError', { id, queueId });\n        return;\n      }\n      const retryCleanupDelay = await this.getRetryCleanupDelay(type, attempt, error);\n      if (retryCleanupDelay === false) {\n        this.logger.error(`Error in ${type} job #${id} cleanup in queue ${queueId} attempt ${attempt} with no additional attempts requested`);\n        this.emit('error', error);\n        await removeCleanupFromDatabase(id);\n        this.emit('fatalCleanupError', { id, queueId });\n        return;\n      }\n      this.logger.error(`Error in ${type} job #${id} cleanup in queue ${queueId} attempt ${attempt}, retrying ${retryCleanupDelay > 0 ? `in ${retryCleanupDelay}ms'}` : 'immediately'}`);\n      this.emit('error', error);\n      if (retryCleanupDelay > 0) {\n        this.emit('retryCleanupDelay', { id, queueId, retryCleanupDelay });\n        const newStartAfter = Date.now() + retryCleanupDelay;\n        await markCleanupStartAfterInDatabase(id, newStartAfter);\n      }\n      await this.runCleanup(id, queueId, args, type);\n      return;\n    }\n    await removeCleanupFromDatabase(id);\n    this.emit('cleanup', { id });\n  }\n\n  startCleanup(id:number, queueId:string, args:Array<any>, type:string) {\n    this.logger.info(`Adding ${type} cleanup job #${id} to queue ${queueId}`);\n    this.jobIds.add(id);\n    const priority = PRIORITY_OFFSET + id;\n    const run = async () => {\n      this.logger.info(`Starting ${type} cleanup #${id} in queue ${queueId}`);\n      await this.runCleanup(id, queueId, args, type);\n      // Job could be marked for removal while cleanup is running\n      await markJobAsAbortedOrRemoveFromDatabase(id);\n      this.jobIds.delete(id);\n    };\n    this.addToQueue(queueId, priority, run);\n  }\n\n  startErrorHandler(id:number, queueId:string, args:Array<any>, type:string, attempt: number, startAfter: number) {\n    this.logger.info(`Adding ${type} error handler job #${id} to queue ${queueId}`);\n    this.jobIds.add(id);\n    const priority = PRIORITY_OFFSET + id;\n    const abortController = this.getAbortController(id, queueId);\n    const run = async () => {\n      this.logger.info(`Starting ${type} error handler #${id} in queue ${queueId}`);\n      await this.runCleanup(id, queueId, args, type);\n      if (abortController.signal.aborted) {\n        // Job could be marked for removal while error handler is running\n        await markJobAsAbortedOrRemoveFromDatabase(id);\n        this.removeAbortController(id, queueId);\n        this.jobIds.delete(id);\n      } else {\n        await markJobPendingInDatabase(id);\n        this.logger.info(`Retrying ${type} job #${id} in queue ${queueId}`);\n        this.emit('retry', { id });\n        this.startJob(id, queueId, args, type, attempt + 1, startAfter);\n      }\n    };\n    this.addToQueue(queueId, priority, run);\n  }\n\n  async delayJobStart(id:number, queueId:string, type:string, signal: AbortSignal, startAfter: number) {\n    if (signal.aborted) {\n      throw new AbortError(`Queue ${queueId} was aborted`);\n    }\n    const duration = startAfter - Date.now();\n    if (duration > 0) {\n      this.logger.info(`Delaying start of ${type} job #${id} in queue ${queueId} by ${duration}ms`);\n      await new Promise((resolve, reject) => {\n        const timeout = setTimeout(() => {\n          signal.removeEventListener('abort', handleAbort);\n          resolve();\n        }, duration);\n        const handleAbort = () => {\n          clearTimeout(timeout);\n          signal.removeEventListener('abort', handleAbort);\n          reject(new AbortError(`Queue ${queueId} was aborted`));\n        };\n        signal.addEventListener('abort', handleAbort);\n      });\n    }\n  }\n\n  startJob(id:number, queueId:string, args:Array<any>, type:string, attempt:number, startAfter: number) {\n    this.logger.info(`Adding ${type} job #${id} to queue ${queueId}`);\n    this.jobIds.add(id);\n    const priority = PRIORITY_OFFSET - id;\n    const updateCleanupData = (data:Object) => updateCleanupValuesInDatabase(id, queueId, data);\n    const abortController = this.getAbortController(id, queueId);\n    const run = async () => {\n      if (abortController.signal.aborted) {\n        this.emit('fatalError', { id, queueId, error: new AbortError(`Queue ${queueId} was aborted`) });\n        this.removeAbortController(id, queueId);\n        this.jobIds.delete(id);\n        return;\n      }\n      this.logger.info(`Starting ${type} job #${id} in queue ${queueId} attempt ${attempt}`);\n      const handler = this.handlerMap.get(type);\n      if (typeof handler !== 'function') {\n        this.logger.warn(`No handler for job type ${type}`);\n        await markJobCompleteInDatabase(id);\n        this.removeAbortController(id, queueId);\n        this.jobIds.delete(id);\n        return;\n      }\n      let handlerDidRun = false;\n      try {\n        // Mark as error in database so the job is cleaned up and retried if execution\n        // stops before job completion or error.\n        await markJobErrorInDatabase(id);\n        await this.delayJobStart(id, queueId, type, abortController.signal, startAfter);\n        handlerDidRun = true;\n        await handler(args, abortController.signal, updateCleanupData);\n        if (abortController.signal.aborted) {\n          throw new AbortError(`Queue ${queueId} was aborted`);\n        }\n        await markJobCompleteInDatabase(id);\n        this.removeAbortController(id, queueId);\n        this.jobIds.delete(id);\n        return;\n      } catch (error) {\n        if (error.name === 'JobDoesNotExistError') {\n          this.logger.error(`Job does not exist error for ${type} job #${id} in queue ${queueId} attempt ${attempt}`);\n          if (handlerDidRun) {\n            this.emit('fatalError', { id, queueId, error });\n            await restoreJobToDatabaseForCleanupAndRemove(id, queueId, type, args);\n            this.jobIds.delete(id);\n            this.removeAbortController(id, queueId);\n            this.startCleanup(id, queueId, args, type);\n          } else {\n            this.emit('fatalError', { id, queueId, error });\n            this.jobIds.delete(id);\n            this.removeAbortController(id, queueId);\n          }\n          return;\n        }\n        if (abortController.signal.aborted) {\n          if (error.name !== 'AbortError') {\n            this.logger.error(`Abort signal following error in ${type} job #${id} in queue ${queueId} attempt ${attempt}`);\n            this.emit('error', error);\n          } else {\n            this.logger.warn(`Received abort signal for ${type} job #${id} in queue ${queueId} attempt ${attempt}`);\n          }\n          if (handlerDidRun) {\n            this.emit('fatalError', { id, queueId, error });\n            this.jobIds.delete(id);\n            this.removeAbortController(id, queueId);\n            this.startCleanup(id, queueId, args, type);\n          } else {\n            this.emit('fatalError', { id, queueId, error });\n            await markJobAsAbortedOrRemoveFromDatabase(id);\n            this.jobIds.delete(id);\n            this.removeAbortController(id, queueId);\n          }\n          return;\n        }\n        await incrementJobAttemptInDatabase(id);\n        if (error.name === 'FatalError') {\n          this.logger.error(`Fatal error in ${type} job #${id} in queue ${queueId} attempt ${attempt}`);\n          this.emit('error', error);\n          this.emit('fatalError', { id, queueId, error });\n          this.jobIds.delete(id);\n          this.removeAbortController(id, queueId);\n          await this.abortQueue(queueId);\n          return;\n        }\n        const retryDelay = await this.getRetryJobDelay(type, attempt, error);\n        if (retryDelay === false) {\n          this.logger.error(`Error in ${type} job #${id} in queue ${queueId} attempt ${attempt} with no additional attempts requested`);\n          this.emit('error', error);\n          this.emit('fatalError', { id, queueId, error });\n          this.jobIds.delete(id);\n          this.removeAbortController(id, queueId);\n          await this.abortQueue(queueId);\n          return;\n        }\n        this.logger.error(`Error in ${type} job #${id} in queue ${queueId} attempt ${attempt}, retrying ${retryDelay > 0 ? `in ${retryDelay}ms'}` : 'immediately'}`);\n        this.emit('error', error);\n        if (retryDelay > 0) {\n          this.emit('retryDelay', { id, queueId, retryDelay });\n          const newStartAfter = Date.now() + retryDelay;\n          await markJobStartAfterInDatabase(id, newStartAfter);\n          this.jobIds.delete(id);\n          this.startErrorHandler(id, queueId, args, type, attempt, newStartAfter);\n        } else {\n          this.jobIds.delete(id);\n          this.startErrorHandler(id, queueId, args, type, attempt, startAfter);\n        }\n      }\n    };\n    this.addToQueue(queueId, priority, run);\n    this.emit('dequeue', { id });\n  }\n\n  async handlePortMessage(event:MessageEvent) {\n    if (!(event instanceof MessageEvent)) {\n      return;\n    }\n    const { data } = event;\n    if (!data || typeof data !== 'object') {\n      this.logger.warn('Invalid message data');\n      this.logger.warnObject(event);\n      return;\n    }\n    const { type, args } = data;\n    if (typeof type !== 'string') {\n      this.logger.warn('Unknown message type');\n      this.logger.warnObject(event);\n      return;\n    }\n    if (!Array.isArray(args)) {\n      this.logger.warn('Unknown arguments type');\n      this.logger.warnObject(event);\n      return;\n    }\n    const port = this.port;\n    switch (type) {\n      case 'unlink':\n        this.logger.warn('Unlinking worker interface');\n        if (port instanceof MessagePort) {\n          port.onmessage = null;\n          delete this.port;\n        }\n        return;\n      case 'heartbeat':\n        this.emit('heartbeat', ...args);\n        return;\n      case 'jobAdd':\n        jobEmitter.emit('jobAdd', ...args);\n        return;\n      case 'jobDelete':\n        jobEmitter.emit('jobDelete', ...args);\n        return;\n      case 'jobUpdate':\n        jobEmitter.emit('jobUpdate', ...args);\n        return;\n      case 'jobsClear':\n        jobEmitter.emit('jobsClear', ...args);\n        return;\n      default:\n        break;\n    }\n    const [requestId, ...requestArgs] = args;\n    if (typeof requestId !== 'number') {\n      throw new Error('Request arguments should start with a requestId number');\n    }\n    switch (type) {\n      case 'clear':\n        try {\n          await this.clear();\n          this.emit('clearComplete', requestId);\n        } catch (error) {\n          this.emit('clearError', requestId, error);\n          this.logger.error('Unable to handle clear message');\n          this.emit('error', error);\n        }\n        break;\n      case 'abortQueue':\n        try {\n          const [queueId] = requestArgs;\n          if (typeof queueId !== 'string') {\n            throw new Error(`Invalid \"queueId\" argument with type ${typeof queueId}, should be type string`);\n          }\n          await this.abortQueue(queueId);\n          this.emit('abortQueueComplete', requestId);\n        } catch (error) {\n          this.emit('abortQueueError', requestId, error);\n          this.logger.error('Unable to handle abort queue message');\n          this.emit('error', error);\n        }\n        break;\n      case 'dequeue':\n        try {\n          await this.dequeue();\n          this.emit('dequeueComplete', requestId);\n        } catch (error) {\n          this.emit('dequeueError', requestId, error);\n          this.logger.error('Unable to handle dequeue message');\n          this.emit('error', error);\n        }\n        break;\n      case 'enableStartOnJob':\n        try {\n          this.enableStartOnJob();\n          this.emit('enableStartOnJobComplete', requestId);\n        } catch (error) {\n          this.emit('enableStartOnJobError', requestId, error);\n          this.logger.error('Unable to handle enableStartOnJob message');\n          this.emit('error', error);\n        }\n        break;\n      case 'disableStartOnJob':\n        try {\n          this.disableStartOnJob();\n          this.emit('disableStartOnJobComplete', requestId);\n        } catch (error) {\n          this.emit('disableStartOnJobError', requestId, error);\n          this.logger.error('Unable to handle disableStartOnJob message');\n          this.emit('error', error);\n        }\n        break;\n      case 'getQueueIds':\n        try {\n          const queueIds = await this.getQueueIds();\n          this.emit('getQueuesComplete', requestId, [...queueIds]);\n        } catch (error) {\n          this.emit('getQueuesError', requestId, error);\n          this.logger.error('Unable to handle getQueueIds message');\n          this.emit('error', error);\n        }\n        break;\n      case 'idle':\n        try {\n          const [maxDuration, start] = requestArgs;\n          if (typeof maxDuration !== 'number') {\n            throw new Error(`Invalid \"queueId\" argument with type ${typeof maxDuration}, should be type number`);\n          }\n          if (typeof start !== 'number') {\n            throw new Error(`Invalid \"queueId\" argument with type ${typeof start}, should be type number`);\n          }\n          await this.onIdle(maxDuration - (Date.now() - start));\n          this.emit('idleComplete', requestId);\n        } catch (error) {\n          this.emit('idleError', requestId, error);\n          this.logger.error('Unable to handle idle message');\n          this.emit('error', error);\n        }\n        break;\n      default:\n        this.logger.warn(`Unknown worker interface message type ${type}`);\n    }\n  }\n\n  async unloadClient() {\n    this.logger.info('Detected client unload');\n    const heartbeatExpiresTimestamp = this.heartbeatExpiresTimestamp;\n    if (typeof heartbeatExpiresTimestamp !== 'number') {\n      return;\n    }\n    clearTimeout(this.heartbeatExpiresTimeout);\n    delete this.heartbeatExpiresTimestamp;\n    const delay = heartbeatExpiresTimestamp - Date.now();\n    if (delay > 0) {\n      await new Promise((resolve) => {\n        const timeout = setTimeout(() => {\n          clearTimeout(timeout);\n          this.removeListener('heartbeat', handleHeartbeat);\n          resolve();\n        }, delay);\n        const handleHeartbeat = () => {\n          clearTimeout(timeout);\n          this.removeListener('heartbeat', handleHeartbeat);\n          resolve();\n        };\n        this.addListener('heartbeat', handleHeartbeat);\n      });\n    }\n    if (typeof this.heartbeatExpiresTimestamp === 'number') {\n      this.logger.info('Cancelling client unload, heartbeat detected');\n      return;\n    }\n    this.logger.info('Unloading');\n    const queueIds = await getAllAbortOnUnloadQueues();\n    for (const queueId of queueIds) {\n      try {\n        await this.abortQueue(queueId);\n        await removeAbortQueueOnUnload(queueId);\n      } catch (error) {\n        this.logger.error(`Error in scheduled queue ${queueId} abort`);\n        this.logger.errorStack(error);\n        removeAbortQueueOnUnload(queueId).catch((error2) => {\n          this.logger.error(`Unable to remove scheduled queue ${queueId} abort`);\n          this.logger.errorStack(error2);\n        });\n      }\n    }\n    this.emit('unloadClient');\n    await this.onIdle();\n  }\n\n  listenForServiceWorkerInterface() {\n    let activeEmitCallback;\n    let handleJobAdd;\n    let handleJobDelete;\n    let handleJobUpdate;\n    let handleJobsClear;\n\n    self.addEventListener('sync', (event) => {\n      this.logger.info(`SyncManager event ${event.tag}${event.lastChance ? ', last chance' : ''}`);\n      if (event.tag === 'syncManagerOnIdle') {\n        this.logger.info('Starting SyncManager idle handler');\n        this.emit('syncManagerOnIdle');\n        event.waitUntil(this.onIdle().catch((error) => {\n          this.logger.error(`SyncManager event handler failed${event.lastChance ? ' on last chance' : ''}`);\n          this.logger.errorStack(error);\n        }));\n      } else if (event.tag === 'unload') {\n        this.logger.info('Starting SyncManager unload client handler');\n        event.waitUntil(this.unloadClient().catch((error) => {\n          this.logger.error(`SyncManager event handler failed${event.lastChance ? ' on last chance' : ''}`);\n          this.logger.errorStack(error);\n        }));\n      } else {\n        this.logger.warn(`Received unknown SyncManager event tag ${event.tag}`);\n      }\n    });\n\n    self.addEventListener('message', async (event:ExtendableMessageEvent) => {\n      if (!(event instanceof ExtendableMessageEvent)) {\n        return;\n      }\n      const { data } = event;\n      if (!data || typeof data !== 'object') {\n        return;\n      }\n      const { type } = data;\n      if (type !== 'BATTERY_QUEUE_WORKER_INITIALIZATION') {\n        return;\n      }\n      if (!Array.isArray(event.ports)) {\n        return;\n      }\n      const port = event.ports[0];\n      if (!(port instanceof MessagePort)) {\n        return;\n      }\n      this.emitCallbacks = this.emitCallbacks.filter((x) => x !== activeEmitCallback);\n      const previousPort = this.port;\n      if (previousPort instanceof MessagePort) {\n        this.logger.info('Closing previous worker interface');\n        previousPort.close();\n      }\n      if (typeof handleJobAdd === 'function') {\n        localJobEmitter.removeListener('jobAdd', handleJobAdd);\n      }\n      if (typeof handleJobDelete === 'function') {\n        localJobEmitter.removeListener('jobDelete', handleJobDelete);\n      }\n      if (typeof handleJobUpdate === 'function') {\n        localJobEmitter.removeListener('jobUpdate', handleJobUpdate);\n      }\n      if (typeof handleJobsClear === 'function') {\n        localJobEmitter.removeListener('jobsClear', handleJobsClear);\n      }\n      port.onmessage = this.handlePortMessage.bind(this);\n\n      handleJobAdd = (...args:Array<any>) => {\n        port.postMessage({ type: 'jobAdd', args });\n      };\n      handleJobDelete = (...args:Array<any>) => {\n        port.postMessage({ type: 'jobDelete', args });\n      };\n      handleJobUpdate = (...args:Array<any>) => {\n        port.postMessage({ type: 'jobUpdate', args });\n      };\n      handleJobsClear = (...args:Array<any>) => {\n        port.postMessage({ type: 'jobsClear', args });\n      };\n      localJobEmitter.addListener('jobAdd', handleJobAdd);\n      localJobEmitter.addListener('jobDelete', handleJobDelete);\n      localJobEmitter.addListener('jobUpdate', handleJobUpdate);\n      localJobEmitter.addListener('jobsClear', handleJobsClear);\n      const emitCallback = (t:string, args:Array<any>) => {\n        port.postMessage({ type: t, args });\n      };\n      activeEmitCallback = emitCallback;\n      this.emitCallbacks.push(emitCallback);\n      this.port = port;\n      const queueIds = await getScheduledAbortOnUnloadQueues();\n      for (const queueId of queueIds) {\n        try {\n          await this.abortQueue(queueId);\n          await removeAbortQueueOnUnload(queueId);\n        } catch (error) {\n          this.logger.error(`Error in scheduled queue ${queueId} abort`);\n          this.logger.errorStack(error);\n          removeAbortQueueOnUnload(queueId).catch((error2) => {\n            this.logger.error(`Unable to remove scheduled queue ${queueId} abort`);\n            this.logger.errorStack(error2);\n          });\n        }\n      }\n      port.postMessage({ type: 'BATTERY_QUEUE_WORKER_CONFIRMATION' });\n      this.logger.info('Linked to worker interface');\n    });\n    self.addEventListener('messageerror', (event:MessageEvent) => {\n      this.logger.error('Service worker interface message error');\n      this.logger.errorObject(event);\n    });\n  }\n}\n\n"],"file":"queue.js"}