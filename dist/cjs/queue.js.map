{"version":3,"sources":["../../src/queue.js"],"names":["CLEANUP_JOB_TYPE","BASE_PRIORITY","Math","floor","Number","MAX_SAFE_INTEGER","HIGH_PRIORITY_OFFSET","BatteryQueue","options","stopped","dequeueQueue","PQueue","concurrency","unloadQueue","handlerMap","Map","cleanupMap","durationEstimateHandlerMap","durationEstimateMap","durationEstimateUpdaterMap","retryJobDelayMap","retryCleanupDelayMap","queueCurrentJobTypeMap","queueMap","jobIds","Set","abortControllerMap","isClearing","isUnloading","ports","logger","addListener","error","errorStack","queueId","jobId","queueAbortControllerMap","get","abortController","abort","disableStartOnJob","didRequestJobAddDequeue","handleJobAdd","self","queueMicrotask","dequeue","jobEmitter","handleJobDelete","id","abortJob","handleJobUpdate","type","status","JOB_CLEANUP_AND_REMOVE_STATUS","JOB_CLEANUP_STATUS","didAbort","then","job","has","args","prioritize","startCleanup","catch","removeListener","keys","port","postMessage","queueIds","handleUnload","Error","retryJobDelayFunction","set","delete","attempt","result","emit","retryCleanupDelayFunction","handler","cleanup","timeEstimationHandler","duration","pending","queueDurationEstimateMap","emitDurationEstimate","values","updateDurationEstimate","totalDuration","totalPending","getDurationEstimate","onIdle","start","priority","autoStart","func","queue","add","newQueue","on","setCurrentJobType","undefined","Promise","resolve","timeout","setTimeout","handleClearing","handleActive","clearTimeout","size","info","removeDurationEstimate","jobs","startJobs","lastJobId","addToQueue","bind","newJobs","Array","isArray","startAfter","pause","JOB_PENDING_STATUS","startJob","JOB_ERROR_STATUS","startErrorHandler","stopPromise","idlePromises","interval","setInterval","isPaused","clear","push","finally","clearInterval","all","maxDuration","onIdlePromise","Date","now","warn","jobsInterval","length","newAbortController","AbortController","cleanupJob","data","delay","toLocaleString","path","name","getRetryCleanupDelay","retryCleanupDelay","newStartAfter","runCleanup","run","getAbortController","signal","aborted","removeAbortController","AbortError","reject","removeEventListener","handleAbort","addEventListener","updateCleanupData","updateDuration","addDurationEstimate","durationEstimateHandler","durationEstimate","handlerDidRun","delayJobStart","shouldKeepJobInDatabase","estimatedToActualRatio","round","abortQueue","getRetryJobDelay","retryDelay","event","MessageEvent","portHandlers","warnObject","t","messageArgs","heartbeatExpiresTimeout","heartbeatExpiresTimestamp","unloadClient","removePort","requestId","requestArgs","stop","abortAndRemoveQueueJobsGreaterThanId","abortAndRemoveQueue","updateDurationEstimates","retryQueue","enableStartOnJob","getQueueIds","currentJobType","getCurrentJobType","runUnloadHandlers","handleHeartbeat","unloadData","handleJobsClear","localJobEmitter","onmessage","onmessageerror","close","tag","lastChance","waitUntil","ExtendableMessageEvent","MessagePort","_event","handlePortMessage","errorObject","EventEmitter"],"mappings":"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","sourcesContent":["// @flow\n\nimport PQueue from 'p-queue';\nimport EventEmitter from 'events';\nimport type { Logger } from './logger';\nimport makeLogger from './logger';\nimport type { Job } from './database';\nimport {\n  jobEmitter,\n  localJobEmitter,\n  clearDatabase,\n  dequeueFromDatabase,\n  dequeueFromDatabaseNotIn,\n  incrementJobAttemptInDatabase,\n  incrementCleanupAttemptInDatabase,\n  markJobCompleteInDatabase,\n  markJobCompleteThenRemoveFromDatabase,\n  markJobPendingInDatabase,\n  markJobErrorInDatabase,\n  markJobStartAfterInDatabase,\n  markJobAsAbortedOrRemoveFromDatabase,\n  markCleanupStartAfterInDatabase,\n  markQueuePendingInDatabase,\n  updateCleanupValuesInDatabase,\n  getCleanupFromDatabase,\n  removePathFromCleanupDataInDatabase,\n  getJobFromDatabase,\n  markQueueForCleanupInDatabase,\n  markQueueForCleanupAndRemoveInDatabase,\n  markQueueJobsGreaterThanIdCleanupAndRemoveInDatabase,\n  removeCleanupFromDatabase,\n  restoreJobToDatabaseForCleanupAndRemove,\n  getUnloadDataFromDatabase,\n  clearUnloadDataInDatabase,\n  getGreatestJobIdFromQueueInDatabase,\n  JOB_PENDING_STATUS,\n  JOB_ERROR_STATUS,\n  JOB_CLEANUP_STATUS,\n  JOB_CLEANUP_AND_REMOVE_STATUS,\n} from './database';\nimport { AbortError } from './errors';\n\nexport const CLEANUP_JOB_TYPE = 'CLEANUP_JOB_TYPE';\n\nconst BASE_PRIORITY = Math.floor(Number.MAX_SAFE_INTEGER / 2);\nconst HIGH_PRIORITY_OFFSET = Math.floor(Number.MAX_SAFE_INTEGER / 8);\n\ntype HandlerFunction = (Array<any>, AbortSignal, (Object) => Promise<void>, (number, number) => void) => Promise<void | false>;\ntype CleanupFunction = (Object | void, Array<any>, Array<string> => Promise<void>) => Promise<void>;\ntype DurationEstimateFunction = (Array<any>) => number;\ntype RetryDelayFunction = (number, Error) => number | false | Promise<number | false>;\ntype UnloadFunction = (Object | void) => Promise<void> | void;\n\ntype Options = {\n  logger?: Logger,\n  startOnJob?: boolean\n};\n\nexport default class BatteryQueue extends EventEmitter {\n  declare logger: Logger;\n  declare dequeueQueue: PQueue;\n  declare unloadQueue: PQueue;\n  declare handlerMap: Map<string, HandlerFunction>;\n  declare retryJobDelayMap: Map<string, RetryDelayFunction>;\n  declare retryCleanupDelayMap: Map<string, RetryDelayFunction>;\n  declare cleanupMap: Map<string, CleanupFunction>;\n  declare queueCurrentJobTypeMap: Map<string, string>;\n  declare durationEstimateHandlerMap: Map<string, DurationEstimateFunction>;\n  declare durationEstimateMap: Map<string, Map<number, [number, number]>>;\n  declare durationEstimateUpdaterMap: Map<number, () => number>;\n  declare queueMap: Map<string, PQueue>;\n  declare handleUnload: void | UnloadFunction;\n  declare abortControllerMap: Map<string, Map<number, AbortController>>;\n  declare isClearing: boolean;\n  declare isUnloading: boolean;\n  declare onIdlePromise: Promise<void> | void;\n  declare stopPromise: Promise<void> | void;\n  declare jobIds: Set<number>;\n  declare heartbeatExpiresTimestamp: number | void;\n\n  declare ports: Map<MessagePort, {\n    handleJobAdd: (Event) => void,\n    handleJobUpdate: (Event) => void,\n    handleJobDelete: (Event) => void,\n    handleJobsClear: (Event) => void,\n    heartbeatExpiresTimeout?: TimeoutID\n  }>;\n\n  declare handleJobAdd: void | () => void;\n  declare handleJobUpdate: void | (number, string, string, number) => void;\n  declare handleJobDelete: void | (number, string) => void;\n  declare stopped: boolean;\n\n  constructor(options?: Options = {}) {\n    super();\n    this.stopped = false;\n    this.dequeueQueue = new PQueue({ concurrency: 1 });\n    this.unloadQueue = new PQueue({ concurrency: 1 });\n    this.handlerMap = new Map();\n    this.cleanupMap = new Map();\n    this.durationEstimateHandlerMap = new Map();\n    this.durationEstimateMap = new Map();\n    this.durationEstimateUpdaterMap = new Map();\n    this.retryJobDelayMap = new Map();\n    this.retryCleanupDelayMap = new Map();\n    this.queueCurrentJobTypeMap = new Map();\n    this.queueMap = new Map();\n    this.jobIds = new Set();\n    this.durationEstimateUpdaterMap = new Map();\n    this.abortControllerMap = new Map();\n    this.isClearing = false;\n    this.isUnloading = false;\n    this.ports = new Map();\n    this.logger = options.logger || makeLogger('Battery Queue');\n    this.addListener('error', (error) => {\n      this.logger.errorStack(error);\n    });\n  }\n\n  abortJob(queueId:string, jobId:number) {\n    const queueAbortControllerMap = this.abortControllerMap.get(queueId);\n    if (typeof queueAbortControllerMap !== 'undefined') {\n      const abortController = queueAbortControllerMap.get(jobId);\n      if (typeof abortController !== 'undefined') {\n        abortController.abort();\n        return true;\n      }\n    }\n    return false;\n  }\n\n  enableStartOnJob() {\n    this.disableStartOnJob(); // Prevent handlers from being added multiple times\n    let didRequestJobAddDequeue = false;\n    const handleJobAdd = () => {\n      if (didRequestJobAddDequeue) {\n        return;\n      }\n      didRequestJobAddDequeue = true;\n      self.queueMicrotask(() => {\n        didRequestJobAddDequeue = false;\n        this.dequeue();\n      });\n    };\n    jobEmitter.addListener('jobAdd', handleJobAdd);\n    this.handleJobAdd = handleJobAdd;\n    const handleJobDelete = (id:number, queueId:string) => {\n      this.abortJob(queueId, id);\n    };\n    jobEmitter.addListener('jobDelete', handleJobDelete);\n    this.handleJobDelete = handleJobDelete;\n\n    const handleJobUpdate = (id:number, queueId:string, type:string, status:number) => {\n      if (status !== JOB_CLEANUP_AND_REMOVE_STATUS && status !== JOB_CLEANUP_STATUS) {\n        return;\n      }\n      const didAbort = this.abortJob(queueId, id);\n      if (didAbort) {\n        return;\n      }\n      getJobFromDatabase(id).then((job:Job | void) => {\n        if (typeof job === 'undefined') {\n          this.logger.error(`Unable to cleanup and remove ${type} job #${id} in queue ${queueId}, job does not exist`);\n          return;\n        }\n        if (this.jobIds.has(id)) {\n          return;\n        }\n        const { args, prioritize } = job;\n        this.startCleanup(id, queueId, args, type, true, prioritize);\n      }).catch((error) => {\n        this.logger.error(`Error while cleaning up and removing ${type} job #${id} in queue ${queueId}`);\n        this.logger.errorStack(error);\n      });\n    };\n    jobEmitter.addListener('jobUpdate', handleJobUpdate);\n    this.handleJobUpdate = handleJobUpdate;\n  }\n\n  disableStartOnJob() {\n    const handleJobAdd = this.handleJobAdd;\n    if (typeof handleJobAdd === 'function') {\n      jobEmitter.removeListener('jobAdd', handleJobAdd);\n      delete this.handleJobAdd;\n    }\n    const handleJobUpdate = this.handleJobUpdate;\n    if (typeof handleJobUpdate === 'function') {\n      jobEmitter.removeListener('jobUpdate', handleJobUpdate);\n      delete this.handleJobUpdate;\n    }\n    const handleJobDelete = this.handleJobDelete;\n    if (typeof handleJobDelete === 'function') {\n      jobEmitter.removeListener('jobDelete', handleJobDelete);\n      delete this.handleJobDelete;\n    }\n  }\n\n  emit(type:string, ...args:Array<any>) {\n    for (const port of this.ports.keys()) {\n      port.postMessage({ type, args });\n    }\n    return super.emit(type, ...args);\n  }\n\n  async getQueueIds() {\n    await this.dequeue();\n    const queueIds:Set<string> = new Set(this.queueMap.keys());\n    return queueIds;\n  }\n\n  setUnload(handleUnload:UnloadFunction) {\n    if (typeof this.handleUnload === 'function') {\n      throw new Error('Unload handler already exists');\n    }\n    this.handleUnload = handleUnload;\n  }\n\n  removeUnload() {\n    if (typeof this.handleUnload !== 'function') {\n      throw new Error('Unload handler does not exist');\n    }\n    delete this.handleUnload;\n  }\n\n  setRetryJobDelay(type:string, retryJobDelayFunction:RetryDelayFunction) {\n    if (this.retryJobDelayMap.has(type)) {\n      throw new Error(`Retry job delay handler for type \"${type}\" already exists`);\n    }\n    this.retryJobDelayMap.set(type, retryJobDelayFunction);\n  }\n\n  removeRetryJobDelay(type:string) {\n    if (!this.retryJobDelayMap.has(type)) {\n      throw new Error(`Retry job delay handler for type \"${type}\" does not exist`);\n    }\n    this.retryJobDelayMap.delete(type);\n  }\n\n  async getRetryJobDelay(type:string, attempt: number, error:Error) {\n    const retryJobDelayFunction = this.retryJobDelayMap.get(type);\n    if (typeof retryJobDelayFunction !== 'function') {\n      return false;\n    }\n    let result = false;\n    try {\n      result = await retryJobDelayFunction(attempt, error);\n    } catch (retryDelayError) {\n      this.logger.error(`Error in retry job delay handler for type \"${type}\" on attempt ${attempt}`);\n      this.emit('error', retryDelayError);\n      return false;\n    }\n    if (typeof result !== 'number' && result !== false) {\n      throw new Error(`Retry job delay function for type \"${type}\" returned invalid response, should be a number (milliseconds) or false`);\n    }\n    return result;\n  }\n\n  setRetryCleanupDelay(type:string, retryCleanupDelayFunction:RetryDelayFunction) {\n    if (this.retryCleanupDelayMap.has(type)) {\n      throw new Error(`Retry cleanup delay handler for type \"${type}\" already exists`);\n    }\n    this.retryCleanupDelayMap.set(type, retryCleanupDelayFunction);\n  }\n\n  removeRetryCleanupDelay(type:string) {\n    if (!this.retryCleanupDelayMap.has(type)) {\n      throw new Error(`Retry cleanup delay handler for type \"${type}\" does not exist`);\n    }\n    this.retryCleanupDelayMap.delete(type);\n  }\n\n  async getRetryCleanupDelay(type:string, attempt: number, error:Error) {\n    const retryCleanupDelayFunction = this.retryCleanupDelayMap.get(type);\n    if (typeof retryCleanupDelayFunction !== 'function') {\n      return false;\n    }\n    let result = false;\n    try {\n      result = await retryCleanupDelayFunction(attempt, error);\n    } catch (retryDelayError) {\n      this.logger.error(`Error in retry cleanup delay handler for type \"${type}\" on attempt ${attempt}`);\n      this.emit('error', retryDelayError);\n      return false;\n    }\n    if (typeof result !== 'number' && result !== false) {\n      throw new Error(`Retry cleanup delay function for type \"${type}\" returned invalid response, should be a number (milliseconds) or false`);\n    }\n    return result;\n  }\n\n  setHandler(type:string, handler: HandlerFunction) {\n    if (this.handlerMap.has(type)) {\n      throw new Error(`Handler for type \"${type}\" already exists`);\n    }\n    this.handlerMap.set(type, handler);\n  }\n\n  removeHandler(type:string) {\n    if (!this.handlerMap.has(type)) {\n      throw new Error(`Handler for type \"${type}\" does not exist`);\n    }\n    this.handlerMap.delete(type);\n  }\n\n  setCleanup(type:string, cleanup: CleanupFunction) {\n    if (this.cleanupMap.has(type)) {\n      throw new Error(`Cleanup for type \"${type}\" already exists`);\n    }\n    this.cleanupMap.set(type, cleanup);\n  }\n\n  removeCleanup(type:string) {\n    if (!this.cleanupMap.has(type)) {\n      throw new Error(`Cleanup for type \"${type}\" does not exist`);\n    }\n    this.cleanupMap.delete(type);\n  }\n\n  setDurationEstimateHandler(type:string, timeEstimationHandler: DurationEstimateFunction) {\n    if (this.durationEstimateHandlerMap.has(type)) {\n      throw new Error(`Time estimation handler for type \"${type}\" already exists`);\n    }\n    this.durationEstimateHandlerMap.set(type, timeEstimationHandler);\n  }\n\n  removeDurationEstimateHandler(type:string) {\n    if (!this.durationEstimateHandlerMap.has(type)) {\n      throw new Error(`Time estimation handler for type \"${type}\" does not exist`);\n    }\n    this.durationEstimateHandlerMap.delete(type);\n  }\n\n  addDurationEstimate(queueId:string, jobId:number, duration:number, pending:number) {\n    const queueDurationEstimateMap = this.durationEstimateMap.get(queueId);\n    if (typeof queueDurationEstimateMap === 'undefined') {\n      this.durationEstimateMap.set(queueId, new Map([[jobId, [duration, pending]]]));\n      this.emitDurationEstimate(queueId);\n      return;\n    }\n    queueDurationEstimateMap.set(jobId, [duration, pending]);\n    this.emitDurationEstimate(queueId);\n  }\n\n  removeDurationEstimate(queueId:string, jobId?:number) {\n    if (typeof jobId !== 'number') {\n      this.durationEstimateMap.delete(queueId);\n      this.emitDurationEstimate(queueId);\n      return;\n    }\n    const queueDurationEstimateMap = this.durationEstimateMap.get(queueId);\n    if (typeof queueDurationEstimateMap === 'undefined') {\n      this.emitDurationEstimate(queueId);\n      return;\n    }\n    queueDurationEstimateMap.delete(jobId);\n    this.emitDurationEstimate(queueId);\n  }\n\n  updateDurationEstimates() {\n    for (const updateDurationEstimate of this.durationEstimateUpdaterMap.values()) {\n      updateDurationEstimate();\n    }\n  }\n\n  getDurationEstimate(queueId:string) {\n    const queueDurationEstimateMap = this.durationEstimateMap.get(queueId);\n    let totalDuration = 0;\n    let totalPending = 0;\n    if (typeof queueDurationEstimateMap === 'undefined') {\n      return [totalDuration, totalPending];\n    }\n    for (const [duration, pending] of queueDurationEstimateMap.values()) {\n      totalDuration += duration;\n      totalPending += pending;\n    }\n    return [totalDuration, totalPending];\n  }\n\n  emitDurationEstimate(queueId:string) {\n    const [totalDuration, totalPending] = this.getDurationEstimate(queueId);\n    this.emit('queueDuration', queueId, totalDuration, totalPending);\n  }\n\n  setCurrentJobType(queueId:string, type?:void | string) {\n    if (typeof type === 'string') {\n      this.queueCurrentJobTypeMap.set(queueId, type);\n    } else {\n      this.queueCurrentJobTypeMap.delete(queueId);\n    }\n    this.emit('queueJobType', queueId, type);\n  }\n\n  getCurrentJobType(queueId:string) {\n    return this.queueCurrentJobTypeMap.get(queueId);\n  }\n\n  async clear() {\n    this.isClearing = true;\n    await this.onIdle();\n    this.emit('clearing');\n    await clearDatabase();\n    this.dequeueQueue.start();\n    this.isClearing = false;\n  }\n\n  addToQueue(queueId:string, priority: number, autoStart: boolean, func: () => Promise<void>) {\n    if (this.stopped) {\n      return;\n    }\n    const queue = this.queueMap.get(queueId);\n    if (typeof queue !== 'undefined') {\n      queue.add(func, { priority });\n      return;\n    }\n    const newQueue = new PQueue({ concurrency: 1, autoStart });\n    this.queueMap.set(queueId, newQueue);\n    newQueue.add(func, { priority });\n    newQueue.on('idle', async () => {\n      this.setCurrentJobType(queueId, undefined);\n      if (!this.isClearing) {\n        await new Promise((resolve) => {\n          const timeout = setTimeout(() => {\n            this.removeListener('clearing', handleClearing);\n            newQueue.removeListener('active', handleActive);\n            resolve();\n          }, 5000);\n          const handleClearing = () => {\n            clearTimeout(timeout);\n            this.removeListener('clearing', handleClearing);\n            newQueue.removeListener('active', handleActive);\n            resolve();\n          };\n          const handleActive = () => {\n            clearTimeout(timeout);\n            this.removeListener('clearing', handleClearing);\n            newQueue.removeListener('active', handleActive);\n            resolve();\n          };\n          this.addListener('clearing', handleClearing);\n          newQueue.addListener('active', handleActive);\n        });\n      }\n      if (newQueue.pending > 0 || newQueue.size > 0) {\n        return;\n      }\n      this.queueMap.delete(queueId);\n      this.emit('queueInactive', queueId);\n    });\n    this.emit('queueActive', queueId);\n  }\n\n  async abortQueue(queueId: string) {\n    this.logger.info(`Aborting queue ${queueId}`);\n    this.removeDurationEstimate(queueId);\n    // Abort active jobs\n    const queueAbortControllerMap = this.abortControllerMap.get(queueId);\n    if (typeof queueAbortControllerMap !== 'undefined') {\n      for (const abortController of queueAbortControllerMap.values()) {\n        abortController.abort();\n      }\n    }\n    // Changes:\n    // * JOB_ERROR_STATUS -> JOB_CLEANUP_STATUS\n    // * JOB_COMPLETE_STATUS -> JOB_CLEANUP_STATUS\n    // * JOB_CLEANUP_AND_REMOVE_STATUS -> JOB_CLEANUP_AND_REMOVE_STATUS\n    // * JOB_PENDING_STATUS -> JOB_ABORTED_STATUS\n    const jobs = await markQueueForCleanupInDatabase(queueId);\n    await this.startJobs(jobs);\n  }\n\n  async retryQueue(queueId: string) {\n    this.logger.info(`Retrying queue ${queueId}`);\n    const lastJobId = await getGreatestJobIdFromQueueInDatabase(queueId);\n    const priority = BASE_PRIORITY - lastJobId - 0.5;\n    this.addToQueue(queueId, priority, true, async () => {\n      // Resets job attempts. Changes:\n      // * JOB_ABORTED_STATUS -> JOB_PENDING_STATUS\n      // * JOB_ERROR_STATUS -> JOB_ERROR_STATUS\n      // * JOB_CLEANUP_STATUS -> JOB_CLEANUP_STATUS\n      // * JOB_COMPLETE_STATUS -> JOB_COMPLETE_STATUS\n      // * JOB_CLEANUP_AND_REMOVE_STATUS -> JOB_CLEANUP_AND_REMOVE_STATUS\n      const jobs = await markQueuePendingInDatabase(queueId);\n      await this.startJobs(jobs);\n    });\n  }\n\n  async abortAndRemoveQueue(queueId: string) {\n    this.logger.info(`Aborting and removing queue ${queueId}`);\n    this.removeDurationEstimate(queueId);\n    // Abort active jobs\n    const queueAbortControllerMap = this.abortControllerMap.get(queueId);\n    if (typeof queueAbortControllerMap !== 'undefined') {\n      for (const abortController of queueAbortControllerMap.values()) {\n        abortController.abort();\n      }\n    }\n    // Changes:\n    // * JOB_ERROR_STATUS -> JOB_CLEANUP_AND_REMOVE_STATUS\n    // * JOB_COMPLETE_STATUS -> JOB_CLEANUP_AND_REMOVE_STATUS\n    // * JOB_CLEANUP_STATUS -> JOB_CLEANUP_AND_REMOVE_STATUS\n    // * JOB_CLEANUP_AND_REMOVE_STATUS -> JOB_CLEANUP_AND_REMOVE_STATUS\n    // * Removes other statuses\n    const jobs = await markQueueForCleanupAndRemoveInDatabase(queueId);\n    await this.startJobs(jobs);\n    this.emit('abortAndRemoveQueue', queueId);\n  }\n\n  async abortAndRemoveQueueJobsGreaterThanId(queueId: string, id: number) {\n    this.logger.info(`Aborting and removing jobs with ID greater than ${id} in queue ${queueId}`);\n    // Abort active jobs\n    const queueAbortControllerMap = this.abortControllerMap.get(queueId);\n    if (typeof queueAbortControllerMap !== 'undefined') {\n      for (const [jobId, abortController] of queueAbortControllerMap) {\n        if (jobId > id) {\n          this.removeDurationEstimate(queueId, jobId);\n          abortController.abort();\n        }\n      }\n    }\n    // Changes:\n    // * JOB_ERROR_STATUS -> JOB_CLEANUP_AND_REMOVE_STATUS\n    // * JOB_COMPLETE_STATUS -> JOB_CLEANUP_AND_REMOVE_STATUS\n    // * JOB_CLEANUP_STATUS -> JOB_CLEANUP_AND_REMOVE_STATUS\n    // * JOB_CLEANUP_AND_REMOVE_STATUS -> JOB_CLEANUP_AND_REMOVE_STATUS\n    // * Removes other statuses\n    const jobs = await markQueueJobsGreaterThanIdCleanupAndRemoveInDatabase(queueId, id);\n    await this.startJobs(jobs);\n    this.emit('abortAndRemoveQueueJobs', queueId, id);\n  }\n\n  async dequeue():Promise<void> {\n    if (this.stopped) {\n      return;\n    }\n    if (this.dequeueQueue.size === 0) {\n      // Add a subsequent dequeue\n      this.dequeueQueue.add(this.startJobs.bind(this));\n    }\n    await this.dequeueQueue.onIdle();\n  }\n\n  async startJobs(newJobs?:Array<Job>) { // eslint-disable-line consistent-return\n    const jobs = Array.isArray(newJobs) ? newJobs : await dequeueFromDatabaseNotIn([...this.jobIds.keys()]);\n    const queueIds = new Set();\n    for (const { id, queueId, args, type, status, attempt, startAfter, prioritize } of jobs) {\n      if (this.jobIds.has(id)) {\n        continue;\n      }\n      // Pause queues before adding items into them to avoid starting things out of priority\n      if (!queueIds.has(queueId)) {\n        const queue = this.queueMap.get(queueId);\n        if (typeof queue !== 'undefined') {\n          queue.pause();\n        }\n        queueIds.add(queueId);\n      }\n      if (status === JOB_PENDING_STATUS) {\n        this.startJob(id, queueId, args, type, attempt + 1, startAfter, false, prioritize);\n      } else if (status === JOB_ERROR_STATUS) {\n        this.startErrorHandler(id, queueId, args, type, attempt, startAfter, false, prioritize);\n      } else if (status === JOB_CLEANUP_STATUS) {\n        this.startCleanup(id, queueId, args, type, false, prioritize);\n      } else if (status === JOB_CLEANUP_AND_REMOVE_STATUS) {\n        this.startCleanup(id, queueId, args, type, false, prioritize);\n      } else {\n        throw new Error(`Unknown job status ${status} in job ${id} of queue ${queueId}`);\n      }\n    }\n    for (const queueId of queueIds) {\n      const queue = this.queueMap.get(queueId);\n      if (typeof queue !== 'undefined') {\n        queue.start();\n      } else {\n        this.logger.error(`Unable to start queue ${queueId} after dequeue; queue does not exist`);\n      }\n    }\n  }\n\n  async stop() {\n    if (typeof this.stopPromise === 'undefined') {\n      this.stopped = true;\n      this.stopPromise = (async () => {\n        await this.dequeueQueue.onIdle();\n        const idlePromises = [];\n        for (const [queueId, queue] of this.queueMap) {\n          const interval = setInterval(() => {\n            this.logger.info(`Waiting on queue ${queueId} stop() request. Queue ${queue.isPaused ? 'is paused' : 'is not paused'}, with ${queue.pending} ${queue.pending === 1 ? 'job' : 'jobs'} pending and ${queue.size} ${queue.size === 1 ? 'job' : 'jobs'} remaining.`);\n          }, 250);\n          queue.clear();\n          idlePromises.push(queue.onIdle().finally(() => {\n            clearInterval(interval);\n          }));\n        }\n        await Promise.all(idlePromises);\n        this.jobIds.clear();\n        this.abortControllerMap.clear();\n        delete this.stopPromise;\n        this.emit('stop');\n        this.stopped = false;\n      })();\n    }\n    await this.stopPromise;\n  }\n\n  async onIdle(maxDuration?: number) {\n    if (typeof this.onIdlePromise === 'undefined') {\n      this.onIdlePromise = (async () => {\n        const timeout = typeof maxDuration === 'number' ? Date.now() + maxDuration : -1;\n        const start = Date.now();\n        while (true) { // eslint-disable-line no-constant-condition\n          if (timeout !== -1 && Date.now() > timeout) {\n            this.logger.warn(`Idle timeout after ${Date.now() - start}ms`);\n            break;\n          }\n          await this.dequeueQueue.onIdle();\n          for (const [queueId, queue] of this.queueMap) {\n            const interval = setInterval(() => {\n              this.logger.info(`Waiting on queue ${queueId} onIdle() request. Queue ${queue.isPaused ? 'is paused' : 'is not paused'}, with ${queue.pending} ${queue.pending === 1 ? 'job' : 'jobs'} pending and ${queue.size} ${queue.size === 1 ? 'job' : 'jobs'} remaining.`);\n            }, 250);\n            await queue.onIdle();\n            clearInterval(interval);\n          }\n          const jobsInterval = setInterval(() => {\n            this.logger.info('Waiting on jobs');\n          }, 250);\n          const jobs = await dequeueFromDatabase();\n          clearInterval(jobsInterval);\n          if (jobs.length > 0) {\n            const interval = setInterval(() => {\n              this.logger.info('Waiting on dequeue');\n            }, 250);\n            await this.dequeue();\n            clearInterval(interval);\n            continue;\n          }\n          break;\n        }\n        delete this.onIdlePromise;\n        this.emit('idle');\n      })();\n    }\n    await this.onIdlePromise;\n  }\n\n  getAbortController(id:number, queueId:string) {\n    let queueAbortControllerMap = this.abortControllerMap.get(queueId);\n    if (typeof queueAbortControllerMap === 'undefined') {\n      queueAbortControllerMap = new Map();\n      this.abortControllerMap.set(queueId, queueAbortControllerMap);\n    }\n    const abortController = queueAbortControllerMap.get(id);\n    if (typeof abortController !== 'undefined') {\n      return abortController;\n    }\n    const newAbortController = new AbortController();\n    queueAbortControllerMap.set(id, newAbortController);\n    return newAbortController;\n  }\n\n  removeAbortController(id:number, queueId:string) {\n    const queueAbortControllerMap = this.abortControllerMap.get(queueId);\n    if (typeof queueAbortControllerMap === 'undefined') {\n      this.logger.warn(`Abort controller map for ${id} in queue ${queueId} does not exist`);\n      return;\n    }\n    const abortController = queueAbortControllerMap.get(id);\n    if (typeof abortController === 'undefined') {\n      this.logger.warn(`Abort controller for ${id} in queue ${queueId} does not exist`);\n      return;\n    }\n    queueAbortControllerMap.delete(id);\n    if (queueAbortControllerMap.size === 0) {\n      this.abortControllerMap.delete(queueId);\n    }\n  }\n\n  async runCleanup(id:number, queueId:string, args:Array<any>, type:string) {\n    this.emit('cleanupStart', { id });\n    const cleanup = this.cleanupMap.get(type);\n    if (typeof cleanup !== 'function') {\n      this.logger.warn(`No cleanup for job type ${type}`);\n      await removeCleanupFromDatabase(id);\n      this.emit('cleanup', { id });\n      return;\n    }\n    const cleanupJob = await getCleanupFromDatabase(id);\n    const { data, startAfter } = typeof cleanupJob === 'undefined' ? { data: undefined, startAfter: 0 } : cleanupJob;\n    const delay = startAfter - Date.now();\n    if (delay > 0) {\n      this.logger.info(`Delaying retry of ${type} job #${id} cleanup in queue ${queueId} by ${delay}ms to ${new Date(startAfter).toLocaleString()}`);\n      await new Promise((resolve) => setTimeout(resolve, delay));\n    }\n    try {\n      await cleanup(data, args, (path:Array<string>) => removePathFromCleanupDataInDatabase(id, path));\n    } catch (error) {\n      const attempt = await incrementCleanupAttemptInDatabase(id, queueId);\n      if (error.name === 'FatalError') {\n        this.logger.error(`Fatal error in ${type} job #${id} cleanup in queue ${queueId} attempt ${attempt}`);\n        this.emit('error', error);\n        await removeCleanupFromDatabase(id);\n        this.emit('fatalCleanupError', { id, queueId });\n        return;\n      }\n      const retryCleanupDelay = await this.getRetryCleanupDelay(type, attempt, error);\n      if (retryCleanupDelay === false) {\n        this.logger.error(`Error in ${type} job #${id} cleanup in queue ${queueId} attempt ${attempt} with no additional attempts requested`);\n        this.emit('error', error);\n        await removeCleanupFromDatabase(id);\n        this.emit('fatalCleanupError', { id, queueId });\n        return;\n      }\n      this.logger.error(`Error in ${type} job #${id} cleanup in queue ${queueId} attempt ${attempt}, retrying ${retryCleanupDelay > 0 ? `in ${retryCleanupDelay}ms` : 'immediately'}`);\n      this.emit('error', error);\n      if (retryCleanupDelay > 0) {\n        this.emit('retryCleanupDelay', { id, queueId, retryCleanupDelay });\n        const newStartAfter = Date.now() + retryCleanupDelay;\n        await markCleanupStartAfterInDatabase(id, newStartAfter);\n      }\n      await this.runCleanup(id, queueId, args, type);\n      return;\n    }\n    await removeCleanupFromDatabase(id);\n    this.emit('cleanup', { id });\n  }\n\n  startCleanup(id:number, queueId:string, args:Array<any>, type:string, autoStart:boolean, prioritize: boolean) {\n    this.logger.info(`Adding ${type} cleanup job #${id} to queue ${queueId}`);\n    this.jobIds.add(id);\n    this.removeDurationEstimate(queueId, id);\n    const priority = BASE_PRIORITY + id - (prioritize ? HIGH_PRIORITY_OFFSET : 0);\n    const run = async () => {\n      this.setCurrentJobType(queueId, CLEANUP_JOB_TYPE);\n      this.logger.info(`Starting ${type} cleanup #${id} in queue ${queueId}`);\n      await this.runCleanup(id, queueId, args, type);\n      // Job could be marked for removal while cleanup is running\n      await markJobAsAbortedOrRemoveFromDatabase(id);\n      this.jobIds.delete(id);\n      this.logger.info(`Completed ${type} cleanup #${id} in queue ${queueId}`);\n    };\n    this.addToQueue(queueId, priority, autoStart, run);\n  }\n\n  startErrorHandler(id:number, queueId:string, args:Array<any>, type:string, attempt: number, startAfter: number, autoStart:boolean, prioritize: boolean) {\n    this.logger.info(`Adding ${type} error handler job #${id} to queue ${queueId}`);\n    this.jobIds.add(id);\n    const priority = BASE_PRIORITY + id - (prioritize ? HIGH_PRIORITY_OFFSET : 0);\n    const abortController = this.getAbortController(id, queueId);\n    const run = async () => {\n      this.setCurrentJobType(queueId, CLEANUP_JOB_TYPE);\n      this.logger.info(`Starting ${type} error handler #${id} in queue ${queueId}`);\n      await this.runCleanup(id, queueId, args, type);\n      if (abortController.signal.aborted) {\n        // Job could be marked for removal while error handler is running\n        await markJobAsAbortedOrRemoveFromDatabase(id);\n        this.removeAbortController(id, queueId);\n        this.jobIds.delete(id);\n      } else {\n        await markJobPendingInDatabase(id);\n        this.logger.info(`Retrying ${type} job #${id} in queue ${queueId}`);\n        this.emit('retry', { id });\n        this.startJob(id, queueId, args, type, attempt + 1, startAfter, true, prioritize);\n      }\n      this.logger.info(`Completed ${type} error handler #${id} in queue ${queueId}`);\n    };\n    this.addToQueue(queueId, priority, autoStart, run);\n  }\n\n  async delayJobStart(id:number, queueId:string, type:string, signal: AbortSignal, startAfter: number) {\n    if (signal.aborted) {\n      throw new AbortError(`Queue ${queueId} was aborted`);\n    }\n    const duration = startAfter - Date.now();\n    if (duration > 0) {\n      this.logger.info(`Delaying start of ${type} job #${id} in queue ${queueId} by ${duration}ms`);\n      await new Promise((resolve, reject) => {\n        const timeout = setTimeout(() => {\n          signal.removeEventListener('abort', handleAbort);\n          resolve();\n        }, duration);\n        const handleAbort = () => {\n          clearTimeout(timeout);\n          signal.removeEventListener('abort', handleAbort);\n          reject(new AbortError(`Queue ${queueId} was aborted`));\n        };\n        signal.addEventListener('abort', handleAbort);\n      });\n    }\n  }\n\n  startJob(id:number, queueId:string, args:Array<any>, type:string, attempt:number, startAfter: number, autoStart:boolean, prioritize: boolean) {\n    this.logger.info(`Adding ${type} job #${id} to queue ${queueId}`);\n    this.jobIds.add(id);\n    const priority = BASE_PRIORITY - id + (prioritize ? HIGH_PRIORITY_OFFSET : 0);\n    const updateCleanupData = (data:Object) => updateCleanupValuesInDatabase(id, queueId, data);\n    const updateDuration = (duration:number, pending:number) => {\n      this.addDurationEstimate(queueId, id, duration, pending);\n    };\n    const updateDurationEstimate = () => {\n      const durationEstimateHandler = this.durationEstimateHandlerMap.get(type);\n      if (typeof durationEstimateHandler === 'function') {\n        try {\n          const durationEstimate = durationEstimateHandler(args);\n          this.addDurationEstimate(queueId, id, durationEstimate, durationEstimate);\n          return durationEstimate;\n        } catch (error) {\n          this.logger.error(`Unable to estimate duration of ${type} job #${id} in queue ${queueId}`);\n          this.logger.errorStack(error);\n        }\n      }\n      return 0;\n    };\n    updateDurationEstimate();\n    this.durationEstimateUpdaterMap.set(id, updateDurationEstimate);\n    const abortController = this.getAbortController(id, queueId);\n    const run = async () => {\n      const start = Date.now();\n      const durationEstimate = updateDurationEstimate();\n      this.durationEstimateUpdaterMap.delete(id);\n      if (abortController.signal.aborted) {\n        this.emit('fatalError', { id, queueId, error: new AbortError(`Queue ${queueId} was aborted`) });\n        this.removeAbortController(id, queueId);\n        this.jobIds.delete(id);\n        this.removeDurationEstimate(queueId, id);\n        return;\n      }\n      const handler = this.handlerMap.get(type);\n      if (typeof handler !== 'function') {\n        this.logger.warn(`No handler for job type ${type}`);\n        await markJobCompleteInDatabase(id);\n        this.removeAbortController(id, queueId);\n        this.jobIds.delete(id);\n        this.addDurationEstimate(queueId, id, Date.now() - start, 0);\n        return;\n      }\n      this.setCurrentJobType(queueId, type);\n      let handlerDidRun = false;\n      try {\n        // Mark as error in database so the job is cleaned up and retried if execution\n        // stops before job completion or error.\n        await markJobErrorInDatabase(id);\n        await this.delayJobStart(id, queueId, type, abortController.signal, startAfter);\n        this.logger.info(`Starting ${type} job #${id} in queue ${queueId} attempt ${attempt}`);\n        handlerDidRun = true;\n        const shouldKeepJobInDatabase = await handler(args, abortController.signal, updateCleanupData, updateDuration);\n        if (abortController.signal.aborted) {\n          throw new AbortError(`Queue ${queueId} was aborted`);\n        }\n        if (shouldKeepJobInDatabase === false) {\n          await markJobCompleteThenRemoveFromDatabase(id);\n        } else {\n          await markJobCompleteInDatabase(id);\n        }\n        this.removeAbortController(id, queueId);\n        this.jobIds.delete(id);\n        const duration = Date.now() - start;\n        if (typeof durationEstimate === 'number') {\n          const estimatedToActualRatio = durationEstimate / duration;\n          if (duration > 250 && (estimatedToActualRatio < 0.8 || estimatedToActualRatio > 1.25)) {\n            this.logger.warn(`Duration estimate of ${type} job #${id} (${durationEstimate}ms) was ${Math.round(100 * estimatedToActualRatio)}% of actual value (${duration}ms)`);\n          }\n        }\n        this.addDurationEstimate(queueId, id, duration, 0);\n        this.logger.info(`Completed ${type} job #${id} in queue ${queueId} attempt ${attempt} in ${duration}ms`);\n        return;\n      } catch (error) {\n        if (error.name === 'JobDoesNotExistError') {\n          this.logger.error(`Job does not exist error for ${type} job #${id} in queue ${queueId} attempt ${attempt}`);\n          if (handlerDidRun) {\n            this.emit('fatalError', { id, queueId, error });\n            await restoreJobToDatabaseForCleanupAndRemove(id, queueId, type, args, { prioritize });\n            this.jobIds.delete(id);\n            this.removeAbortController(id, queueId);\n            this.startCleanup(id, queueId, args, type, true, prioritize);\n          } else {\n            this.emit('fatalError', { id, queueId, error });\n            this.jobIds.delete(id);\n            this.removeAbortController(id, queueId);\n            this.removeDurationEstimate(queueId, id);\n          }\n          return;\n        }\n        if (abortController.signal.aborted) {\n          if (error.name !== 'AbortError') {\n            this.logger.error(`Abort signal following error in ${type} job #${id} in queue ${queueId} attempt ${attempt}`);\n            this.emit('error', error);\n          } else {\n            this.logger.warn(`Received abort signal for ${type} job #${id} in queue ${queueId} attempt ${attempt}`);\n          }\n          if (handlerDidRun) {\n            this.emit('fatalError', { id, queueId, error });\n            this.jobIds.delete(id);\n            this.removeAbortController(id, queueId);\n            this.startCleanup(id, queueId, args, type, true, prioritize);\n          } else {\n            this.emit('fatalError', { id, queueId, error });\n            await markJobAsAbortedOrRemoveFromDatabase(id);\n            this.jobIds.delete(id);\n            this.removeAbortController(id, queueId);\n            this.removeDurationEstimate(queueId, id);\n          }\n          return;\n        }\n        await incrementJobAttemptInDatabase(id);\n        if (error.name === 'FatalError') {\n          this.logger.error(`Fatal error in ${type} job #${id} in queue ${queueId} attempt ${attempt}`);\n          this.emit('error', error);\n          this.emit('fatalError', { id, queueId, error });\n          this.jobIds.delete(id);\n          this.removeAbortController(id, queueId);\n          await this.abortQueue(queueId);\n          return;\n        }\n        const retryDelay = await this.getRetryJobDelay(type, attempt, error);\n        if (retryDelay === false) {\n          this.logger.error(`Error in ${type} job #${id} in queue ${queueId} attempt ${attempt} with no additional attempts requested`);\n          this.emit('error', error);\n          this.emit('fatalError', { id, queueId, error });\n          this.jobIds.delete(id);\n          this.removeAbortController(id, queueId);\n          await this.abortQueue(queueId);\n          return;\n        }\n        this.logger.error(`Error in ${type} job #${id} in queue ${queueId} attempt ${attempt}, retrying ${retryDelay > 0 ? `in ${retryDelay}ms` : 'immediately'}`);\n        this.emit('error', error);\n        if (retryDelay > 0) {\n          this.emit('retryDelay', { id, queueId, retryDelay });\n          const newStartAfter = Date.now() + retryDelay;\n          await markJobStartAfterInDatabase(id, newStartAfter);\n          this.jobIds.delete(id);\n          this.startErrorHandler(id, queueId, args, type, attempt, newStartAfter, true, prioritize);\n        } else {\n          this.jobIds.delete(id);\n          this.startErrorHandler(id, queueId, args, type, attempt, startAfter, true, prioritize);\n        }\n      }\n    };\n    this.addToQueue(queueId, priority, autoStart, run);\n    this.emit('dequeue', { id });\n  }\n\n  async handlePortMessage(port: MessagePort, event:MessageEvent) {\n    if (!(event instanceof MessageEvent)) {\n      return;\n    }\n\n    const portHandlers = this.ports.get(port);\n\n    if (typeof portHandlers !== 'object') {\n      this.logger.warn('Port handlers do not exist');\n      this.logger.warnObject(event);\n      return;\n    }\n\n    const { data } = event;\n    if (!data || typeof data !== 'object') {\n      this.logger.warn('Invalid message data');\n      this.logger.warnObject(event);\n      return;\n    }\n    const { type, args } = data;\n    if (typeof type !== 'string') {\n      this.logger.warn('Unknown message type');\n      this.logger.warnObject(event);\n      return;\n    }\n    if (!Array.isArray(args)) {\n      this.logger.warn('Unknown arguments type');\n      this.logger.warnObject(event);\n      return;\n    }\n    const emit = (t:string, ...messageArgs:Array<any>) => {\n      port.postMessage({ type: t, args: messageArgs });\n    };\n    switch (type) {\n      case 'heartbeat':\n        try {\n          const [interval] = args;\n          if (typeof interval !== 'number') {\n            throw new Error(`Invalid \"interval\" argument with type ${typeof interval}, should be type number`);\n          }\n          clearTimeout(portHandlers.heartbeatExpiresTimeout);\n          this.heartbeatExpiresTimestamp = Date.now() + Math.round(interval * 2.5);\n          portHandlers.heartbeatExpiresTimeout = setTimeout(async () => {\n            this.logger.warn(`Heartbeat timeout after ${Math.round(interval * 2.1)}ms`);\n            await this.unloadClient();\n            this.removePort(port);\n          }, Math.round(interval * 2.1));\n          emit('heartbeat', ...args);\n          super.emit('heartbeat', ...args);\n        } catch (error) {\n          this.logger.error('Heartbeat error');\n          this.logger.errorStack(error);\n        }\n        return;\n      case 'jobAdd':\n        jobEmitter.emit('jobAdd', ...args);\n        return;\n      case 'jobDelete':\n        jobEmitter.emit('jobDelete', ...args);\n        return;\n      case 'jobUpdate':\n        jobEmitter.emit('jobUpdate', ...args);\n        return;\n      case 'jobsClear':\n        jobEmitter.emit('jobsClear', ...args);\n        return;\n      default:\n        break;\n    }\n    const [requestId, ...requestArgs] = args;\n    if (typeof requestId !== 'number') {\n      throw new Error('Request arguments should start with a requestId number');\n    }\n    switch (type) {\n      case 'unlink':\n        this.logger.warn('Unlinking worker interface');\n        try {\n          if (this.ports.size === 1) {\n            await this.stop();\n          }\n          emit('unlinkComplete', requestId);\n          this.removePort(port);\n        } catch (error) {\n          emit('unlinkError', requestId, error);\n          this.logger.error('Unable to handle unlink message');\n          this.emit('error', error);\n        }\n        break;\n      case 'clear':\n        try {\n          await this.clear();\n          emit('clearComplete', requestId);\n        } catch (error) {\n          emit('clearError', requestId, error);\n          this.logger.error('Unable to handle clear message');\n          this.emit('error', error);\n        }\n        break;\n      case 'abortAndRemoveQueueJobsGreaterThanId':\n        try {\n          const [queueId, id] = requestArgs;\n          if (typeof queueId !== 'string') {\n            throw new Error(`Invalid \"queueId\" argument with type ${typeof queueId}, should be type string`);\n          }\n          if (typeof id !== 'number') {\n            throw new Error(`Invalid \"id\" argument with type ${typeof id}, should be type number`);\n          }\n          await this.abortAndRemoveQueueJobsGreaterThanId(queueId, id);\n          emit('abortAndRemoveQueueJobsGreaterThanIdComplete', requestId);\n        } catch (error) {\n          emit('abortAndRemoveQueueJobsGreaterThanIdError', requestId, error);\n          this.logger.error('Unable to handle abort and remove queue jobs greater than ID message');\n          this.emit('error', error);\n        }\n        break;\n      case 'abortAndRemoveQueue':\n        try {\n          const [queueId] = requestArgs;\n          if (typeof queueId !== 'string') {\n            throw new Error(`Invalid \"queueId\" argument with type ${typeof queueId}, should be type string`);\n          }\n          await this.abortAndRemoveQueue(queueId);\n          emit('abortAndRemoveQueueComplete', requestId);\n        } catch (error) {\n          emit('abortAndRemoveQueueError', requestId, error);\n          this.logger.error('Unable to handle abort and remove queue message');\n          this.emit('error', error);\n        }\n        break;\n      case 'updateDurationEstimates':\n        try {\n          await this.updateDurationEstimates();\n          emit('updateDurationEstimatesComplete', requestId);\n        } catch (error) {\n          emit('updateDurationEstimatesError', requestId, error);\n          this.logger.error('Unable to handle update duration estimates message');\n          this.emit('error', error);\n        }\n        break;\n      case 'abortQueue':\n        try {\n          const [queueId] = requestArgs;\n          if (typeof queueId !== 'string') {\n            throw new Error(`Invalid \"queueId\" argument with type ${typeof queueId}, should be type string`);\n          }\n          await this.abortQueue(queueId);\n          emit('abortQueueComplete', requestId);\n        } catch (error) {\n          emit('abortQueueError', requestId, error);\n          this.logger.error('Unable to handle abort queue message');\n          this.emit('error', error);\n        }\n        break;\n      case 'retryQueue':\n        try {\n          const [queueId] = requestArgs;\n          if (typeof queueId !== 'string') {\n            throw new Error(`Invalid \"queueId\" argument with type ${typeof queueId}, should be type string`);\n          }\n          await this.retryQueue(queueId);\n          emit('retryQueueComplete', requestId);\n        } catch (error) {\n          emit('retryQueueError', requestId, error);\n          this.logger.error('Unable to handle retry queue message');\n          this.emit('error', error);\n        }\n        break;\n      case 'dequeue':\n        try {\n          await this.dequeue();\n          emit('dequeueComplete', requestId);\n        } catch (error) {\n          emit('dequeueError', requestId, error);\n          this.logger.error('Unable to handle dequeue message');\n          this.emit('error', error);\n        }\n        break;\n      case 'enableStartOnJob':\n        try {\n          this.enableStartOnJob();\n          emit('enableStartOnJobComplete', requestId);\n        } catch (error) {\n          emit('enableStartOnJobError', requestId, error);\n          this.logger.error('Unable to handle enableStartOnJob message');\n          this.emit('error', error);\n        }\n        break;\n      case 'disableStartOnJob':\n        try {\n          this.disableStartOnJob();\n          emit('disableStartOnJobComplete', requestId);\n        } catch (error) {\n          emit('disableStartOnJobError', requestId, error);\n          this.logger.error('Unable to handle disableStartOnJob message');\n          this.emit('error', error);\n        }\n        break;\n      case 'getQueueIds':\n        try {\n          const queueIds = await this.getQueueIds();\n          emit('getQueuesComplete', requestId, [...queueIds]);\n        } catch (error) {\n          emit('getQueuesError', requestId, error);\n          this.logger.error('Unable to handle getQueueIds message');\n          this.emit('error', error);\n        }\n        break;\n      case 'getDurationEstimate':\n        try {\n          const [queueId] = requestArgs;\n          if (typeof queueId !== 'string') {\n            throw new Error(`Invalid \"queueId\" argument with type ${typeof queueId}, should be type string`);\n          }\n          const values = await this.getDurationEstimate(queueId);\n          emit('getDurationEstimateComplete', requestId, values);\n        } catch (error) {\n          emit('getDurationEstimateError', requestId, error);\n          this.logger.error('Unable to handle get duration estimate message');\n          this.emit('error', error);\n        }\n        break;\n      case 'getCurrentJobType':\n        try {\n          const [queueId] = requestArgs;\n          if (typeof queueId !== 'string') {\n            throw new Error(`Invalid \"queueId\" argument with type ${typeof queueId}, should be type string`);\n          }\n          const currentJobType = this.getCurrentJobType(queueId);\n          emit('getCurrentJobTypeComplete', requestId, currentJobType);\n        } catch (error) {\n          emit('getCurrentJobTypeError', requestId, error);\n          this.logger.error('Unable to handle get current job type message');\n          this.emit('error', error);\n        }\n        break;\n      case 'runUnloadHandlers':\n        try {\n          await this.runUnloadHandlers();\n          emit('runUnloadHandlersComplete', requestId);\n        } catch (error) {\n          emit('runUnloadHandlersError', requestId, error);\n          this.logger.error('Unable to run unload handlers message');\n          this.emit('error', error);\n        }\n        break;\n      case 'idle':\n        try {\n          const [maxDuration, start] = requestArgs;\n          if (typeof maxDuration !== 'number') {\n            throw new Error(`Invalid \"queueId\" argument with type ${typeof maxDuration}, should be type number`);\n          }\n          if (typeof start !== 'number') {\n            throw new Error(`Invalid \"queueId\" argument with type ${typeof start}, should be type number`);\n          }\n          await this.onIdle(maxDuration - (Date.now() - start));\n          emit('idleComplete', requestId);\n        } catch (error) {\n          emit('idleError', requestId, error);\n          this.logger.error('Unable to handle idle message');\n          this.emit('error', error);\n        }\n        break;\n      default:\n        this.logger.warn(`Unknown worker interface message type ${type}`);\n    }\n  }\n\n  async unloadClient() {\n    this.logger.info('Detected client unload');\n    if (this.isUnloading) {\n      this.logger.warn('Unload already in progress');\n      return;\n    }\n    try {\n      for (const { heartbeatExpiresTimeout } of this.ports.values()) {\n        clearTimeout(heartbeatExpiresTimeout);\n      }\n      const heartbeatExpiresTimestamp = this.heartbeatExpiresTimestamp;\n      if (typeof heartbeatExpiresTimestamp !== 'number') {\n        this.logger.warn('Heartbeat expires timestamp does not exist');\n        return;\n      }\n      this.isUnloading = true;\n      delete this.heartbeatExpiresTimestamp;\n      const delay = heartbeatExpiresTimestamp - Date.now();\n      if (delay > 0) {\n        await new Promise((resolve) => {\n          const timeout = setTimeout(() => {\n            clearTimeout(timeout);\n            this.removeListener('heartbeat', handleHeartbeat);\n            resolve();\n          }, delay);\n          const handleHeartbeat = () => {\n            clearTimeout(timeout);\n            this.removeListener('heartbeat', handleHeartbeat);\n            resolve();\n          };\n          this.addListener('heartbeat', handleHeartbeat);\n        });\n      }\n      if (typeof this.heartbeatExpiresTimestamp === 'number') {\n        this.logger.info('Cancelling client unload, heartbeat detected');\n        return;\n      }\n      this.logger.info('Unloading');\n      await this.runUnloadHandlers();\n      for (const port of this.ports.keys()) {\n        port.postMessage({ type: 'unloadClient', args: [] });\n      }\n      await this.onIdle();\n    } finally {\n      this.isUnloading = false;\n    }\n  }\n\n  runUnloadHandlers() {\n    return this.unloadQueue.add(async () => {\n      const handleUnload = this.handleUnload;\n      if (typeof handleUnload === 'function') {\n        try {\n          const unloadData = await getUnloadDataFromDatabase();\n          await handleUnload(unloadData);\n          await clearUnloadDataInDatabase();\n        } catch (error) {\n          this.logger.error('Error in unload handler');\n          this.logger.errorStack(error);\n        }\n      }\n    });\n  }\n\n  removePort(port:MessagePort) {\n    const portHandlers = this.ports.get(port);\n    if (typeof portHandlers === 'undefined') {\n      this.logger.info('Unable to remove port, port handler map does not exist');\n      return;\n    }\n    const {\n      handleJobAdd,\n      handleJobDelete,\n      handleJobUpdate,\n      handleJobsClear,\n      heartbeatExpiresTimeout,\n    } = portHandlers;\n\n    localJobEmitter.removeListener('jobAdd', handleJobAdd);\n    localJobEmitter.removeListener('jobDelete', handleJobDelete);\n    localJobEmitter.removeListener('jobUpdate', handleJobUpdate);\n    localJobEmitter.removeListener('jobsClear', handleJobsClear);\n    clearTimeout(heartbeatExpiresTimeout);\n\n    port.postMessage({ type: 'closed', args: [] });\n\n    port.onmessage = null; // eslint-disable-line no-param-reassign\n    port.onmessageerror = null; // eslint-disable-line no-param-reassign\n    port.close();\n\n    this.ports.delete(port);\n  }\n\n  listenForServiceWorkerInterface() {\n    self.addEventListener('sync', (event) => {\n      this.logger.info(`SyncManager event ${event.tag}${event.lastChance ? ', last chance' : ''}`);\n      if (event.tag === 'syncManagerOnIdle') {\n        this.logger.info('Starting SyncManager idle handler');\n        this.emit('syncManagerOnIdle');\n        event.waitUntil(this.onIdle().catch((error) => {\n          this.logger.error(`SyncManager event handler failed${event.lastChance ? ' on last chance' : ''}`);\n          this.logger.errorStack(error);\n        }));\n      } else if (event.tag === 'unload') {\n        this.logger.info('Starting SyncManager unload client handler');\n        event.waitUntil(this.unloadClient().catch((error) => {\n          this.logger.error(`SyncManager event handler failed${event.lastChance ? ' on last chance' : ''}`);\n          this.logger.errorStack(error);\n        }));\n      } else {\n        this.logger.warn(`Received unknown SyncManager event tag ${event.tag}`);\n      }\n    });\n\n    self.addEventListener('message', (event:ExtendableMessageEvent) => {\n      if (!(event instanceof ExtendableMessageEvent)) {\n        return;\n      }\n      const { data } = event;\n      if (!data || typeof data !== 'object') {\n        return;\n      }\n      const { type } = data;\n      if (type !== 'BATTERY_QUEUE_WORKER_INITIALIZATION') {\n        return;\n      }\n      if (!Array.isArray(event.ports)) {\n        return;\n      }\n      const port = event.ports[0];\n      if (!(port instanceof MessagePort)) {\n        return;\n      }\n      if (this.ports.has(port)) {\n        return;\n      }\n\n      port.onmessage = (_event:MessageEvent) => this.handlePortMessage(port, _event); // eslint-disable-line no-param-reassign\n\n      port.onmessageerror = (_event:MessageEvent) => {\n        this.logger.error('MessagePort unable to deserialize message');\n        this.logger.errorObject(_event);\n      };\n\n      const handleJobAdd = (...args:Array<any>) => {\n        port.postMessage({ type: 'jobAdd', args });\n      };\n      const handleJobDelete = (...args:Array<any>) => {\n        port.postMessage({ type: 'jobDelete', args });\n      };\n      const handleJobUpdate = (...args:Array<any>) => {\n        port.postMessage({ type: 'jobUpdate', args });\n      };\n      const handleJobsClear = (...args:Array<any>) => {\n        port.postMessage({ type: 'jobsClear', args });\n      };\n\n      localJobEmitter.addListener('jobAdd', handleJobAdd);\n      localJobEmitter.addListener('jobDelete', handleJobDelete);\n      localJobEmitter.addListener('jobUpdate', handleJobUpdate);\n      localJobEmitter.addListener('jobsClear', handleJobsClear);\n\n\n      const portHandlers = {\n        handleJobAdd,\n        handleJobDelete,\n        handleJobUpdate,\n        handleJobsClear,\n      };\n\n      this.ports.set(port, portHandlers);\n\n      port.postMessage({ type: 'BATTERY_QUEUE_WORKER_CONFIRMATION' });\n\n      this.logger.info('Linked to worker interface');\n    });\n    self.addEventListener('messageerror', (event:MessageEvent) => {\n      this.logger.error('Service worker interface message error');\n      this.logger.errorObject(event);\n    });\n  }\n}\n\n"],"file":"queue.js"}