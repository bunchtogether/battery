{"version":3,"sources":["../../src/queue.js"],"names":["PRIORITY_OFFSET","Math","floor","Number","MAX_SAFE_INTEGER","BatteryQueue","options","dequeueQueue","PQueue","concurrency","handlerMap","Map","cleanupMap","retryJobDelayMap","retryCleanupDelayMap","queueMap","jobIds","Set","abortControllerMap","isClearing","emitCallbacks","logger","on","error","errorStack","type","args","emitCallback","retryJobDelayFunction","has","Error","set","delete","attempt","get","result","emit","retryCleanupDelayFunction","handler","cleanup","onIdle","start","queueId","priority","func","queue","add","newQueue","autoStart","Promise","resolve","timeout","setTimeout","removeListener","handleClearing","handleActive","clearTimeout","addListener","pending","size","info","queueAbortControllerMap","values","abortController","abort","jobs","startJobs","bind","newJobs","Array","isArray","keys","queueIds","id","status","startAfter","pause","JOB_PENDING_STATUS","startJob","JOB_ERROR_STATUS","startErrorHandler","JOB_CLEANUP_STATUS","startCleanup","maxDuration","onIdlePromise","Date","now","warn","interval","setInterval","clearInterval","jobsInterval","length","dequeue","newAbortController","AbortController","cleanupJob","data","undefined","delay","toLocaleString","path","name","getRetryCleanupDelay","retryCleanupDelay","newStartAfter","runCleanup","run","removeAbortController","addToQueue","getAbortController","signal","aborted","AbortError","duration","reject","removeEventListener","handleAbort","addEventListener","updateCleanupData","delayJobStart","abortQueue","getRetryJobDelay","retryDelay","event","MessageEvent","warnObject","value","clear","activeEmitCallback","handleJobAdd","handleJobDelete","handleJobUpdate","handleJobsClear","self","ExtendableMessageEvent","ports","port","MessagePort","filter","x","previousPort","close","jobEmitter","postMessage","onmessage","handlePortMessage","t","push","errorObject","EventEmitter"],"mappings":"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","sourcesContent":["// @flow\n\nimport PQueue from 'p-queue';\nimport EventEmitter from 'events';\nimport type { Logger } from './logger';\nimport makeLogger from './logger';\nimport type { Job } from './database';\nimport {\n  jobEmitter,\n  clearDatabase,\n  dequeueFromDatabase,\n  dequeueFromDatabaseNotIn,\n  incrementJobAttemptInDatabase,\n  incrementCleanupAttemptInDatabase,\n  markJobCompleteInDatabase,\n  markJobPendingInDatabase,\n  markJobErrorInDatabase,\n  markJobCleanupInDatabase,\n  markJobAbortedInDatabase,\n  markJobStartAfterInDatabase,\n  markCleanupStartAfterInDatabase,\n  updateCleanupValuesInDatabase,\n  getCleanupFromDatabase,\n  removePathFromCleanupDataInDatabase,\n  markQueueForCleanupInDatabase,\n  removeCleanupFromDatabase,\n  JOB_PENDING_STATUS,\n  JOB_ERROR_STATUS,\n  JOB_CLEANUP_STATUS,\n} from './database';\nimport { AbortError } from './errors';\n\nconst PRIORITY_OFFSET = Math.floor(Number.MAX_SAFE_INTEGER / 2);\n\ntype HandlerFunction = (Array<any>, AbortSignal, (Object) => Promise<void>) => Promise<void>;\ntype CleanupFunction = (Object | void, Array<any>, Array<string> => Promise<void>) => Promise<void>;\ntype RetryDelayFunction = (number, Error) => number | false | Promise<number | false>;\ntype EmitCallback = (string, Array<any>) => void;\n\ntype Options = {\n  logger?: Logger\n};\n\nexport default class BatteryQueue extends EventEmitter {\n  declare logger: Logger;\n  declare dequeueQueue: PQueue;\n  declare handlerMap: Map<string, HandlerFunction>;\n  declare retryJobDelayMap: Map<string, RetryDelayFunction>;\n  declare retryCleanupDelayMap: Map<string, RetryDelayFunction>;\n  declare cleanupMap: Map<string, CleanupFunction>;\n  declare queueMap: Map<string, PQueue>;\n  declare abortControllerMap: Map<string, Map<number, AbortController>>;\n  declare isClearing: boolean;\n  declare onIdlePromise: Promise<void> | void;\n  declare jobIds: Set<number>;\n  declare emitCallbacks: Array<EmitCallback>;\n  declare port: MessagePort;\n\n  constructor(options?: Options = {}) {\n    super();\n    this.dequeueQueue = new PQueue({ concurrency: 1 });\n    this.handlerMap = new Map();\n    this.cleanupMap = new Map();\n    this.retryJobDelayMap = new Map();\n    this.retryCleanupDelayMap = new Map();\n    this.queueMap = new Map();\n    this.jobIds = new Set();\n    this.abortControllerMap = new Map();\n    this.isClearing = false;\n    this.emitCallbacks = [];\n    this.logger = options.logger || makeLogger('Battery Queue');\n    this.on('error', (error) => {\n      this.logger.errorStack(error);\n    });\n  }\n\n  emit(type:string, ...args:Array<any>) {\n    for (const emitCallback of this.emitCallbacks) {\n      emitCallback(type, args);\n    }\n    return super.emit(type, ...args);\n  }\n\n  setRetryJobDelay(type:string, retryJobDelayFunction:RetryDelayFunction) {\n    if (this.retryJobDelayMap.has(type)) {\n      throw new Error(`Retry job delay handler for type \"${type}\" already exists`);\n    }\n    this.retryJobDelayMap.set(type, retryJobDelayFunction);\n  }\n\n  removeRetryJobDelay(type:string) {\n    if (!this.retryJobDelayMap.has(type)) {\n      throw new Error(`Retry job delay handler for type \"${type}\" does not exist`);\n    }\n    this.retryJobDelayMap.delete(type);\n  }\n\n  async getRetryJobDelay(type:string, attempt: number, error:Error) {\n    const retryJobDelayFunction = this.retryJobDelayMap.get(type);\n    if (typeof retryJobDelayFunction !== 'function') {\n      return false;\n    }\n    let result = false;\n    try {\n      result = await retryJobDelayFunction(attempt, error);\n    } catch (retryDelayError) {\n      this.logger.error(`Error in retry job delay handler for type \"${type}\" on attempt ${attempt}`);\n      this.emit('error', retryDelayError);\n      return false;\n    }\n    if (typeof result !== 'number' && result !== false) {\n      throw new Error(`Retry job delay function for type \"${type}\" returned invalid response, should be a number (milliseconds) or false`);\n    }\n    return result;\n  }\n\n  setRetryCleanupDelay(type:string, retryCleanupDelayFunction:RetryDelayFunction) {\n    if (this.retryCleanupDelayMap.has(type)) {\n      throw new Error(`Retry cleanup delay handler for type \"${type}\" already exists`);\n    }\n    this.retryCleanupDelayMap.set(type, retryCleanupDelayFunction);\n  }\n\n  removeRetryCleanupDelay(type:string) {\n    if (!this.retryCleanupDelayMap.has(type)) {\n      throw new Error(`Retry cleanup delay handler for type \"${type}\" does not exist`);\n    }\n    this.retryCleanupDelayMap.delete(type);\n  }\n\n  async getRetryCleanupDelay(type:string, attempt: number, error:Error) {\n    const retryCleanupDelayFunction = this.retryCleanupDelayMap.get(type);\n    if (typeof retryCleanupDelayFunction !== 'function') {\n      return false;\n    }\n    let result = false;\n    try {\n      result = await retryCleanupDelayFunction(attempt, error);\n    } catch (retryDelayError) {\n      this.logger.error(`Error in retry cleanup delay handler for type \"${type}\" on attempt ${attempt}`);\n      this.emit('error', retryDelayError);\n      return false;\n    }\n    if (typeof result !== 'number' && result !== false) {\n      throw new Error(`Retry cleanup delay function for type \"${type}\" returned invalid response, should be a number (milliseconds) or false`);\n    }\n    return result;\n  }\n\n  setHandler(type:string, handler: HandlerFunction) {\n    if (this.handlerMap.has(type)) {\n      throw new Error(`Handler for type \"${type}\" already exists`);\n    }\n    this.handlerMap.set(type, handler);\n  }\n\n  removeHandler(type:string) {\n    if (!this.handlerMap.has(type)) {\n      throw new Error(`Handler for type \"${type}\" does not exist`);\n    }\n    this.handlerMap.delete(type);\n  }\n\n  setCleanup(type:string, cleanup: CleanupFunction) {\n    if (this.cleanupMap.has(type)) {\n      throw new Error(`Cleanup for type \"${type}\" already exists`);\n    }\n    this.cleanupMap.set(type, cleanup);\n  }\n\n  removeCleanup(type:string) {\n    if (!this.cleanupMap.has(type)) {\n      throw new Error(`Cleanup for type \"${type}\" does not exist`);\n    }\n    this.cleanupMap.delete(type);\n  }\n\n  async clear() {\n    this.isClearing = true;\n    await this.onIdle();\n    this.emit('clearing');\n    await clearDatabase();\n    this.dequeueQueue.start();\n    this.isClearing = false;\n  }\n\n  addToQueue(queueId:string, priority: number, func: () => Promise<void>) {\n    const queue = this.queueMap.get(queueId);\n    if (typeof queue !== 'undefined') {\n      queue.add(func, { priority });\n      return;\n    }\n    const newQueue = new PQueue({ concurrency: 1, autoStart: false });\n    this.queueMap.set(queueId, newQueue);\n    newQueue.add(func, { priority });\n    newQueue.on('idle', async () => {\n      if (!this.isClearing) {\n        await new Promise((resolve) => {\n          const timeout = setTimeout(() => {\n            this.removeListener('clearing', handleClearing);\n            newQueue.removeListener('active', handleActive);\n            resolve();\n          }, 5000);\n          const handleClearing = () => {\n            clearTimeout(timeout);\n            this.removeListener('clearing', handleClearing);\n            newQueue.removeListener('active', handleActive);\n            resolve();\n          };\n          const handleActive = () => {\n            clearTimeout(timeout);\n            this.removeListener('clearing', handleClearing);\n            newQueue.removeListener('active', handleActive);\n            resolve();\n          };\n          this.addListener('clearing', handleClearing);\n          newQueue.addListener('active', handleActive);\n        });\n      }\n      if (newQueue.pending > 0 || newQueue.size > 0) {\n        return;\n      }\n      this.queueMap.delete(queueId);\n    });\n  }\n\n  async abortQueue(queueId: string) {\n    this.logger.info(`Aborting queue ${queueId}`);\n    // Abort active jobs\n    const queueAbortControllerMap = this.abortControllerMap.get(queueId);\n    if (typeof queueAbortControllerMap !== 'undefined') {\n      for (const abortController of queueAbortControllerMap.values()) {\n        abortController.abort();\n      }\n    }\n    // Changes:\n    // * JOB_ERROR_STATUS -> JOB_CLEANUP_STATUS\n    // * JOB_COMPLETE_STATUS -> JOB_CLEANUP_STATUS\n    // * JOB_PENDING_STATUS -> JOB_ABORTED_STATUS\n    const jobs = await markQueueForCleanupInDatabase(queueId);\n    await this.startJobs(jobs);\n  }\n\n  dequeue():void | Promise<void> {\n    if (this.dequeueQueue.size === 0) {\n      // Add a subsequent dequeue\n      this.dequeueQueue.add(this.startJobs.bind(this));\n    }\n    return this.dequeueQueue.onIdle();\n  }\n\n  async startJobs(newJobs?:Array<Job>) { // eslint-disable-line consistent-return\n    const jobs = Array.isArray(newJobs) ? newJobs : await dequeueFromDatabaseNotIn([...this.jobIds.keys()]);\n    const queueIds = new Set();\n    for (const { id, queueId, args, type, status, attempt, startAfter } of jobs) {\n      if (this.jobIds.has(id)) {\n        continue;\n      }\n      // Pause queues before adding items into them to avoid starting things out of priority\n      if (!queueIds.has(queueId)) {\n        const queue = this.queueMap.get(queueId);\n        if (typeof queue !== 'undefined') {\n          queue.pause();\n        }\n        queueIds.add(queueId);\n      }\n      if (status === JOB_PENDING_STATUS) {\n        this.startJob(id, queueId, args, type, attempt + 1, startAfter);\n      } else if (status === JOB_ERROR_STATUS) {\n        this.startErrorHandler(id, queueId, args, type, attempt, startAfter);\n      } else if (status === JOB_CLEANUP_STATUS) {\n        this.startCleanup(id, queueId, args, type);\n      } else {\n        throw new Error(`Unknown job status ${status} in job ${id} of queue ${queueId}`);\n      }\n    }\n    for (const queueId of queueIds) {\n      const queue = this.queueMap.get(queueId);\n      if (typeof queue !== 'undefined') {\n        queue.start();\n      } else {\n        this.logger.error(`Unable to start queue ${queueId} after dequeue; queue does not exist`);\n      }\n    }\n  }\n\n  async onIdle(maxDuration?: number = 5000) {\n    if (typeof this.onIdlePromise === 'undefined') {\n      this.onIdlePromise = (async () => {\n        const timeout = Date.now() + maxDuration;\n        while (true) { // eslint-disable-line no-constant-condition\n          if (Date.now() > timeout) {\n            this.logger.warn(`Idle timeout after ${maxDuration}ms`);\n            break;\n          }\n          await this.dequeueQueue.onIdle();\n          for (const [queueId, queue] of this.queueMap) {\n            const interval = setInterval(() => {\n              this.logger.info(`Waiting on queue ${queueId}`);\n            }, 250);\n            await queue.onIdle();\n            clearInterval(interval);\n          }\n          const jobsInterval = setInterval(() => {\n            this.logger.info('Waiting on jobs');\n          }, 250);\n          const jobs = await dequeueFromDatabase();\n          clearInterval(jobsInterval);\n          if (jobs.length > 0) {\n            const interval = setInterval(() => {\n              this.logger.info('Waiting on dequeue');\n            }, 250);\n            await this.dequeue();\n            clearInterval(interval);\n            continue;\n          }\n          break;\n        }\n        delete this.onIdlePromise;\n        this.emit('idle');\n      })();\n    }\n    await this.onIdlePromise;\n  }\n\n  getAbortController(id:number, queueId:string) {\n    let queueAbortControllerMap = this.abortControllerMap.get(queueId);\n    if (typeof queueAbortControllerMap === 'undefined') {\n      queueAbortControllerMap = new Map();\n      this.abortControllerMap.set(queueId, queueAbortControllerMap);\n    }\n    const abortController = queueAbortControllerMap.get(id);\n    if (typeof abortController !== 'undefined') {\n      return abortController;\n    }\n    const newAbortController = new AbortController();\n    queueAbortControllerMap.set(id, newAbortController);\n    return newAbortController;\n  }\n\n  removeAbortController(id:number, queueId:string) {\n    const queueAbortControllerMap = this.abortControllerMap.get(queueId);\n    if (typeof queueAbortControllerMap === 'undefined') {\n      this.logger.warn(`Abort controller map for ${id} in queue ${queueId} does not exist`);\n      return;\n    }\n    const abortController = queueAbortControllerMap.get(id);\n    if (typeof abortController === 'undefined') {\n      this.logger.warn(`Abort controller for ${id} in queue ${queueId} does not exist`);\n      return;\n    }\n    queueAbortControllerMap.delete(id);\n    if (queueAbortControllerMap.size === 0) {\n      this.abortControllerMap.delete(queueId);\n    }\n  }\n\n  async runCleanup(id:number, queueId:string, args:Array<any>, type:string) {\n    this.emit('cleanupStart', { id });\n    const cleanup = this.cleanupMap.get(type);\n    if (typeof cleanup !== 'function') {\n      this.logger.warn(`No cleanup for job type ${type}`);\n      await removeCleanupFromDatabase(id);\n      this.jobIds.delete(id);\n      this.emit('cleanup', { id });\n      return;\n    }\n    const cleanupJob = await getCleanupFromDatabase(id);\n    const { data, startAfter } = typeof cleanupJob === 'undefined' ? { data: undefined, startAfter: 0 } : cleanupJob;\n    const delay = startAfter - Date.now();\n    if (delay > 0) {\n      this.logger.warn(`Delaying retry of ${type} job #${id} cleanup in queue ${queueId} by ${delay}ms to ${new Date(startAfter).toLocaleString()}`);\n      await new Promise((resolve) => setTimeout(resolve, delay));\n    }\n    try {\n      await cleanup(data, args, (path:Array<string>) => removePathFromCleanupDataInDatabase(id, path));\n    } catch (error) {\n      const attempt = await incrementCleanupAttemptInDatabase(id, queueId);\n      if (error.name === 'FatalCleanupError') {\n        this.logger.error(`Fatal error in ${type} job #${id} cleanup in queue ${queueId} attempt ${attempt}`);\n        this.emit('error', error);\n        await removeCleanupFromDatabase(id);\n        this.jobIds.delete(id);\n        this.emit('fatalCleanupError', { id, queueId });\n        return;\n      }\n      const retryCleanupDelay = await this.getRetryCleanupDelay(type, attempt, error);\n      if (retryCleanupDelay === false) {\n        this.logger.error(`Error in ${type} job #${id} cleanup in queue ${queueId} attempt ${attempt} with no additional attempts requested`);\n        this.emit('error', error);\n        await removeCleanupFromDatabase(id);\n        this.jobIds.delete(id);\n        this.emit('fatalCleanupError', { id, queueId });\n        return;\n      }\n      this.logger.error(`Error in ${type} job #${id} cleanup in queue ${queueId} attempt ${attempt}, retrying ${retryCleanupDelay > 0 ? `in ${retryCleanupDelay}ms'}` : 'immediately'}`);\n      this.emit('error', error);\n      if (retryCleanupDelay > 0) {\n        this.emit('retryCleanupDelay', { id, queueId, retryCleanupDelay });\n        const newStartAfter = Date.now() + retryCleanupDelay;\n        await markCleanupStartAfterInDatabase(id, newStartAfter);\n      }\n      await this.runCleanup(id, queueId, args, type);\n      return;\n    }\n    await removeCleanupFromDatabase(id);\n    this.emit('cleanup', { id });\n  }\n\n  startCleanup(id:number, queueId:string, args:Array<any>, type:string) {\n    this.logger.info(`Adding ${type} cleanup job #${id} to queue ${queueId}`);\n    this.jobIds.add(id);\n    const priority = PRIORITY_OFFSET + id;\n    const run = async () => {\n      this.logger.info(`Starting ${type} cleanup #${id} in queue ${queueId}`);\n      await this.runCleanup(id, queueId, args, type);\n      await markJobAbortedInDatabase(id);\n      this.removeAbortController(id, queueId);\n      this.jobIds.delete(id);\n    };\n    this.addToQueue(queueId, priority, run);\n  }\n\n  startErrorHandler(id:number, queueId:string, args:Array<any>, type:string, attempt: number, startAfter: number) {\n    this.logger.info(`Adding ${type} error handler job #${id} to queue ${queueId}`);\n    this.jobIds.add(id);\n    const priority = PRIORITY_OFFSET + id;\n    const abortController = this.getAbortController(id, queueId);\n    const run = async () => {\n      this.logger.info(`Starting ${type} error handler #${id} in queue ${queueId}`);\n      await this.runCleanup(id, queueId, args, type);\n      if (abortController.signal.aborted) {\n        await markJobAbortedInDatabase(id);\n        this.removeAbortController(id, queueId);\n        this.jobIds.delete(id);\n      } else {\n        await markJobPendingInDatabase(id);\n        this.logger.info(`Retrying ${type} job #${id} in queue ${queueId}`);\n        this.emit('retry', { id });\n        this.startJob(id, queueId, args, type, attempt + 1, startAfter);\n      }\n    };\n    this.addToQueue(queueId, priority, run);\n  }\n\n  async delayJobStart(id:number, queueId:string, type:string, signal: AbortSignal, startAfter: number) {\n    if (signal.aborted) {\n      throw new AbortError(`Queue ${queueId} was aborted`);\n    }\n    const duration = startAfter - Date.now();\n    if (duration > 0) {\n      this.logger.info(`Delaying start of ${type} job #${id} in queue ${queueId} by ${duration}ms`);\n      await new Promise((resolve, reject) => {\n        const timeout = setTimeout(() => {\n          signal.removeEventListener('abort', handleAbort);\n          resolve();\n        }, duration);\n        const handleAbort = () => {\n          clearTimeout(timeout);\n          signal.removeEventListener('abort', handleAbort);\n          reject(new AbortError(`Queue ${queueId} was aborted`));\n        };\n        signal.addEventListener('abort', handleAbort);\n      });\n    }\n  }\n\n  startJob(id:number, queueId:string, args:Array<any>, type:string, attempt:number, startAfter: number) {\n    this.logger.info(`Adding ${type} job #${id} to queue ${queueId}`);\n    this.jobIds.add(id);\n    const priority = PRIORITY_OFFSET - id;\n    const updateCleanupData = (data:Object) => updateCleanupValuesInDatabase(id, queueId, data);\n    const abortController = this.getAbortController(id, queueId);\n    const run = async () => {\n      if (abortController.signal.aborted) {\n        this.logger.warn(`Job #${id} in queue ${queueId} attempt ${attempt} was aborted before running`);\n        return;\n      }\n      this.logger.info(`Starting ${type} job #${id} in queue ${queueId} attempt ${attempt}`);\n      const handler = this.handlerMap.get(type);\n      if (typeof handler !== 'function') {\n        this.logger.warn(`No handler for job type ${type}`);\n        this.removeAbortController(id, queueId);\n        await markJobCompleteInDatabase(id);\n        this.emit('complete', { id });\n        this.jobIds.delete(id);\n        return;\n      }\n      // Mark as error in database so the job is cleaned up and retried if execution\n      // stops before job completion or error\n      await markJobErrorInDatabase(id);\n      try {\n        await this.delayJobStart(id, queueId, type, abortController.signal, startAfter);\n        await handler(args, abortController.signal, updateCleanupData);\n        if (abortController.signal.aborted) {\n          throw new AbortError(`Queue ${queueId} was aborted`);\n        }\n        this.removeAbortController(id, queueId);\n        await markJobCompleteInDatabase(id);\n        this.emit('complete', { id });\n        this.jobIds.delete(id);\n        return;\n      } catch (error) {\n        await incrementJobAttemptInDatabase(id);\n        if (error.name === 'AbortError') {\n          this.logger.error(`Abort error in ${type} job #${id} in queue ${queueId} attempt ${attempt}`);\n          this.emit('error', error);\n          await markJobCleanupInDatabase(id);\n          this.jobIds.delete(id);\n          this.startCleanup(id, queueId, args, type);\n          return;\n        }\n        if (abortController.signal.aborted) {\n          this.logger.error(`Abort signal following error in ${type} job #${id} in queue ${queueId} attempt ${attempt}`);\n          this.emit('error', error);\n          await markJobCleanupInDatabase(id);\n          this.jobIds.delete(id);\n          this.startCleanup(id, queueId, args, type);\n          return;\n        }\n        if (error.name === 'FatalError') {\n          this.logger.error(`Fatal error in ${type} job #${id} in queue ${queueId} attempt ${attempt}`);\n          this.emit('error', error);\n          this.emit('fatalError', { queueId });\n          this.jobIds.delete(id);\n          await this.abortQueue(queueId);\n          return;\n        }\n        const retryDelay = await this.getRetryJobDelay(type, attempt, error);\n        if (retryDelay === false) {\n          this.logger.error(`Error in ${type} job #${id} in queue ${queueId} attempt ${attempt} with no additional attempts requested`);\n          this.emit('error', error);\n          this.emit('fatalError', { queueId });\n          this.jobIds.delete(id);\n          await this.abortQueue(queueId);\n          return;\n        }\n        this.logger.error(`Error in ${type} job #${id} in queue ${queueId} attempt ${attempt}, retrying ${retryDelay > 0 ? `in ${retryDelay}ms'}` : 'immediately'}`);\n        this.emit('error', error);\n        if (retryDelay > 0) {\n          this.emit('retryDelay', { id, queueId, retryDelay });\n          const newStartAfter = Date.now() + retryDelay;\n          await markJobStartAfterInDatabase(id, newStartAfter);\n          this.jobIds.delete(id);\n          this.startErrorHandler(id, queueId, args, type, attempt, newStartAfter);\n        } else {\n          this.jobIds.delete(id);\n          this.startErrorHandler(id, queueId, args, type, attempt, startAfter);\n        }\n      }\n    };\n    this.addToQueue(queueId, priority, run);\n    this.emit('dequeue', { id });\n  }\n\n  async handlePortMessage(event:MessageEvent) {\n    if (!(event instanceof MessageEvent)) {\n      return;\n    }\n    const { data } = event;\n    if (!data || typeof data !== 'object') {\n      this.logger.warn('Invalid message data');\n      this.logger.warnObject(event);\n      return;\n    }\n    const { type, value } = data;\n    if (typeof type !== 'string') {\n      this.logger.warn('Unknown message type');\n      this.logger.warnObject(event);\n      return;\n    }\n    if (value === null || typeof value !== 'object') {\n      throw new Error('Message payload should be an object');\n    }\n    const { id } = value;\n    if (typeof id !== 'number') {\n      throw new Error('Message payload should include property id with type number');\n    }\n    switch (type) {\n      case 'clear':\n        try {\n          await this.clear();\n          this.emit('clearComplete', { id });\n        } catch (error) {\n          this.emit('clearError', { error, id });\n          this.logger.error('Unable to handle clear message');\n          this.emit('error', error);\n        }\n        break;\n      case 'abortQueue':\n        try {\n          const { queueId } = value;\n          if (typeof queueId !== 'string') {\n            throw new Error('Message abort queue payload should include property queueId with type string');\n          }\n          await this.abortQueue(queueId);\n          this.emit('abortQueueComplete', { id });\n        } catch (error) {\n          this.emit('abortQueueError', { error, id });\n          this.logger.error('Unable to handle abort queue message');\n          this.emit('error', error);\n        }\n        break;\n      case 'dequeue':\n        try {\n          await this.dequeue();\n          this.emit('dequeueComplete', { id });\n        } catch (error) {\n          this.emit('dequeueError', { error, id });\n          this.logger.error('Unable to handle dequeue message');\n          this.emit('error', error);\n        }\n        break;\n      case 'idle':\n        try {\n          const { maxDuration, start } = value;\n          if (typeof maxDuration !== 'number') {\n            throw new Error('Message idle payload should include property maxDuration with type number');\n          }\n          if (typeof start !== 'number') {\n            throw new Error('Message idle payload should include property start with type number');\n          }\n          await this.onIdle(maxDuration - (Date.now() - start));\n          this.emit('idleComplete', { id });\n        } catch (error) {\n          this.emit('idleError', { error, id });\n          this.logger.error('Unable to handle idle message');\n          this.emit('error', error);\n        }\n        break;\n      default:\n        this.logger.warn(`Unknown worker interface message type ${type}`);\n    }\n  }\n\n  listenForServiceWorkerInterface() {\n    let activeEmitCallback;\n    let handleJobAdd;\n    let handleJobDelete;\n    let handleJobUpdate;\n    let handleJobsClear;\n\n    self.addEventListener('message', (event:ExtendableMessageEvent) => {\n      if (!(event instanceof ExtendableMessageEvent)) {\n        return;\n      }\n      const { data } = event;\n      if (!data || typeof data !== 'object') {\n        return;\n      }\n      const { type } = data;\n      if (type !== 'BATTERY_QUEUE_WORKER_INITIALIZATION') {\n        return;\n      }\n      if (!Array.isArray(event.ports)) {\n        return;\n      }\n      const port = event.ports[0];\n      if (!(port instanceof MessagePort)) {\n        return;\n      }\n      this.emitCallbacks = this.emitCallbacks.filter((x) => x !== activeEmitCallback);\n      const previousPort = this.port;\n      if (previousPort instanceof MessagePort) {\n        this.logger.info('Closing previous worker interface');\n        previousPort.close();\n      }\n      if (typeof handleJobAdd === 'function') {\n        jobEmitter.removeListener('jobAdd', handleJobAdd);\n      }\n      if (typeof handleJobDelete === 'function') {\n        jobEmitter.removeListener('jobDelete', handleJobDelete);\n      }\n      if (typeof handleJobUpdate === 'function') {\n        jobEmitter.removeListener('jobUpdate', handleJobUpdate);\n      }\n      if (typeof handleJobsClear === 'function') {\n        jobEmitter.removeListener('jobsClear', handleJobsClear);\n      }\n      port.postMessage({ type: 'BATTERY_QUEUE_WORKER_CONFIRMATION' });\n      this.logger.info('Linked to worker interface');\n      port.onmessage = this.handlePortMessage.bind(this);\n      const emitCallback = (t:string, args:Array<any>) => {\n        port.postMessage({ type: t, args });\n      };\n      handleJobAdd = (...args:Array<any>) => {\n        port.postMessage({ type: 'jobAdd', args });\n      };\n      handleJobDelete = (...args:Array<any>) => {\n        port.postMessage({ type: 'jobDelete', args });\n      };\n      handleJobUpdate = (...args:Array<any>) => {\n        port.postMessage({ type: 'jobUpdate', args });\n      };\n      handleJobsClear = (...args:Array<any>) => {\n        port.postMessage({ type: 'jobsClear', args });\n      };\n      jobEmitter.addListener('jobAdd', handleJobAdd);\n      jobEmitter.addListener('jobDelete', handleJobDelete);\n      jobEmitter.addListener('jobUpdate', handleJobUpdate);\n      jobEmitter.addListener('jobsClear', handleJobsClear);\n      activeEmitCallback = emitCallback;\n      this.emitCallbacks.push(emitCallback);\n      this.port = port;\n    });\n    self.addEventListener('messageerror', (event:MessageEvent) => {\n      this.logger.error('Service worker interface message error');\n      this.logger.errorObject(event);\n    });\n  }\n}\n\n"],"file":"queue.js"}