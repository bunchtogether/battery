{"version":3,"sources":["../../src/queue.js"],"names":["CLEANUP_JOB_TYPE","BASE_PRIORITY","Math","floor","Number","MAX_SAFE_INTEGER","HIGH_PRIORITY_OFFSET","BatteryQueue","options","stopped","dequeueQueue","PQueue","concurrency","unloadQueue","handlerMap","Map","cleanupMap","durationEstimateHandlerMap","durationEstimateMap","durationEstimateUpdaterMap","retryJobDelayMap","retryCleanupDelayMap","queueCurrentJobTypeMap","queueMap","jobIds","Set","abortControllerMap","isClearing","isUnloading","ports","logger","addListener","error","errorStack","queueId","jobId","queueAbortControllerMap","get","abortController","abort","disableStartOnJob","didRequestJobAddDequeue","handleJobAdd","self","queueMicrotask","dequeue","jobEmitter","handleJobDelete","id","abortJob","handleJobUpdate","type","status","JOB_CLEANUP_AND_REMOVE_STATUS","JOB_CLEANUP_STATUS","didAbort","then","job","has","args","prioritize","startCleanup","catch","removeListener","keys","port","postMessage","queueIds","handleUnload","Error","retryJobDelayFunction","set","delete","attempt","result","retryDelayError","emit","retryCleanupDelayFunction","handler","cleanup","timeEstimationHandler","duration","pending","queueDurationEstimateMap","emitDurationEstimate","values","updateDurationEstimate","totalDuration","totalPending","getDurationEstimate","onIdle","start","priority","autoStart","func","queue","add","newQueue","on","setCurrentJobType","undefined","Promise","resolve","timeout","setTimeout","handleClearing","handleActive","clearTimeout","size","info","removeDurationEstimate","jobs","startJobs","lastJobId","addToQueue","bind","newJobs","Array","isArray","startAfter","pause","JOB_PENDING_STATUS","startJob","JOB_ERROR_STATUS","startErrorHandler","stopPromise","idlePromises","interval","setInterval","isPaused","clear","push","finally","clearInterval","all","maxDuration","onIdlePromise","Date","now","warn","jobsInterval","length","newAbortController","AbortController","cleanupJob","data","delay","toLocaleString","path","name","retryCleanupDelay","getRetryCleanupDelay","newStartAfter","runCleanup","run","getAbortController","signal","aborted","removeAbortController","AbortError","reject","removeEventListener","handleAbort","addEventListener","updateCleanupData","updateDuration","addDurationEstimate","durationEstimateHandler","durationEstimate","handlerDidRun","delayJobStart","shouldKeepJobInDatabase","estimatedToActualRatio","round","abortQueue","retryDelay","getRetryJobDelay","event","MessageEvent","portHandlers","warnObject","t","messageArgs","heartbeatExpiresTimeout","heartbeatExpiresTimestamp","unloadClient","removePort","requestId","requestArgs","stop","abortAndRemoveQueueJobsGreaterThanId","abortAndRemoveQueue","updateDurationEstimates","retryQueue","enableStartOnJob","getQueueIds","currentJobType","getCurrentJobType","runUnloadHandlers","handleHeartbeat","unloadData","handleJobsClear","localJobEmitter","onmessage","onmessageerror","close","tag","lastChance","waitUntil","ExtendableMessageEvent","MessagePort","_event","handlePortMessage","errorObject","EventEmitter"],"mappings":";;;;;;;AAEA;;AACA;;AAEA;;AAEA;;AAiCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEO,IAAMA,gBAAgB,GAAG,kBAAzB;;AAEP,IAAMC,aAAa,GAAGC,IAAI,CAACC,KAAL,CAAWC,MAAM,CAACC,gBAAP,GAA0B,CAArC,CAAtB;AACA,IAAMC,oBAAoB,GAAGJ,IAAI,CAACC,KAAL,CAAWC,MAAM,CAACC,gBAAP,GAA0B,CAArC,CAA7B;;IAaqBE,Y;;;;;AAmCnB,0BAAoC;AAAA;;AAAA,QAAxBC,OAAwB,uEAAJ,EAAI;;AAAA;;AAClC;AACA,UAAKC,OAAL,GAAe,KAAf;AACA,UAAKC,YAAL,GAAoB,IAAIC,eAAJ,CAAW;AAAEC,MAAAA,WAAW,EAAE;AAAf,KAAX,CAApB;AACA,UAAKC,WAAL,GAAmB,IAAIF,eAAJ,CAAW;AAAEC,MAAAA,WAAW,EAAE;AAAf,KAAX,CAAnB;AACA,UAAKE,UAAL,GAAkB,IAAIC,GAAJ,EAAlB;AACA,UAAKC,UAAL,GAAkB,IAAID,GAAJ,EAAlB;AACA,UAAKE,0BAAL,GAAkC,IAAIF,GAAJ,EAAlC;AACA,UAAKG,mBAAL,GAA2B,IAAIH,GAAJ,EAA3B;AACA,UAAKI,0BAAL,GAAkC,IAAIJ,GAAJ,EAAlC;AACA,UAAKK,gBAAL,GAAwB,IAAIL,GAAJ,EAAxB;AACA,UAAKM,oBAAL,GAA4B,IAAIN,GAAJ,EAA5B;AACA,UAAKO,sBAAL,GAA8B,IAAIP,GAAJ,EAA9B;AACA,UAAKQ,QAAL,GAAgB,IAAIR,GAAJ,EAAhB;AACA,UAAKS,MAAL,GAAc,IAAIC,GAAJ,EAAd;AACA,UAAKN,0BAAL,GAAkC,IAAIJ,GAAJ,EAAlC;AACA,UAAKW,kBAAL,GAA0B,IAAIX,GAAJ,EAA1B;AACA,UAAKY,UAAL,GAAkB,KAAlB;AACA,UAAKC,WAAL,GAAmB,KAAnB;AACA,UAAKC,KAAL,GAAa,IAAId,GAAJ,EAAb;AACA,UAAKe,MAAL,GAActB,OAAO,CAACsB,MAAR,IAAkB,qBAAW,eAAX,CAAhC;;AACA,UAAKC,WAAL,CAAiB,OAAjB,EAA0B,UAACC,KAAD,EAAW;AACnC,YAAKF,MAAL,CAAYG,UAAZ,CAAuBD,KAAvB;AACD,KAFD;;AArBkC;AAwBnC;;;;WAED,kBAASE,OAAT,EAAyBC,KAAzB,EAAuC;AACrC,UAAMC,uBAAuB,GAAG,KAAKV,kBAAL,CAAwBW,GAAxB,CAA4BH,OAA5B,CAAhC;;AACA,UAAI,OAAOE,uBAAP,KAAmC,WAAvC,EAAoD;AAClD,YAAME,eAAe,GAAGF,uBAAuB,CAACC,GAAxB,CAA4BF,KAA5B,CAAxB;;AACA,YAAI,OAAOG,eAAP,KAA2B,WAA/B,EAA4C;AAC1CA,UAAAA,eAAe,CAACC,KAAhB;AACA,iBAAO,IAAP;AACD;AACF;;AACD,aAAO,KAAP;AACD;;;WAED,4BAAmB;AAAA;;AACjB,WAAKC,iBAAL,GADiB,CACS;;AAC1B,UAAIC,uBAAuB,GAAG,KAA9B;;AACA,UAAMC,YAAY,GAAG,SAAfA,YAAe,GAAM;AACzB,YAAID,uBAAJ,EAA6B;AAC3B;AACD;;AACDA,QAAAA,uBAAuB,GAAG,IAA1B;AACAE,QAAAA,IAAI,CAACC,cAAL,CAAoB,YAAM;AACxBH,UAAAA,uBAAuB,GAAG,KAA1B;;AACA,UAAA,MAAI,CAACI,OAAL;AACD,SAHD;AAID,OATD;;AAUAC,2BAAWf,WAAX,CAAuB,QAAvB,EAAiCW,YAAjC;;AACA,WAAKA,YAAL,GAAoBA,YAApB;;AACA,UAAMK,eAAe,GAAG,SAAlBA,eAAkB,CAACC,EAAD,EAAYd,OAAZ,EAA+B;AACrD,QAAA,MAAI,CAACe,QAAL,CAAcf,OAAd,EAAuBc,EAAvB;AACD,OAFD;;AAGAF,2BAAWf,WAAX,CAAuB,WAAvB,EAAoCgB,eAApC;;AACA,WAAKA,eAAL,GAAuBA,eAAvB;;AAEA,UAAMG,eAAe,GAAG,SAAlBA,eAAkB,CAACF,EAAD,EAAYd,OAAZ,EAA4BiB,IAA5B,EAAyCC,MAAzC,EAA2D;AACjF,YAAIA,MAAM,KAAKC,uCAAX,IAA4CD,MAAM,KAAKE,4BAA3D,EAA+E;AAC7E;AACD;;AACD,YAAMC,QAAQ,GAAG,MAAI,CAACN,QAAL,CAAcf,OAAd,EAAuBc,EAAvB,CAAjB;;AACA,YAAIO,QAAJ,EAAc;AACZ;AACD;;AACD,0CAAmBP,EAAnB,EAAuBQ,IAAvB,CAA4B,UAACC,GAAD,EAAoB;AAC9C,cAAI,OAAOA,GAAP,KAAe,WAAnB,EAAgC;AAC9B,YAAA,MAAI,CAAC3B,MAAL,CAAYE,KAAZ,wCAAkDmB,IAAlD,mBAA+DH,EAA/D,uBAA8Ed,OAA9E;;AACA;AACD;;AACD,cAAI,MAAI,CAACV,MAAL,CAAYkC,GAAZ,CAAgBV,EAAhB,CAAJ,EAAyB;AACvB;AACD;;AACD,cAAQW,IAAR,GAA6BF,GAA7B,CAAQE,IAAR;AAAA,cAAcC,UAAd,GAA6BH,GAA7B,CAAcG,UAAd;;AACA,UAAA,MAAI,CAACC,YAAL,CAAkBb,EAAlB,EAAsBd,OAAtB,EAA+ByB,IAA/B,EAAqCR,IAArC,EAA2C,IAA3C,EAAiDS,UAAjD;AACD,SAVD,EAUGE,KAVH,CAUS,UAAC9B,KAAD,EAAW;AAClB,UAAA,MAAI,CAACF,MAAL,CAAYE,KAAZ,gDAA0DmB,IAA1D,mBAAuEH,EAAvE,uBAAsFd,OAAtF;;AACA,UAAA,MAAI,CAACJ,MAAL,CAAYG,UAAZ,CAAuBD,KAAvB;AACD,SAbD;AAcD,OAtBD;;AAuBAc,2BAAWf,WAAX,CAAuB,WAAvB,EAAoCmB,eAApC;;AACA,WAAKA,eAAL,GAAuBA,eAAvB;AACD;;;WAED,6BAAoB;AAClB,UAAMR,YAAY,GAAG,KAAKA,YAA1B;;AACA,UAAI,OAAOA,YAAP,KAAwB,UAA5B,EAAwC;AACtCI,6BAAWiB,cAAX,CAA0B,QAA1B,EAAoCrB,YAApC;;AACA,eAAO,KAAKA,YAAZ;AACD;;AACD,UAAMQ,eAAe,GAAG,KAAKA,eAA7B;;AACA,UAAI,OAAOA,eAAP,KAA2B,UAA/B,EAA2C;AACzCJ,6BAAWiB,cAAX,CAA0B,WAA1B,EAAuCb,eAAvC;;AACA,eAAO,KAAKA,eAAZ;AACD;;AACD,UAAMH,eAAe,GAAG,KAAKA,eAA7B;;AACA,UAAI,OAAOA,eAAP,KAA2B,UAA/B,EAA2C;AACzCD,6BAAWiB,cAAX,CAA0B,WAA1B,EAAuChB,eAAvC;;AACA,eAAO,KAAKA,eAAZ;AACD;AACF;;;WAED,cAAKI,IAAL,EAAsC;AAAA;;AAAA,wCAAjBQ,IAAiB;AAAjBA,QAAAA,IAAiB;AAAA;;AAAA,iDACjB,KAAK9B,KAAL,CAAWmC,IAAX,EADiB;AAAA;;AAAA;AACpC,4DAAsC;AAAA,cAA3BC,IAA2B;AACpCA,UAAAA,IAAI,CAACC,WAAL,CAAiB;AAAEf,YAAAA,IAAI,EAAJA,IAAF;AAAQQ,YAAAA,IAAI,EAAJA;AAAR,WAAjB;AACD;AAHmC;AAAA;AAAA;AAAA;AAAA;;AAIpC,4GAAkBR,IAAlB,SAA2BQ,IAA3B;AACD;;;;2CAED,aAAoB;AAClB,cAAM,KAAKd,OAAL,EAAN;AACA,YAAMsB,QAAoB,GAAG,IAAI1C,GAAJ,CAAQ,KAAKF,QAAL,CAAcyC,IAAd,EAAR,CAA7B;AACA,eAAOG,QAAP;AACD,O;;;;;;;;;;WAED,mBAAUC,YAAV,EAAuC;AACrC,UAAI,OAAO,KAAKA,YAAZ,KAA6B,UAAjC,EAA6C;AAC3C,cAAM,IAAIC,KAAJ,CAAU,+BAAV,CAAN;AACD;;AACD,WAAKD,YAAL,GAAoBA,YAApB;AACD;;;WAED,wBAAe;AACb,UAAI,OAAO,KAAKA,YAAZ,KAA6B,UAAjC,EAA6C;AAC3C,cAAM,IAAIC,KAAJ,CAAU,+BAAV,CAAN;AACD;;AACD,aAAO,KAAKD,YAAZ;AACD;;;WAED,0BAAiBjB,IAAjB,EAA8BmB,qBAA9B,EAAwE;AACtE,UAAI,KAAKlD,gBAAL,CAAsBsC,GAAtB,CAA0BP,IAA1B,CAAJ,EAAqC;AACnC,cAAM,IAAIkB,KAAJ,8CAA+ClB,IAA/C,uBAAN;AACD;;AACD,WAAK/B,gBAAL,CAAsBmD,GAAtB,CAA0BpB,IAA1B,EAAgCmB,qBAAhC;AACD;;;WAED,6BAAoBnB,IAApB,EAAiC;AAC/B,UAAI,CAAC,KAAK/B,gBAAL,CAAsBsC,GAAtB,CAA0BP,IAA1B,CAAL,EAAsC;AACpC,cAAM,IAAIkB,KAAJ,8CAA+ClB,IAA/C,uBAAN;AACD;;AACD,WAAK/B,gBAAL,CAAsBoD,MAAtB,CAA6BrB,IAA7B;AACD;;;;gDAED,WAAuBA,IAAvB,EAAoCsB,OAApC,EAAqDzC,KAArD,EAAkE;AAChE,YAAMsC,qBAAqB,GAAG,KAAKlD,gBAAL,CAAsBiB,GAAtB,CAA0Bc,IAA1B,CAA9B;;AACA,YAAI,OAAOmB,qBAAP,KAAiC,UAArC,EAAiD;AAC/C,iBAAO,KAAP;AACD;;AACD,YAAII,MAAM,GAAG,KAAb;;AACA,YAAI;AACFA,UAAAA,MAAM,SAASJ,qBAAqB,CAACG,OAAD,EAAUzC,KAAV,CAApC;AACD,SAFD,CAEE,OAAO2C,eAAP,EAAwB;AACxB,eAAK7C,MAAL,CAAYE,KAAZ,uDAAgEmB,IAAhE,2BAAoFsB,OAApF;AACA,eAAKG,IAAL,CAAU,OAAV,EAAmBD,eAAnB;AACA,iBAAO,KAAP;AACD;;AACD,YAAI,OAAOD,MAAP,KAAkB,QAAlB,IAA8BA,MAAM,KAAK,KAA7C,EAAoD;AAClD,gBAAM,IAAIL,KAAJ,+CAAgDlB,IAAhD,8EAAN;AACD;;AACD,eAAOuB,MAAP;AACD,O;;;;;;;;;;WAED,8BAAqBvB,IAArB,EAAkC0B,yBAAlC,EAAgF;AAC9E,UAAI,KAAKxD,oBAAL,CAA0BqC,GAA1B,CAA8BP,IAA9B,CAAJ,EAAyC;AACvC,cAAM,IAAIkB,KAAJ,kDAAmDlB,IAAnD,uBAAN;AACD;;AACD,WAAK9B,oBAAL,CAA0BkD,GAA1B,CAA8BpB,IAA9B,EAAoC0B,yBAApC;AACD;;;WAED,iCAAwB1B,IAAxB,EAAqC;AACnC,UAAI,CAAC,KAAK9B,oBAAL,CAA0BqC,GAA1B,CAA8BP,IAA9B,CAAL,EAA0C;AACxC,cAAM,IAAIkB,KAAJ,kDAAmDlB,IAAnD,uBAAN;AACD;;AACD,WAAK9B,oBAAL,CAA0BmD,MAA1B,CAAiCrB,IAAjC;AACD;;;;oDAED,WAA2BA,IAA3B,EAAwCsB,OAAxC,EAAyDzC,KAAzD,EAAsE;AACpE,YAAM6C,yBAAyB,GAAG,KAAKxD,oBAAL,CAA0BgB,GAA1B,CAA8Bc,IAA9B,CAAlC;;AACA,YAAI,OAAO0B,yBAAP,KAAqC,UAAzC,EAAqD;AACnD,iBAAO,KAAP;AACD;;AACD,YAAIH,MAAM,GAAG,KAAb;;AACA,YAAI;AACFA,UAAAA,MAAM,SAASG,yBAAyB,CAACJ,OAAD,EAAUzC,KAAV,CAAxC;AACD,SAFD,CAEE,OAAO2C,eAAP,EAAwB;AACxB,eAAK7C,MAAL,CAAYE,KAAZ,2DAAoEmB,IAApE,2BAAwFsB,OAAxF;AACA,eAAKG,IAAL,CAAU,OAAV,EAAmBD,eAAnB;AACA,iBAAO,KAAP;AACD;;AACD,YAAI,OAAOD,MAAP,KAAkB,QAAlB,IAA8BA,MAAM,KAAK,KAA7C,EAAoD;AAClD,gBAAM,IAAIL,KAAJ,mDAAoDlB,IAApD,8EAAN;AACD;;AACD,eAAOuB,MAAP;AACD,O;;;;;;;;;;WAED,oBAAWvB,IAAX,EAAwB2B,OAAxB,EAAkD;AAChD,UAAI,KAAKhE,UAAL,CAAgB4C,GAAhB,CAAoBP,IAApB,CAAJ,EAA+B;AAC7B,cAAM,IAAIkB,KAAJ,8BAA+BlB,IAA/B,uBAAN;AACD;;AACD,WAAKrC,UAAL,CAAgByD,GAAhB,CAAoBpB,IAApB,EAA0B2B,OAA1B;AACD;;;WAED,uBAAc3B,IAAd,EAA2B;AACzB,UAAI,CAAC,KAAKrC,UAAL,CAAgB4C,GAAhB,CAAoBP,IAApB,CAAL,EAAgC;AAC9B,cAAM,IAAIkB,KAAJ,8BAA+BlB,IAA/B,uBAAN;AACD;;AACD,WAAKrC,UAAL,CAAgB0D,MAAhB,CAAuBrB,IAAvB;AACD;;;WAED,oBAAWA,IAAX,EAAwB4B,OAAxB,EAAkD;AAChD,UAAI,KAAK/D,UAAL,CAAgB0C,GAAhB,CAAoBP,IAApB,CAAJ,EAA+B;AAC7B,cAAM,IAAIkB,KAAJ,8BAA+BlB,IAA/B,uBAAN;AACD;;AACD,WAAKnC,UAAL,CAAgBuD,GAAhB,CAAoBpB,IAApB,EAA0B4B,OAA1B;AACD;;;WAED,uBAAc5B,IAAd,EAA2B;AACzB,UAAI,CAAC,KAAKnC,UAAL,CAAgB0C,GAAhB,CAAoBP,IAApB,CAAL,EAAgC;AAC9B,cAAM,IAAIkB,KAAJ,8BAA+BlB,IAA/B,uBAAN;AACD;;AACD,WAAKnC,UAAL,CAAgBwD,MAAhB,CAAuBrB,IAAvB;AACD;;;WAED,oCAA2BA,IAA3B,EAAwC6B,qBAAxC,EAAyF;AACvF,UAAI,KAAK/D,0BAAL,CAAgCyC,GAAhC,CAAoCP,IAApC,CAAJ,EAA+C;AAC7C,cAAM,IAAIkB,KAAJ,8CAA+ClB,IAA/C,uBAAN;AACD;;AACD,WAAKlC,0BAAL,CAAgCsD,GAAhC,CAAoCpB,IAApC,EAA0C6B,qBAA1C;AACD;;;WAED,uCAA8B7B,IAA9B,EAA2C;AACzC,UAAI,CAAC,KAAKlC,0BAAL,CAAgCyC,GAAhC,CAAoCP,IAApC,CAAL,EAAgD;AAC9C,cAAM,IAAIkB,KAAJ,8CAA+ClB,IAA/C,uBAAN;AACD;;AACD,WAAKlC,0BAAL,CAAgCuD,MAAhC,CAAuCrB,IAAvC;AACD;;;WAED,6BAAoBjB,OAApB,EAAoCC,KAApC,EAAkD8C,QAAlD,EAAmEC,OAAnE,EAAmF;AACjF,UAAMC,wBAAwB,GAAG,KAAKjE,mBAAL,CAAyBmB,GAAzB,CAA6BH,OAA7B,CAAjC;;AACA,UAAI,OAAOiD,wBAAP,KAAoC,WAAxC,EAAqD;AACnD,aAAKjE,mBAAL,CAAyBqD,GAAzB,CAA6BrC,OAA7B,EAAsC,IAAInB,GAAJ,CAAQ,CAAC,CAACoB,KAAD,EAAQ,CAAC8C,QAAD,EAAWC,OAAX,CAAR,CAAD,CAAR,CAAtC;AACA,aAAKE,oBAAL,CAA0BlD,OAA1B;AACA;AACD;;AACDiD,MAAAA,wBAAwB,CAACZ,GAAzB,CAA6BpC,KAA7B,EAAoC,CAAC8C,QAAD,EAAWC,OAAX,CAApC;AACA,WAAKE,oBAAL,CAA0BlD,OAA1B;AACD;;;WAED,gCAAuBA,OAAvB,EAAuCC,KAAvC,EAAsD;AACpD,UAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC7B,aAAKjB,mBAAL,CAAyBsD,MAAzB,CAAgCtC,OAAhC;AACA,aAAKkD,oBAAL,CAA0BlD,OAA1B;AACA;AACD;;AACD,UAAMiD,wBAAwB,GAAG,KAAKjE,mBAAL,CAAyBmB,GAAzB,CAA6BH,OAA7B,CAAjC;;AACA,UAAI,OAAOiD,wBAAP,KAAoC,WAAxC,EAAqD;AACnD,aAAKC,oBAAL,CAA0BlD,OAA1B;AACA;AACD;;AACDiD,MAAAA,wBAAwB,CAACX,MAAzB,CAAgCrC,KAAhC;AACA,WAAKiD,oBAAL,CAA0BlD,OAA1B;AACD;;;WAED,mCAA0B;AAAA,kDACa,KAAKf,0BAAL,CAAgCkE,MAAhC,EADb;AAAA;;AAAA;AACxB,+DAA+E;AAAA,cAApEC,sBAAoE;AAC7EA,UAAAA,sBAAsB;AACvB;AAHuB;AAAA;AAAA;AAAA;AAAA;AAIzB;;;WAED,6BAAoBpD,OAApB,EAAoC;AAClC,UAAMiD,wBAAwB,GAAG,KAAKjE,mBAAL,CAAyBmB,GAAzB,CAA6BH,OAA7B,CAAjC;AACA,UAAIqD,aAAa,GAAG,CAApB;AACA,UAAIC,YAAY,GAAG,CAAnB;;AACA,UAAI,OAAOL,wBAAP,KAAoC,WAAxC,EAAqD;AACnD,eAAO,CAACI,aAAD,EAAgBC,YAAhB,CAAP;AACD;;AANiC,kDAOAL,wBAAwB,CAACE,MAAzB,EAPA;AAAA;;AAAA;AAOlC,+DAAqE;AAAA;AAAA,cAAzDJ,QAAyD;AAAA,cAA/CC,OAA+C;;AACnEK,UAAAA,aAAa,IAAIN,QAAjB;AACAO,UAAAA,YAAY,IAAIN,OAAhB;AACD;AAViC;AAAA;AAAA;AAAA;AAAA;;AAWlC,aAAO,CAACK,aAAD,EAAgBC,YAAhB,CAAP;AACD;;;WAED,8BAAqBtD,OAArB,EAAqC;AACnC,kCAAsC,KAAKuD,mBAAL,CAAyBvD,OAAzB,CAAtC;AAAA;AAAA,UAAOqD,aAAP;AAAA,UAAsBC,YAAtB;;AACA,WAAKZ,IAAL,CAAU,eAAV,EAA2B1C,OAA3B,EAAoCqD,aAApC,EAAmDC,YAAnD;AACD;;;WAED,2BAAkBtD,OAAlB,EAAkCiB,IAAlC,EAAuD;AACrD,UAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;AAC5B,aAAK7B,sBAAL,CAA4BiD,GAA5B,CAAgCrC,OAAhC,EAAyCiB,IAAzC;AACD,OAFD,MAEO;AACL,aAAK7B,sBAAL,CAA4BkD,MAA5B,CAAmCtC,OAAnC;AACD;;AACD,WAAK0C,IAAL,CAAU,cAAV,EAA0B1C,OAA1B,EAAmCiB,IAAnC;AACD;;;WAED,2BAAkBjB,OAAlB,EAAkC;AAChC,aAAO,KAAKZ,sBAAL,CAA4Be,GAA5B,CAAgCH,OAAhC,CAAP;AACD;;;;qCAED,aAAc;AACZ,aAAKP,UAAL,GAAkB,IAAlB;AACA,cAAM,KAAK+D,MAAL,EAAN;AACA,aAAKd,IAAL,CAAU,UAAV;AACA,cAAM,8BAAN;AACA,aAAKlE,YAAL,CAAkBiF,KAAlB;AACA,aAAKhE,UAAL,GAAkB,KAAlB;AACD,O;;;;;;;;;;WAED,oBAAWO,OAAX,EAA2B0D,QAA3B,EAA6CC,SAA7C,EAAiEC,IAAjE,EAA4F;AAAA;;AAC1F,UAAI,KAAKrF,OAAT,EAAkB;AAChB;AACD;;AACD,UAAMsF,KAAK,GAAG,KAAKxE,QAAL,CAAcc,GAAd,CAAkBH,OAAlB,CAAd;;AACA,UAAI,OAAO6D,KAAP,KAAiB,WAArB,EAAkC;AAChCA,QAAAA,KAAK,CAACC,GAAN,CAAUF,IAAV,EAAgB;AAAEF,UAAAA,QAAQ,EAARA;AAAF,SAAhB;AACA;AACD;;AACD,UAAMK,QAAQ,GAAG,IAAItF,eAAJ,CAAW;AAAEC,QAAAA,WAAW,EAAE,CAAf;AAAkBiF,QAAAA,SAAS,EAATA;AAAlB,OAAX,CAAjB;AACA,WAAKtE,QAAL,CAAcgD,GAAd,CAAkBrC,OAAlB,EAA2B+D,QAA3B;AACAA,MAAAA,QAAQ,CAACD,GAAT,CAAaF,IAAb,EAAmB;AAAEF,QAAAA,QAAQ,EAARA;AAAF,OAAnB;AACAK,MAAAA,QAAQ,CAACC,EAAT,CAAY,MAAZ,iCAAoB,aAAY;AAC9B,QAAA,MAAI,CAACC,iBAAL,CAAuBjE,OAAvB,EAAgCkE,SAAhC;;AACA,YAAI,CAAC,MAAI,CAACzE,UAAV,EAAsB;AACpB,gBAAM,IAAI0E,OAAJ,CAAY,UAACC,OAAD,EAAa;AAC7B,gBAAMC,OAAO,GAAGC,UAAU,CAAC,YAAM;AAC/B,cAAA,MAAI,CAACzC,cAAL,CAAoB,UAApB,EAAgC0C,cAAhC;;AACAR,cAAAA,QAAQ,CAAClC,cAAT,CAAwB,QAAxB,EAAkC2C,YAAlC;AACAJ,cAAAA,OAAO;AACR,aAJyB,EAIvB,IAJuB,CAA1B;;AAKA,gBAAMG,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AAC3BE,cAAAA,YAAY,CAACJ,OAAD,CAAZ;;AACA,cAAA,MAAI,CAACxC,cAAL,CAAoB,UAApB,EAAgC0C,cAAhC;;AACAR,cAAAA,QAAQ,CAAClC,cAAT,CAAwB,QAAxB,EAAkC2C,YAAlC;AACAJ,cAAAA,OAAO;AACR,aALD;;AAMA,gBAAMI,YAAY,GAAG,SAAfA,YAAe,GAAM;AACzBC,cAAAA,YAAY,CAACJ,OAAD,CAAZ;;AACA,cAAA,MAAI,CAACxC,cAAL,CAAoB,UAApB,EAAgC0C,cAAhC;;AACAR,cAAAA,QAAQ,CAAClC,cAAT,CAAwB,QAAxB,EAAkC2C,YAAlC;AACAJ,cAAAA,OAAO;AACR,aALD;;AAMA,YAAA,MAAI,CAACvE,WAAL,CAAiB,UAAjB,EAA6B0E,cAA7B;;AACAR,YAAAA,QAAQ,CAAClE,WAAT,CAAqB,QAArB,EAA+B2E,YAA/B;AACD,WApBK,CAAN;AAqBD;;AACD,YAAIT,QAAQ,CAACf,OAAT,GAAmB,CAAnB,IAAwBe,QAAQ,CAACW,IAAT,GAAgB,CAA5C,EAA+C;AAC7C;AACD;;AACD,QAAA,MAAI,CAACrF,QAAL,CAAciD,MAAd,CAAqBtC,OAArB;;AACA,QAAA,MAAI,CAAC0C,IAAL,CAAU,eAAV,EAA2B1C,OAA3B;AACD,OA9BD;AA+BA,WAAK0C,IAAL,CAAU,aAAV,EAAyB1C,OAAzB;AACD;;;;0CAED,WAAiBA,OAAjB,EAAkC;AAChC,aAAKJ,MAAL,CAAY+E,IAAZ,0BAAmC3E,OAAnC;AACA,aAAK4E,sBAAL,CAA4B5E,OAA5B,EAFgC,CAGhC;;AACA,YAAME,uBAAuB,GAAG,KAAKV,kBAAL,CAAwBW,GAAxB,CAA4BH,OAA5B,CAAhC;;AACA,YAAI,OAAOE,uBAAP,KAAmC,WAAvC,EAAoD;AAAA,sDACpBA,uBAAuB,CAACiD,MAAxB,EADoB;AAAA;;AAAA;AAClD,mEAAgE;AAAA,kBAArD/C,eAAqD;AAC9DA,cAAAA,eAAe,CAACC,KAAhB;AACD;AAHiD;AAAA;AAAA;AAAA;AAAA;AAInD,SAT+B,CAUhC;AACA;AACA;AACA;AACA;;;AACA,YAAMwE,IAAI,SAAS,6CAA8B7E,OAA9B,CAAnB;AACA,cAAM,KAAK8E,SAAL,CAAeD,IAAf,CAAN;AACD,O;;;;;;;;;;;0CAED,WAAiB7E,OAAjB,EAAkC;AAAA;;AAChC,aAAKJ,MAAL,CAAY+E,IAAZ,0BAAmC3E,OAAnC;AACA,YAAM+E,SAAS,SAAS,mDAAoC/E,OAApC,CAAxB;AACA,YAAM0D,QAAQ,GAAG3F,aAAa,GAAGgH,SAAhB,GAA4B,GAA7C;AACA,aAAKC,UAAL,CAAgBhF,OAAhB,EAAyB0D,QAAzB,EAAmC,IAAnC,iCAAyC,aAAY;AACnD;AACA;AACA;AACA;AACA;AACA;AACA,cAAMmB,IAAI,SAAS,0CAA2B7E,OAA3B,CAAnB;AACA,gBAAM,MAAI,CAAC8E,SAAL,CAAeD,IAAf,CAAN;AACD,SATD;AAUD,O;;;;;;;;;;;mDAED,WAA0B7E,OAA1B,EAA2C;AACzC,aAAKJ,MAAL,CAAY+E,IAAZ,uCAAgD3E,OAAhD;AACA,aAAK4E,sBAAL,CAA4B5E,OAA5B,EAFyC,CAGzC;;AACA,YAAME,uBAAuB,GAAG,KAAKV,kBAAL,CAAwBW,GAAxB,CAA4BH,OAA5B,CAAhC;;AACA,YAAI,OAAOE,uBAAP,KAAmC,WAAvC,EAAoD;AAAA,sDACpBA,uBAAuB,CAACiD,MAAxB,EADoB;AAAA;;AAAA;AAClD,mEAAgE;AAAA,kBAArD/C,eAAqD;AAC9DA,cAAAA,eAAe,CAACC,KAAhB;AACD;AAHiD;AAAA;AAAA;AAAA;AAAA;AAInD,SATwC,CAUzC;AACA;AACA;AACA;AACA;AACA;;;AACA,YAAMwE,IAAI,SAAS,sDAAuC7E,OAAvC,CAAnB;AACA,cAAM,KAAK8E,SAAL,CAAeD,IAAf,CAAN;AACA,aAAKnC,IAAL,CAAU,qBAAV,EAAiC1C,OAAjC;AACD,O;;;;;;;;;;;oEAED,WAA2CA,OAA3C,EAA4Dc,EAA5D,EAAwE;AACtE,aAAKlB,MAAL,CAAY+E,IAAZ,2DAAoE7D,EAApE,uBAAmFd,OAAnF,GADsE,CAEtE;;AACA,YAAME,uBAAuB,GAAG,KAAKV,kBAAL,CAAwBW,GAAxB,CAA4BH,OAA5B,CAAhC;;AACA,YAAI,OAAOE,uBAAP,KAAmC,WAAvC,EAAoD;AAAA,sDACXA,uBADW;AAAA;;AAAA;AAClD,mEAAgE;AAAA;AAAA,kBAApDD,KAAoD;AAAA,kBAA7CG,eAA6C;;AAC9D,kBAAIH,KAAK,GAAGa,EAAZ,EAAgB;AACd,qBAAK8D,sBAAL,CAA4B5E,OAA5B,EAAqCC,KAArC;AACAG,gBAAAA,eAAe,CAACC,KAAhB;AACD;AACF;AANiD;AAAA;AAAA;AAAA;AAAA;AAOnD,SAXqE,CAYtE;AACA;AACA;AACA;AACA;AACA;;;AACA,YAAMwE,IAAI,SAAS,oEAAqD7E,OAArD,EAA8Dc,EAA9D,CAAnB;AACA,cAAM,KAAKgE,SAAL,CAAeD,IAAf,CAAN;AACA,aAAKnC,IAAL,CAAU,yBAAV,EAAqC1C,OAArC,EAA8Cc,EAA9C;AACD,O;;;;;;;;;;;uCAED,aAA8B;AAC5B,YAAI,KAAKvC,OAAT,EAAkB;AAChB;AACD;;AACD,YAAI,KAAKC,YAAL,CAAkBkG,IAAlB,KAA2B,CAA/B,EAAkC;AAChC;AACA,eAAKlG,YAAL,CAAkBsF,GAAlB,CAAsB,KAAKgB,SAAL,CAAeG,IAAf,CAAoB,IAApB,CAAtB;AACD;;AACD,cAAM,KAAKzG,YAAL,CAAkBgF,MAAlB,EAAN;AACD,O;;;;;;;;;;;yCAED,WAAgB0B,OAAhB,EAAqC;AAAE;AACrC,YAAML,IAAI,GAAGM,KAAK,CAACC,OAAN,CAAcF,OAAd,IAAyBA,OAAzB,SAAyC,2DAA6B,KAAK5F,MAAL,CAAYwC,IAAZ,EAA7B,EAAtD;AACA,YAAMG,QAAQ,GAAG,IAAI1C,GAAJ,EAAjB;;AAFmC,oDAGgDsF,IAHhD;AAAA;;AAAA;AAGnC,iEAAyF;AAAA;AAAA,gBAA5E/D,EAA4E,gBAA5EA,EAA4E;AAAA,gBAAxEd,OAAwE,gBAAxEA,OAAwE;AAAA,gBAA/DyB,IAA+D,gBAA/DA,IAA+D;AAAA,gBAAzDR,IAAyD,gBAAzDA,IAAyD;AAAA,gBAAnDC,MAAmD,gBAAnDA,MAAmD;AAAA,gBAA3CqB,OAA2C,gBAA3CA,OAA2C;AAAA,gBAAlC8C,UAAkC,gBAAlCA,UAAkC;AAAA,gBAAtB3D,UAAsB,gBAAtBA,UAAsB;;AACvF,gBAAI,KAAKpC,MAAL,CAAYkC,GAAZ,CAAgBV,EAAhB,CAAJ,EAAyB;AACvB;AACD,aAHsF,CAIvF;;;AACA,gBAAI,CAACmB,QAAQ,CAACT,GAAT,CAAaxB,OAAb,CAAL,EAA4B;AAC1B,kBAAM6D,KAAK,GAAG,KAAKxE,QAAL,CAAcc,GAAd,CAAkBH,OAAlB,CAAd;;AACA,kBAAI,OAAO6D,KAAP,KAAiB,WAArB,EAAkC;AAChCA,gBAAAA,KAAK,CAACyB,KAAN;AACD;;AACDrD,cAAAA,QAAQ,CAAC6B,GAAT,CAAa9D,OAAb;AACD;;AACD,gBAAIkB,MAAM,KAAKqE,4BAAf,EAAmC;AACjC,mBAAKC,QAAL,CAAc1E,EAAd,EAAkBd,OAAlB,EAA2ByB,IAA3B,EAAiCR,IAAjC,EAAuCsB,OAAO,GAAG,CAAjD,EAAoD8C,UAApD,EAAgE,KAAhE,EAAuE3D,UAAvE;AACD,aAFD,MAEO,IAAIR,MAAM,KAAKuE,0BAAf,EAAiC;AACtC,mBAAKC,iBAAL,CAAuB5E,EAAvB,EAA2Bd,OAA3B,EAAoCyB,IAApC,EAA0CR,IAA1C,EAAgDsB,OAAhD,EAAyD8C,UAAzD,EAAqE,KAArE,EAA4E3D,UAA5E;AACD,aAFM,MAEA,IAAIR,MAAM,KAAKE,4BAAf,EAAmC;AACxC,mBAAKO,YAAL,CAAkBb,EAAlB,EAAsBd,OAAtB,EAA+ByB,IAA/B,EAAqCR,IAArC,EAA2C,KAA3C,EAAkDS,UAAlD;AACD,aAFM,MAEA,IAAIR,MAAM,KAAKC,uCAAf,EAA8C;AACnD,mBAAKQ,YAAL,CAAkBb,EAAlB,EAAsBd,OAAtB,EAA+ByB,IAA/B,EAAqCR,IAArC,EAA2C,KAA3C,EAAkDS,UAAlD;AACD,aAFM,MAEA;AACL,oBAAM,IAAIS,KAAJ,8BAAgCjB,MAAhC,qBAAiDJ,EAAjD,uBAAgEd,OAAhE,EAAN;AACD;AACF;AA1BkC;AAAA;AAAA;AAAA;AAAA;;AAAA,oDA2BbiC,QA3Ba;AAAA;;AAAA;AA2BnC,iEAAgC;AAAA,gBAArBjC,QAAqB;;AAC9B,gBAAM6D,MAAK,GAAG,KAAKxE,QAAL,CAAcc,GAAd,CAAkBH,QAAlB,CAAd;;AACA,gBAAI,OAAO6D,MAAP,KAAiB,WAArB,EAAkC;AAChCA,cAAAA,MAAK,CAACJ,KAAN;AACD,aAFD,MAEO;AACL,mBAAK7D,MAAL,CAAYE,KAAZ,iCAA2CE,QAA3C;AACD;AACF;AAlCkC;AAAA;AAAA;AAAA;AAAA;AAmCpC,O;;;;;;;;;;;oCAED,aAAa;AAAA;;AACX,YAAI,OAAO,KAAK2F,WAAZ,KAA4B,WAAhC,EAA6C;AAC3C,eAAKpH,OAAL,GAAe,IAAf;AACA,eAAKoH,WAAL,GAAmB,kBAAC,aAAY;AAC9B,kBAAM,MAAI,CAACnH,YAAL,CAAkBgF,MAAlB,EAAN;AACA,gBAAMoC,YAAY,GAAG,EAArB;;AAF8B,wDAGC,MAAI,CAACvG,QAHN;AAAA;;AAAA;AAAA;AAAA;AAAA,oBAGlBW,OAHkB;AAAA,oBAGT6D,KAHS;;AAI5B,oBAAMgC,QAAQ,GAAGC,WAAW,CAAC,YAAM;AACjC,kBAAA,MAAI,CAAClG,MAAL,CAAY+E,IAAZ,4BAAqC3E,OAArC,oCAAsE6D,KAAK,CAACkC,QAAN,GAAiB,WAAjB,GAA+B,eAArG,oBAA8HlC,KAAK,CAACb,OAApI,cAA+Ia,KAAK,CAACb,OAAN,KAAkB,CAAlB,GAAsB,KAAtB,GAA8B,MAA7K,0BAAmMa,KAAK,CAACa,IAAzM,cAAiNb,KAAK,CAACa,IAAN,KAAe,CAAf,GAAmB,KAAnB,GAA2B,MAA5O;AACD,iBAF2B,EAEzB,GAFyB,CAA5B;AAGAb,gBAAAA,KAAK,CAACmC,KAAN;AACAJ,gBAAAA,YAAY,CAACK,IAAb,CAAkBpC,KAAK,CAACL,MAAN,GAAe0C,OAAf,CAAuB,YAAM;AAC7CC,kBAAAA,aAAa,CAACN,QAAD,CAAb;AACD,iBAFiB,CAAlB;AAR4B;;AAG9B,qEAA8C;AAAA;AAQ7C;AAX6B;AAAA;AAAA;AAAA;AAAA;;AAY9B,kBAAM1B,OAAO,CAACiC,GAAR,CAAYR,YAAZ,CAAN;;AACA,YAAA,MAAI,CAACtG,MAAL,CAAY0G,KAAZ;;AACA,YAAA,MAAI,CAACxG,kBAAL,CAAwBwG,KAAxB;;AACA,mBAAO,MAAI,CAACL,WAAZ;;AACA,YAAA,MAAI,CAACjD,IAAL,CAAU,MAAV;;AACA,YAAA,MAAI,CAACnE,OAAL,GAAe,KAAf;AACD,WAlBkB,GAAnB;AAmBD;;AACD,cAAM,KAAKoH,WAAX;AACD,O;;;;;;;;;;;sCAED,WAAaU,WAAb,EAAmC;AAAA;;AACjC,YAAI,OAAO,KAAKC,aAAZ,KAA8B,WAAlC,EAA+C;AAC7C,eAAKA,aAAL,GAAqB,kBAAC,aAAY;AAChC,gBAAMjC,OAAO,GAAG,OAAOgC,WAAP,KAAuB,QAAvB,GAAkCE,IAAI,CAACC,GAAL,KAAaH,WAA/C,GAA6D,CAAC,CAA9E;AACA,gBAAM5C,KAAK,GAAG8C,IAAI,CAACC,GAAL,EAAd;;AACA,mBAAO,IAAP,EAAa;AAAE;AACb,kBAAInC,OAAO,KAAK,CAAC,CAAb,IAAkBkC,IAAI,CAACC,GAAL,KAAanC,OAAnC,EAA4C;AAC1C,gBAAA,MAAI,CAACzE,MAAL,CAAY6G,IAAZ,8BAAuCF,IAAI,CAACC,GAAL,KAAa/C,KAApD;;AACA;AACD;;AACD,oBAAM,MAAI,CAACjF,YAAL,CAAkBgF,MAAlB,EAAN;;AALW,2DAMoB,MAAI,CAACnE,QANzB;AAAA;;AAAA;AAAA;AAAA;AAAA,sBAMCW,OAND;AAAA,sBAMU6D,KANV;;AAOT,sBAAMgC,QAAQ,GAAGC,WAAW,CAAC,YAAM;AACjC,oBAAA,MAAI,CAAClG,MAAL,CAAY+E,IAAZ,4BAAqC3E,OAArC,sCAAwE6D,KAAK,CAACkC,QAAN,GAAiB,WAAjB,GAA+B,eAAvG,oBAAgIlC,KAAK,CAACb,OAAtI,cAAiJa,KAAK,CAACb,OAAN,KAAkB,CAAlB,GAAsB,KAAtB,GAA8B,MAA/K,0BAAqMa,KAAK,CAACa,IAA3M,cAAmNb,KAAK,CAACa,IAAN,KAAe,CAAf,GAAmB,KAAnB,GAA2B,MAA9O;AACD,mBAF2B,EAEzB,GAFyB,CAA5B;AAGA,wBAAMb,KAAK,CAACL,MAAN,EAAN;AACA2C,kBAAAA,aAAa,CAACN,QAAD,CAAb;AAXS;;AAMX,0EAA8C;AAAA;AAM7C;AAZU;AAAA;AAAA;AAAA;AAAA;;AAaX,kBAAMa,YAAY,GAAGZ,WAAW,CAAC,YAAM;AACrC,gBAAA,MAAI,CAAClG,MAAL,CAAY+E,IAAZ,CAAiB,iBAAjB;AACD,eAF+B,EAE7B,GAF6B,CAAhC;AAGA,kBAAME,IAAI,SAAS,oCAAnB;AACAsB,cAAAA,aAAa,CAACO,YAAD,CAAb;;AACA,kBAAI7B,IAAI,CAAC8B,MAAL,GAAc,CAAlB,EAAqB;AACnB,oBAAMd,QAAQ,GAAGC,WAAW,CAAC,YAAM;AACjC,kBAAA,MAAI,CAAClG,MAAL,CAAY+E,IAAZ,CAAiB,oBAAjB;AACD,iBAF2B,EAEzB,GAFyB,CAA5B;AAGA,sBAAM,MAAI,CAAChE,OAAL,EAAN;AACAwF,gBAAAA,aAAa,CAACN,QAAD,CAAb;AACA;AACD;;AACD;AACD;;AACD,mBAAO,MAAI,CAACS,aAAZ;;AACA,YAAA,MAAI,CAAC5D,IAAL,CAAU,MAAV;AACD,WAjCoB,GAArB;AAkCD;;AACD,cAAM,KAAK4D,aAAX;AACD,O;;;;;;;;;;WAED,4BAAmBxF,EAAnB,EAA8Bd,OAA9B,EAA8C;AAC5C,UAAIE,uBAAuB,GAAG,KAAKV,kBAAL,CAAwBW,GAAxB,CAA4BH,OAA5B,CAA9B;;AACA,UAAI,OAAOE,uBAAP,KAAmC,WAAvC,EAAoD;AAClDA,QAAAA,uBAAuB,GAAG,IAAIrB,GAAJ,EAA1B;AACA,aAAKW,kBAAL,CAAwB6C,GAAxB,CAA4BrC,OAA5B,EAAqCE,uBAArC;AACD;;AACD,UAAME,eAAe,GAAGF,uBAAuB,CAACC,GAAxB,CAA4BW,EAA5B,CAAxB;;AACA,UAAI,OAAOV,eAAP,KAA2B,WAA/B,EAA4C;AAC1C,eAAOA,eAAP;AACD;;AACD,UAAMwG,kBAAkB,GAAG,IAAIC,eAAJ,EAA3B;AACA3G,MAAAA,uBAAuB,CAACmC,GAAxB,CAA4BvB,EAA5B,EAAgC8F,kBAAhC;AACA,aAAOA,kBAAP;AACD;;;WAED,+BAAsB9F,EAAtB,EAAiCd,OAAjC,EAAiD;AAC/C,UAAME,uBAAuB,GAAG,KAAKV,kBAAL,CAAwBW,GAAxB,CAA4BH,OAA5B,CAAhC;;AACA,UAAI,OAAOE,uBAAP,KAAmC,WAAvC,EAAoD;AAClD,aAAKN,MAAL,CAAY6G,IAAZ,oCAA6C3F,EAA7C,uBAA4Dd,OAA5D;AACA;AACD;;AACD,UAAMI,eAAe,GAAGF,uBAAuB,CAACC,GAAxB,CAA4BW,EAA5B,CAAxB;;AACA,UAAI,OAAOV,eAAP,KAA2B,WAA/B,EAA4C;AAC1C,aAAKR,MAAL,CAAY6G,IAAZ,gCAAyC3F,EAAzC,uBAAwDd,OAAxD;AACA;AACD;;AACDE,MAAAA,uBAAuB,CAACoC,MAAxB,CAA+BxB,EAA/B;;AACA,UAAIZ,uBAAuB,CAACwE,IAAxB,KAAiC,CAArC,EAAwC;AACtC,aAAKlF,kBAAL,CAAwB8C,MAAxB,CAA+BtC,OAA/B;AACD;AACF;;;;0CAED,WAAiBc,EAAjB,EAA4Bd,OAA5B,EAA4CyB,IAA5C,EAA6DR,IAA7D,EAA0E;AACxE,aAAKyB,IAAL,CAAU,cAAV,EAA0B;AAAE5B,UAAAA,EAAE,EAAFA;AAAF,SAA1B;AACA,YAAM+B,OAAO,GAAG,KAAK/D,UAAL,CAAgBqB,GAAhB,CAAoBc,IAApB,CAAhB;;AACA,YAAI,OAAO4B,OAAP,KAAmB,UAAvB,EAAmC;AACjC,eAAKjD,MAAL,CAAY6G,IAAZ,mCAA4CxF,IAA5C;AACA,gBAAM,yCAA0BH,EAA1B,CAAN;AACA,eAAK4B,IAAL,CAAU,SAAV,EAAqB;AAAE5B,YAAAA,EAAE,EAAFA;AAAF,WAArB;AACA;AACD;;AACD,YAAMgG,UAAU,SAAS,sCAAuBhG,EAAvB,CAAzB;;AACA,oBAA6B,OAAOgG,UAAP,KAAsB,WAAtB,GAAoC;AAAEC,UAAAA,IAAI,EAAE7C,SAAR;AAAmBmB,UAAAA,UAAU,EAAE;AAA/B,SAApC,GAAyEyB,UAAtG;AAAA,YAAQC,IAAR,SAAQA,IAAR;AAAA,YAAc1B,UAAd,SAAcA,UAAd;;AACA,YAAM2B,KAAK,GAAG3B,UAAU,GAAGkB,IAAI,CAACC,GAAL,EAA3B;;AACA,YAAIQ,KAAK,GAAG,CAAZ,EAAe;AACb,eAAKpH,MAAL,CAAY+E,IAAZ,6BAAsC1D,IAAtC,mBAAmDH,EAAnD,+BAA0Ed,OAA1E,iBAAwFgH,KAAxF,mBAAsG,IAAIT,IAAJ,CAASlB,UAAT,EAAqB4B,cAArB,EAAtG;AACA,gBAAM,IAAI9C,OAAJ,CAAY,UAACC,OAAD;AAAA,mBAAaE,UAAU,CAACF,OAAD,EAAU4C,KAAV,CAAvB;AAAA,WAAZ,CAAN;AACD;;AACD,YAAI;AACF,gBAAMnE,OAAO,CAACkE,IAAD,EAAOtF,IAAP,EAAa,UAACyF,IAAD;AAAA,mBAAwB,mDAAoCpG,EAApC,EAAwCoG,IAAxC,CAAxB;AAAA,WAAb,CAAb;AACD,SAFD,CAEE,OAAOpH,KAAP,EAAc;AACd,cAAMyC,OAAO,SAAS,iDAAkCzB,EAAlC,EAAsCd,OAAtC,CAAtB;;AACA,cAAIF,KAAK,CAACqH,IAAN,KAAe,YAAnB,EAAiC;AAC/B,iBAAKvH,MAAL,CAAYE,KAAZ,0BAAoCmB,IAApC,mBAAiDH,EAAjD,+BAAwEd,OAAxE,sBAA2FuC,OAA3F;AACA,iBAAKG,IAAL,CAAU,OAAV,EAAmB5C,KAAnB;AACA,kBAAM,yCAA0BgB,EAA1B,CAAN;AACA,iBAAK4B,IAAL,CAAU,mBAAV,EAA+B;AAAE5B,cAAAA,EAAE,EAAFA,EAAF;AAAMd,cAAAA,OAAO,EAAPA;AAAN,aAA/B;AACA;AACD;;AACD,cAAMoH,iBAAiB,SAAS,KAAKC,oBAAL,CAA0BpG,IAA1B,EAAgCsB,OAAhC,EAAyCzC,KAAzC,CAAhC;;AACA,cAAIsH,iBAAiB,KAAK,KAA1B,EAAiC;AAC/B,iBAAKxH,MAAL,CAAYE,KAAZ,oBAA8BmB,IAA9B,mBAA2CH,EAA3C,+BAAkEd,OAAlE,sBAAqFuC,OAArF;AACA,iBAAKG,IAAL,CAAU,OAAV,EAAmB5C,KAAnB;AACA,kBAAM,yCAA0BgB,EAA1B,CAAN;AACA,iBAAK4B,IAAL,CAAU,mBAAV,EAA+B;AAAE5B,cAAAA,EAAE,EAAFA,EAAF;AAAMd,cAAAA,OAAO,EAAPA;AAAN,aAA/B;AACA;AACD;;AACD,eAAKJ,MAAL,CAAYE,KAAZ,oBAA8BmB,IAA9B,mBAA2CH,EAA3C,+BAAkEd,OAAlE,sBAAqFuC,OAArF,wBAA0G6E,iBAAiB,GAAG,CAApB,gBAA8BA,iBAA9B,UAAsD,aAAhK;AACA,eAAK1E,IAAL,CAAU,OAAV,EAAmB5C,KAAnB;;AACA,cAAIsH,iBAAiB,GAAG,CAAxB,EAA2B;AACzB,iBAAK1E,IAAL,CAAU,mBAAV,EAA+B;AAAE5B,cAAAA,EAAE,EAAFA,EAAF;AAAMd,cAAAA,OAAO,EAAPA,OAAN;AAAeoH,cAAAA,iBAAiB,EAAjBA;AAAf,aAA/B;AACA,gBAAME,aAAa,GAAGf,IAAI,CAACC,GAAL,KAAaY,iBAAnC;AACA,kBAAM,+CAAgCtG,EAAhC,EAAoCwG,aAApC,CAAN;AACD;;AACD,gBAAM,KAAKC,UAAL,CAAgBzG,EAAhB,EAAoBd,OAApB,EAA6ByB,IAA7B,EAAmCR,IAAnC,CAAN;AACA;AACD;;AACD,cAAM,yCAA0BH,EAA1B,CAAN;AACA,aAAK4B,IAAL,CAAU,SAAV,EAAqB;AAAE5B,UAAAA,EAAE,EAAFA;AAAF,SAArB;AACD,O;;;;;;;;;;WAED,sBAAaA,EAAb,EAAwBd,OAAxB,EAAwCyB,IAAxC,EAAyDR,IAAzD,EAAsE0C,SAAtE,EAAyFjC,UAAzF,EAA8G;AAAA;;AAC5G,WAAK9B,MAAL,CAAY+E,IAAZ,kBAA2B1D,IAA3B,2BAAgDH,EAAhD,uBAA+Dd,OAA/D;AACA,WAAKV,MAAL,CAAYwE,GAAZ,CAAgBhD,EAAhB;AACA,WAAK8D,sBAAL,CAA4B5E,OAA5B,EAAqCc,EAArC;AACA,UAAM4C,QAAQ,GAAG3F,aAAa,GAAG+C,EAAhB,IAAsBY,UAAU,GAAGtD,oBAAH,GAA0B,CAA1D,CAAjB;;AACA,UAAMoJ,GAAG;AAAA,sCAAG,aAAY;AACtB,UAAA,MAAI,CAACvD,iBAAL,CAAuBjE,OAAvB,EAAgClC,gBAAhC;;AACA,UAAA,MAAI,CAAC8B,MAAL,CAAY+E,IAAZ,oBAA6B1D,IAA7B,uBAA8CH,EAA9C,uBAA6Dd,OAA7D;;AACA,gBAAM,MAAI,CAACuH,UAAL,CAAgBzG,EAAhB,EAAoBd,OAApB,EAA6ByB,IAA7B,EAAmCR,IAAnC,CAAN,CAHsB,CAItB;;AACA,gBAAM,oDAAqCH,EAArC,CAAN;;AACA,UAAA,MAAI,CAACxB,MAAL,CAAYgD,MAAZ,CAAmBxB,EAAnB;;AACA,UAAA,MAAI,CAAClB,MAAL,CAAY+E,IAAZ,qBAA8B1D,IAA9B,uBAA+CH,EAA/C,uBAA8Dd,OAA9D;AACD,SARQ;;AAAA,wBAAHwH,GAAG;AAAA;AAAA;AAAA,SAAT;;AASA,WAAKxC,UAAL,CAAgBhF,OAAhB,EAAyB0D,QAAzB,EAAmCC,SAAnC,EAA8C6D,GAA9C;AACD;;;WAED,2BAAkB1G,EAAlB,EAA6Bd,OAA7B,EAA6CyB,IAA7C,EAA8DR,IAA9D,EAA2EsB,OAA3E,EAA4F8C,UAA5F,EAAgH1B,SAAhH,EAAmIjC,UAAnI,EAAwJ;AAAA;;AACtJ,WAAK9B,MAAL,CAAY+E,IAAZ,kBAA2B1D,IAA3B,iCAAsDH,EAAtD,uBAAqEd,OAArE;AACA,WAAKV,MAAL,CAAYwE,GAAZ,CAAgBhD,EAAhB;AACA,UAAM4C,QAAQ,GAAG3F,aAAa,GAAG+C,EAAhB,IAAsBY,UAAU,GAAGtD,oBAAH,GAA0B,CAA1D,CAAjB;AACA,UAAMgC,eAAe,GAAG,KAAKqH,kBAAL,CAAwB3G,EAAxB,EAA4Bd,OAA5B,CAAxB;;AACA,UAAMwH,GAAG;AAAA,sCAAG,aAAY;AACtB,UAAA,MAAI,CAACvD,iBAAL,CAAuBjE,OAAvB,EAAgClC,gBAAhC;;AACA,UAAA,MAAI,CAAC8B,MAAL,CAAY+E,IAAZ,oBAA6B1D,IAA7B,6BAAoDH,EAApD,uBAAmEd,OAAnE;;AACA,gBAAM,MAAI,CAACuH,UAAL,CAAgBzG,EAAhB,EAAoBd,OAApB,EAA6ByB,IAA7B,EAAmCR,IAAnC,CAAN;;AACA,cAAIb,eAAe,CAACsH,MAAhB,CAAuBC,OAA3B,EAAoC;AAClC;AACA,kBAAM,oDAAqC7G,EAArC,CAAN;;AACA,YAAA,MAAI,CAAC8G,qBAAL,CAA2B9G,EAA3B,EAA+Bd,OAA/B;;AACA,YAAA,MAAI,CAACV,MAAL,CAAYgD,MAAZ,CAAmBxB,EAAnB;AACD,WALD,MAKO;AACL,kBAAM,wCAAyBA,EAAzB,CAAN;;AACA,YAAA,MAAI,CAAClB,MAAL,CAAY+E,IAAZ,oBAA6B1D,IAA7B,mBAA0CH,EAA1C,uBAAyDd,OAAzD;;AACA,YAAA,MAAI,CAAC0C,IAAL,CAAU,OAAV,EAAmB;AAAE5B,cAAAA,EAAE,EAAFA;AAAF,aAAnB;;AACA,YAAA,MAAI,CAAC0E,QAAL,CAAc1E,EAAd,EAAkBd,OAAlB,EAA2ByB,IAA3B,EAAiCR,IAAjC,EAAuCsB,OAAO,GAAG,CAAjD,EAAoD8C,UAApD,EAAgE,IAAhE,EAAsE3D,UAAtE;AACD;;AACD,UAAA,MAAI,CAAC9B,MAAL,CAAY+E,IAAZ,qBAA8B1D,IAA9B,6BAAqDH,EAArD,uBAAoEd,OAApE;AACD,SAhBQ;;AAAA,wBAAHwH,GAAG;AAAA;AAAA;AAAA,SAAT;;AAiBA,WAAKxC,UAAL,CAAgBhF,OAAhB,EAAyB0D,QAAzB,EAAmCC,SAAnC,EAA8C6D,GAA9C;AACD;;;;6CAED,WAAoB1G,EAApB,EAA+Bd,OAA/B,EAA+CiB,IAA/C,EAA4DyG,MAA5D,EAAiFrC,UAAjF,EAAqG;AACnG,YAAIqC,MAAM,CAACC,OAAX,EAAoB;AAClB,gBAAM,IAAIE,kBAAJ,iBAAwB7H,OAAxB,kBAAN;AACD;;AACD,YAAM+C,QAAQ,GAAGsC,UAAU,GAAGkB,IAAI,CAACC,GAAL,EAA9B;;AACA,YAAIzD,QAAQ,GAAG,CAAf,EAAkB;AAChB,eAAKnD,MAAL,CAAY+E,IAAZ,6BAAsC1D,IAAtC,mBAAmDH,EAAnD,uBAAkEd,OAAlE,iBAAgF+C,QAAhF;AACA,gBAAM,IAAIoB,OAAJ,CAAY,UAACC,OAAD,EAAU0D,MAAV,EAAqB;AACrC,gBAAMzD,OAAO,GAAGC,UAAU,CAAC,YAAM;AAC/BoD,cAAAA,MAAM,CAACK,mBAAP,CAA2B,OAA3B,EAAoCC,WAApC;AACA5D,cAAAA,OAAO;AACR,aAHyB,EAGvBrB,QAHuB,CAA1B;;AAIA,gBAAMiF,WAAW,GAAG,SAAdA,WAAc,GAAM;AACxBvD,cAAAA,YAAY,CAACJ,OAAD,CAAZ;AACAqD,cAAAA,MAAM,CAACK,mBAAP,CAA2B,OAA3B,EAAoCC,WAApC;AACAF,cAAAA,MAAM,CAAC,IAAID,kBAAJ,iBAAwB7H,OAAxB,kBAAD,CAAN;AACD,aAJD;;AAKA0H,YAAAA,MAAM,CAACO,gBAAP,CAAwB,OAAxB,EAAiCD,WAAjC;AACD,WAXK,CAAN;AAYD;AACF,O;;;;;;;;;;WAED,kBAASlH,EAAT,EAAoBd,OAApB,EAAoCyB,IAApC,EAAqDR,IAArD,EAAkEsB,OAAlE,EAAkF8C,UAAlF,EAAsG1B,SAAtG,EAAyHjC,UAAzH,EAA8I;AAAA;;AAC5I,WAAK9B,MAAL,CAAY+E,IAAZ,kBAA2B1D,IAA3B,mBAAwCH,EAAxC,uBAAuDd,OAAvD;AACA,WAAKV,MAAL,CAAYwE,GAAZ,CAAgBhD,EAAhB;AACA,UAAM4C,QAAQ,GAAG3F,aAAa,GAAG+C,EAAhB,IAAsBY,UAAU,GAAGtD,oBAAH,GAA0B,CAA1D,CAAjB;;AACA,UAAM8J,iBAAiB,GAAG,SAApBA,iBAAoB,CAACnB,IAAD;AAAA,eAAiB,6CAA8BjG,EAA9B,EAAkCd,OAAlC,EAA2C+G,IAA3C,CAAjB;AAAA,OAA1B;;AACA,UAAMoB,cAAc,GAAG,SAAjBA,cAAiB,CAACpF,QAAD,EAAkBC,OAAlB,EAAqC;AAC1D,QAAA,MAAI,CAACoF,mBAAL,CAAyBpI,OAAzB,EAAkCc,EAAlC,EAAsCiC,QAAtC,EAAgDC,OAAhD;AACD,OAFD;;AAGA,UAAMI,sBAAsB,GAAG,SAAzBA,sBAAyB,GAAM;AACnC,YAAMiF,uBAAuB,GAAG,MAAI,CAACtJ,0BAAL,CAAgCoB,GAAhC,CAAoCc,IAApC,CAAhC;;AACA,YAAI,OAAOoH,uBAAP,KAAmC,UAAvC,EAAmD;AACjD,cAAI;AACF,gBAAMC,gBAAgB,GAAGD,uBAAuB,CAAC5G,IAAD,CAAhD;;AACA,YAAA,MAAI,CAAC2G,mBAAL,CAAyBpI,OAAzB,EAAkCc,EAAlC,EAAsCwH,gBAAtC,EAAwDA,gBAAxD;;AACA,mBAAOA,gBAAP;AACD,WAJD,CAIE,OAAOxI,KAAP,EAAc;AACd,YAAA,MAAI,CAACF,MAAL,CAAYE,KAAZ,0CAAoDmB,IAApD,mBAAiEH,EAAjE,uBAAgFd,OAAhF;;AACA,YAAA,MAAI,CAACJ,MAAL,CAAYG,UAAZ,CAAuBD,KAAvB;AACD;AACF;;AACD,eAAO,CAAP;AACD,OAbD;;AAcAsD,MAAAA,sBAAsB;AACtB,WAAKnE,0BAAL,CAAgCoD,GAAhC,CAAoCvB,EAApC,EAAwCsC,sBAAxC;AACA,UAAMhD,eAAe,GAAG,KAAKqH,kBAAL,CAAwB3G,EAAxB,EAA4Bd,OAA5B,CAAxB;;AACA,UAAMwH,GAAG;AAAA,sCAAG,aAAY;AACtB,cAAM/D,KAAK,GAAG8C,IAAI,CAACC,GAAL,EAAd;AACA,cAAM8B,gBAAgB,GAAGlF,sBAAsB,EAA/C;;AACA,UAAA,MAAI,CAACnE,0BAAL,CAAgCqD,MAAhC,CAAuCxB,EAAvC;;AACA,cAAIV,eAAe,CAACsH,MAAhB,CAAuBC,OAA3B,EAAoC;AAClC,YAAA,MAAI,CAACjF,IAAL,CAAU,YAAV,EAAwB;AAAE5B,cAAAA,EAAE,EAAFA,EAAF;AAAMd,cAAAA,OAAO,EAAPA,OAAN;AAAeF,cAAAA,KAAK,EAAE,IAAI+H,kBAAJ,iBAAwB7H,OAAxB;AAAtB,aAAxB;;AACA,YAAA,MAAI,CAAC4H,qBAAL,CAA2B9G,EAA3B,EAA+Bd,OAA/B;;AACA,YAAA,MAAI,CAACV,MAAL,CAAYgD,MAAZ,CAAmBxB,EAAnB;;AACA,YAAA,MAAI,CAAC8D,sBAAL,CAA4B5E,OAA5B,EAAqCc,EAArC;;AACA;AACD;;AACD,cAAM8B,OAAO,GAAG,MAAI,CAAChE,UAAL,CAAgBuB,GAAhB,CAAoBc,IAApB,CAAhB;;AACA,cAAI,OAAO2B,OAAP,KAAmB,UAAvB,EAAmC;AACjC,YAAA,MAAI,CAAChD,MAAL,CAAY6G,IAAZ,mCAA4CxF,IAA5C;;AACA,kBAAM,yCAA0BH,EAA1B,CAAN;;AACA,YAAA,MAAI,CAAC8G,qBAAL,CAA2B9G,EAA3B,EAA+Bd,OAA/B;;AACA,YAAA,MAAI,CAACV,MAAL,CAAYgD,MAAZ,CAAmBxB,EAAnB;;AACA,YAAA,MAAI,CAACsH,mBAAL,CAAyBpI,OAAzB,EAAkCc,EAAlC,EAAsCyF,IAAI,CAACC,GAAL,KAAa/C,KAAnD,EAA0D,CAA1D;;AACA;AACD;;AACD,UAAA,MAAI,CAACQ,iBAAL,CAAuBjE,OAAvB,EAAgCiB,IAAhC;;AACA,cAAIsH,aAAa,GAAG,KAApB;;AACA,cAAI;AACF;AACA;AACA,kBAAM,sCAAuBzH,EAAvB,CAAN;AACA,kBAAM,MAAI,CAAC0H,aAAL,CAAmB1H,EAAnB,EAAuBd,OAAvB,EAAgCiB,IAAhC,EAAsCb,eAAe,CAACsH,MAAtD,EAA8DrC,UAA9D,CAAN;;AACA,YAAA,MAAI,CAACzF,MAAL,CAAY+E,IAAZ,oBAA6B1D,IAA7B,mBAA0CH,EAA1C,uBAAyDd,OAAzD,sBAA4EuC,OAA5E;;AACAgG,YAAAA,aAAa,GAAG,IAAhB;AACA,gBAAME,uBAAuB,SAAS7F,OAAO,CAACnB,IAAD,EAAOrB,eAAe,CAACsH,MAAvB,EAA+BQ,iBAA/B,EAAkDC,cAAlD,CAA7C;;AACA,gBAAI/H,eAAe,CAACsH,MAAhB,CAAuBC,OAA3B,EAAoC;AAClC,oBAAM,IAAIE,kBAAJ,iBAAwB7H,OAAxB,kBAAN;AACD;;AACD,gBAAIyI,uBAAuB,KAAK,KAAhC,EAAuC;AACrC,oBAAM,qDAAsC3H,EAAtC,CAAN;AACD,aAFD,MAEO;AACL,oBAAM,yCAA0BA,EAA1B,CAAN;AACD;;AACD,YAAA,MAAI,CAAC8G,qBAAL,CAA2B9G,EAA3B,EAA+Bd,OAA/B;;AACA,YAAA,MAAI,CAACV,MAAL,CAAYgD,MAAZ,CAAmBxB,EAAnB;;AACA,gBAAMiC,QAAQ,GAAGwD,IAAI,CAACC,GAAL,KAAa/C,KAA9B;;AACA,gBAAI,OAAO6E,gBAAP,KAA4B,QAAhC,EAA0C;AACxC,kBAAMI,sBAAsB,GAAGJ,gBAAgB,GAAGvF,QAAlD;;AACA,kBAAIA,QAAQ,GAAG,GAAX,KAAmB2F,sBAAsB,GAAG,GAAzB,IAAgCA,sBAAsB,GAAG,IAA5E,CAAJ,EAAuF;AACrF,gBAAA,MAAI,CAAC9I,MAAL,CAAY6G,IAAZ,gCAAyCxF,IAAzC,mBAAsDH,EAAtD,eAA6DwH,gBAA7D,qBAAwFtK,IAAI,CAAC2K,KAAL,CAAW,MAAMD,sBAAjB,CAAxF,gCAAsJ3F,QAAtJ;AACD;AACF;;AACD,YAAA,MAAI,CAACqF,mBAAL,CAAyBpI,OAAzB,EAAkCc,EAAlC,EAAsCiC,QAAtC,EAAgD,CAAhD;;AACA,YAAA,MAAI,CAACnD,MAAL,CAAY+E,IAAZ,qBAA8B1D,IAA9B,mBAA2CH,EAA3C,uBAA0Dd,OAA1D,sBAA6EuC,OAA7E,iBAA2FQ,QAA3F;;AACA;AACD,WA5BD,CA4BE,OAAOjD,KAAP,EAAc;AACd,gBAAIA,KAAK,CAACqH,IAAN,KAAe,sBAAnB,EAA2C;AACzC,cAAA,MAAI,CAACvH,MAAL,CAAYE,KAAZ,wCAAkDmB,IAAlD,mBAA+DH,EAA/D,uBAA8Ed,OAA9E,sBAAiGuC,OAAjG;;AACA,kBAAIgG,aAAJ,EAAmB;AACjB,gBAAA,MAAI,CAAC7F,IAAL,CAAU,YAAV,EAAwB;AAAE5B,kBAAAA,EAAE,EAAFA,EAAF;AAAMd,kBAAAA,OAAO,EAAPA,OAAN;AAAeF,kBAAAA,KAAK,EAALA;AAAf,iBAAxB;;AACA,sBAAM,uDAAwCgB,EAAxC,EAA4Cd,OAA5C,EAAqDiB,IAArD,EAA2DQ,IAA3D,EAAiE;AAAEC,kBAAAA,UAAU,EAAVA;AAAF,iBAAjE,CAAN;;AACA,gBAAA,MAAI,CAACpC,MAAL,CAAYgD,MAAZ,CAAmBxB,EAAnB;;AACA,gBAAA,MAAI,CAAC8G,qBAAL,CAA2B9G,EAA3B,EAA+Bd,OAA/B;;AACA,gBAAA,MAAI,CAAC2B,YAAL,CAAkBb,EAAlB,EAAsBd,OAAtB,EAA+ByB,IAA/B,EAAqCR,IAArC,EAA2C,IAA3C,EAAiDS,UAAjD;AACD,eAND,MAMO;AACL,gBAAA,MAAI,CAACgB,IAAL,CAAU,YAAV,EAAwB;AAAE5B,kBAAAA,EAAE,EAAFA,EAAF;AAAMd,kBAAAA,OAAO,EAAPA,OAAN;AAAeF,kBAAAA,KAAK,EAALA;AAAf,iBAAxB;;AACA,gBAAA,MAAI,CAACR,MAAL,CAAYgD,MAAZ,CAAmBxB,EAAnB;;AACA,gBAAA,MAAI,CAAC8G,qBAAL,CAA2B9G,EAA3B,EAA+Bd,OAA/B;;AACA,gBAAA,MAAI,CAAC4E,sBAAL,CAA4B5E,OAA5B,EAAqCc,EAArC;AACD;;AACD;AACD;;AACD,gBAAIV,eAAe,CAACsH,MAAhB,CAAuBC,OAA3B,EAAoC;AAClC,kBAAI7H,KAAK,CAACqH,IAAN,KAAe,YAAnB,EAAiC;AAC/B,gBAAA,MAAI,CAACvH,MAAL,CAAYE,KAAZ,2CAAqDmB,IAArD,mBAAkEH,EAAlE,uBAAiFd,OAAjF,sBAAoGuC,OAApG;;AACA,gBAAA,MAAI,CAACG,IAAL,CAAU,OAAV,EAAmB5C,KAAnB;AACD,eAHD,MAGO;AACL,gBAAA,MAAI,CAACF,MAAL,CAAY6G,IAAZ,qCAA8CxF,IAA9C,mBAA2DH,EAA3D,uBAA0Ed,OAA1E,sBAA6FuC,OAA7F;AACD;;AACD,kBAAIgG,aAAJ,EAAmB;AACjB,gBAAA,MAAI,CAAC7F,IAAL,CAAU,YAAV,EAAwB;AAAE5B,kBAAAA,EAAE,EAAFA,EAAF;AAAMd,kBAAAA,OAAO,EAAPA,OAAN;AAAeF,kBAAAA,KAAK,EAALA;AAAf,iBAAxB;;AACA,gBAAA,MAAI,CAACR,MAAL,CAAYgD,MAAZ,CAAmBxB,EAAnB;;AACA,gBAAA,MAAI,CAAC8G,qBAAL,CAA2B9G,EAA3B,EAA+Bd,OAA/B;;AACA,gBAAA,MAAI,CAAC2B,YAAL,CAAkBb,EAAlB,EAAsBd,OAAtB,EAA+ByB,IAA/B,EAAqCR,IAArC,EAA2C,IAA3C,EAAiDS,UAAjD;AACD,eALD,MAKO;AACL,gBAAA,MAAI,CAACgB,IAAL,CAAU,YAAV,EAAwB;AAAE5B,kBAAAA,EAAE,EAAFA,EAAF;AAAMd,kBAAAA,OAAO,EAAPA,OAAN;AAAeF,kBAAAA,KAAK,EAALA;AAAf,iBAAxB;;AACA,sBAAM,oDAAqCgB,EAArC,CAAN;;AACA,gBAAA,MAAI,CAACxB,MAAL,CAAYgD,MAAZ,CAAmBxB,EAAnB;;AACA,gBAAA,MAAI,CAAC8G,qBAAL,CAA2B9G,EAA3B,EAA+Bd,OAA/B;;AACA,gBAAA,MAAI,CAAC4E,sBAAL,CAA4B5E,OAA5B,EAAqCc,EAArC;AACD;;AACD;AACD;;AACD,kBAAM,6CAA8BA,EAA9B,CAAN;;AACA,gBAAIhB,KAAK,CAACqH,IAAN,KAAe,YAAnB,EAAiC;AAC/B,cAAA,MAAI,CAACvH,MAAL,CAAYE,KAAZ,0BAAoCmB,IAApC,mBAAiDH,EAAjD,uBAAgEd,OAAhE,sBAAmFuC,OAAnF;;AACA,cAAA,MAAI,CAACG,IAAL,CAAU,OAAV,EAAmB5C,KAAnB;;AACA,cAAA,MAAI,CAAC4C,IAAL,CAAU,YAAV,EAAwB;AAAE5B,gBAAAA,EAAE,EAAFA,EAAF;AAAMd,gBAAAA,OAAO,EAAPA,OAAN;AAAeF,gBAAAA,KAAK,EAALA;AAAf,eAAxB;;AACA,cAAA,MAAI,CAACR,MAAL,CAAYgD,MAAZ,CAAmBxB,EAAnB;;AACA,cAAA,MAAI,CAAC8G,qBAAL,CAA2B9G,EAA3B,EAA+Bd,OAA/B;;AACA,oBAAM,MAAI,CAAC4I,UAAL,CAAgB5I,OAAhB,CAAN;AACA;AACD;;AACD,gBAAM6I,UAAU,SAAS,MAAI,CAACC,gBAAL,CAAsB7H,IAAtB,EAA4BsB,OAA5B,EAAqCzC,KAArC,CAAzB;;AACA,gBAAI+I,UAAU,KAAK,KAAnB,EAA0B;AACxB,cAAA,MAAI,CAACjJ,MAAL,CAAYE,KAAZ,oBAA8BmB,IAA9B,mBAA2CH,EAA3C,uBAA0Dd,OAA1D,sBAA6EuC,OAA7E;;AACA,cAAA,MAAI,CAACG,IAAL,CAAU,OAAV,EAAmB5C,KAAnB;;AACA,cAAA,MAAI,CAAC4C,IAAL,CAAU,YAAV,EAAwB;AAAE5B,gBAAAA,EAAE,EAAFA,EAAF;AAAMd,gBAAAA,OAAO,EAAPA,OAAN;AAAeF,gBAAAA,KAAK,EAALA;AAAf,eAAxB;;AACA,cAAA,MAAI,CAACR,MAAL,CAAYgD,MAAZ,CAAmBxB,EAAnB;;AACA,cAAA,MAAI,CAAC8G,qBAAL,CAA2B9G,EAA3B,EAA+Bd,OAA/B;;AACA,oBAAM,MAAI,CAAC4I,UAAL,CAAgB5I,OAAhB,CAAN;AACA;AACD;;AACD,YAAA,MAAI,CAACJ,MAAL,CAAYE,KAAZ,oBAA8BmB,IAA9B,mBAA2CH,EAA3C,uBAA0Dd,OAA1D,sBAA6EuC,OAA7E,wBAAkGsG,UAAU,GAAG,CAAb,gBAAuBA,UAAvB,UAAwC,aAA1I;;AACA,YAAA,MAAI,CAACnG,IAAL,CAAU,OAAV,EAAmB5C,KAAnB;;AACA,gBAAI+I,UAAU,GAAG,CAAjB,EAAoB;AAClB,cAAA,MAAI,CAACnG,IAAL,CAAU,YAAV,EAAwB;AAAE5B,gBAAAA,EAAE,EAAFA,EAAF;AAAMd,gBAAAA,OAAO,EAAPA,OAAN;AAAe6I,gBAAAA,UAAU,EAAVA;AAAf,eAAxB;;AACA,kBAAMvB,aAAa,GAAGf,IAAI,CAACC,GAAL,KAAaqC,UAAnC;AACA,oBAAM,2CAA4B/H,EAA5B,EAAgCwG,aAAhC,CAAN;;AACA,cAAA,MAAI,CAAChI,MAAL,CAAYgD,MAAZ,CAAmBxB,EAAnB;;AACA,cAAA,MAAI,CAAC4E,iBAAL,CAAuB5E,EAAvB,EAA2Bd,OAA3B,EAAoCyB,IAApC,EAA0CR,IAA1C,EAAgDsB,OAAhD,EAAyD+E,aAAzD,EAAwE,IAAxE,EAA8E5F,UAA9E;AACD,aAND,MAMO;AACL,cAAA,MAAI,CAACpC,MAAL,CAAYgD,MAAZ,CAAmBxB,EAAnB;;AACA,cAAA,MAAI,CAAC4E,iBAAL,CAAuB5E,EAAvB,EAA2Bd,OAA3B,EAAoCyB,IAApC,EAA0CR,IAA1C,EAAgDsB,OAAhD,EAAyD8C,UAAzD,EAAqE,IAArE,EAA2E3D,UAA3E;AACD;AACF;AACF,SAzHQ;;AAAA,wBAAH8F,GAAG;AAAA;AAAA;AAAA,SAAT;;AA0HA,WAAKxC,UAAL,CAAgBhF,OAAhB,EAAyB0D,QAAzB,EAAmCC,SAAnC,EAA8C6D,GAA9C;AACA,WAAK9E,IAAL,CAAU,SAAV,EAAqB;AAAE5B,QAAAA,EAAE,EAAFA;AAAF,OAArB;AACD;;;;iDAED,WAAwBiB,IAAxB,EAA2CgH,KAA3C,EAA+D;AAAA;;AAC7D,YAAI,EAAEA,KAAK,YAAYC,YAAnB,CAAJ,EAAsC;AACpC;AACD;;AAED,YAAMC,YAAY,GAAG,KAAKtJ,KAAL,CAAWQ,GAAX,CAAe4B,IAAf,CAArB;;AAEA,YAAI,QAAOkH,YAAP,MAAwB,QAA5B,EAAsC;AACpC,eAAKrJ,MAAL,CAAY6G,IAAZ,CAAiB,4BAAjB;AACA,eAAK7G,MAAL,CAAYsJ,UAAZ,CAAuBH,KAAvB;AACA;AACD;;AAED,YAAQhC,IAAR,GAAiBgC,KAAjB,CAAQhC,IAAR;;AACA,YAAI,CAACA,IAAD,IAAS,QAAOA,IAAP,MAAgB,QAA7B,EAAuC;AACrC,eAAKnH,MAAL,CAAY6G,IAAZ,CAAiB,sBAAjB;AACA,eAAK7G,MAAL,CAAYsJ,UAAZ,CAAuBH,KAAvB;AACA;AACD;;AACD,YAAQ9H,IAAR,GAAuB8F,IAAvB,CAAQ9F,IAAR;AAAA,YAAcQ,IAAd,GAAuBsF,IAAvB,CAActF,IAAd;;AACA,YAAI,OAAOR,IAAP,KAAgB,QAApB,EAA8B;AAC5B,eAAKrB,MAAL,CAAY6G,IAAZ,CAAiB,sBAAjB;AACA,eAAK7G,MAAL,CAAYsJ,UAAZ,CAAuBH,KAAvB;AACA;AACD;;AACD,YAAI,CAAC5D,KAAK,CAACC,OAAN,CAAc3D,IAAd,CAAL,EAA0B;AACxB,eAAK7B,MAAL,CAAY6G,IAAZ,CAAiB,wBAAjB;AACA,eAAK7G,MAAL,CAAYsJ,UAAZ,CAAuBH,KAAvB;AACA;AACD;;AACD,YAAMrG,IAAI,GAAG,SAAPA,IAAO,CAACyG,CAAD,EAAyC;AAAA,6CAA3BC,WAA2B;AAA3BA,YAAAA,WAA2B;AAAA;;AACpDrH,UAAAA,IAAI,CAACC,WAAL,CAAiB;AAAEf,YAAAA,IAAI,EAAEkI,CAAR;AAAW1H,YAAAA,IAAI,EAAE2H;AAAjB,WAAjB;AACD,SAFD;;AAGA,gBAAQnI,IAAR;AACE,eAAK,WAAL;AACE,gBAAI;AAAA;;AACF,yCAAmBQ,IAAnB;AAAA,kBAAOoE,QAAP;;AACA,kBAAI,OAAOA,QAAP,KAAoB,QAAxB,EAAkC;AAChC,sBAAM,IAAI1D,KAAJ,2DAA0D0D,QAA1D,8BAAN;AACD;;AACDpB,cAAAA,YAAY,CAACwE,YAAY,CAACI,uBAAd,CAAZ;AACA,mBAAKC,yBAAL,GAAiC/C,IAAI,CAACC,GAAL,KAAaxI,IAAI,CAAC2K,KAAL,CAAW9C,QAAQ,GAAG,GAAtB,CAA9C;AACAoD,cAAAA,YAAY,CAACI,uBAAb,GAAuC/E,UAAU,iCAAC,aAAY;AAC5D,gBAAA,OAAI,CAAC1E,MAAL,CAAY6G,IAAZ,mCAA4CzI,IAAI,CAAC2K,KAAL,CAAW9C,QAAQ,GAAG,GAAtB,CAA5C;;AACA,sBAAM,OAAI,CAAC0D,YAAL,EAAN;;AACA,gBAAA,OAAI,CAACC,UAAL,CAAgBzH,IAAhB;AACD,eAJgD,GAI9C/D,IAAI,CAAC2K,KAAL,CAAW9C,QAAQ,GAAG,GAAtB,CAJ8C,CAAjD;AAKAnD,cAAAA,IAAI,MAAJ,UAAK,WAAL,4BAAqBjB,IAArB;;AACA,6GAAW,WAAX,4BAA2BA,IAA3B;AACD,aAdD,CAcE,OAAO3B,KAAP,EAAc;AACd,mBAAKF,MAAL,CAAYE,KAAZ,CAAkB,iBAAlB;AACA,mBAAKF,MAAL,CAAYG,UAAZ,CAAuBD,KAAvB;AACD;;AACD;;AACF,eAAK,QAAL;AACEc,iCAAW8B,IAAX,8BAAgB,QAAhB,4BAA6BjB,IAA7B;;AACA;;AACF,eAAK,WAAL;AACEb,iCAAW8B,IAAX,8BAAgB,WAAhB,4BAAgCjB,IAAhC;;AACA;;AACF,eAAK,WAAL;AACEb,iCAAW8B,IAAX,8BAAgB,WAAhB,4BAAgCjB,IAAhC;;AACA;;AACF,eAAK,WAAL;AACEb,iCAAW8B,IAAX,8BAAgB,WAAhB,4BAAgCjB,IAAhC;;AACA;;AACF;AACE;AAlCJ;;AAoCA,8BAAoCA,IAApC;AAAA,YAAOgI,SAAP;AAAA,YAAqBC,WAArB;;AACA,YAAI,OAAOD,SAAP,KAAqB,QAAzB,EAAmC;AACjC,gBAAM,IAAItH,KAAJ,CAAU,wDAAV,CAAN;AACD;;AACD,gBAAQlB,IAAR;AACE,eAAK,QAAL;AACE,iBAAKrB,MAAL,CAAY6G,IAAZ,CAAiB,4BAAjB;;AACA,gBAAI;AACF,kBAAI,KAAK9G,KAAL,CAAW+E,IAAX,KAAoB,CAAxB,EAA2B;AACzB,sBAAM,KAAKiF,IAAL,EAAN;AACD;;AACDjH,cAAAA,IAAI,CAAC,gBAAD,EAAmB+G,SAAnB,CAAJ;AACA,mBAAKD,UAAL,CAAgBzH,IAAhB;AACD,aAND,CAME,OAAOjC,KAAP,EAAc;AACd4C,cAAAA,IAAI,CAAC,aAAD,EAAgB+G,SAAhB,EAA2B3J,KAA3B,CAAJ;AACA,mBAAKF,MAAL,CAAYE,KAAZ,CAAkB,iCAAlB;AACA,mBAAK4C,IAAL,CAAU,OAAV,EAAmB5C,KAAnB;AACD;;AACD;;AACF,eAAK,OAAL;AACE,gBAAI;AACF,oBAAM,KAAKkG,KAAL,EAAN;AACAtD,cAAAA,IAAI,CAAC,eAAD,EAAkB+G,SAAlB,CAAJ;AACD,aAHD,CAGE,OAAO3J,KAAP,EAAc;AACd4C,cAAAA,IAAI,CAAC,YAAD,EAAe+G,SAAf,EAA0B3J,KAA1B,CAAJ;AACA,mBAAKF,MAAL,CAAYE,KAAZ,CAAkB,gCAAlB;AACA,mBAAK4C,IAAL,CAAU,OAAV,EAAmB5C,KAAnB;AACD;;AACD;;AACF,eAAK,sCAAL;AACE,gBAAI;AACF,gDAAsB4J,WAAtB;AAAA,kBAAO1J,OAAP;AAAA,kBAAgBc,EAAhB;;AACA,kBAAI,OAAOd,OAAP,KAAmB,QAAvB,EAAiC;AAC/B,sBAAM,IAAImC,KAAJ,0DAAyDnC,OAAzD,8BAAN;AACD;;AACD,kBAAI,OAAOc,EAAP,KAAc,QAAlB,EAA4B;AAC1B,sBAAM,IAAIqB,KAAJ,qDAAoDrB,EAApD,8BAAN;AACD;;AACD,oBAAM,KAAK8I,oCAAL,CAA0C5J,OAA1C,EAAmDc,EAAnD,CAAN;AACA4B,cAAAA,IAAI,CAAC,8CAAD,EAAiD+G,SAAjD,CAAJ;AACD,aAVD,CAUE,OAAO3J,KAAP,EAAc;AACd4C,cAAAA,IAAI,CAAC,2CAAD,EAA8C+G,SAA9C,EAAyD3J,KAAzD,CAAJ;AACA,mBAAKF,MAAL,CAAYE,KAAZ,CAAkB,sEAAlB;AACA,mBAAK4C,IAAL,CAAU,OAAV,EAAmB5C,KAAnB;AACD;;AACD;;AACF,eAAK,qBAAL;AACE,gBAAI;AACF,iDAAkB4J,WAAlB;AAAA,kBAAO1J,SAAP;;AACA,kBAAI,OAAOA,SAAP,KAAmB,QAAvB,EAAiC;AAC/B,sBAAM,IAAImC,KAAJ,0DAAyDnC,SAAzD,8BAAN;AACD;;AACD,oBAAM,KAAK6J,mBAAL,CAAyB7J,SAAzB,CAAN;AACA0C,cAAAA,IAAI,CAAC,6BAAD,EAAgC+G,SAAhC,CAAJ;AACD,aAPD,CAOE,OAAO3J,KAAP,EAAc;AACd4C,cAAAA,IAAI,CAAC,0BAAD,EAA6B+G,SAA7B,EAAwC3J,KAAxC,CAAJ;AACA,mBAAKF,MAAL,CAAYE,KAAZ,CAAkB,iDAAlB;AACA,mBAAK4C,IAAL,CAAU,OAAV,EAAmB5C,KAAnB;AACD;;AACD;;AACF,eAAK,yBAAL;AACE,gBAAI;AACF,oBAAM,KAAKgK,uBAAL,EAAN;AACApH,cAAAA,IAAI,CAAC,iCAAD,EAAoC+G,SAApC,CAAJ;AACD,aAHD,CAGE,OAAO3J,KAAP,EAAc;AACd4C,cAAAA,IAAI,CAAC,8BAAD,EAAiC+G,SAAjC,EAA4C3J,KAA5C,CAAJ;AACA,mBAAKF,MAAL,CAAYE,KAAZ,CAAkB,oDAAlB;AACA,mBAAK4C,IAAL,CAAU,OAAV,EAAmB5C,KAAnB;AACD;;AACD;;AACF,eAAK,YAAL;AACE,gBAAI;AACF,iDAAkB4J,WAAlB;AAAA,kBAAO1J,SAAP;;AACA,kBAAI,OAAOA,SAAP,KAAmB,QAAvB,EAAiC;AAC/B,sBAAM,IAAImC,KAAJ,0DAAyDnC,SAAzD,8BAAN;AACD;;AACD,oBAAM,KAAK4I,UAAL,CAAgB5I,SAAhB,CAAN;AACA0C,cAAAA,IAAI,CAAC,oBAAD,EAAuB+G,SAAvB,CAAJ;AACD,aAPD,CAOE,OAAO3J,KAAP,EAAc;AACd4C,cAAAA,IAAI,CAAC,iBAAD,EAAoB+G,SAApB,EAA+B3J,KAA/B,CAAJ;AACA,mBAAKF,MAAL,CAAYE,KAAZ,CAAkB,sCAAlB;AACA,mBAAK4C,IAAL,CAAU,OAAV,EAAmB5C,KAAnB;AACD;;AACD;;AACF,eAAK,YAAL;AACE,gBAAI;AACF,iDAAkB4J,WAAlB;AAAA,kBAAO1J,SAAP;;AACA,kBAAI,OAAOA,SAAP,KAAmB,QAAvB,EAAiC;AAC/B,sBAAM,IAAImC,KAAJ,0DAAyDnC,SAAzD,8BAAN;AACD;;AACD,oBAAM,KAAK+J,UAAL,CAAgB/J,SAAhB,CAAN;AACA0C,cAAAA,IAAI,CAAC,oBAAD,EAAuB+G,SAAvB,CAAJ;AACD,aAPD,CAOE,OAAO3J,KAAP,EAAc;AACd4C,cAAAA,IAAI,CAAC,iBAAD,EAAoB+G,SAApB,EAA+B3J,KAA/B,CAAJ;AACA,mBAAKF,MAAL,CAAYE,KAAZ,CAAkB,sCAAlB;AACA,mBAAK4C,IAAL,CAAU,OAAV,EAAmB5C,KAAnB;AACD;;AACD;;AACF,eAAK,SAAL;AACE,gBAAI;AACF,oBAAM,KAAKa,OAAL,EAAN;AACA+B,cAAAA,IAAI,CAAC,iBAAD,EAAoB+G,SAApB,CAAJ;AACD,aAHD,CAGE,OAAO3J,KAAP,EAAc;AACd4C,cAAAA,IAAI,CAAC,cAAD,EAAiB+G,SAAjB,EAA4B3J,KAA5B,CAAJ;AACA,mBAAKF,MAAL,CAAYE,KAAZ,CAAkB,kCAAlB;AACA,mBAAK4C,IAAL,CAAU,OAAV,EAAmB5C,KAAnB;AACD;;AACD;;AACF,eAAK,kBAAL;AACE,gBAAI;AACF,mBAAKkK,gBAAL;AACAtH,cAAAA,IAAI,CAAC,0BAAD,EAA6B+G,SAA7B,CAAJ;AACD,aAHD,CAGE,OAAO3J,KAAP,EAAc;AACd4C,cAAAA,IAAI,CAAC,uBAAD,EAA0B+G,SAA1B,EAAqC3J,KAArC,CAAJ;AACA,mBAAKF,MAAL,CAAYE,KAAZ,CAAkB,2CAAlB;AACA,mBAAK4C,IAAL,CAAU,OAAV,EAAmB5C,KAAnB;AACD;;AACD;;AACF,eAAK,mBAAL;AACE,gBAAI;AACF,mBAAKQ,iBAAL;AACAoC,cAAAA,IAAI,CAAC,2BAAD,EAA8B+G,SAA9B,CAAJ;AACD,aAHD,CAGE,OAAO3J,KAAP,EAAc;AACd4C,cAAAA,IAAI,CAAC,wBAAD,EAA2B+G,SAA3B,EAAsC3J,KAAtC,CAAJ;AACA,mBAAKF,MAAL,CAAYE,KAAZ,CAAkB,4CAAlB;AACA,mBAAK4C,IAAL,CAAU,OAAV,EAAmB5C,KAAnB;AACD;;AACD;;AACF,eAAK,aAAL;AACE,gBAAI;AACF,kBAAMmC,QAAQ,SAAS,KAAKgI,WAAL,EAAvB;AACAvH,cAAAA,IAAI,CAAC,mBAAD,EAAsB+G,SAAtB,qBAAqCxH,QAArC,EAAJ;AACD,aAHD,CAGE,OAAOnC,KAAP,EAAc;AACd4C,cAAAA,IAAI,CAAC,gBAAD,EAAmB+G,SAAnB,EAA8B3J,KAA9B,CAAJ;AACA,mBAAKF,MAAL,CAAYE,KAAZ,CAAkB,sCAAlB;AACA,mBAAK4C,IAAL,CAAU,OAAV,EAAmB5C,KAAnB;AACD;;AACD;;AACF,eAAK,qBAAL;AACE,gBAAI;AACF,iDAAkB4J,WAAlB;AAAA,kBAAO1J,SAAP;;AACA,kBAAI,OAAOA,SAAP,KAAmB,QAAvB,EAAiC;AAC/B,sBAAM,IAAImC,KAAJ,0DAAyDnC,SAAzD,8BAAN;AACD;;AACD,kBAAMmD,MAAM,SAAS,KAAKI,mBAAL,CAAyBvD,SAAzB,CAArB;AACA0C,cAAAA,IAAI,CAAC,6BAAD,EAAgC+G,SAAhC,EAA2CtG,MAA3C,CAAJ;AACD,aAPD,CAOE,OAAOrD,KAAP,EAAc;AACd4C,cAAAA,IAAI,CAAC,0BAAD,EAA6B+G,SAA7B,EAAwC3J,KAAxC,CAAJ;AACA,mBAAKF,MAAL,CAAYE,KAAZ,CAAkB,gDAAlB;AACA,mBAAK4C,IAAL,CAAU,OAAV,EAAmB5C,KAAnB;AACD;;AACD;;AACF,eAAK,mBAAL;AACE,gBAAI;AACF,iDAAkB4J,WAAlB;AAAA,kBAAO1J,SAAP;;AACA,kBAAI,OAAOA,SAAP,KAAmB,QAAvB,EAAiC;AAC/B,sBAAM,IAAImC,KAAJ,0DAAyDnC,SAAzD,8BAAN;AACD;;AACD,kBAAMkK,cAAc,GAAG,KAAKC,iBAAL,CAAuBnK,SAAvB,CAAvB;AACA0C,cAAAA,IAAI,CAAC,2BAAD,EAA8B+G,SAA9B,EAAyCS,cAAzC,CAAJ;AACD,aAPD,CAOE,OAAOpK,KAAP,EAAc;AACd4C,cAAAA,IAAI,CAAC,wBAAD,EAA2B+G,SAA3B,EAAsC3J,KAAtC,CAAJ;AACA,mBAAKF,MAAL,CAAYE,KAAZ,CAAkB,+CAAlB;AACA,mBAAK4C,IAAL,CAAU,OAAV,EAAmB5C,KAAnB;AACD;;AACD;;AACF,eAAK,mBAAL;AACE,gBAAI;AACF,oBAAM,KAAKsK,iBAAL,EAAN;AACA1H,cAAAA,IAAI,CAAC,2BAAD,EAA8B+G,SAA9B,CAAJ;AACD,aAHD,CAGE,OAAO3J,KAAP,EAAc;AACd4C,cAAAA,IAAI,CAAC,wBAAD,EAA2B+G,SAA3B,EAAsC3J,KAAtC,CAAJ;AACA,mBAAKF,MAAL,CAAYE,KAAZ,CAAkB,uCAAlB;AACA,mBAAK4C,IAAL,CAAU,OAAV,EAAmB5C,KAAnB;AACD;;AACD;;AACF,eAAK,MAAL;AACE,gBAAI;AACF,iDAA6B4J,WAA7B;AAAA,kBAAOrD,WAAP;AAAA,kBAAoB5C,KAApB;;AACA,kBAAI,OAAO4C,WAAP,KAAuB,QAA3B,EAAqC;AACnC,sBAAM,IAAIlE,KAAJ,0DAAyDkE,WAAzD,8BAAN;AACD;;AACD,kBAAI,OAAO5C,KAAP,KAAiB,QAArB,EAA+B;AAC7B,sBAAM,IAAItB,KAAJ,0DAAyDsB,KAAzD,8BAAN;AACD;;AACD,oBAAM,KAAKD,MAAL,CAAY6C,WAAW,IAAIE,IAAI,CAACC,GAAL,KAAa/C,KAAjB,CAAvB,CAAN;AACAf,cAAAA,IAAI,CAAC,cAAD,EAAiB+G,SAAjB,CAAJ;AACD,aAVD,CAUE,OAAO3J,KAAP,EAAc;AACd4C,cAAAA,IAAI,CAAC,WAAD,EAAc+G,SAAd,EAAyB3J,KAAzB,CAAJ;AACA,mBAAKF,MAAL,CAAYE,KAAZ,CAAkB,+BAAlB;AACA,mBAAK4C,IAAL,CAAU,OAAV,EAAmB5C,KAAnB;AACD;;AACD;;AACF;AACE,iBAAKF,MAAL,CAAY6G,IAAZ,iDAA0DxF,IAA1D;AA9LJ;AAgMD,O;;;;;;;;;;;4CAED,aAAqB;AAAA;;AACnB,aAAKrB,MAAL,CAAY+E,IAAZ,CAAiB,wBAAjB;;AACA,YAAI,KAAKjF,WAAT,EAAsB;AACpB,eAAKE,MAAL,CAAY6G,IAAZ,CAAiB,4BAAjB;AACA;AACD;;AACD,YAAI;AAAA,uDACwC,KAAK9G,KAAL,CAAWwD,MAAX,EADxC;AAAA;;AAAA;AACF,sEAA+D;AAAA,kBAAlDkG,uBAAkD,iBAAlDA,uBAAkD;AAC7D5E,cAAAA,YAAY,CAAC4E,uBAAD,CAAZ;AACD;AAHC;AAAA;AAAA;AAAA;AAAA;;AAIF,cAAMC,yBAAyB,GAAG,KAAKA,yBAAvC;;AACA,cAAI,OAAOA,yBAAP,KAAqC,QAAzC,EAAmD;AACjD,iBAAK1J,MAAL,CAAY6G,IAAZ,CAAiB,4CAAjB;AACA;AACD;;AACD,eAAK/G,WAAL,GAAmB,IAAnB;AACA,iBAAO,KAAK4J,yBAAZ;AACA,cAAMtC,KAAK,GAAGsC,yBAAyB,GAAG/C,IAAI,CAACC,GAAL,EAA1C;;AACA,cAAIQ,KAAK,GAAG,CAAZ,EAAe;AACb,kBAAM,IAAI7C,OAAJ,CAAY,UAACC,OAAD,EAAa;AAC7B,kBAAMC,OAAO,GAAGC,UAAU,CAAC,YAAM;AAC/BG,gBAAAA,YAAY,CAACJ,OAAD,CAAZ;;AACA,gBAAA,OAAI,CAACxC,cAAL,CAAoB,WAApB,EAAiCwI,eAAjC;;AACAjG,gBAAAA,OAAO;AACR,eAJyB,EAIvB4C,KAJuB,CAA1B;;AAKA,kBAAMqD,eAAe,GAAG,SAAlBA,eAAkB,GAAM;AAC5B5F,gBAAAA,YAAY,CAACJ,OAAD,CAAZ;;AACA,gBAAA,OAAI,CAACxC,cAAL,CAAoB,WAApB,EAAiCwI,eAAjC;;AACAjG,gBAAAA,OAAO;AACR,eAJD;;AAKA,cAAA,OAAI,CAACvE,WAAL,CAAiB,WAAjB,EAA8BwK,eAA9B;AACD,aAZK,CAAN;AAaD;;AACD,cAAI,OAAO,KAAKf,yBAAZ,KAA0C,QAA9C,EAAwD;AACtD,iBAAK1J,MAAL,CAAY+E,IAAZ,CAAiB,8CAAjB;AACA;AACD;;AACD,eAAK/E,MAAL,CAAY+E,IAAZ,CAAiB,WAAjB;AACA,gBAAM,KAAKyF,iBAAL,EAAN;;AAhCE,uDAiCiB,KAAKzK,KAAL,CAAWmC,IAAX,EAjCjB;AAAA;;AAAA;AAiCF,sEAAsC;AAAA,kBAA3BC,IAA2B;AACpCA,cAAAA,IAAI,CAACC,WAAL,CAAiB;AAAEf,gBAAAA,IAAI,EAAE,cAAR;AAAwBQ,gBAAAA,IAAI,EAAE;AAA9B,eAAjB;AACD;AAnCC;AAAA;AAAA;AAAA;AAAA;;AAoCF,gBAAM,KAAK+B,MAAL,EAAN;AACD,SArCD,SAqCU;AACR,eAAK9D,WAAL,GAAmB,KAAnB;AACD;AACF,O;;;;;;;;;;WAED,6BAAoB;AAAA;;AAClB,aAAO,KAAKf,WAAL,CAAiBmF,GAAjB,iCAAqB,aAAY;AACtC,YAAM5B,YAAY,GAAG,OAAI,CAACA,YAA1B;;AACA,YAAI,OAAOA,YAAP,KAAwB,UAA5B,EAAwC;AACtC,cAAI;AACF,gBAAMoI,UAAU,SAAS,0CAAzB;AACA,kBAAMpI,YAAY,CAACoI,UAAD,CAAlB;AACA,kBAAM,0CAAN;AACD,WAJD,CAIE,OAAOxK,KAAP,EAAc;AACd,YAAA,OAAI,CAACF,MAAL,CAAYE,KAAZ,CAAkB,yBAAlB;;AACA,YAAA,OAAI,CAACF,MAAL,CAAYG,UAAZ,CAAuBD,KAAvB;AACD;AACF;AACF,OAZM,EAAP;AAaD;;;WAED,oBAAWiC,IAAX,EAA6B;AAC3B,UAAMkH,YAAY,GAAG,KAAKtJ,KAAL,CAAWQ,GAAX,CAAe4B,IAAf,CAArB;;AACA,UAAI,OAAOkH,YAAP,KAAwB,WAA5B,EAAyC;AACvC,aAAKrJ,MAAL,CAAY+E,IAAZ,CAAiB,wDAAjB;AACA;AACD;;AACD,UACEnE,YADF,GAMIyI,YANJ,CACEzI,YADF;AAAA,UAEEK,eAFF,GAMIoI,YANJ,CAEEpI,eAFF;AAAA,UAGEG,eAHF,GAMIiI,YANJ,CAGEjI,eAHF;AAAA,UAIEuJ,eAJF,GAMItB,YANJ,CAIEsB,eAJF;AAAA,UAKElB,uBALF,GAMIJ,YANJ,CAKEI,uBALF;;AAQAmB,gCAAgB3I,cAAhB,CAA+B,QAA/B,EAAyCrB,YAAzC;;AACAgK,gCAAgB3I,cAAhB,CAA+B,WAA/B,EAA4ChB,eAA5C;;AACA2J,gCAAgB3I,cAAhB,CAA+B,WAA/B,EAA4Cb,eAA5C;;AACAwJ,gCAAgB3I,cAAhB,CAA+B,WAA/B,EAA4C0I,eAA5C;;AACA9F,MAAAA,YAAY,CAAC4E,uBAAD,CAAZ;AAEAtH,MAAAA,IAAI,CAACC,WAAL,CAAiB;AAAEf,QAAAA,IAAI,EAAE,QAAR;AAAkBQ,QAAAA,IAAI,EAAE;AAAxB,OAAjB;AAEAM,MAAAA,IAAI,CAAC0I,SAAL,GAAiB,IAAjB,CAtB2B,CAsBJ;;AACvB1I,MAAAA,IAAI,CAAC2I,cAAL,GAAsB,IAAtB,CAvB2B,CAuBC;;AAC5B3I,MAAAA,IAAI,CAAC4I,KAAL;AAEA,WAAKhL,KAAL,CAAW2C,MAAX,CAAkBP,IAAlB;AACD;;;WAED,2CAAkC;AAAA;;AAChCtB,MAAAA,IAAI,CAACwH,gBAAL,CAAsB,MAAtB,EAA8B,UAACc,KAAD,EAAW;AACvC,QAAA,OAAI,CAACnJ,MAAL,CAAY+E,IAAZ,6BAAsCoE,KAAK,CAAC6B,GAA5C,SAAkD7B,KAAK,CAAC8B,UAAN,GAAmB,eAAnB,GAAqC,EAAvF;;AACA,YAAI9B,KAAK,CAAC6B,GAAN,KAAc,mBAAlB,EAAuC;AACrC,UAAA,OAAI,CAAChL,MAAL,CAAY+E,IAAZ,CAAiB,mCAAjB;;AACA,UAAA,OAAI,CAACjC,IAAL,CAAU,mBAAV;;AACAqG,UAAAA,KAAK,CAAC+B,SAAN,CAAgB,OAAI,CAACtH,MAAL,GAAc5B,KAAd,CAAoB,UAAC9B,KAAD,EAAW;AAC7C,YAAA,OAAI,CAACF,MAAL,CAAYE,KAAZ,2CAAqDiJ,KAAK,CAAC8B,UAAN,GAAmB,iBAAnB,GAAuC,EAA5F;;AACA,YAAA,OAAI,CAACjL,MAAL,CAAYG,UAAZ,CAAuBD,KAAvB;AACD,WAHe,CAAhB;AAID,SAPD,MAOO,IAAIiJ,KAAK,CAAC6B,GAAN,KAAc,QAAlB,EAA4B;AACjC,UAAA,OAAI,CAAChL,MAAL,CAAY+E,IAAZ,CAAiB,4CAAjB;;AACAoE,UAAAA,KAAK,CAAC+B,SAAN,CAAgB,OAAI,CAACvB,YAAL,GAAoB3H,KAApB,CAA0B,UAAC9B,KAAD,EAAW;AACnD,YAAA,OAAI,CAACF,MAAL,CAAYE,KAAZ,2CAAqDiJ,KAAK,CAAC8B,UAAN,GAAmB,iBAAnB,GAAuC,EAA5F;;AACA,YAAA,OAAI,CAACjL,MAAL,CAAYG,UAAZ,CAAuBD,KAAvB;AACD,WAHe,CAAhB;AAID,SANM,MAMA;AACL,UAAA,OAAI,CAACF,MAAL,CAAY6G,IAAZ,kDAA2DsC,KAAK,CAAC6B,GAAjE;AACD;AACF,OAlBD;AAoBAnK,MAAAA,IAAI,CAACwH,gBAAL,CAAsB,SAAtB,EAAiC,UAACc,KAAD,EAAkC;AACjE,YAAI,EAAEA,KAAK,YAAYgC,sBAAnB,CAAJ,EAAgD;AAC9C;AACD;;AACD,YAAQhE,IAAR,GAAiBgC,KAAjB,CAAQhC,IAAR;;AACA,YAAI,CAACA,IAAD,IAAS,QAAOA,IAAP,MAAgB,QAA7B,EAAuC;AACrC;AACD;;AACD,YAAQ9F,IAAR,GAAiB8F,IAAjB,CAAQ9F,IAAR;;AACA,YAAIA,IAAI,KAAK,qCAAb,EAAoD;AAClD;AACD;;AACD,YAAI,CAACkE,KAAK,CAACC,OAAN,CAAc2D,KAAK,CAACpJ,KAApB,CAAL,EAAiC;AAC/B;AACD;;AACD,YAAMoC,IAAI,GAAGgH,KAAK,CAACpJ,KAAN,CAAY,CAAZ,CAAb;;AACA,YAAI,EAAEoC,IAAI,YAAYiJ,WAAlB,CAAJ,EAAoC;AAClC;AACD;;AACD,YAAI,OAAI,CAACrL,KAAL,CAAW6B,GAAX,CAAeO,IAAf,CAAJ,EAA0B;AACxB;AACD;;AAEDA,QAAAA,IAAI,CAAC0I,SAAL,GAAiB,UAACQ,MAAD;AAAA,iBAAyB,OAAI,CAACC,iBAAL,CAAuBnJ,IAAvB,EAA6BkJ,MAA7B,CAAzB;AAAA,SAAjB,CAvBiE,CAuBe;;;AAEhFlJ,QAAAA,IAAI,CAAC2I,cAAL,GAAsB,UAACO,MAAD,EAAyB;AAC7C,UAAA,OAAI,CAACrL,MAAL,CAAYE,KAAZ,CAAkB,2CAAlB;;AACA,UAAA,OAAI,CAACF,MAAL,CAAYuL,WAAZ,CAAwBF,MAAxB;AACD,SAHD;;AAKA,YAAMzK,YAAY,GAAG,SAAfA,YAAe,GAAwB;AAAA,6CAApBiB,IAAoB;AAApBA,YAAAA,IAAoB;AAAA;;AAC3CM,UAAAA,IAAI,CAACC,WAAL,CAAiB;AAAEf,YAAAA,IAAI,EAAE,QAAR;AAAkBQ,YAAAA,IAAI,EAAJA;AAAlB,WAAjB;AACD,SAFD;;AAGA,YAAMZ,eAAe,GAAG,SAAlBA,eAAkB,GAAwB;AAAA,6CAApBY,IAAoB;AAApBA,YAAAA,IAAoB;AAAA;;AAC9CM,UAAAA,IAAI,CAACC,WAAL,CAAiB;AAAEf,YAAAA,IAAI,EAAE,WAAR;AAAqBQ,YAAAA,IAAI,EAAJA;AAArB,WAAjB;AACD,SAFD;;AAGA,YAAMT,eAAe,GAAG,SAAlBA,eAAkB,GAAwB;AAAA,6CAApBS,IAAoB;AAApBA,YAAAA,IAAoB;AAAA;;AAC9CM,UAAAA,IAAI,CAACC,WAAL,CAAiB;AAAEf,YAAAA,IAAI,EAAE,WAAR;AAAqBQ,YAAAA,IAAI,EAAJA;AAArB,WAAjB;AACD,SAFD;;AAGA,YAAM8I,eAAe,GAAG,SAAlBA,eAAkB,GAAwB;AAAA,6CAApB9I,IAAoB;AAApBA,YAAAA,IAAoB;AAAA;;AAC9CM,UAAAA,IAAI,CAACC,WAAL,CAAiB;AAAEf,YAAAA,IAAI,EAAE,WAAR;AAAqBQ,YAAAA,IAAI,EAAJA;AAArB,WAAjB;AACD,SAFD;;AAIA+I,kCAAgB3K,WAAhB,CAA4B,QAA5B,EAAsCW,YAAtC;;AACAgK,kCAAgB3K,WAAhB,CAA4B,WAA5B,EAAyCgB,eAAzC;;AACA2J,kCAAgB3K,WAAhB,CAA4B,WAA5B,EAAyCmB,eAAzC;;AACAwJ,kCAAgB3K,WAAhB,CAA4B,WAA5B,EAAyC0K,eAAzC;;AAGA,YAAMtB,YAAY,GAAG;AACnBzI,UAAAA,YAAY,EAAZA,YADmB;AAEnBK,UAAAA,eAAe,EAAfA,eAFmB;AAGnBG,UAAAA,eAAe,EAAfA,eAHmB;AAInBuJ,UAAAA,eAAe,EAAfA;AAJmB,SAArB;;AAOA,QAAA,OAAI,CAAC5K,KAAL,CAAW0C,GAAX,CAAeN,IAAf,EAAqBkH,YAArB;;AAEAlH,QAAAA,IAAI,CAACC,WAAL,CAAiB;AAAEf,UAAAA,IAAI,EAAE;AAAR,SAAjB;;AAEA,QAAA,OAAI,CAACrB,MAAL,CAAY+E,IAAZ,CAAiB,4BAAjB;AACD,OA7DD;AA8DAlE,MAAAA,IAAI,CAACwH,gBAAL,CAAsB,cAAtB,EAAsC,UAACc,KAAD,EAAwB;AAC5D,QAAA,OAAI,CAACnJ,MAAL,CAAYE,KAAZ,CAAkB,wCAAlB;;AACA,QAAA,OAAI,CAACF,MAAL,CAAYuL,WAAZ,CAAwBpC,KAAxB;AACD,OAHD;AAID;;;;EAjzCuCqC,e","sourcesContent":["// @flow\n\nimport PQueue from 'p-queue';\nimport EventEmitter from 'events';\nimport type { Logger } from './logger';\nimport makeLogger from './logger';\nimport type { Job } from './database';\nimport {\n  jobEmitter,\n  localJobEmitter,\n  clearDatabase,\n  dequeueFromDatabase,\n  dequeueFromDatabaseNotIn,\n  incrementJobAttemptInDatabase,\n  incrementCleanupAttemptInDatabase,\n  markJobCompleteInDatabase,\n  markJobCompleteThenRemoveFromDatabase,\n  markJobPendingInDatabase,\n  markJobErrorInDatabase,\n  markJobStartAfterInDatabase,\n  markJobAsAbortedOrRemoveFromDatabase,\n  markCleanupStartAfterInDatabase,\n  markQueuePendingInDatabase,\n  updateCleanupValuesInDatabase,\n  getCleanupFromDatabase,\n  removePathFromCleanupDataInDatabase,\n  getJobFromDatabase,\n  markQueueForCleanupInDatabase,\n  markQueueForCleanupAndRemoveInDatabase,\n  markQueueJobsGreaterThanIdCleanupAndRemoveInDatabase,\n  removeCleanupFromDatabase,\n  restoreJobToDatabaseForCleanupAndRemove,\n  getUnloadDataFromDatabase,\n  clearUnloadDataInDatabase,\n  getGreatestJobIdFromQueueInDatabase,\n  JOB_PENDING_STATUS,\n  JOB_ERROR_STATUS,\n  JOB_CLEANUP_STATUS,\n  JOB_CLEANUP_AND_REMOVE_STATUS,\n} from './database';\nimport { AbortError } from './errors';\n\nexport const CLEANUP_JOB_TYPE = 'CLEANUP_JOB_TYPE';\n\nconst BASE_PRIORITY = Math.floor(Number.MAX_SAFE_INTEGER / 2);\nconst HIGH_PRIORITY_OFFSET = Math.floor(Number.MAX_SAFE_INTEGER / 8);\n\ntype HandlerFunction = (Array<any>, AbortSignal, (Object) => Promise<void>, (number, number) => void) => Promise<void | false>;\ntype CleanupFunction = (Object | void, Array<any>, Array<string> => Promise<void>) => Promise<void>;\ntype DurationEstimateFunction = (Array<any>) => number;\ntype RetryDelayFunction = (number, Error) => number | false | Promise<number | false>;\ntype UnloadFunction = (Object | void) => Promise<void> | void;\n\ntype Options = {\n  logger?: Logger,\n  startOnJob?: boolean\n};\n\nexport default class BatteryQueue extends EventEmitter {\n  declare logger: Logger;\n  declare dequeueQueue: PQueue;\n  declare unloadQueue: PQueue;\n  declare handlerMap: Map<string, HandlerFunction>;\n  declare retryJobDelayMap: Map<string, RetryDelayFunction>;\n  declare retryCleanupDelayMap: Map<string, RetryDelayFunction>;\n  declare cleanupMap: Map<string, CleanupFunction>;\n  declare queueCurrentJobTypeMap: Map<string, string>;\n  declare durationEstimateHandlerMap: Map<string, DurationEstimateFunction>;\n  declare durationEstimateMap: Map<string, Map<number, [number, number]>>;\n  declare durationEstimateUpdaterMap: Map<number, () => number>;\n  declare queueMap: Map<string, PQueue>;\n  declare handleUnload: void | UnloadFunction;\n  declare abortControllerMap: Map<string, Map<number, AbortController>>;\n  declare isClearing: boolean;\n  declare isUnloading: boolean;\n  declare onIdlePromise: Promise<void> | void;\n  declare stopPromise: Promise<void> | void;\n  declare jobIds: Set<number>;\n  declare heartbeatExpiresTimestamp: number | void;\n\n  declare ports: Map<MessagePort, {\n    handleJobAdd: (Event) => void,\n    handleJobUpdate: (Event) => void,\n    handleJobDelete: (Event) => void,\n    handleJobsClear: (Event) => void,\n    heartbeatExpiresTimeout?: TimeoutID\n  }>;\n\n  declare handleJobAdd: void | () => void;\n  declare handleJobUpdate: void | (number, string, string, number) => void;\n  declare handleJobDelete: void | (number, string) => void;\n  declare stopped: boolean;\n\n  constructor(options?: Options = {}) {\n    super();\n    this.stopped = false;\n    this.dequeueQueue = new PQueue({ concurrency: 1 });\n    this.unloadQueue = new PQueue({ concurrency: 1 });\n    this.handlerMap = new Map();\n    this.cleanupMap = new Map();\n    this.durationEstimateHandlerMap = new Map();\n    this.durationEstimateMap = new Map();\n    this.durationEstimateUpdaterMap = new Map();\n    this.retryJobDelayMap = new Map();\n    this.retryCleanupDelayMap = new Map();\n    this.queueCurrentJobTypeMap = new Map();\n    this.queueMap = new Map();\n    this.jobIds = new Set();\n    this.durationEstimateUpdaterMap = new Map();\n    this.abortControllerMap = new Map();\n    this.isClearing = false;\n    this.isUnloading = false;\n    this.ports = new Map();\n    this.logger = options.logger || makeLogger('Battery Queue');\n    this.addListener('error', (error) => {\n      this.logger.errorStack(error);\n    });\n  }\n\n  abortJob(queueId:string, jobId:number) {\n    const queueAbortControllerMap = this.abortControllerMap.get(queueId);\n    if (typeof queueAbortControllerMap !== 'undefined') {\n      const abortController = queueAbortControllerMap.get(jobId);\n      if (typeof abortController !== 'undefined') {\n        abortController.abort();\n        return true;\n      }\n    }\n    return false;\n  }\n\n  enableStartOnJob() {\n    this.disableStartOnJob(); // Prevent handlers from being added multiple times\n    let didRequestJobAddDequeue = false;\n    const handleJobAdd = () => {\n      if (didRequestJobAddDequeue) {\n        return;\n      }\n      didRequestJobAddDequeue = true;\n      self.queueMicrotask(() => {\n        didRequestJobAddDequeue = false;\n        this.dequeue();\n      });\n    };\n    jobEmitter.addListener('jobAdd', handleJobAdd);\n    this.handleJobAdd = handleJobAdd;\n    const handleJobDelete = (id:number, queueId:string) => {\n      this.abortJob(queueId, id);\n    };\n    jobEmitter.addListener('jobDelete', handleJobDelete);\n    this.handleJobDelete = handleJobDelete;\n\n    const handleJobUpdate = (id:number, queueId:string, type:string, status:number) => {\n      if (status !== JOB_CLEANUP_AND_REMOVE_STATUS && status !== JOB_CLEANUP_STATUS) {\n        return;\n      }\n      const didAbort = this.abortJob(queueId, id);\n      if (didAbort) {\n        return;\n      }\n      getJobFromDatabase(id).then((job:Job | void) => {\n        if (typeof job === 'undefined') {\n          this.logger.error(`Unable to cleanup and remove ${type} job #${id} in queue ${queueId}, job does not exist`);\n          return;\n        }\n        if (this.jobIds.has(id)) {\n          return;\n        }\n        const { args, prioritize } = job;\n        this.startCleanup(id, queueId, args, type, true, prioritize);\n      }).catch((error) => {\n        this.logger.error(`Error while cleaning up and removing ${type} job #${id} in queue ${queueId}`);\n        this.logger.errorStack(error);\n      });\n    };\n    jobEmitter.addListener('jobUpdate', handleJobUpdate);\n    this.handleJobUpdate = handleJobUpdate;\n  }\n\n  disableStartOnJob() {\n    const handleJobAdd = this.handleJobAdd;\n    if (typeof handleJobAdd === 'function') {\n      jobEmitter.removeListener('jobAdd', handleJobAdd);\n      delete this.handleJobAdd;\n    }\n    const handleJobUpdate = this.handleJobUpdate;\n    if (typeof handleJobUpdate === 'function') {\n      jobEmitter.removeListener('jobUpdate', handleJobUpdate);\n      delete this.handleJobUpdate;\n    }\n    const handleJobDelete = this.handleJobDelete;\n    if (typeof handleJobDelete === 'function') {\n      jobEmitter.removeListener('jobDelete', handleJobDelete);\n      delete this.handleJobDelete;\n    }\n  }\n\n  emit(type:string, ...args:Array<any>) {\n    for (const port of this.ports.keys()) {\n      port.postMessage({ type, args });\n    }\n    return super.emit(type, ...args);\n  }\n\n  async getQueueIds() {\n    await this.dequeue();\n    const queueIds:Set<string> = new Set(this.queueMap.keys());\n    return queueIds;\n  }\n\n  setUnload(handleUnload:UnloadFunction) {\n    if (typeof this.handleUnload === 'function') {\n      throw new Error('Unload handler already exists');\n    }\n    this.handleUnload = handleUnload;\n  }\n\n  removeUnload() {\n    if (typeof this.handleUnload !== 'function') {\n      throw new Error('Unload handler does not exist');\n    }\n    delete this.handleUnload;\n  }\n\n  setRetryJobDelay(type:string, retryJobDelayFunction:RetryDelayFunction) {\n    if (this.retryJobDelayMap.has(type)) {\n      throw new Error(`Retry job delay handler for type \"${type}\" already exists`);\n    }\n    this.retryJobDelayMap.set(type, retryJobDelayFunction);\n  }\n\n  removeRetryJobDelay(type:string) {\n    if (!this.retryJobDelayMap.has(type)) {\n      throw new Error(`Retry job delay handler for type \"${type}\" does not exist`);\n    }\n    this.retryJobDelayMap.delete(type);\n  }\n\n  async getRetryJobDelay(type:string, attempt: number, error:Error) {\n    const retryJobDelayFunction = this.retryJobDelayMap.get(type);\n    if (typeof retryJobDelayFunction !== 'function') {\n      return false;\n    }\n    let result = false;\n    try {\n      result = await retryJobDelayFunction(attempt, error);\n    } catch (retryDelayError) {\n      this.logger.error(`Error in retry job delay handler for type \"${type}\" on attempt ${attempt}`);\n      this.emit('error', retryDelayError);\n      return false;\n    }\n    if (typeof result !== 'number' && result !== false) {\n      throw new Error(`Retry job delay function for type \"${type}\" returned invalid response, should be a number (milliseconds) or false`);\n    }\n    return result;\n  }\n\n  setRetryCleanupDelay(type:string, retryCleanupDelayFunction:RetryDelayFunction) {\n    if (this.retryCleanupDelayMap.has(type)) {\n      throw new Error(`Retry cleanup delay handler for type \"${type}\" already exists`);\n    }\n    this.retryCleanupDelayMap.set(type, retryCleanupDelayFunction);\n  }\n\n  removeRetryCleanupDelay(type:string) {\n    if (!this.retryCleanupDelayMap.has(type)) {\n      throw new Error(`Retry cleanup delay handler for type \"${type}\" does not exist`);\n    }\n    this.retryCleanupDelayMap.delete(type);\n  }\n\n  async getRetryCleanupDelay(type:string, attempt: number, error:Error) {\n    const retryCleanupDelayFunction = this.retryCleanupDelayMap.get(type);\n    if (typeof retryCleanupDelayFunction !== 'function') {\n      return false;\n    }\n    let result = false;\n    try {\n      result = await retryCleanupDelayFunction(attempt, error);\n    } catch (retryDelayError) {\n      this.logger.error(`Error in retry cleanup delay handler for type \"${type}\" on attempt ${attempt}`);\n      this.emit('error', retryDelayError);\n      return false;\n    }\n    if (typeof result !== 'number' && result !== false) {\n      throw new Error(`Retry cleanup delay function for type \"${type}\" returned invalid response, should be a number (milliseconds) or false`);\n    }\n    return result;\n  }\n\n  setHandler(type:string, handler: HandlerFunction) {\n    if (this.handlerMap.has(type)) {\n      throw new Error(`Handler for type \"${type}\" already exists`);\n    }\n    this.handlerMap.set(type, handler);\n  }\n\n  removeHandler(type:string) {\n    if (!this.handlerMap.has(type)) {\n      throw new Error(`Handler for type \"${type}\" does not exist`);\n    }\n    this.handlerMap.delete(type);\n  }\n\n  setCleanup(type:string, cleanup: CleanupFunction) {\n    if (this.cleanupMap.has(type)) {\n      throw new Error(`Cleanup for type \"${type}\" already exists`);\n    }\n    this.cleanupMap.set(type, cleanup);\n  }\n\n  removeCleanup(type:string) {\n    if (!this.cleanupMap.has(type)) {\n      throw new Error(`Cleanup for type \"${type}\" does not exist`);\n    }\n    this.cleanupMap.delete(type);\n  }\n\n  setDurationEstimateHandler(type:string, timeEstimationHandler: DurationEstimateFunction) {\n    if (this.durationEstimateHandlerMap.has(type)) {\n      throw new Error(`Time estimation handler for type \"${type}\" already exists`);\n    }\n    this.durationEstimateHandlerMap.set(type, timeEstimationHandler);\n  }\n\n  removeDurationEstimateHandler(type:string) {\n    if (!this.durationEstimateHandlerMap.has(type)) {\n      throw new Error(`Time estimation handler for type \"${type}\" does not exist`);\n    }\n    this.durationEstimateHandlerMap.delete(type);\n  }\n\n  addDurationEstimate(queueId:string, jobId:number, duration:number, pending:number) {\n    const queueDurationEstimateMap = this.durationEstimateMap.get(queueId);\n    if (typeof queueDurationEstimateMap === 'undefined') {\n      this.durationEstimateMap.set(queueId, new Map([[jobId, [duration, pending]]]));\n      this.emitDurationEstimate(queueId);\n      return;\n    }\n    queueDurationEstimateMap.set(jobId, [duration, pending]);\n    this.emitDurationEstimate(queueId);\n  }\n\n  removeDurationEstimate(queueId:string, jobId?:number) {\n    if (typeof jobId !== 'number') {\n      this.durationEstimateMap.delete(queueId);\n      this.emitDurationEstimate(queueId);\n      return;\n    }\n    const queueDurationEstimateMap = this.durationEstimateMap.get(queueId);\n    if (typeof queueDurationEstimateMap === 'undefined') {\n      this.emitDurationEstimate(queueId);\n      return;\n    }\n    queueDurationEstimateMap.delete(jobId);\n    this.emitDurationEstimate(queueId);\n  }\n\n  updateDurationEstimates() {\n    for (const updateDurationEstimate of this.durationEstimateUpdaterMap.values()) {\n      updateDurationEstimate();\n    }\n  }\n\n  getDurationEstimate(queueId:string) {\n    const queueDurationEstimateMap = this.durationEstimateMap.get(queueId);\n    let totalDuration = 0;\n    let totalPending = 0;\n    if (typeof queueDurationEstimateMap === 'undefined') {\n      return [totalDuration, totalPending];\n    }\n    for (const [duration, pending] of queueDurationEstimateMap.values()) {\n      totalDuration += duration;\n      totalPending += pending;\n    }\n    return [totalDuration, totalPending];\n  }\n\n  emitDurationEstimate(queueId:string) {\n    const [totalDuration, totalPending] = this.getDurationEstimate(queueId);\n    this.emit('queueDuration', queueId, totalDuration, totalPending);\n  }\n\n  setCurrentJobType(queueId:string, type?:void | string) {\n    if (typeof type === 'string') {\n      this.queueCurrentJobTypeMap.set(queueId, type);\n    } else {\n      this.queueCurrentJobTypeMap.delete(queueId);\n    }\n    this.emit('queueJobType', queueId, type);\n  }\n\n  getCurrentJobType(queueId:string) {\n    return this.queueCurrentJobTypeMap.get(queueId);\n  }\n\n  async clear() {\n    this.isClearing = true;\n    await this.onIdle();\n    this.emit('clearing');\n    await clearDatabase();\n    this.dequeueQueue.start();\n    this.isClearing = false;\n  }\n\n  addToQueue(queueId:string, priority: number, autoStart: boolean, func: () => Promise<void>) {\n    if (this.stopped) {\n      return;\n    }\n    const queue = this.queueMap.get(queueId);\n    if (typeof queue !== 'undefined') {\n      queue.add(func, { priority });\n      return;\n    }\n    const newQueue = new PQueue({ concurrency: 1, autoStart });\n    this.queueMap.set(queueId, newQueue);\n    newQueue.add(func, { priority });\n    newQueue.on('idle', async () => {\n      this.setCurrentJobType(queueId, undefined);\n      if (!this.isClearing) {\n        await new Promise((resolve) => {\n          const timeout = setTimeout(() => {\n            this.removeListener('clearing', handleClearing);\n            newQueue.removeListener('active', handleActive);\n            resolve();\n          }, 5000);\n          const handleClearing = () => {\n            clearTimeout(timeout);\n            this.removeListener('clearing', handleClearing);\n            newQueue.removeListener('active', handleActive);\n            resolve();\n          };\n          const handleActive = () => {\n            clearTimeout(timeout);\n            this.removeListener('clearing', handleClearing);\n            newQueue.removeListener('active', handleActive);\n            resolve();\n          };\n          this.addListener('clearing', handleClearing);\n          newQueue.addListener('active', handleActive);\n        });\n      }\n      if (newQueue.pending > 0 || newQueue.size > 0) {\n        return;\n      }\n      this.queueMap.delete(queueId);\n      this.emit('queueInactive', queueId);\n    });\n    this.emit('queueActive', queueId);\n  }\n\n  async abortQueue(queueId: string) {\n    this.logger.info(`Aborting queue ${queueId}`);\n    this.removeDurationEstimate(queueId);\n    // Abort active jobs\n    const queueAbortControllerMap = this.abortControllerMap.get(queueId);\n    if (typeof queueAbortControllerMap !== 'undefined') {\n      for (const abortController of queueAbortControllerMap.values()) {\n        abortController.abort();\n      }\n    }\n    // Changes:\n    // * JOB_ERROR_STATUS -> JOB_CLEANUP_STATUS\n    // * JOB_COMPLETE_STATUS -> JOB_CLEANUP_STATUS\n    // * JOB_CLEANUP_AND_REMOVE_STATUS -> JOB_CLEANUP_AND_REMOVE_STATUS\n    // * JOB_PENDING_STATUS -> JOB_ABORTED_STATUS\n    const jobs = await markQueueForCleanupInDatabase(queueId);\n    await this.startJobs(jobs);\n  }\n\n  async retryQueue(queueId: string) {\n    this.logger.info(`Retrying queue ${queueId}`);\n    const lastJobId = await getGreatestJobIdFromQueueInDatabase(queueId);\n    const priority = BASE_PRIORITY - lastJobId - 0.5;\n    this.addToQueue(queueId, priority, true, async () => {\n      // Resets job attempts. Changes:\n      // * JOB_ABORTED_STATUS -> JOB_PENDING_STATUS\n      // * JOB_ERROR_STATUS -> JOB_ERROR_STATUS\n      // * JOB_CLEANUP_STATUS -> JOB_CLEANUP_STATUS\n      // * JOB_COMPLETE_STATUS -> JOB_COMPLETE_STATUS\n      // * JOB_CLEANUP_AND_REMOVE_STATUS -> JOB_CLEANUP_AND_REMOVE_STATUS\n      const jobs = await markQueuePendingInDatabase(queueId);\n      await this.startJobs(jobs);\n    });\n  }\n\n  async abortAndRemoveQueue(queueId: string) {\n    this.logger.info(`Aborting and removing queue ${queueId}`);\n    this.removeDurationEstimate(queueId);\n    // Abort active jobs\n    const queueAbortControllerMap = this.abortControllerMap.get(queueId);\n    if (typeof queueAbortControllerMap !== 'undefined') {\n      for (const abortController of queueAbortControllerMap.values()) {\n        abortController.abort();\n      }\n    }\n    // Changes:\n    // * JOB_ERROR_STATUS -> JOB_CLEANUP_AND_REMOVE_STATUS\n    // * JOB_COMPLETE_STATUS -> JOB_CLEANUP_AND_REMOVE_STATUS\n    // * JOB_CLEANUP_STATUS -> JOB_CLEANUP_AND_REMOVE_STATUS\n    // * JOB_CLEANUP_AND_REMOVE_STATUS -> JOB_CLEANUP_AND_REMOVE_STATUS\n    // * Removes other statuses\n    const jobs = await markQueueForCleanupAndRemoveInDatabase(queueId);\n    await this.startJobs(jobs);\n    this.emit('abortAndRemoveQueue', queueId);\n  }\n\n  async abortAndRemoveQueueJobsGreaterThanId(queueId: string, id: number) {\n    this.logger.info(`Aborting and removing jobs with ID greater than ${id} in queue ${queueId}`);\n    // Abort active jobs\n    const queueAbortControllerMap = this.abortControllerMap.get(queueId);\n    if (typeof queueAbortControllerMap !== 'undefined') {\n      for (const [jobId, abortController] of queueAbortControllerMap) {\n        if (jobId > id) {\n          this.removeDurationEstimate(queueId, jobId);\n          abortController.abort();\n        }\n      }\n    }\n    // Changes:\n    // * JOB_ERROR_STATUS -> JOB_CLEANUP_AND_REMOVE_STATUS\n    // * JOB_COMPLETE_STATUS -> JOB_CLEANUP_AND_REMOVE_STATUS\n    // * JOB_CLEANUP_STATUS -> JOB_CLEANUP_AND_REMOVE_STATUS\n    // * JOB_CLEANUP_AND_REMOVE_STATUS -> JOB_CLEANUP_AND_REMOVE_STATUS\n    // * Removes other statuses\n    const jobs = await markQueueJobsGreaterThanIdCleanupAndRemoveInDatabase(queueId, id);\n    await this.startJobs(jobs);\n    this.emit('abortAndRemoveQueueJobs', queueId, id);\n  }\n\n  async dequeue():Promise<void> {\n    if (this.stopped) {\n      return;\n    }\n    if (this.dequeueQueue.size === 0) {\n      // Add a subsequent dequeue\n      this.dequeueQueue.add(this.startJobs.bind(this));\n    }\n    await this.dequeueQueue.onIdle();\n  }\n\n  async startJobs(newJobs?:Array<Job>) { // eslint-disable-line consistent-return\n    const jobs = Array.isArray(newJobs) ? newJobs : await dequeueFromDatabaseNotIn([...this.jobIds.keys()]);\n    const queueIds = new Set();\n    for (const { id, queueId, args, type, status, attempt, startAfter, prioritize } of jobs) {\n      if (this.jobIds.has(id)) {\n        continue;\n      }\n      // Pause queues before adding items into them to avoid starting things out of priority\n      if (!queueIds.has(queueId)) {\n        const queue = this.queueMap.get(queueId);\n        if (typeof queue !== 'undefined') {\n          queue.pause();\n        }\n        queueIds.add(queueId);\n      }\n      if (status === JOB_PENDING_STATUS) {\n        this.startJob(id, queueId, args, type, attempt + 1, startAfter, false, prioritize);\n      } else if (status === JOB_ERROR_STATUS) {\n        this.startErrorHandler(id, queueId, args, type, attempt, startAfter, false, prioritize);\n      } else if (status === JOB_CLEANUP_STATUS) {\n        this.startCleanup(id, queueId, args, type, false, prioritize);\n      } else if (status === JOB_CLEANUP_AND_REMOVE_STATUS) {\n        this.startCleanup(id, queueId, args, type, false, prioritize);\n      } else {\n        throw new Error(`Unknown job status ${status} in job ${id} of queue ${queueId}`);\n      }\n    }\n    for (const queueId of queueIds) {\n      const queue = this.queueMap.get(queueId);\n      if (typeof queue !== 'undefined') {\n        queue.start();\n      } else {\n        this.logger.error(`Unable to start queue ${queueId} after dequeue; queue does not exist`);\n      }\n    }\n  }\n\n  async stop() {\n    if (typeof this.stopPromise === 'undefined') {\n      this.stopped = true;\n      this.stopPromise = (async () => {\n        await this.dequeueQueue.onIdle();\n        const idlePromises = [];\n        for (const [queueId, queue] of this.queueMap) {\n          const interval = setInterval(() => {\n            this.logger.info(`Waiting on queue ${queueId} stop() request. Queue ${queue.isPaused ? 'is paused' : 'is not paused'}, with ${queue.pending} ${queue.pending === 1 ? 'job' : 'jobs'} pending and ${queue.size} ${queue.size === 1 ? 'job' : 'jobs'} remaining.`);\n          }, 250);\n          queue.clear();\n          idlePromises.push(queue.onIdle().finally(() => {\n            clearInterval(interval);\n          }));\n        }\n        await Promise.all(idlePromises);\n        this.jobIds.clear();\n        this.abortControllerMap.clear();\n        delete this.stopPromise;\n        this.emit('stop');\n        this.stopped = false;\n      })();\n    }\n    await this.stopPromise;\n  }\n\n  async onIdle(maxDuration?: number) {\n    if (typeof this.onIdlePromise === 'undefined') {\n      this.onIdlePromise = (async () => {\n        const timeout = typeof maxDuration === 'number' ? Date.now() + maxDuration : -1;\n        const start = Date.now();\n        while (true) { // eslint-disable-line no-constant-condition\n          if (timeout !== -1 && Date.now() > timeout) {\n            this.logger.warn(`Idle timeout after ${Date.now() - start}ms`);\n            break;\n          }\n          await this.dequeueQueue.onIdle();\n          for (const [queueId, queue] of this.queueMap) {\n            const interval = setInterval(() => {\n              this.logger.info(`Waiting on queue ${queueId} onIdle() request. Queue ${queue.isPaused ? 'is paused' : 'is not paused'}, with ${queue.pending} ${queue.pending === 1 ? 'job' : 'jobs'} pending and ${queue.size} ${queue.size === 1 ? 'job' : 'jobs'} remaining.`);\n            }, 250);\n            await queue.onIdle();\n            clearInterval(interval);\n          }\n          const jobsInterval = setInterval(() => {\n            this.logger.info('Waiting on jobs');\n          }, 250);\n          const jobs = await dequeueFromDatabase();\n          clearInterval(jobsInterval);\n          if (jobs.length > 0) {\n            const interval = setInterval(() => {\n              this.logger.info('Waiting on dequeue');\n            }, 250);\n            await this.dequeue();\n            clearInterval(interval);\n            continue;\n          }\n          break;\n        }\n        delete this.onIdlePromise;\n        this.emit('idle');\n      })();\n    }\n    await this.onIdlePromise;\n  }\n\n  getAbortController(id:number, queueId:string) {\n    let queueAbortControllerMap = this.abortControllerMap.get(queueId);\n    if (typeof queueAbortControllerMap === 'undefined') {\n      queueAbortControllerMap = new Map();\n      this.abortControllerMap.set(queueId, queueAbortControllerMap);\n    }\n    const abortController = queueAbortControllerMap.get(id);\n    if (typeof abortController !== 'undefined') {\n      return abortController;\n    }\n    const newAbortController = new AbortController();\n    queueAbortControllerMap.set(id, newAbortController);\n    return newAbortController;\n  }\n\n  removeAbortController(id:number, queueId:string) {\n    const queueAbortControllerMap = this.abortControllerMap.get(queueId);\n    if (typeof queueAbortControllerMap === 'undefined') {\n      this.logger.warn(`Abort controller map for ${id} in queue ${queueId} does not exist`);\n      return;\n    }\n    const abortController = queueAbortControllerMap.get(id);\n    if (typeof abortController === 'undefined') {\n      this.logger.warn(`Abort controller for ${id} in queue ${queueId} does not exist`);\n      return;\n    }\n    queueAbortControllerMap.delete(id);\n    if (queueAbortControllerMap.size === 0) {\n      this.abortControllerMap.delete(queueId);\n    }\n  }\n\n  async runCleanup(id:number, queueId:string, args:Array<any>, type:string) {\n    this.emit('cleanupStart', { id });\n    const cleanup = this.cleanupMap.get(type);\n    if (typeof cleanup !== 'function') {\n      this.logger.warn(`No cleanup for job type ${type}`);\n      await removeCleanupFromDatabase(id);\n      this.emit('cleanup', { id });\n      return;\n    }\n    const cleanupJob = await getCleanupFromDatabase(id);\n    const { data, startAfter } = typeof cleanupJob === 'undefined' ? { data: undefined, startAfter: 0 } : cleanupJob;\n    const delay = startAfter - Date.now();\n    if (delay > 0) {\n      this.logger.info(`Delaying retry of ${type} job #${id} cleanup in queue ${queueId} by ${delay}ms to ${new Date(startAfter).toLocaleString()}`);\n      await new Promise((resolve) => setTimeout(resolve, delay));\n    }\n    try {\n      await cleanup(data, args, (path:Array<string>) => removePathFromCleanupDataInDatabase(id, path));\n    } catch (error) {\n      const attempt = await incrementCleanupAttemptInDatabase(id, queueId);\n      if (error.name === 'FatalError') {\n        this.logger.error(`Fatal error in ${type} job #${id} cleanup in queue ${queueId} attempt ${attempt}`);\n        this.emit('error', error);\n        await removeCleanupFromDatabase(id);\n        this.emit('fatalCleanupError', { id, queueId });\n        return;\n      }\n      const retryCleanupDelay = await this.getRetryCleanupDelay(type, attempt, error);\n      if (retryCleanupDelay === false) {\n        this.logger.error(`Error in ${type} job #${id} cleanup in queue ${queueId} attempt ${attempt} with no additional attempts requested`);\n        this.emit('error', error);\n        await removeCleanupFromDatabase(id);\n        this.emit('fatalCleanupError', { id, queueId });\n        return;\n      }\n      this.logger.error(`Error in ${type} job #${id} cleanup in queue ${queueId} attempt ${attempt}, retrying ${retryCleanupDelay > 0 ? `in ${retryCleanupDelay}ms` : 'immediately'}`);\n      this.emit('error', error);\n      if (retryCleanupDelay > 0) {\n        this.emit('retryCleanupDelay', { id, queueId, retryCleanupDelay });\n        const newStartAfter = Date.now() + retryCleanupDelay;\n        await markCleanupStartAfterInDatabase(id, newStartAfter);\n      }\n      await this.runCleanup(id, queueId, args, type);\n      return;\n    }\n    await removeCleanupFromDatabase(id);\n    this.emit('cleanup', { id });\n  }\n\n  startCleanup(id:number, queueId:string, args:Array<any>, type:string, autoStart:boolean, prioritize: boolean) {\n    this.logger.info(`Adding ${type} cleanup job #${id} to queue ${queueId}`);\n    this.jobIds.add(id);\n    this.removeDurationEstimate(queueId, id);\n    const priority = BASE_PRIORITY + id - (prioritize ? HIGH_PRIORITY_OFFSET : 0);\n    const run = async () => {\n      this.setCurrentJobType(queueId, CLEANUP_JOB_TYPE);\n      this.logger.info(`Starting ${type} cleanup #${id} in queue ${queueId}`);\n      await this.runCleanup(id, queueId, args, type);\n      // Job could be marked for removal while cleanup is running\n      await markJobAsAbortedOrRemoveFromDatabase(id);\n      this.jobIds.delete(id);\n      this.logger.info(`Completed ${type} cleanup #${id} in queue ${queueId}`);\n    };\n    this.addToQueue(queueId, priority, autoStart, run);\n  }\n\n  startErrorHandler(id:number, queueId:string, args:Array<any>, type:string, attempt: number, startAfter: number, autoStart:boolean, prioritize: boolean) {\n    this.logger.info(`Adding ${type} error handler job #${id} to queue ${queueId}`);\n    this.jobIds.add(id);\n    const priority = BASE_PRIORITY + id - (prioritize ? HIGH_PRIORITY_OFFSET : 0);\n    const abortController = this.getAbortController(id, queueId);\n    const run = async () => {\n      this.setCurrentJobType(queueId, CLEANUP_JOB_TYPE);\n      this.logger.info(`Starting ${type} error handler #${id} in queue ${queueId}`);\n      await this.runCleanup(id, queueId, args, type);\n      if (abortController.signal.aborted) {\n        // Job could be marked for removal while error handler is running\n        await markJobAsAbortedOrRemoveFromDatabase(id);\n        this.removeAbortController(id, queueId);\n        this.jobIds.delete(id);\n      } else {\n        await markJobPendingInDatabase(id);\n        this.logger.info(`Retrying ${type} job #${id} in queue ${queueId}`);\n        this.emit('retry', { id });\n        this.startJob(id, queueId, args, type, attempt + 1, startAfter, true, prioritize);\n      }\n      this.logger.info(`Completed ${type} error handler #${id} in queue ${queueId}`);\n    };\n    this.addToQueue(queueId, priority, autoStart, run);\n  }\n\n  async delayJobStart(id:number, queueId:string, type:string, signal: AbortSignal, startAfter: number) {\n    if (signal.aborted) {\n      throw new AbortError(`Queue ${queueId} was aborted`);\n    }\n    const duration = startAfter - Date.now();\n    if (duration > 0) {\n      this.logger.info(`Delaying start of ${type} job #${id} in queue ${queueId} by ${duration}ms`);\n      await new Promise((resolve, reject) => {\n        const timeout = setTimeout(() => {\n          signal.removeEventListener('abort', handleAbort);\n          resolve();\n        }, duration);\n        const handleAbort = () => {\n          clearTimeout(timeout);\n          signal.removeEventListener('abort', handleAbort);\n          reject(new AbortError(`Queue ${queueId} was aborted`));\n        };\n        signal.addEventListener('abort', handleAbort);\n      });\n    }\n  }\n\n  startJob(id:number, queueId:string, args:Array<any>, type:string, attempt:number, startAfter: number, autoStart:boolean, prioritize: boolean) {\n    this.logger.info(`Adding ${type} job #${id} to queue ${queueId}`);\n    this.jobIds.add(id);\n    const priority = BASE_PRIORITY - id + (prioritize ? HIGH_PRIORITY_OFFSET : 0);\n    const updateCleanupData = (data:Object) => updateCleanupValuesInDatabase(id, queueId, data);\n    const updateDuration = (duration:number, pending:number) => {\n      this.addDurationEstimate(queueId, id, duration, pending);\n    };\n    const updateDurationEstimate = () => {\n      const durationEstimateHandler = this.durationEstimateHandlerMap.get(type);\n      if (typeof durationEstimateHandler === 'function') {\n        try {\n          const durationEstimate = durationEstimateHandler(args);\n          this.addDurationEstimate(queueId, id, durationEstimate, durationEstimate);\n          return durationEstimate;\n        } catch (error) {\n          this.logger.error(`Unable to estimate duration of ${type} job #${id} in queue ${queueId}`);\n          this.logger.errorStack(error);\n        }\n      }\n      return 0;\n    };\n    updateDurationEstimate();\n    this.durationEstimateUpdaterMap.set(id, updateDurationEstimate);\n    const abortController = this.getAbortController(id, queueId);\n    const run = async () => {\n      const start = Date.now();\n      const durationEstimate = updateDurationEstimate();\n      this.durationEstimateUpdaterMap.delete(id);\n      if (abortController.signal.aborted) {\n        this.emit('fatalError', { id, queueId, error: new AbortError(`Queue ${queueId} was aborted`) });\n        this.removeAbortController(id, queueId);\n        this.jobIds.delete(id);\n        this.removeDurationEstimate(queueId, id);\n        return;\n      }\n      const handler = this.handlerMap.get(type);\n      if (typeof handler !== 'function') {\n        this.logger.warn(`No handler for job type ${type}`);\n        await markJobCompleteInDatabase(id);\n        this.removeAbortController(id, queueId);\n        this.jobIds.delete(id);\n        this.addDurationEstimate(queueId, id, Date.now() - start, 0);\n        return;\n      }\n      this.setCurrentJobType(queueId, type);\n      let handlerDidRun = false;\n      try {\n        // Mark as error in database so the job is cleaned up and retried if execution\n        // stops before job completion or error.\n        await markJobErrorInDatabase(id);\n        await this.delayJobStart(id, queueId, type, abortController.signal, startAfter);\n        this.logger.info(`Starting ${type} job #${id} in queue ${queueId} attempt ${attempt}`);\n        handlerDidRun = true;\n        const shouldKeepJobInDatabase = await handler(args, abortController.signal, updateCleanupData, updateDuration);\n        if (abortController.signal.aborted) {\n          throw new AbortError(`Queue ${queueId} was aborted`);\n        }\n        if (shouldKeepJobInDatabase === false) {\n          await markJobCompleteThenRemoveFromDatabase(id);\n        } else {\n          await markJobCompleteInDatabase(id);\n        }\n        this.removeAbortController(id, queueId);\n        this.jobIds.delete(id);\n        const duration = Date.now() - start;\n        if (typeof durationEstimate === 'number') {\n          const estimatedToActualRatio = durationEstimate / duration;\n          if (duration > 250 && (estimatedToActualRatio < 0.8 || estimatedToActualRatio > 1.25)) {\n            this.logger.warn(`Duration estimate of ${type} job #${id} (${durationEstimate}ms) was ${Math.round(100 * estimatedToActualRatio)}% of actual value (${duration}ms)`);\n          }\n        }\n        this.addDurationEstimate(queueId, id, duration, 0);\n        this.logger.info(`Completed ${type} job #${id} in queue ${queueId} attempt ${attempt} in ${duration}ms`);\n        return;\n      } catch (error) {\n        if (error.name === 'JobDoesNotExistError') {\n          this.logger.error(`Job does not exist error for ${type} job #${id} in queue ${queueId} attempt ${attempt}`);\n          if (handlerDidRun) {\n            this.emit('fatalError', { id, queueId, error });\n            await restoreJobToDatabaseForCleanupAndRemove(id, queueId, type, args, { prioritize });\n            this.jobIds.delete(id);\n            this.removeAbortController(id, queueId);\n            this.startCleanup(id, queueId, args, type, true, prioritize);\n          } else {\n            this.emit('fatalError', { id, queueId, error });\n            this.jobIds.delete(id);\n            this.removeAbortController(id, queueId);\n            this.removeDurationEstimate(queueId, id);\n          }\n          return;\n        }\n        if (abortController.signal.aborted) {\n          if (error.name !== 'AbortError') {\n            this.logger.error(`Abort signal following error in ${type} job #${id} in queue ${queueId} attempt ${attempt}`);\n            this.emit('error', error);\n          } else {\n            this.logger.warn(`Received abort signal for ${type} job #${id} in queue ${queueId} attempt ${attempt}`);\n          }\n          if (handlerDidRun) {\n            this.emit('fatalError', { id, queueId, error });\n            this.jobIds.delete(id);\n            this.removeAbortController(id, queueId);\n            this.startCleanup(id, queueId, args, type, true, prioritize);\n          } else {\n            this.emit('fatalError', { id, queueId, error });\n            await markJobAsAbortedOrRemoveFromDatabase(id);\n            this.jobIds.delete(id);\n            this.removeAbortController(id, queueId);\n            this.removeDurationEstimate(queueId, id);\n          }\n          return;\n        }\n        await incrementJobAttemptInDatabase(id);\n        if (error.name === 'FatalError') {\n          this.logger.error(`Fatal error in ${type} job #${id} in queue ${queueId} attempt ${attempt}`);\n          this.emit('error', error);\n          this.emit('fatalError', { id, queueId, error });\n          this.jobIds.delete(id);\n          this.removeAbortController(id, queueId);\n          await this.abortQueue(queueId);\n          return;\n        }\n        const retryDelay = await this.getRetryJobDelay(type, attempt, error);\n        if (retryDelay === false) {\n          this.logger.error(`Error in ${type} job #${id} in queue ${queueId} attempt ${attempt} with no additional attempts requested`);\n          this.emit('error', error);\n          this.emit('fatalError', { id, queueId, error });\n          this.jobIds.delete(id);\n          this.removeAbortController(id, queueId);\n          await this.abortQueue(queueId);\n          return;\n        }\n        this.logger.error(`Error in ${type} job #${id} in queue ${queueId} attempt ${attempt}, retrying ${retryDelay > 0 ? `in ${retryDelay}ms` : 'immediately'}`);\n        this.emit('error', error);\n        if (retryDelay > 0) {\n          this.emit('retryDelay', { id, queueId, retryDelay });\n          const newStartAfter = Date.now() + retryDelay;\n          await markJobStartAfterInDatabase(id, newStartAfter);\n          this.jobIds.delete(id);\n          this.startErrorHandler(id, queueId, args, type, attempt, newStartAfter, true, prioritize);\n        } else {\n          this.jobIds.delete(id);\n          this.startErrorHandler(id, queueId, args, type, attempt, startAfter, true, prioritize);\n        }\n      }\n    };\n    this.addToQueue(queueId, priority, autoStart, run);\n    this.emit('dequeue', { id });\n  }\n\n  async handlePortMessage(port: MessagePort, event:MessageEvent) {\n    if (!(event instanceof MessageEvent)) {\n      return;\n    }\n\n    const portHandlers = this.ports.get(port);\n\n    if (typeof portHandlers !== 'object') {\n      this.logger.warn('Port handlers do not exist');\n      this.logger.warnObject(event);\n      return;\n    }\n\n    const { data } = event;\n    if (!data || typeof data !== 'object') {\n      this.logger.warn('Invalid message data');\n      this.logger.warnObject(event);\n      return;\n    }\n    const { type, args } = data;\n    if (typeof type !== 'string') {\n      this.logger.warn('Unknown message type');\n      this.logger.warnObject(event);\n      return;\n    }\n    if (!Array.isArray(args)) {\n      this.logger.warn('Unknown arguments type');\n      this.logger.warnObject(event);\n      return;\n    }\n    const emit = (t:string, ...messageArgs:Array<any>) => {\n      port.postMessage({ type: t, args: messageArgs });\n    };\n    switch (type) {\n      case 'heartbeat':\n        try {\n          const [interval] = args;\n          if (typeof interval !== 'number') {\n            throw new Error(`Invalid \"interval\" argument with type ${typeof interval}, should be type number`);\n          }\n          clearTimeout(portHandlers.heartbeatExpiresTimeout);\n          this.heartbeatExpiresTimestamp = Date.now() + Math.round(interval * 2.5);\n          portHandlers.heartbeatExpiresTimeout = setTimeout(async () => {\n            this.logger.warn(`Heartbeat timeout after ${Math.round(interval * 2.1)}ms`);\n            await this.unloadClient();\n            this.removePort(port);\n          }, Math.round(interval * 2.1));\n          emit('heartbeat', ...args);\n          super.emit('heartbeat', ...args);\n        } catch (error) {\n          this.logger.error('Heartbeat error');\n          this.logger.errorStack(error);\n        }\n        return;\n      case 'jobAdd':\n        jobEmitter.emit('jobAdd', ...args);\n        return;\n      case 'jobDelete':\n        jobEmitter.emit('jobDelete', ...args);\n        return;\n      case 'jobUpdate':\n        jobEmitter.emit('jobUpdate', ...args);\n        return;\n      case 'jobsClear':\n        jobEmitter.emit('jobsClear', ...args);\n        return;\n      default:\n        break;\n    }\n    const [requestId, ...requestArgs] = args;\n    if (typeof requestId !== 'number') {\n      throw new Error('Request arguments should start with a requestId number');\n    }\n    switch (type) {\n      case 'unlink':\n        this.logger.warn('Unlinking worker interface');\n        try {\n          if (this.ports.size === 1) {\n            await this.stop();\n          }\n          emit('unlinkComplete', requestId);\n          this.removePort(port);\n        } catch (error) {\n          emit('unlinkError', requestId, error);\n          this.logger.error('Unable to handle unlink message');\n          this.emit('error', error);\n        }\n        break;\n      case 'clear':\n        try {\n          await this.clear();\n          emit('clearComplete', requestId);\n        } catch (error) {\n          emit('clearError', requestId, error);\n          this.logger.error('Unable to handle clear message');\n          this.emit('error', error);\n        }\n        break;\n      case 'abortAndRemoveQueueJobsGreaterThanId':\n        try {\n          const [queueId, id] = requestArgs;\n          if (typeof queueId !== 'string') {\n            throw new Error(`Invalid \"queueId\" argument with type ${typeof queueId}, should be type string`);\n          }\n          if (typeof id !== 'number') {\n            throw new Error(`Invalid \"id\" argument with type ${typeof id}, should be type number`);\n          }\n          await this.abortAndRemoveQueueJobsGreaterThanId(queueId, id);\n          emit('abortAndRemoveQueueJobsGreaterThanIdComplete', requestId);\n        } catch (error) {\n          emit('abortAndRemoveQueueJobsGreaterThanIdError', requestId, error);\n          this.logger.error('Unable to handle abort and remove queue jobs greater than ID message');\n          this.emit('error', error);\n        }\n        break;\n      case 'abortAndRemoveQueue':\n        try {\n          const [queueId] = requestArgs;\n          if (typeof queueId !== 'string') {\n            throw new Error(`Invalid \"queueId\" argument with type ${typeof queueId}, should be type string`);\n          }\n          await this.abortAndRemoveQueue(queueId);\n          emit('abortAndRemoveQueueComplete', requestId);\n        } catch (error) {\n          emit('abortAndRemoveQueueError', requestId, error);\n          this.logger.error('Unable to handle abort and remove queue message');\n          this.emit('error', error);\n        }\n        break;\n      case 'updateDurationEstimates':\n        try {\n          await this.updateDurationEstimates();\n          emit('updateDurationEstimatesComplete', requestId);\n        } catch (error) {\n          emit('updateDurationEstimatesError', requestId, error);\n          this.logger.error('Unable to handle update duration estimates message');\n          this.emit('error', error);\n        }\n        break;\n      case 'abortQueue':\n        try {\n          const [queueId] = requestArgs;\n          if (typeof queueId !== 'string') {\n            throw new Error(`Invalid \"queueId\" argument with type ${typeof queueId}, should be type string`);\n          }\n          await this.abortQueue(queueId);\n          emit('abortQueueComplete', requestId);\n        } catch (error) {\n          emit('abortQueueError', requestId, error);\n          this.logger.error('Unable to handle abort queue message');\n          this.emit('error', error);\n        }\n        break;\n      case 'retryQueue':\n        try {\n          const [queueId] = requestArgs;\n          if (typeof queueId !== 'string') {\n            throw new Error(`Invalid \"queueId\" argument with type ${typeof queueId}, should be type string`);\n          }\n          await this.retryQueue(queueId);\n          emit('retryQueueComplete', requestId);\n        } catch (error) {\n          emit('retryQueueError', requestId, error);\n          this.logger.error('Unable to handle retry queue message');\n          this.emit('error', error);\n        }\n        break;\n      case 'dequeue':\n        try {\n          await this.dequeue();\n          emit('dequeueComplete', requestId);\n        } catch (error) {\n          emit('dequeueError', requestId, error);\n          this.logger.error('Unable to handle dequeue message');\n          this.emit('error', error);\n        }\n        break;\n      case 'enableStartOnJob':\n        try {\n          this.enableStartOnJob();\n          emit('enableStartOnJobComplete', requestId);\n        } catch (error) {\n          emit('enableStartOnJobError', requestId, error);\n          this.logger.error('Unable to handle enableStartOnJob message');\n          this.emit('error', error);\n        }\n        break;\n      case 'disableStartOnJob':\n        try {\n          this.disableStartOnJob();\n          emit('disableStartOnJobComplete', requestId);\n        } catch (error) {\n          emit('disableStartOnJobError', requestId, error);\n          this.logger.error('Unable to handle disableStartOnJob message');\n          this.emit('error', error);\n        }\n        break;\n      case 'getQueueIds':\n        try {\n          const queueIds = await this.getQueueIds();\n          emit('getQueuesComplete', requestId, [...queueIds]);\n        } catch (error) {\n          emit('getQueuesError', requestId, error);\n          this.logger.error('Unable to handle getQueueIds message');\n          this.emit('error', error);\n        }\n        break;\n      case 'getDurationEstimate':\n        try {\n          const [queueId] = requestArgs;\n          if (typeof queueId !== 'string') {\n            throw new Error(`Invalid \"queueId\" argument with type ${typeof queueId}, should be type string`);\n          }\n          const values = await this.getDurationEstimate(queueId);\n          emit('getDurationEstimateComplete', requestId, values);\n        } catch (error) {\n          emit('getDurationEstimateError', requestId, error);\n          this.logger.error('Unable to handle get duration estimate message');\n          this.emit('error', error);\n        }\n        break;\n      case 'getCurrentJobType':\n        try {\n          const [queueId] = requestArgs;\n          if (typeof queueId !== 'string') {\n            throw new Error(`Invalid \"queueId\" argument with type ${typeof queueId}, should be type string`);\n          }\n          const currentJobType = this.getCurrentJobType(queueId);\n          emit('getCurrentJobTypeComplete', requestId, currentJobType);\n        } catch (error) {\n          emit('getCurrentJobTypeError', requestId, error);\n          this.logger.error('Unable to handle get current job type message');\n          this.emit('error', error);\n        }\n        break;\n      case 'runUnloadHandlers':\n        try {\n          await this.runUnloadHandlers();\n          emit('runUnloadHandlersComplete', requestId);\n        } catch (error) {\n          emit('runUnloadHandlersError', requestId, error);\n          this.logger.error('Unable to run unload handlers message');\n          this.emit('error', error);\n        }\n        break;\n      case 'idle':\n        try {\n          const [maxDuration, start] = requestArgs;\n          if (typeof maxDuration !== 'number') {\n            throw new Error(`Invalid \"queueId\" argument with type ${typeof maxDuration}, should be type number`);\n          }\n          if (typeof start !== 'number') {\n            throw new Error(`Invalid \"queueId\" argument with type ${typeof start}, should be type number`);\n          }\n          await this.onIdle(maxDuration - (Date.now() - start));\n          emit('idleComplete', requestId);\n        } catch (error) {\n          emit('idleError', requestId, error);\n          this.logger.error('Unable to handle idle message');\n          this.emit('error', error);\n        }\n        break;\n      default:\n        this.logger.warn(`Unknown worker interface message type ${type}`);\n    }\n  }\n\n  async unloadClient() {\n    this.logger.info('Detected client unload');\n    if (this.isUnloading) {\n      this.logger.warn('Unload already in progress');\n      return;\n    }\n    try {\n      for (const { heartbeatExpiresTimeout } of this.ports.values()) {\n        clearTimeout(heartbeatExpiresTimeout);\n      }\n      const heartbeatExpiresTimestamp = this.heartbeatExpiresTimestamp;\n      if (typeof heartbeatExpiresTimestamp !== 'number') {\n        this.logger.warn('Heartbeat expires timestamp does not exist');\n        return;\n      }\n      this.isUnloading = true;\n      delete this.heartbeatExpiresTimestamp;\n      const delay = heartbeatExpiresTimestamp - Date.now();\n      if (delay > 0) {\n        await new Promise((resolve) => {\n          const timeout = setTimeout(() => {\n            clearTimeout(timeout);\n            this.removeListener('heartbeat', handleHeartbeat);\n            resolve();\n          }, delay);\n          const handleHeartbeat = () => {\n            clearTimeout(timeout);\n            this.removeListener('heartbeat', handleHeartbeat);\n            resolve();\n          };\n          this.addListener('heartbeat', handleHeartbeat);\n        });\n      }\n      if (typeof this.heartbeatExpiresTimestamp === 'number') {\n        this.logger.info('Cancelling client unload, heartbeat detected');\n        return;\n      }\n      this.logger.info('Unloading');\n      await this.runUnloadHandlers();\n      for (const port of this.ports.keys()) {\n        port.postMessage({ type: 'unloadClient', args: [] });\n      }\n      await this.onIdle();\n    } finally {\n      this.isUnloading = false;\n    }\n  }\n\n  runUnloadHandlers() {\n    return this.unloadQueue.add(async () => {\n      const handleUnload = this.handleUnload;\n      if (typeof handleUnload === 'function') {\n        try {\n          const unloadData = await getUnloadDataFromDatabase();\n          await handleUnload(unloadData);\n          await clearUnloadDataInDatabase();\n        } catch (error) {\n          this.logger.error('Error in unload handler');\n          this.logger.errorStack(error);\n        }\n      }\n    });\n  }\n\n  removePort(port:MessagePort) {\n    const portHandlers = this.ports.get(port);\n    if (typeof portHandlers === 'undefined') {\n      this.logger.info('Unable to remove port, port handler map does not exist');\n      return;\n    }\n    const {\n      handleJobAdd,\n      handleJobDelete,\n      handleJobUpdate,\n      handleJobsClear,\n      heartbeatExpiresTimeout,\n    } = portHandlers;\n\n    localJobEmitter.removeListener('jobAdd', handleJobAdd);\n    localJobEmitter.removeListener('jobDelete', handleJobDelete);\n    localJobEmitter.removeListener('jobUpdate', handleJobUpdate);\n    localJobEmitter.removeListener('jobsClear', handleJobsClear);\n    clearTimeout(heartbeatExpiresTimeout);\n\n    port.postMessage({ type: 'closed', args: [] });\n\n    port.onmessage = null; // eslint-disable-line no-param-reassign\n    port.onmessageerror = null; // eslint-disable-line no-param-reassign\n    port.close();\n\n    this.ports.delete(port);\n  }\n\n  listenForServiceWorkerInterface() {\n    self.addEventListener('sync', (event) => {\n      this.logger.info(`SyncManager event ${event.tag}${event.lastChance ? ', last chance' : ''}`);\n      if (event.tag === 'syncManagerOnIdle') {\n        this.logger.info('Starting SyncManager idle handler');\n        this.emit('syncManagerOnIdle');\n        event.waitUntil(this.onIdle().catch((error) => {\n          this.logger.error(`SyncManager event handler failed${event.lastChance ? ' on last chance' : ''}`);\n          this.logger.errorStack(error);\n        }));\n      } else if (event.tag === 'unload') {\n        this.logger.info('Starting SyncManager unload client handler');\n        event.waitUntil(this.unloadClient().catch((error) => {\n          this.logger.error(`SyncManager event handler failed${event.lastChance ? ' on last chance' : ''}`);\n          this.logger.errorStack(error);\n        }));\n      } else {\n        this.logger.warn(`Received unknown SyncManager event tag ${event.tag}`);\n      }\n    });\n\n    self.addEventListener('message', (event:ExtendableMessageEvent) => {\n      if (!(event instanceof ExtendableMessageEvent)) {\n        return;\n      }\n      const { data } = event;\n      if (!data || typeof data !== 'object') {\n        return;\n      }\n      const { type } = data;\n      if (type !== 'BATTERY_QUEUE_WORKER_INITIALIZATION') {\n        return;\n      }\n      if (!Array.isArray(event.ports)) {\n        return;\n      }\n      const port = event.ports[0];\n      if (!(port instanceof MessagePort)) {\n        return;\n      }\n      if (this.ports.has(port)) {\n        return;\n      }\n\n      port.onmessage = (_event:MessageEvent) => this.handlePortMessage(port, _event); // eslint-disable-line no-param-reassign\n\n      port.onmessageerror = (_event:MessageEvent) => {\n        this.logger.error('MessagePort unable to deserialize message');\n        this.logger.errorObject(_event);\n      };\n\n      const handleJobAdd = (...args:Array<any>) => {\n        port.postMessage({ type: 'jobAdd', args });\n      };\n      const handleJobDelete = (...args:Array<any>) => {\n        port.postMessage({ type: 'jobDelete', args });\n      };\n      const handleJobUpdate = (...args:Array<any>) => {\n        port.postMessage({ type: 'jobUpdate', args });\n      };\n      const handleJobsClear = (...args:Array<any>) => {\n        port.postMessage({ type: 'jobsClear', args });\n      };\n\n      localJobEmitter.addListener('jobAdd', handleJobAdd);\n      localJobEmitter.addListener('jobDelete', handleJobDelete);\n      localJobEmitter.addListener('jobUpdate', handleJobUpdate);\n      localJobEmitter.addListener('jobsClear', handleJobsClear);\n\n\n      const portHandlers = {\n        handleJobAdd,\n        handleJobDelete,\n        handleJobUpdate,\n        handleJobsClear,\n      };\n\n      this.ports.set(port, portHandlers);\n\n      port.postMessage({ type: 'BATTERY_QUEUE_WORKER_CONFIRMATION' });\n\n      this.logger.info('Linked to worker interface');\n    });\n    self.addEventListener('messageerror', (event:MessageEvent) => {\n      this.logger.error('Service worker interface message error');\n      this.logger.errorObject(event);\n    });\n  }\n}\n\n"],"file":"queue.js"}