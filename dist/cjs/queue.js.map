{"version":3,"sources":["../../src/queue.js"],"names":["CLEANUP_JOB_TYPE","BASE_PRIORITY","Math","floor","Number","MAX_SAFE_INTEGER","HIGH_PRIORITY_OFFSET","BatteryQueue","options","stopped","dequeueQueue","PQueue","concurrency","unloadQueue","handlerMap","Map","cleanupMap","durationEstimateHandlerMap","durationEstimateMap","durationEstimateUpdaterMap","retryJobDelayMap","retryCleanupDelayMap","queueCurrentJobTypeMap","queueMap","jobIds","Set","abortControllerMap","isClearing","emitCallbacks","logger","addListener","error","errorStack","interval","clearTimeout","heartbeatExpiresTimeout","heartbeatExpiresTimestamp","Date","now","round","setTimeout","warn","unloadClient","queueId","jobId","queueAbortControllerMap","get","abortController","abort","disableStartOnJob","didRequestJobAddDequeue","handleJobAdd","self","queueMicrotask","dequeue","jobEmitter","handleJobDelete","id","abortJob","handleJobUpdate","type","status","JOB_CLEANUP_AND_REMOVE_STATUS","JOB_CLEANUP_STATUS","didAbort","then","job","has","args","prioritize","startCleanup","catch","removeListener","emitCallback","queueIds","keys","handleUnload","Error","retryJobDelayFunction","set","delete","attempt","result","emit","retryCleanupDelayFunction","handler","cleanup","timeEstimationHandler","duration","pending","queueDurationEstimateMap","emitDurationEstimate","values","updateDurationEstimate","totalDuration","totalPending","getDurationEstimate","onIdle","start","priority","autoStart","func","queue","add","newQueue","on","setCurrentJobType","undefined","Promise","resolve","timeout","handleClearing","handleActive","size","info","removeDurationEstimate","jobs","startJobs","lastJobId","addToQueue","bind","newJobs","Array","isArray","startAfter","pause","JOB_PENDING_STATUS","startJob","JOB_ERROR_STATUS","startErrorHandler","stopPromise","idlePromises","setInterval","isPaused","clear","push","finally","clearInterval","all","maxDuration","onIdlePromise","jobsInterval","length","newAbortController","AbortController","cleanupJob","data","delay","toLocaleString","path","name","getRetryCleanupDelay","retryCleanupDelay","newStartAfter","runCleanup","run","getAbortController","signal","aborted","removeAbortController","AbortError","reject","removeEventListener","handleAbort","addEventListener","updateCleanupData","updateDuration","addDurationEstimate","durationEstimateHandler","durationEstimate","handlerDidRun","delayJobStart","shouldKeepJobInDatabase","estimatedToActualRatio","abortQueue","getRetryJobDelay","retryDelay","event","MessageEvent","warnObject","port","requestId","requestArgs","stop","MessagePort","onmessage","abortAndRemoveQueueJobsGreaterThanId","abortAndRemoveQueue","updateDurationEstimates","retryQueue","enableStartOnJob","getQueueIds","currentJobType","getCurrentJobType","runUnloadHandlers","handleHeartbeat","unloadData","activeEmitCallback","handleJobsClear","tag","lastChance","waitUntil","ExtendableMessageEvent","ports","filter","x","previousPort","close","localJobEmitter","handlePortMessage","postMessage","t","errorObject","EventEmitter"],"mappings":"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","sourcesContent":["// @flow\n\nimport PQueue from 'p-queue';\nimport EventEmitter from 'events';\nimport type { Logger } from './logger';\nimport makeLogger from './logger';\nimport type { Job } from './database';\nimport {\n  jobEmitter,\n  localJobEmitter,\n  clearDatabase,\n  dequeueFromDatabase,\n  dequeueFromDatabaseNotIn,\n  incrementJobAttemptInDatabase,\n  incrementCleanupAttemptInDatabase,\n  markJobCompleteInDatabase,\n  markJobCompleteThenRemoveFromDatabase,\n  markJobPendingInDatabase,\n  markJobErrorInDatabase,\n  markJobStartAfterInDatabase,\n  markJobAsAbortedOrRemoveFromDatabase,\n  markCleanupStartAfterInDatabase,\n  markQueuePendingInDatabase,\n  updateCleanupValuesInDatabase,\n  getCleanupFromDatabase,\n  removePathFromCleanupDataInDatabase,\n  getJobFromDatabase,\n  markQueueForCleanupInDatabase,\n  markQueueForCleanupAndRemoveInDatabase,\n  markQueueJobsGreaterThanIdCleanupAndRemoveInDatabase,\n  removeCleanupFromDatabase,\n  restoreJobToDatabaseForCleanupAndRemove,\n  getUnloadDataFromDatabase,\n  clearUnloadDataInDatabase,\n  getGreatestJobIdFromQueueInDatabase,\n  JOB_PENDING_STATUS,\n  JOB_ERROR_STATUS,\n  JOB_CLEANUP_STATUS,\n  JOB_CLEANUP_AND_REMOVE_STATUS,\n} from './database';\nimport { AbortError } from './errors';\n\nexport const CLEANUP_JOB_TYPE = 'CLEANUP_JOB_TYPE';\n\nconst BASE_PRIORITY = Math.floor(Number.MAX_SAFE_INTEGER / 2);\nconst HIGH_PRIORITY_OFFSET = Math.floor(Number.MAX_SAFE_INTEGER / 8);\n\ntype HandlerFunction = (Array<any>, AbortSignal, (Object) => Promise<void>, (number, number) => void) => Promise<void | false>;\ntype CleanupFunction = (Object | void, Array<any>, Array<string> => Promise<void>) => Promise<void>;\ntype DurationEstimateFunction = (Array<any>) => number;\ntype RetryDelayFunction = (number, Error) => number | false | Promise<number | false>;\ntype EmitCallback = (string, Array<any>) => void;\ntype UnloadFunction = (Object | void) => Promise<void> | void;\n\ntype Options = {\n  logger?: Logger,\n  startOnJob?: boolean\n};\n\nexport default class BatteryQueue extends EventEmitter {\n  declare logger: Logger;\n  declare dequeueQueue: PQueue;\n  declare unloadQueue: PQueue;\n  declare handlerMap: Map<string, HandlerFunction>;\n  declare retryJobDelayMap: Map<string, RetryDelayFunction>;\n  declare retryCleanupDelayMap: Map<string, RetryDelayFunction>;\n  declare cleanupMap: Map<string, CleanupFunction>;\n  declare queueCurrentJobTypeMap: Map<string, string>;\n  declare durationEstimateHandlerMap: Map<string, DurationEstimateFunction>;\n  declare durationEstimateMap: Map<string, Map<number, [number, number]>>;\n  declare durationEstimateUpdaterMap: Map<number, () => number>;\n  declare queueMap: Map<string, PQueue>;\n  declare handleUnload: void | UnloadFunction;\n  declare abortControllerMap: Map<string, Map<number, AbortController>>;\n  declare isClearing: boolean;\n  declare onIdlePromise: Promise<void> | void;\n  declare stopPromise: Promise<void> | void;\n  declare jobIds: Set<number>;\n\n  declare emitCallbacks: Array<EmitCallback>;\n  declare port: MessagePort | void;\n  declare handleJobAdd: void | () => void;\n  declare handleJobUpdate: void | (number, string, string, number) => void;\n  declare handleJobDelete: void | (number, string) => void;\n  declare heartbeatExpiresTimestamp: void | number;\n  declare heartbeatExpiresTimeout: void | TimeoutID;\n  declare stopped: boolean;\n\n  constructor(options?: Options = {}) {\n    super();\n    this.stopped = false;\n    this.dequeueQueue = new PQueue({ concurrency: 1 });\n    this.unloadQueue = new PQueue({ concurrency: 1 });\n    this.handlerMap = new Map();\n    this.cleanupMap = new Map();\n    this.durationEstimateHandlerMap = new Map();\n    this.durationEstimateMap = new Map();\n    this.durationEstimateUpdaterMap = new Map();\n    this.retryJobDelayMap = new Map();\n    this.retryCleanupDelayMap = new Map();\n    this.queueCurrentJobTypeMap = new Map();\n    this.queueMap = new Map();\n    this.jobIds = new Set();\n    this.durationEstimateUpdaterMap = new Map();\n    this.abortControllerMap = new Map();\n    this.isClearing = false;\n    this.emitCallbacks = [];\n    this.logger = options.logger || makeLogger('Battery Queue');\n    this.addListener('error', (error) => {\n      this.logger.errorStack(error);\n    });\n    this.addListener('heartbeat', (interval:number) => {\n      clearTimeout(this.heartbeatExpiresTimeout);\n      this.heartbeatExpiresTimestamp = Date.now() + Math.round(interval * 2.5);\n      this.heartbeatExpiresTimeout = setTimeout(() => {\n        if (typeof this.heartbeatExpiresTimestamp !== 'number') {\n          return;\n        }\n        this.logger.warn(`Heartbeat timeout after ${Math.round(interval * 2.1)}ms`);\n        this.unloadClient();\n      }, Math.round(interval * 2.1));\n    });\n  }\n\n  abortJob(queueId:string, jobId:number) {\n    const queueAbortControllerMap = this.abortControllerMap.get(queueId);\n    if (typeof queueAbortControllerMap !== 'undefined') {\n      const abortController = queueAbortControllerMap.get(jobId);\n      if (typeof abortController !== 'undefined') {\n        abortController.abort();\n        return true;\n      }\n    }\n    return false;\n  }\n\n  enableStartOnJob() {\n    this.disableStartOnJob(); // Prevent handlers from being added multiple times\n    let didRequestJobAddDequeue = false;\n    const handleJobAdd = () => {\n      if (didRequestJobAddDequeue) {\n        return;\n      }\n      didRequestJobAddDequeue = true;\n      self.queueMicrotask(() => {\n        didRequestJobAddDequeue = false;\n        this.dequeue();\n      });\n    };\n    jobEmitter.addListener('jobAdd', handleJobAdd);\n    this.handleJobAdd = handleJobAdd;\n    const handleJobDelete = (id:number, queueId:string) => {\n      this.abortJob(queueId, id);\n    };\n    jobEmitter.addListener('jobDelete', handleJobDelete);\n    this.handleJobDelete = handleJobDelete;\n\n    const handleJobUpdate = (id:number, queueId:string, type:string, status:number) => {\n      if (status !== JOB_CLEANUP_AND_REMOVE_STATUS && status !== JOB_CLEANUP_STATUS) {\n        return;\n      }\n      const didAbort = this.abortJob(queueId, id);\n      if (didAbort) {\n        return;\n      }\n      getJobFromDatabase(id).then((job:Job | void) => {\n        if (typeof job === 'undefined') {\n          this.logger.error(`Unable to cleanup and remove ${type} job #${id} in queue ${queueId}, job does not exist`);\n          return;\n        }\n        if (this.jobIds.has(id)) {\n          return;\n        }\n        const { args, prioritize } = job;\n        this.startCleanup(id, queueId, args, type, true, prioritize);\n      }).catch((error) => {\n        this.logger.error(`Error while cleaning up and removing ${type} job #${id} in queue ${queueId}`);\n        this.logger.errorStack(error);\n      });\n    };\n    jobEmitter.addListener('jobUpdate', handleJobUpdate);\n    this.handleJobUpdate = handleJobUpdate;\n  }\n\n  disableStartOnJob() {\n    const handleJobAdd = this.handleJobAdd;\n    if (typeof handleJobAdd === 'function') {\n      jobEmitter.removeListener('jobAdd', handleJobAdd);\n      delete this.handleJobAdd;\n    }\n    const handleJobUpdate = this.handleJobUpdate;\n    if (typeof handleJobUpdate === 'function') {\n      jobEmitter.removeListener('jobUpdate', handleJobUpdate);\n      delete this.handleJobUpdate;\n    }\n    const handleJobDelete = this.handleJobDelete;\n    if (typeof handleJobDelete === 'function') {\n      jobEmitter.removeListener('jobDelete', handleJobDelete);\n      delete this.handleJobDelete;\n    }\n  }\n\n  emit(type:string, ...args:Array<any>) {\n    for (const emitCallback of this.emitCallbacks) {\n      emitCallback(type, args);\n    }\n    return super.emit(type, ...args);\n  }\n\n  async getQueueIds() {\n    await this.dequeue();\n    const queueIds:Set<string> = new Set(this.queueMap.keys());\n    return queueIds;\n  }\n\n  setUnload(handleUnload:UnloadFunction) {\n    if (typeof this.handleUnload === 'function') {\n      throw new Error('Unload handler already exists');\n    }\n    this.handleUnload = handleUnload;\n  }\n\n  removeUnload() {\n    if (typeof this.handleUnload !== 'function') {\n      throw new Error('Unload handler does not exist');\n    }\n    delete this.handleUnload;\n  }\n\n  setRetryJobDelay(type:string, retryJobDelayFunction:RetryDelayFunction) {\n    if (this.retryJobDelayMap.has(type)) {\n      throw new Error(`Retry job delay handler for type \"${type}\" already exists`);\n    }\n    this.retryJobDelayMap.set(type, retryJobDelayFunction);\n  }\n\n  removeRetryJobDelay(type:string) {\n    if (!this.retryJobDelayMap.has(type)) {\n      throw new Error(`Retry job delay handler for type \"${type}\" does not exist`);\n    }\n    this.retryJobDelayMap.delete(type);\n  }\n\n  async getRetryJobDelay(type:string, attempt: number, error:Error) {\n    const retryJobDelayFunction = this.retryJobDelayMap.get(type);\n    if (typeof retryJobDelayFunction !== 'function') {\n      return false;\n    }\n    let result = false;\n    try {\n      result = await retryJobDelayFunction(attempt, error);\n    } catch (retryDelayError) {\n      this.logger.error(`Error in retry job delay handler for type \"${type}\" on attempt ${attempt}`);\n      this.emit('error', retryDelayError);\n      return false;\n    }\n    if (typeof result !== 'number' && result !== false) {\n      throw new Error(`Retry job delay function for type \"${type}\" returned invalid response, should be a number (milliseconds) or false`);\n    }\n    return result;\n  }\n\n  setRetryCleanupDelay(type:string, retryCleanupDelayFunction:RetryDelayFunction) {\n    if (this.retryCleanupDelayMap.has(type)) {\n      throw new Error(`Retry cleanup delay handler for type \"${type}\" already exists`);\n    }\n    this.retryCleanupDelayMap.set(type, retryCleanupDelayFunction);\n  }\n\n  removeRetryCleanupDelay(type:string) {\n    if (!this.retryCleanupDelayMap.has(type)) {\n      throw new Error(`Retry cleanup delay handler for type \"${type}\" does not exist`);\n    }\n    this.retryCleanupDelayMap.delete(type);\n  }\n\n  async getRetryCleanupDelay(type:string, attempt: number, error:Error) {\n    const retryCleanupDelayFunction = this.retryCleanupDelayMap.get(type);\n    if (typeof retryCleanupDelayFunction !== 'function') {\n      return false;\n    }\n    let result = false;\n    try {\n      result = await retryCleanupDelayFunction(attempt, error);\n    } catch (retryDelayError) {\n      this.logger.error(`Error in retry cleanup delay handler for type \"${type}\" on attempt ${attempt}`);\n      this.emit('error', retryDelayError);\n      return false;\n    }\n    if (typeof result !== 'number' && result !== false) {\n      throw new Error(`Retry cleanup delay function for type \"${type}\" returned invalid response, should be a number (milliseconds) or false`);\n    }\n    return result;\n  }\n\n  setHandler(type:string, handler: HandlerFunction) {\n    if (this.handlerMap.has(type)) {\n      throw new Error(`Handler for type \"${type}\" already exists`);\n    }\n    this.handlerMap.set(type, handler);\n  }\n\n  removeHandler(type:string) {\n    if (!this.handlerMap.has(type)) {\n      throw new Error(`Handler for type \"${type}\" does not exist`);\n    }\n    this.handlerMap.delete(type);\n  }\n\n  setCleanup(type:string, cleanup: CleanupFunction) {\n    if (this.cleanupMap.has(type)) {\n      throw new Error(`Cleanup for type \"${type}\" already exists`);\n    }\n    this.cleanupMap.set(type, cleanup);\n  }\n\n  removeCleanup(type:string) {\n    if (!this.cleanupMap.has(type)) {\n      throw new Error(`Cleanup for type \"${type}\" does not exist`);\n    }\n    this.cleanupMap.delete(type);\n  }\n\n  setDurationEstimateHandler(type:string, timeEstimationHandler: DurationEstimateFunction) {\n    if (this.durationEstimateHandlerMap.has(type)) {\n      throw new Error(`Time estimation handler for type \"${type}\" already exists`);\n    }\n    this.durationEstimateHandlerMap.set(type, timeEstimationHandler);\n  }\n\n  removeDurationEstimateHandler(type:string) {\n    if (!this.durationEstimateHandlerMap.has(type)) {\n      throw new Error(`Time estimation handler for type \"${type}\" does not exist`);\n    }\n    this.durationEstimateHandlerMap.delete(type);\n  }\n\n  addDurationEstimate(queueId:string, jobId:number, duration:number, pending:number) {\n    const queueDurationEstimateMap = this.durationEstimateMap.get(queueId);\n    if (typeof queueDurationEstimateMap === 'undefined') {\n      this.durationEstimateMap.set(queueId, new Map([[jobId, [duration, pending]]]));\n      this.emitDurationEstimate(queueId);\n      return;\n    }\n    queueDurationEstimateMap.set(jobId, [duration, pending]);\n    this.emitDurationEstimate(queueId);\n  }\n\n  removeDurationEstimate(queueId:string, jobId?:number) {\n    if (typeof jobId !== 'number') {\n      this.durationEstimateMap.delete(queueId);\n      this.emitDurationEstimate(queueId);\n      return;\n    }\n    const queueDurationEstimateMap = this.durationEstimateMap.get(queueId);\n    if (typeof queueDurationEstimateMap === 'undefined') {\n      this.emitDurationEstimate(queueId);\n      return;\n    }\n    queueDurationEstimateMap.delete(jobId);\n    this.emitDurationEstimate(queueId);\n  }\n\n  updateDurationEstimates() {\n    for (const updateDurationEstimate of this.durationEstimateUpdaterMap.values()) {\n      updateDurationEstimate();\n    }\n  }\n\n  getDurationEstimate(queueId:string) {\n    const queueDurationEstimateMap = this.durationEstimateMap.get(queueId);\n    let totalDuration = 0;\n    let totalPending = 0;\n    if (typeof queueDurationEstimateMap === 'undefined') {\n      return [totalDuration, totalPending];\n    }\n    for (const [duration, pending] of queueDurationEstimateMap.values()) {\n      totalDuration += duration;\n      totalPending += pending;\n    }\n    return [totalDuration, totalPending];\n  }\n\n  emitDurationEstimate(queueId:string) {\n    const [totalDuration, totalPending] = this.getDurationEstimate(queueId);\n    this.emit('queueDuration', queueId, totalDuration, totalPending);\n  }\n\n  setCurrentJobType(queueId:string, type?:void | string) {\n    if (typeof type === 'string') {\n      this.queueCurrentJobTypeMap.set(queueId, type);\n    } else {\n      this.queueCurrentJobTypeMap.delete(queueId);\n    }\n    this.emit('queueJobType', queueId, type);\n  }\n\n  getCurrentJobType(queueId:string) {\n    return this.queueCurrentJobTypeMap.get(queueId);\n  }\n\n  async clear() {\n    this.isClearing = true;\n    await this.onIdle();\n    this.emit('clearing');\n    await clearDatabase();\n    this.dequeueQueue.start();\n    this.isClearing = false;\n  }\n\n  addToQueue(queueId:string, priority: number, autoStart: boolean, func: () => Promise<void>) {\n    if (this.stopped) {\n      return;\n    }\n    const queue = this.queueMap.get(queueId);\n    if (typeof queue !== 'undefined') {\n      queue.add(func, { priority });\n      return;\n    }\n    const newQueue = new PQueue({ concurrency: 1, autoStart });\n    this.queueMap.set(queueId, newQueue);\n    newQueue.add(func, { priority });\n    newQueue.on('idle', async () => {\n      this.setCurrentJobType(queueId, undefined);\n      if (!this.isClearing) {\n        await new Promise((resolve) => {\n          const timeout = setTimeout(() => {\n            this.removeListener('clearing', handleClearing);\n            newQueue.removeListener('active', handleActive);\n            resolve();\n          }, 5000);\n          const handleClearing = () => {\n            clearTimeout(timeout);\n            this.removeListener('clearing', handleClearing);\n            newQueue.removeListener('active', handleActive);\n            resolve();\n          };\n          const handleActive = () => {\n            clearTimeout(timeout);\n            this.removeListener('clearing', handleClearing);\n            newQueue.removeListener('active', handleActive);\n            resolve();\n          };\n          this.addListener('clearing', handleClearing);\n          newQueue.addListener('active', handleActive);\n        });\n      }\n      if (newQueue.pending > 0 || newQueue.size > 0) {\n        return;\n      }\n      this.queueMap.delete(queueId);\n      this.emit('queueInactive', queueId);\n    });\n    this.emit('queueActive', queueId);\n  }\n\n  async abortQueue(queueId: string) {\n    this.logger.info(`Aborting queue ${queueId}`);\n    this.removeDurationEstimate(queueId);\n    // Abort active jobs\n    const queueAbortControllerMap = this.abortControllerMap.get(queueId);\n    if (typeof queueAbortControllerMap !== 'undefined') {\n      for (const abortController of queueAbortControllerMap.values()) {\n        abortController.abort();\n      }\n    }\n    // Changes:\n    // * JOB_ERROR_STATUS -> JOB_CLEANUP_STATUS\n    // * JOB_COMPLETE_STATUS -> JOB_CLEANUP_STATUS\n    // * JOB_CLEANUP_AND_REMOVE_STATUS -> JOB_CLEANUP_AND_REMOVE_STATUS\n    // * JOB_PENDING_STATUS -> JOB_ABORTED_STATUS\n    const jobs = await markQueueForCleanupInDatabase(queueId);\n    await this.startJobs(jobs);\n  }\n\n  async retryQueue(queueId: string) {\n    this.logger.info(`Retrying queue ${queueId}`);\n    const lastJobId = await getGreatestJobIdFromQueueInDatabase(queueId);\n    const priority = BASE_PRIORITY - lastJobId - 0.5;\n    this.addToQueue(queueId, priority, true, async () => {\n      // Resets job attempts. Changes:\n      // * JOB_ABORTED_STATUS -> JOB_PENDING_STATUS\n      // * JOB_ERROR_STATUS -> JOB_ERROR_STATUS\n      // * JOB_CLEANUP_STATUS -> JOB_CLEANUP_STATUS\n      // * JOB_COMPLETE_STATUS -> JOB_COMPLETE_STATUS\n      // * JOB_CLEANUP_AND_REMOVE_STATUS -> JOB_CLEANUP_AND_REMOVE_STATUS\n      const jobs = await markQueuePendingInDatabase(queueId);\n      await this.startJobs(jobs);\n    });\n  }\n\n  async abortAndRemoveQueue(queueId: string) {\n    this.logger.info(`Aborting and removing queue ${queueId}`);\n    this.removeDurationEstimate(queueId);\n    // Abort active jobs\n    const queueAbortControllerMap = this.abortControllerMap.get(queueId);\n    if (typeof queueAbortControllerMap !== 'undefined') {\n      for (const abortController of queueAbortControllerMap.values()) {\n        abortController.abort();\n      }\n    }\n    // Changes:\n    // * JOB_ERROR_STATUS -> JOB_CLEANUP_AND_REMOVE_STATUS\n    // * JOB_COMPLETE_STATUS -> JOB_CLEANUP_AND_REMOVE_STATUS\n    // * JOB_CLEANUP_STATUS -> JOB_CLEANUP_AND_REMOVE_STATUS\n    // * JOB_CLEANUP_AND_REMOVE_STATUS -> JOB_CLEANUP_AND_REMOVE_STATUS\n    // * Removes other statuses\n    const jobs = await markQueueForCleanupAndRemoveInDatabase(queueId);\n    await this.startJobs(jobs);\n  }\n\n  async abortAndRemoveQueueJobsGreaterThanId(queueId: string, id: number) {\n    this.logger.info(`Aborting and removing jobs with ID greater than ${id} in queue ${queueId}`);\n    // Abort active jobs\n    const queueAbortControllerMap = this.abortControllerMap.get(queueId);\n    if (typeof queueAbortControllerMap !== 'undefined') {\n      for (const [jobId, abortController] of queueAbortControllerMap) {\n        if (jobId > id) {\n          this.removeDurationEstimate(queueId, jobId);\n          abortController.abort();\n        }\n      }\n    }\n    // Changes:\n    // * JOB_ERROR_STATUS -> JOB_CLEANUP_AND_REMOVE_STATUS\n    // * JOB_COMPLETE_STATUS -> JOB_CLEANUP_AND_REMOVE_STATUS\n    // * JOB_CLEANUP_STATUS -> JOB_CLEANUP_AND_REMOVE_STATUS\n    // * JOB_CLEANUP_AND_REMOVE_STATUS -> JOB_CLEANUP_AND_REMOVE_STATUS\n    // * Removes other statuses\n    const jobs = await markQueueJobsGreaterThanIdCleanupAndRemoveInDatabase(queueId, id);\n    await this.startJobs(jobs);\n  }\n\n  async dequeue():Promise<void> {\n    if (this.stopped) {\n      return;\n    }\n    if (this.dequeueQueue.size === 0) {\n      // Add a subsequent dequeue\n      this.dequeueQueue.add(this.startJobs.bind(this));\n    }\n    await this.dequeueQueue.onIdle();\n  }\n\n  async startJobs(newJobs?:Array<Job>) { // eslint-disable-line consistent-return\n    const jobs = Array.isArray(newJobs) ? newJobs : await dequeueFromDatabaseNotIn([...this.jobIds.keys()]);\n    const queueIds = new Set();\n    for (const { id, queueId, args, type, status, attempt, startAfter, prioritize } of jobs) {\n      if (this.jobIds.has(id)) {\n        continue;\n      }\n      // Pause queues before adding items into them to avoid starting things out of priority\n      if (!queueIds.has(queueId)) {\n        const queue = this.queueMap.get(queueId);\n        if (typeof queue !== 'undefined') {\n          queue.pause();\n        }\n        queueIds.add(queueId);\n      }\n      if (status === JOB_PENDING_STATUS) {\n        this.startJob(id, queueId, args, type, attempt + 1, startAfter, false, prioritize);\n      } else if (status === JOB_ERROR_STATUS) {\n        this.startErrorHandler(id, queueId, args, type, attempt, startAfter, false, prioritize);\n      } else if (status === JOB_CLEANUP_STATUS) {\n        this.startCleanup(id, queueId, args, type, false, prioritize);\n      } else if (status === JOB_CLEANUP_AND_REMOVE_STATUS) {\n        this.startCleanup(id, queueId, args, type, false, prioritize);\n      } else {\n        throw new Error(`Unknown job status ${status} in job ${id} of queue ${queueId}`);\n      }\n    }\n    for (const queueId of queueIds) {\n      const queue = this.queueMap.get(queueId);\n      if (typeof queue !== 'undefined') {\n        queue.start();\n      } else {\n        this.logger.error(`Unable to start queue ${queueId} after dequeue; queue does not exist`);\n      }\n    }\n  }\n\n  async stop() {\n    if (typeof this.stopPromise === 'undefined') {\n      this.stopped = true;\n      this.stopPromise = (async () => {\n        await this.dequeueQueue.onIdle();\n        const idlePromises = [];\n        for (const [queueId, queue] of this.queueMap) {\n          const interval = setInterval(() => {\n            this.logger.info(`Waiting on queue ${queueId} stop() request. Queue ${queue.isPaused ? 'is paused' : 'is not paused'}, with ${queue.pending} ${queue.pending === 1 ? 'job' : 'jobs'} pending and ${queue.size} ${queue.size === 1 ? 'job' : 'jobs'} remaining.`);\n          }, 250);\n          queue.clear();\n          idlePromises.push(queue.onIdle().finally(() => {\n            clearInterval(interval);\n          }));\n        }\n        await Promise.all(idlePromises);\n        this.jobIds.clear();\n        this.abortControllerMap.clear();\n        delete this.stopPromise;\n        this.emit('stop');\n        this.stopped = false;\n      })();\n    }\n    await this.stopPromise;\n  }\n\n  async onIdle(maxDuration?: number) {\n    if (typeof this.onIdlePromise === 'undefined') {\n      this.onIdlePromise = (async () => {\n        const timeout = typeof maxDuration === 'number' ? Date.now() + maxDuration : -1;\n        const start = Date.now();\n        while (true) { // eslint-disable-line no-constant-condition\n          if (timeout !== -1 && Date.now() > timeout) {\n            this.logger.warn(`Idle timeout after ${Date.now() - start}ms`);\n            break;\n          }\n          await this.dequeueQueue.onIdle();\n          for (const [queueId, queue] of this.queueMap) {\n            const interval = setInterval(() => {\n              this.logger.info(`Waiting on queue ${queueId} onIdle() request. Queue ${queue.isPaused ? 'is paused' : 'is not paused'}, with ${queue.pending} ${queue.pending === 1 ? 'job' : 'jobs'} pending and ${queue.size} ${queue.size === 1 ? 'job' : 'jobs'} remaining.`);\n            }, 250);\n            await queue.onIdle();\n            clearInterval(interval);\n          }\n          const jobsInterval = setInterval(() => {\n            this.logger.info('Waiting on jobs');\n          }, 250);\n          const jobs = await dequeueFromDatabase();\n          clearInterval(jobsInterval);\n          if (jobs.length > 0) {\n            const interval = setInterval(() => {\n              this.logger.info('Waiting on dequeue');\n            }, 250);\n            await this.dequeue();\n            clearInterval(interval);\n            continue;\n          }\n          break;\n        }\n        delete this.onIdlePromise;\n        this.emit('idle');\n      })();\n    }\n    await this.onIdlePromise;\n  }\n\n  getAbortController(id:number, queueId:string) {\n    let queueAbortControllerMap = this.abortControllerMap.get(queueId);\n    if (typeof queueAbortControllerMap === 'undefined') {\n      queueAbortControllerMap = new Map();\n      this.abortControllerMap.set(queueId, queueAbortControllerMap);\n    }\n    const abortController = queueAbortControllerMap.get(id);\n    if (typeof abortController !== 'undefined') {\n      return abortController;\n    }\n    const newAbortController = new AbortController();\n    queueAbortControllerMap.set(id, newAbortController);\n    return newAbortController;\n  }\n\n  removeAbortController(id:number, queueId:string) {\n    const queueAbortControllerMap = this.abortControllerMap.get(queueId);\n    if (typeof queueAbortControllerMap === 'undefined') {\n      this.logger.warn(`Abort controller map for ${id} in queue ${queueId} does not exist`);\n      return;\n    }\n    const abortController = queueAbortControllerMap.get(id);\n    if (typeof abortController === 'undefined') {\n      this.logger.warn(`Abort controller for ${id} in queue ${queueId} does not exist`);\n      return;\n    }\n    queueAbortControllerMap.delete(id);\n    if (queueAbortControllerMap.size === 0) {\n      this.abortControllerMap.delete(queueId);\n    }\n  }\n\n  async runCleanup(id:number, queueId:string, args:Array<any>, type:string) {\n    this.emit('cleanupStart', { id });\n    const cleanup = this.cleanupMap.get(type);\n    if (typeof cleanup !== 'function') {\n      this.logger.warn(`No cleanup for job type ${type}`);\n      await removeCleanupFromDatabase(id);\n      this.emit('cleanup', { id });\n      return;\n    }\n    const cleanupJob = await getCleanupFromDatabase(id);\n    const { data, startAfter } = typeof cleanupJob === 'undefined' ? { data: undefined, startAfter: 0 } : cleanupJob;\n    const delay = startAfter - Date.now();\n    if (delay > 0) {\n      this.logger.info(`Delaying retry of ${type} job #${id} cleanup in queue ${queueId} by ${delay}ms to ${new Date(startAfter).toLocaleString()}`);\n      await new Promise((resolve) => setTimeout(resolve, delay));\n    }\n    try {\n      await cleanup(data, args, (path:Array<string>) => removePathFromCleanupDataInDatabase(id, path));\n    } catch (error) {\n      const attempt = await incrementCleanupAttemptInDatabase(id, queueId);\n      if (error.name === 'FatalError') {\n        this.logger.error(`Fatal error in ${type} job #${id} cleanup in queue ${queueId} attempt ${attempt}`);\n        this.emit('error', error);\n        await removeCleanupFromDatabase(id);\n        this.emit('fatalCleanupError', { id, queueId });\n        return;\n      }\n      const retryCleanupDelay = await this.getRetryCleanupDelay(type, attempt, error);\n      if (retryCleanupDelay === false) {\n        this.logger.error(`Error in ${type} job #${id} cleanup in queue ${queueId} attempt ${attempt} with no additional attempts requested`);\n        this.emit('error', error);\n        await removeCleanupFromDatabase(id);\n        this.emit('fatalCleanupError', { id, queueId });\n        return;\n      }\n      this.logger.error(`Error in ${type} job #${id} cleanup in queue ${queueId} attempt ${attempt}, retrying ${retryCleanupDelay > 0 ? `in ${retryCleanupDelay}ms` : 'immediately'}`);\n      this.emit('error', error);\n      if (retryCleanupDelay > 0) {\n        this.emit('retryCleanupDelay', { id, queueId, retryCleanupDelay });\n        const newStartAfter = Date.now() + retryCleanupDelay;\n        await markCleanupStartAfterInDatabase(id, newStartAfter);\n      }\n      await this.runCleanup(id, queueId, args, type);\n      return;\n    }\n    await removeCleanupFromDatabase(id);\n    this.emit('cleanup', { id });\n  }\n\n  startCleanup(id:number, queueId:string, args:Array<any>, type:string, autoStart:boolean, prioritize: boolean) {\n    this.logger.info(`Adding ${type} cleanup job #${id} to queue ${queueId}`);\n    this.jobIds.add(id);\n    this.removeDurationEstimate(queueId, id);\n    const priority = BASE_PRIORITY + id - (prioritize ? HIGH_PRIORITY_OFFSET : 0);\n    const run = async () => {\n      this.setCurrentJobType(queueId, CLEANUP_JOB_TYPE);\n      this.logger.info(`Starting ${type} cleanup #${id} in queue ${queueId}`);\n      await this.runCleanup(id, queueId, args, type);\n      // Job could be marked for removal while cleanup is running\n      await markJobAsAbortedOrRemoveFromDatabase(id);\n      this.jobIds.delete(id);\n    };\n    this.addToQueue(queueId, priority, autoStart, run);\n  }\n\n  startErrorHandler(id:number, queueId:string, args:Array<any>, type:string, attempt: number, startAfter: number, autoStart:boolean, prioritize: boolean) {\n    this.logger.info(`Adding ${type} error handler job #${id} to queue ${queueId}`);\n    this.jobIds.add(id);\n    const priority = BASE_PRIORITY + id - (prioritize ? HIGH_PRIORITY_OFFSET : 0);\n    const abortController = this.getAbortController(id, queueId);\n    const run = async () => {\n      this.setCurrentJobType(queueId, CLEANUP_JOB_TYPE);\n      this.logger.info(`Starting ${type} error handler #${id} in queue ${queueId}`);\n      await this.runCleanup(id, queueId, args, type);\n      if (abortController.signal.aborted) {\n        // Job could be marked for removal while error handler is running\n        await markJobAsAbortedOrRemoveFromDatabase(id);\n        this.removeAbortController(id, queueId);\n        this.jobIds.delete(id);\n      } else {\n        await markJobPendingInDatabase(id);\n        this.logger.info(`Retrying ${type} job #${id} in queue ${queueId}`);\n        this.emit('retry', { id });\n        this.startJob(id, queueId, args, type, attempt + 1, startAfter, true, prioritize);\n      }\n      this.logger.info(`Completed ${type} error handler #${id} in queue ${queueId}`);\n    };\n    this.addToQueue(queueId, priority, autoStart, run);\n  }\n\n  async delayJobStart(id:number, queueId:string, type:string, signal: AbortSignal, startAfter: number) {\n    if (signal.aborted) {\n      throw new AbortError(`Queue ${queueId} was aborted`);\n    }\n    const duration = startAfter - Date.now();\n    if (duration > 0) {\n      this.logger.info(`Delaying start of ${type} job #${id} in queue ${queueId} by ${duration}ms`);\n      await new Promise((resolve, reject) => {\n        const timeout = setTimeout(() => {\n          signal.removeEventListener('abort', handleAbort);\n          resolve();\n        }, duration);\n        const handleAbort = () => {\n          clearTimeout(timeout);\n          signal.removeEventListener('abort', handleAbort);\n          reject(new AbortError(`Queue ${queueId} was aborted`));\n        };\n        signal.addEventListener('abort', handleAbort);\n      });\n    }\n  }\n\n  startJob(id:number, queueId:string, args:Array<any>, type:string, attempt:number, startAfter: number, autoStart:boolean, prioritize: boolean) {\n    this.logger.info(`Adding ${type} job #${id} to queue ${queueId}`);\n    this.jobIds.add(id);\n    const priority = BASE_PRIORITY - id + (prioritize ? HIGH_PRIORITY_OFFSET : 0);\n    const updateCleanupData = (data:Object) => updateCleanupValuesInDatabase(id, queueId, data);\n    const updateDuration = (duration:number, pending:number) => {\n      this.addDurationEstimate(queueId, id, duration, pending);\n    };\n    const updateDurationEstimate = () => {\n      const durationEstimateHandler = this.durationEstimateHandlerMap.get(type);\n      if (typeof durationEstimateHandler === 'function') {\n        try {\n          const durationEstimate = durationEstimateHandler(args);\n          this.addDurationEstimate(queueId, id, durationEstimate, durationEstimate);\n          return durationEstimate;\n        } catch (error) {\n          this.logger.error(`Unable to estimate duration of ${type} job #${id} in queue ${queueId}`);\n          this.logger.errorStack(error);\n        }\n      }\n      return 0;\n    };\n    updateDurationEstimate();\n    this.durationEstimateUpdaterMap.set(id, updateDurationEstimate);\n    const abortController = this.getAbortController(id, queueId);\n    const run = async () => {\n      const start = Date.now();\n      const durationEstimate = updateDurationEstimate();\n      this.durationEstimateUpdaterMap.delete(id);\n      if (abortController.signal.aborted) {\n        this.emit('fatalError', { id, queueId, error: new AbortError(`Queue ${queueId} was aborted`) });\n        this.removeAbortController(id, queueId);\n        this.jobIds.delete(id);\n        this.removeDurationEstimate(queueId, id);\n        return;\n      }\n      const handler = this.handlerMap.get(type);\n      if (typeof handler !== 'function') {\n        this.logger.warn(`No handler for job type ${type}`);\n        await markJobCompleteInDatabase(id);\n        this.removeAbortController(id, queueId);\n        this.jobIds.delete(id);\n        this.addDurationEstimate(queueId, id, Date.now() - start, 0);\n        return;\n      }\n      this.setCurrentJobType(queueId, type);\n      let handlerDidRun = false;\n      try {\n        // Mark as error in database so the job is cleaned up and retried if execution\n        // stops before job completion or error.\n        await markJobErrorInDatabase(id);\n        await this.delayJobStart(id, queueId, type, abortController.signal, startAfter);\n        this.logger.info(`Starting ${type} job #${id} in queue ${queueId} attempt ${attempt}`);\n        handlerDidRun = true;\n        const shouldKeepJobInDatabase = await handler(args, abortController.signal, updateCleanupData, updateDuration);\n        if (abortController.signal.aborted) {\n          throw new AbortError(`Queue ${queueId} was aborted`);\n        }\n        if (shouldKeepJobInDatabase === false) {\n          await markJobCompleteThenRemoveFromDatabase(id);\n        } else {\n          await markJobCompleteInDatabase(id);\n        }\n        this.removeAbortController(id, queueId);\n        this.jobIds.delete(id);\n        const duration = Date.now() - start;\n        if (typeof durationEstimate === 'number') {\n          const estimatedToActualRatio = durationEstimate / duration;\n          if (estimatedToActualRatio < 0.8 || estimatedToActualRatio > 1.25) {\n            this.logger.warn(`Duration estimate of ${type} job #${id} (${durationEstimate}ms) was ${Math.round(100 * estimatedToActualRatio)}% of actual value (${duration}ms)`);\n          }\n        }\n        this.addDurationEstimate(queueId, id, duration, 0);\n        this.logger.info(`Completed ${type} job #${id} in queue ${queueId} attempt ${attempt} in ${duration}ms`);\n        return;\n      } catch (error) {\n        if (error.name === 'JobDoesNotExistError') {\n          this.logger.error(`Job does not exist error for ${type} job #${id} in queue ${queueId} attempt ${attempt}`);\n          if (handlerDidRun) {\n            this.emit('fatalError', { id, queueId, error });\n            await restoreJobToDatabaseForCleanupAndRemove(id, queueId, type, args, prioritize);\n            this.jobIds.delete(id);\n            this.removeAbortController(id, queueId);\n            this.startCleanup(id, queueId, args, type, true, prioritize);\n          } else {\n            this.emit('fatalError', { id, queueId, error });\n            this.jobIds.delete(id);\n            this.removeAbortController(id, queueId);\n            this.removeDurationEstimate(queueId, id);\n          }\n          return;\n        }\n        if (abortController.signal.aborted) {\n          if (error.name !== 'AbortError') {\n            this.logger.error(`Abort signal following error in ${type} job #${id} in queue ${queueId} attempt ${attempt}`);\n            this.emit('error', error);\n          } else {\n            this.logger.warn(`Received abort signal for ${type} job #${id} in queue ${queueId} attempt ${attempt}`);\n          }\n          if (handlerDidRun) {\n            this.emit('fatalError', { id, queueId, error });\n            this.jobIds.delete(id);\n            this.removeAbortController(id, queueId);\n            this.startCleanup(id, queueId, args, type, true, prioritize);\n          } else {\n            this.emit('fatalError', { id, queueId, error });\n            await markJobAsAbortedOrRemoveFromDatabase(id);\n            this.jobIds.delete(id);\n            this.removeAbortController(id, queueId);\n            this.removeDurationEstimate(queueId, id);\n          }\n          return;\n        }\n        await incrementJobAttemptInDatabase(id);\n        if (error.name === 'FatalError') {\n          this.logger.error(`Fatal error in ${type} job #${id} in queue ${queueId} attempt ${attempt}`);\n          this.emit('error', error);\n          this.emit('fatalError', { id, queueId, error });\n          this.jobIds.delete(id);\n          this.removeAbortController(id, queueId);\n          await this.abortQueue(queueId);\n          return;\n        }\n        const retryDelay = await this.getRetryJobDelay(type, attempt, error);\n        if (retryDelay === false) {\n          this.logger.error(`Error in ${type} job #${id} in queue ${queueId} attempt ${attempt} with no additional attempts requested`);\n          this.emit('error', error);\n          this.emit('fatalError', { id, queueId, error });\n          this.jobIds.delete(id);\n          this.removeAbortController(id, queueId);\n          await this.abortQueue(queueId);\n          return;\n        }\n        this.logger.error(`Error in ${type} job #${id} in queue ${queueId} attempt ${attempt}, retrying ${retryDelay > 0 ? `in ${retryDelay}ms` : 'immediately'}`);\n        this.emit('error', error);\n        if (retryDelay > 0) {\n          this.emit('retryDelay', { id, queueId, retryDelay });\n          const newStartAfter = Date.now() + retryDelay;\n          await markJobStartAfterInDatabase(id, newStartAfter);\n          this.jobIds.delete(id);\n          this.startErrorHandler(id, queueId, args, type, attempt, newStartAfter, true, prioritize);\n        } else {\n          this.jobIds.delete(id);\n          this.startErrorHandler(id, queueId, args, type, attempt, startAfter, true, prioritize);\n        }\n      }\n    };\n    this.addToQueue(queueId, priority, autoStart, run);\n    this.emit('dequeue', { id });\n  }\n\n  async handlePortMessage(event:MessageEvent) {\n    if (!(event instanceof MessageEvent)) {\n      return;\n    }\n    const { data } = event;\n    if (!data || typeof data !== 'object') {\n      this.logger.warn('Invalid message data');\n      this.logger.warnObject(event);\n      return;\n    }\n    const { type, args } = data;\n    if (typeof type !== 'string') {\n      this.logger.warn('Unknown message type');\n      this.logger.warnObject(event);\n      return;\n    }\n    if (!Array.isArray(args)) {\n      this.logger.warn('Unknown arguments type');\n      this.logger.warnObject(event);\n      return;\n    }\n    const port = this.port;\n    switch (type) {\n      case 'heartbeat':\n        this.emit('heartbeat', ...args);\n        return;\n      case 'jobAdd':\n        jobEmitter.emit('jobAdd', ...args);\n        return;\n      case 'jobDelete':\n        jobEmitter.emit('jobDelete', ...args);\n        return;\n      case 'jobUpdate':\n        jobEmitter.emit('jobUpdate', ...args);\n        return;\n      case 'jobsClear':\n        jobEmitter.emit('jobsClear', ...args);\n        return;\n      default:\n        break;\n    }\n    const [requestId, ...requestArgs] = args;\n    if (typeof requestId !== 'number') {\n      throw new Error('Request arguments should start with a requestId number');\n    }\n    switch (type) {\n      case 'unlink':\n        this.logger.warn('Unlinking worker interface');\n        try {\n          await this.stop();\n          this.emit('unlinkComplete', requestId);\n        } catch (error) {\n          this.emit('unlinkError', requestId, error);\n          this.logger.error('Unable to handle unlink message');\n          this.emit('error', error);\n        }\n        if (port instanceof MessagePort) {\n          port.onmessage = null;\n          delete this.port;\n        }\n        break;\n      case 'clear':\n        try {\n          await this.clear();\n          this.emit('clearComplete', requestId);\n        } catch (error) {\n          this.emit('clearError', requestId, error);\n          this.logger.error('Unable to handle clear message');\n          this.emit('error', error);\n        }\n        break;\n      case 'abortAndRemoveQueueJobsGreaterThanId':\n        try {\n          const [queueId, id] = requestArgs;\n          if (typeof queueId !== 'string') {\n            throw new Error(`Invalid \"queueId\" argument with type ${typeof queueId}, should be type string`);\n          }\n          if (typeof id !== 'number') {\n            throw new Error(`Invalid \"id\" argument with type ${typeof id}, should be type number`);\n          }\n          await this.abortAndRemoveQueueJobsGreaterThanId(queueId, id);\n          this.emit('abortAndRemoveQueueJobsGreaterThanIdComplete', requestId);\n        } catch (error) {\n          this.emit('abortAndRemoveQueueJobsGreaterThanIdError', requestId, error);\n          this.logger.error('Unable to handle abort and remove queue jobs greater than ID message');\n          this.emit('error', error);\n        }\n        break;\n      case 'abortAndRemoveQueue':\n        try {\n          const [queueId] = requestArgs;\n          if (typeof queueId !== 'string') {\n            throw new Error(`Invalid \"queueId\" argument with type ${typeof queueId}, should be type string`);\n          }\n          await this.abortAndRemoveQueue(queueId);\n          this.emit('abortAndRemoveQueueComplete', requestId);\n        } catch (error) {\n          this.emit('abortAndRemoveQueueError', requestId, error);\n          this.logger.error('Unable to handle abort and remove queue message');\n          this.emit('error', error);\n        }\n        break;\n      case 'updateDurationEstimates':\n        try {\n          await this.updateDurationEstimates();\n          this.emit('updateDurationEstimatesComplete', requestId);\n        } catch (error) {\n          this.emit('updateDurationEstimatesError', requestId, error);\n          this.logger.error('Unable to handle update duration estimates message');\n          this.emit('error', error);\n        }\n        break;\n      case 'abortQueue':\n        try {\n          const [queueId] = requestArgs;\n          if (typeof queueId !== 'string') {\n            throw new Error(`Invalid \"queueId\" argument with type ${typeof queueId}, should be type string`);\n          }\n          await this.abortQueue(queueId);\n          this.emit('abortQueueComplete', requestId);\n        } catch (error) {\n          this.emit('abortQueueError', requestId, error);\n          this.logger.error('Unable to handle abort queue message');\n          this.emit('error', error);\n        }\n        break;\n      case 'retryQueue':\n        try {\n          const [queueId] = requestArgs;\n          if (typeof queueId !== 'string') {\n            throw new Error(`Invalid \"queueId\" argument with type ${typeof queueId}, should be type string`);\n          }\n          await this.retryQueue(queueId);\n          this.emit('retryQueueComplete', requestId);\n        } catch (error) {\n          this.emit('retryQueueError', requestId, error);\n          this.logger.error('Unable to handle retry queue message');\n          this.emit('error', error);\n        }\n        break;\n      case 'dequeue':\n        try {\n          await this.dequeue();\n          this.emit('dequeueComplete', requestId);\n        } catch (error) {\n          this.emit('dequeueError', requestId, error);\n          this.logger.error('Unable to handle dequeue message');\n          this.emit('error', error);\n        }\n        break;\n      case 'enableStartOnJob':\n        try {\n          this.enableStartOnJob();\n          this.emit('enableStartOnJobComplete', requestId);\n        } catch (error) {\n          this.emit('enableStartOnJobError', requestId, error);\n          this.logger.error('Unable to handle enableStartOnJob message');\n          this.emit('error', error);\n        }\n        break;\n      case 'disableStartOnJob':\n        try {\n          this.disableStartOnJob();\n          this.emit('disableStartOnJobComplete', requestId);\n        } catch (error) {\n          this.emit('disableStartOnJobError', requestId, error);\n          this.logger.error('Unable to handle disableStartOnJob message');\n          this.emit('error', error);\n        }\n        break;\n      case 'getQueueIds':\n        try {\n          const queueIds = await this.getQueueIds();\n          this.emit('getQueuesComplete', requestId, [...queueIds]);\n        } catch (error) {\n          this.emit('getQueuesError', requestId, error);\n          this.logger.error('Unable to handle getQueueIds message');\n          this.emit('error', error);\n        }\n        break;\n      case 'getDurationEstimate':\n        try {\n          const [queueId] = requestArgs;\n          if (typeof queueId !== 'string') {\n            throw new Error(`Invalid \"queueId\" argument with type ${typeof queueId}, should be type string`);\n          }\n          const values = await this.getDurationEstimate(queueId);\n          this.emit('getDurationEstimateComplete', requestId, values);\n        } catch (error) {\n          this.emit('getDurationEstimateError', requestId, error);\n          this.logger.error('Unable to handle get duration estimate message');\n          this.emit('error', error);\n        }\n        break;\n      case 'getCurrentJobType':\n        try {\n          const [queueId] = requestArgs;\n          if (typeof queueId !== 'string') {\n            throw new Error(`Invalid \"queueId\" argument with type ${typeof queueId}, should be type string`);\n          }\n          const currentJobType = this.getCurrentJobType(queueId);\n          this.emit('getCurrentJobTypeComplete', requestId, currentJobType);\n        } catch (error) {\n          this.emit('getCurrentJobTypeError', requestId, error);\n          this.logger.error('Unable to handle get current job type message');\n          this.emit('error', error);\n        }\n        break;\n      case 'runUnloadHandlers':\n        try {\n          await this.runUnloadHandlers();\n          this.emit('runUnloadHandlersComplete', requestId);\n        } catch (error) {\n          this.emit('runUnloadHandlersError', requestId, error);\n          this.logger.error('Unable to run unload handlers message');\n          this.emit('error', error);\n        }\n        break;\n      case 'idle':\n        try {\n          const [maxDuration, start] = requestArgs;\n          if (typeof maxDuration !== 'number') {\n            throw new Error(`Invalid \"queueId\" argument with type ${typeof maxDuration}, should be type number`);\n          }\n          if (typeof start !== 'number') {\n            throw new Error(`Invalid \"queueId\" argument with type ${typeof start}, should be type number`);\n          }\n          await this.onIdle(maxDuration - (Date.now() - start));\n          this.emit('idleComplete', requestId);\n        } catch (error) {\n          this.emit('idleError', requestId, error);\n          this.logger.error('Unable to handle idle message');\n          this.emit('error', error);\n        }\n        break;\n      default:\n        this.logger.warn(`Unknown worker interface message type ${type}`);\n    }\n  }\n\n  async unloadClient() {\n    this.logger.info('Detected client unload');\n    const heartbeatExpiresTimestamp = this.heartbeatExpiresTimestamp;\n    if (typeof heartbeatExpiresTimestamp !== 'number') {\n      return;\n    }\n    clearTimeout(this.heartbeatExpiresTimeout);\n    delete this.heartbeatExpiresTimestamp;\n    const delay = heartbeatExpiresTimestamp - Date.now();\n    if (delay > 0) {\n      await new Promise((resolve) => {\n        const timeout = setTimeout(() => {\n          clearTimeout(timeout);\n          this.removeListener('heartbeat', handleHeartbeat);\n          resolve();\n        }, delay);\n        const handleHeartbeat = () => {\n          clearTimeout(timeout);\n          this.removeListener('heartbeat', handleHeartbeat);\n          resolve();\n        };\n        this.addListener('heartbeat', handleHeartbeat);\n      });\n    }\n    if (typeof this.heartbeatExpiresTimestamp === 'number') {\n      this.logger.info('Cancelling client unload, heartbeat detected');\n      return;\n    }\n    this.logger.info('Unloading');\n    await this.runUnloadHandlers();\n    this.emit('unloadClient');\n    await this.onIdle();\n  }\n\n  runUnloadHandlers() {\n    return this.unloadQueue.add(async () => {\n      const handleUnload = this.handleUnload;\n      if (typeof handleUnload === 'function') {\n        try {\n          const unloadData = await getUnloadDataFromDatabase();\n          await handleUnload(unloadData);\n          await clearUnloadDataInDatabase();\n        } catch (error) {\n          this.logger.error('Error in unload handler');\n          this.logger.errorStack(error);\n        }\n      }\n    });\n  }\n\n  listenForServiceWorkerInterface() {\n    let activeEmitCallback;\n    let handleJobAdd;\n    let handleJobDelete;\n    let handleJobUpdate;\n    let handleJobsClear;\n\n    self.addEventListener('sync', (event) => {\n      this.logger.info(`SyncManager event ${event.tag}${event.lastChance ? ', last chance' : ''}`);\n      if (event.tag === 'syncManagerOnIdle') {\n        this.logger.info('Starting SyncManager idle handler');\n        this.emit('syncManagerOnIdle');\n        event.waitUntil(this.onIdle().catch((error) => {\n          this.logger.error(`SyncManager event handler failed${event.lastChance ? ' on last chance' : ''}`);\n          this.logger.errorStack(error);\n        }));\n      } else if (event.tag === 'unload') {\n        this.logger.info('Starting SyncManager unload client handler');\n        event.waitUntil(this.unloadClient().catch((error) => {\n          this.logger.error(`SyncManager event handler failed${event.lastChance ? ' on last chance' : ''}`);\n          this.logger.errorStack(error);\n        }));\n      } else {\n        this.logger.warn(`Received unknown SyncManager event tag ${event.tag}`);\n      }\n    });\n\n    self.addEventListener('message', (event:ExtendableMessageEvent) => {\n      if (!(event instanceof ExtendableMessageEvent)) {\n        return;\n      }\n      const { data } = event;\n      if (!data || typeof data !== 'object') {\n        return;\n      }\n      const { type } = data;\n      if (type !== 'BATTERY_QUEUE_WORKER_INITIALIZATION') {\n        return;\n      }\n      if (!Array.isArray(event.ports)) {\n        return;\n      }\n      const port = event.ports[0];\n      if (!(port instanceof MessagePort)) {\n        return;\n      }\n      this.emitCallbacks = this.emitCallbacks.filter((x) => x !== activeEmitCallback);\n      const previousPort = this.port;\n      if (previousPort instanceof MessagePort) {\n        this.logger.info('Closing previous worker interface');\n        previousPort.close();\n      }\n      if (typeof handleJobAdd === 'function') {\n        localJobEmitter.removeListener('jobAdd', handleJobAdd);\n      }\n      if (typeof handleJobDelete === 'function') {\n        localJobEmitter.removeListener('jobDelete', handleJobDelete);\n      }\n      if (typeof handleJobUpdate === 'function') {\n        localJobEmitter.removeListener('jobUpdate', handleJobUpdate);\n      }\n      if (typeof handleJobsClear === 'function') {\n        localJobEmitter.removeListener('jobsClear', handleJobsClear);\n      }\n      port.onmessage = this.handlePortMessage.bind(this);\n\n      handleJobAdd = (...args:Array<any>) => {\n        port.postMessage({ type: 'jobAdd', args });\n      };\n      handleJobDelete = (...args:Array<any>) => {\n        port.postMessage({ type: 'jobDelete', args });\n      };\n      handleJobUpdate = (...args:Array<any>) => {\n        port.postMessage({ type: 'jobUpdate', args });\n      };\n      handleJobsClear = (...args:Array<any>) => {\n        port.postMessage({ type: 'jobsClear', args });\n      };\n      localJobEmitter.addListener('jobAdd', handleJobAdd);\n      localJobEmitter.addListener('jobDelete', handleJobDelete);\n      localJobEmitter.addListener('jobUpdate', handleJobUpdate);\n      localJobEmitter.addListener('jobsClear', handleJobsClear);\n      const emitCallback = (t:string, args:Array<any>) => {\n        port.postMessage({ type: t, args });\n      };\n      activeEmitCallback = emitCallback;\n      this.emitCallbacks.push(emitCallback);\n      this.port = port;\n      port.postMessage({ type: 'BATTERY_QUEUE_WORKER_CONFIRMATION' });\n      this.logger.info('Linked to worker interface');\n    });\n    self.addEventListener('messageerror', (event:MessageEvent) => {\n      this.logger.error('Service worker interface message error');\n      this.logger.errorObject(event);\n    });\n  }\n}\n\n"],"file":"queue.js"}