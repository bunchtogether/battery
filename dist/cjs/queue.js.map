{"version":3,"sources":["../../src/queue.js"],"names":["PRIORITY_OFFSET","Math","floor","Number","MAX_SAFE_INTEGER","BatteryQueue","options","dequeueQueue","PQueue","concurrency","handlerMap","Map","cleanupMap","retryJobDelayMap","retryCleanupDelayMap","queueMap","jobIds","Set","abortControllerMap","isClearing","emitCallbacks","logger","addListener","error","errorStack","didRequestDequeue","handleJobAdd","self","queueMicrotask","dequeue","jobEmitter","removeListener","type","args","emitCallback","queueIds","keys","retryJobDelayFunction","has","Error","set","delete","attempt","get","result","emit","retryCleanupDelayFunction","handler","cleanup","onIdle","start","queueId","priority","func","queue","add","newQueue","autoStart","on","Promise","resolve","timeout","setTimeout","handleClearing","handleActive","clearTimeout","pending","size","info","queueAbortControllerMap","values","abortController","abort","jobs","startJobs","bind","newJobs","Array","isArray","id","status","startAfter","pause","JOB_PENDING_STATUS","startJob","JOB_ERROR_STATUS","startErrorHandler","JOB_CLEANUP_STATUS","startCleanup","maxDuration","onIdlePromise","Date","now","warn","interval","setInterval","clearInterval","jobsInterval","length","newAbortController","AbortController","cleanupJob","data","undefined","delay","toLocaleString","path","name","getRetryCleanupDelay","retryCleanupDelay","newStartAfter","runCleanup","run","addToQueue","getAbortController","signal","aborted","removeAbortController","AbortError","duration","reject","removeEventListener","handleAbort","addEventListener","updateCleanupData","delayJobStart","abortQueue","getRetryJobDelay","retryDelay","event","MessageEvent","warnObject","port","MessagePort","onmessage","requestId","requestArgs","clear","enableStartOnJob","disableStartOnJob","getQueueIds","activeEmitCallback","handleJobDelete","handleJobUpdate","handleJobsClear","tag","lastChance","waitUntil","catch","ExtendableMessageEvent","ports","filter","x","previousPort","close","localJobEmitter","postMessage","handlePortMessage","t","push","errorObject","EventEmitter"],"mappings":"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","sourcesContent":["// @flow\n\nimport PQueue from 'p-queue';\nimport EventEmitter from 'events';\nimport type { Logger } from './logger';\nimport makeLogger from './logger';\nimport type { Job } from './database';\nimport {\n  jobEmitter,\n  localJobEmitter,\n  clearDatabase,\n  dequeueFromDatabase,\n  dequeueFromDatabaseNotIn,\n  incrementJobAttemptInDatabase,\n  incrementCleanupAttemptInDatabase,\n  markJobCompleteInDatabase,\n  markJobPendingInDatabase,\n  markJobErrorInDatabase,\n  markJobCleanupInDatabase,\n  markJobAbortedInDatabase,\n  markJobStartAfterInDatabase,\n  markCleanupStartAfterInDatabase,\n  updateCleanupValuesInDatabase,\n  getCleanupFromDatabase,\n  removePathFromCleanupDataInDatabase,\n  markQueueForCleanupInDatabase,\n  removeCleanupFromDatabase,\n  JOB_PENDING_STATUS,\n  JOB_ERROR_STATUS,\n  JOB_CLEANUP_STATUS,\n} from './database';\nimport { AbortError } from './errors';\n\nconst PRIORITY_OFFSET = Math.floor(Number.MAX_SAFE_INTEGER / 2);\n\ntype HandlerFunction = (Array<any>, AbortSignal, (Object) => Promise<void>) => Promise<void>;\ntype CleanupFunction = (Object | void, Array<any>, Array<string> => Promise<void>) => Promise<void>;\ntype RetryDelayFunction = (number, Error) => number | false | Promise<number | false>;\ntype EmitCallback = (string, Array<any>) => void;\n\ntype Options = {\n  logger?: Logger,\n  startOnJob?: boolean\n};\n\nexport default class BatteryQueue extends EventEmitter {\n  declare logger: Logger;\n  declare dequeueQueue: PQueue;\n  declare handlerMap: Map<string, HandlerFunction>;\n  declare retryJobDelayMap: Map<string, RetryDelayFunction>;\n  declare retryCleanupDelayMap: Map<string, RetryDelayFunction>;\n  declare cleanupMap: Map<string, CleanupFunction>;\n  declare queueMap: Map<string, PQueue>;\n  declare abortControllerMap: Map<string, Map<number, AbortController>>;\n  declare isClearing: boolean;\n  declare onIdlePromise: Promise<void> | void;\n  declare jobIds: Set<number>;\n  declare emitCallbacks: Array<EmitCallback>;\n  declare port: MessagePort | void;\n  declare handleJobAdd: void | () => void;\n\n  constructor(options?: Options = {}) {\n    super();\n    this.dequeueQueue = new PQueue({ concurrency: 1 });\n    this.handlerMap = new Map();\n    this.cleanupMap = new Map();\n    this.retryJobDelayMap = new Map();\n    this.retryCleanupDelayMap = new Map();\n    this.queueMap = new Map();\n    this.jobIds = new Set();\n    this.abortControllerMap = new Map();\n    this.isClearing = false;\n    this.emitCallbacks = [];\n    this.logger = options.logger || makeLogger('Battery Queue');\n    this.addListener('error', (error) => {\n      this.logger.errorStack(error);\n    });\n  }\n\n  enableStartOnJob() {\n    let didRequestDequeue = false;\n    const handleJobAdd = () => {\n      if (didRequestDequeue) {\n        return;\n      }\n      didRequestDequeue = true;\n      self.queueMicrotask(() => {\n        didRequestDequeue = false;\n        this.dequeue();\n      });\n    };\n    jobEmitter.addListener('jobAdd', handleJobAdd);\n    this.handleJobAdd = handleJobAdd;\n  }\n\n  disableStartOnJob() {\n    const handleJobAdd = this.handleJobAdd;\n    if (typeof handleJobAdd === 'function') {\n      jobEmitter.removeListener('jobAdd', handleJobAdd);\n      delete this.handleJobAdd;\n    }\n  }\n\n  emit(type:string, ...args:Array<any>) {\n    for (const emitCallback of this.emitCallbacks) {\n      emitCallback(type, args);\n    }\n    return super.emit(type, ...args);\n  }\n\n  async getQueueIds() {\n    await this.dequeue();\n    const queueIds:Set<string> = new Set(this.queueMap.keys());\n    return queueIds;\n  }\n\n  setRetryJobDelay(type:string, retryJobDelayFunction:RetryDelayFunction) {\n    if (this.retryJobDelayMap.has(type)) {\n      throw new Error(`Retry job delay handler for type \"${type}\" already exists`);\n    }\n    this.retryJobDelayMap.set(type, retryJobDelayFunction);\n  }\n\n  removeRetryJobDelay(type:string) {\n    if (!this.retryJobDelayMap.has(type)) {\n      throw new Error(`Retry job delay handler for type \"${type}\" does not exist`);\n    }\n    this.retryJobDelayMap.delete(type);\n  }\n\n  async getRetryJobDelay(type:string, attempt: number, error:Error) {\n    const retryJobDelayFunction = this.retryJobDelayMap.get(type);\n    if (typeof retryJobDelayFunction !== 'function') {\n      return false;\n    }\n    let result = false;\n    try {\n      result = await retryJobDelayFunction(attempt, error);\n    } catch (retryDelayError) {\n      this.logger.error(`Error in retry job delay handler for type \"${type}\" on attempt ${attempt}`);\n      this.emit('error', retryDelayError);\n      return false;\n    }\n    if (typeof result !== 'number' && result !== false) {\n      throw new Error(`Retry job delay function for type \"${type}\" returned invalid response, should be a number (milliseconds) or false`);\n    }\n    return result;\n  }\n\n  setRetryCleanupDelay(type:string, retryCleanupDelayFunction:RetryDelayFunction) {\n    if (this.retryCleanupDelayMap.has(type)) {\n      throw new Error(`Retry cleanup delay handler for type \"${type}\" already exists`);\n    }\n    this.retryCleanupDelayMap.set(type, retryCleanupDelayFunction);\n  }\n\n  removeRetryCleanupDelay(type:string) {\n    if (!this.retryCleanupDelayMap.has(type)) {\n      throw new Error(`Retry cleanup delay handler for type \"${type}\" does not exist`);\n    }\n    this.retryCleanupDelayMap.delete(type);\n  }\n\n  async getRetryCleanupDelay(type:string, attempt: number, error:Error) {\n    const retryCleanupDelayFunction = this.retryCleanupDelayMap.get(type);\n    if (typeof retryCleanupDelayFunction !== 'function') {\n      return false;\n    }\n    let result = false;\n    try {\n      result = await retryCleanupDelayFunction(attempt, error);\n    } catch (retryDelayError) {\n      this.logger.error(`Error in retry cleanup delay handler for type \"${type}\" on attempt ${attempt}`);\n      this.emit('error', retryDelayError);\n      return false;\n    }\n    if (typeof result !== 'number' && result !== false) {\n      throw new Error(`Retry cleanup delay function for type \"${type}\" returned invalid response, should be a number (milliseconds) or false`);\n    }\n    return result;\n  }\n\n  setHandler(type:string, handler: HandlerFunction) {\n    if (this.handlerMap.has(type)) {\n      throw new Error(`Handler for type \"${type}\" already exists`);\n    }\n    this.handlerMap.set(type, handler);\n  }\n\n  removeHandler(type:string) {\n    if (!this.handlerMap.has(type)) {\n      throw new Error(`Handler for type \"${type}\" does not exist`);\n    }\n    this.handlerMap.delete(type);\n  }\n\n  setCleanup(type:string, cleanup: CleanupFunction) {\n    if (this.cleanupMap.has(type)) {\n      throw new Error(`Cleanup for type \"${type}\" already exists`);\n    }\n    this.cleanupMap.set(type, cleanup);\n  }\n\n  removeCleanup(type:string) {\n    if (!this.cleanupMap.has(type)) {\n      throw new Error(`Cleanup for type \"${type}\" does not exist`);\n    }\n    this.cleanupMap.delete(type);\n  }\n\n  async clear() {\n    this.isClearing = true;\n    await this.onIdle();\n    this.emit('clearing');\n    await clearDatabase();\n    this.dequeueQueue.start();\n    this.isClearing = false;\n  }\n\n  addToQueue(queueId:string, priority: number, func: () => Promise<void>) {\n    const queue = this.queueMap.get(queueId);\n    if (typeof queue !== 'undefined') {\n      queue.add(func, { priority });\n      return;\n    }\n    const newQueue = new PQueue({ concurrency: 1, autoStart: false });\n    this.queueMap.set(queueId, newQueue);\n    newQueue.add(func, { priority });\n    newQueue.on('idle', async () => {\n      if (!this.isClearing) {\n        await new Promise((resolve) => {\n          const timeout = setTimeout(() => {\n            this.removeListener('clearing', handleClearing);\n            newQueue.removeListener('active', handleActive);\n            resolve();\n          }, 5000);\n          const handleClearing = () => {\n            clearTimeout(timeout);\n            this.removeListener('clearing', handleClearing);\n            newQueue.removeListener('active', handleActive);\n            resolve();\n          };\n          const handleActive = () => {\n            clearTimeout(timeout);\n            this.removeListener('clearing', handleClearing);\n            newQueue.removeListener('active', handleActive);\n            resolve();\n          };\n          this.addListener('clearing', handleClearing);\n          newQueue.addListener('active', handleActive);\n        });\n      }\n      if (newQueue.pending > 0 || newQueue.size > 0) {\n        return;\n      }\n      this.queueMap.delete(queueId);\n      this.emit('queueInactive', queueId);\n    });\n    this.emit('queueActive', queueId);\n  }\n\n  async abortQueue(queueId: string) {\n    this.logger.info(`Aborting queue ${queueId}`);\n    // Abort active jobs\n    const queueAbortControllerMap = this.abortControllerMap.get(queueId);\n    if (typeof queueAbortControllerMap !== 'undefined') {\n      for (const abortController of queueAbortControllerMap.values()) {\n        abortController.abort();\n      }\n    }\n    // Changes:\n    // * JOB_ERROR_STATUS -> JOB_CLEANUP_STATUS\n    // * JOB_COMPLETE_STATUS -> JOB_CLEANUP_STATUS\n    // * JOB_PENDING_STATUS -> JOB_ABORTED_STATUS\n    const jobs = await markQueueForCleanupInDatabase(queueId);\n    await this.startJobs(jobs);\n  }\n\n  dequeue():void | Promise<void> {\n    if (this.dequeueQueue.size === 0) {\n      // Add a subsequent dequeue\n      this.dequeueQueue.add(this.startJobs.bind(this));\n    }\n    return this.dequeueQueue.onIdle();\n  }\n\n  async startJobs(newJobs?:Array<Job>) { // eslint-disable-line consistent-return\n    const jobs = Array.isArray(newJobs) ? newJobs : await dequeueFromDatabaseNotIn([...this.jobIds.keys()]);\n    const queueIds = new Set();\n    for (const { id, queueId, args, type, status, attempt, startAfter } of jobs) {\n      if (this.jobIds.has(id)) {\n        continue;\n      }\n      // Pause queues before adding items into them to avoid starting things out of priority\n      if (!queueIds.has(queueId)) {\n        const queue = this.queueMap.get(queueId);\n        if (typeof queue !== 'undefined') {\n          queue.pause();\n        }\n        queueIds.add(queueId);\n      }\n      if (status === JOB_PENDING_STATUS) {\n        this.startJob(id, queueId, args, type, attempt + 1, startAfter);\n      } else if (status === JOB_ERROR_STATUS) {\n        this.startErrorHandler(id, queueId, args, type, attempt, startAfter);\n      } else if (status === JOB_CLEANUP_STATUS) {\n        this.startCleanup(id, queueId, args, type);\n      } else {\n        throw new Error(`Unknown job status ${status} in job ${id} of queue ${queueId}`);\n      }\n    }\n    for (const queueId of queueIds) {\n      const queue = this.queueMap.get(queueId);\n      if (typeof queue !== 'undefined') {\n        queue.start();\n      } else {\n        this.logger.error(`Unable to start queue ${queueId} after dequeue; queue does not exist`);\n      }\n    }\n  }\n\n  async onIdle(maxDuration?: number) {\n    if (typeof this.onIdlePromise === 'undefined') {\n      this.onIdlePromise = (async () => {\n        const timeout = typeof maxDuration === 'number' ? Date.now() + maxDuration : -1;\n        const start = Date.now();\n        while (true) { // eslint-disable-line no-constant-condition\n          if (timeout !== -1 && Date.now() > timeout) {\n            this.logger.warn(`Idle timeout after ${Date.now() - start}ms`);\n            break;\n          }\n          await this.dequeueQueue.onIdle();\n          for (const [queueId, queue] of this.queueMap) {\n            const interval = setInterval(() => {\n              this.logger.info(`Waiting on queue ${queueId}`);\n            }, 250);\n            await queue.onIdle();\n            clearInterval(interval);\n          }\n          const jobsInterval = setInterval(() => {\n            this.logger.info('Waiting on jobs');\n          }, 250);\n          const jobs = await dequeueFromDatabase();\n          clearInterval(jobsInterval);\n          if (jobs.length > 0) {\n            const interval = setInterval(() => {\n              this.logger.info('Waiting on dequeue');\n            }, 250);\n            await this.dequeue();\n            clearInterval(interval);\n            continue;\n          }\n          break;\n        }\n        delete this.onIdlePromise;\n        this.emit('idle');\n      })();\n    }\n    await this.onIdlePromise;\n  }\n\n  getAbortController(id:number, queueId:string) {\n    let queueAbortControllerMap = this.abortControllerMap.get(queueId);\n    if (typeof queueAbortControllerMap === 'undefined') {\n      queueAbortControllerMap = new Map();\n      this.abortControllerMap.set(queueId, queueAbortControllerMap);\n    }\n    const abortController = queueAbortControllerMap.get(id);\n    if (typeof abortController !== 'undefined') {\n      return abortController;\n    }\n    const newAbortController = new AbortController();\n    queueAbortControllerMap.set(id, newAbortController);\n    return newAbortController;\n  }\n\n  removeAbortController(id:number, queueId:string) {\n    const queueAbortControllerMap = this.abortControllerMap.get(queueId);\n    if (typeof queueAbortControllerMap === 'undefined') {\n      this.logger.warn(`Abort controller map for ${id} in queue ${queueId} does not exist`);\n      return;\n    }\n    const abortController = queueAbortControllerMap.get(id);\n    if (typeof abortController === 'undefined') {\n      this.logger.warn(`Abort controller for ${id} in queue ${queueId} does not exist`);\n      return;\n    }\n    queueAbortControllerMap.delete(id);\n    if (queueAbortControllerMap.size === 0) {\n      this.abortControllerMap.delete(queueId);\n    }\n  }\n\n  async runCleanup(id:number, queueId:string, args:Array<any>, type:string) {\n    this.emit('cleanupStart', { id });\n    const cleanup = this.cleanupMap.get(type);\n    if (typeof cleanup !== 'function') {\n      this.logger.warn(`No cleanup for job type ${type}`);\n      await removeCleanupFromDatabase(id);\n      this.jobIds.delete(id);\n      this.emit('cleanup', { id });\n      return;\n    }\n    const cleanupJob = await getCleanupFromDatabase(id);\n    const { data, startAfter } = typeof cleanupJob === 'undefined' ? { data: undefined, startAfter: 0 } : cleanupJob;\n    const delay = startAfter - Date.now();\n    if (delay > 0) {\n      this.logger.info(`Delaying retry of ${type} job #${id} cleanup in queue ${queueId} by ${delay}ms to ${new Date(startAfter).toLocaleString()}`);\n      await new Promise((resolve) => setTimeout(resolve, delay));\n    }\n    try {\n      await cleanup(data, args, (path:Array<string>) => removePathFromCleanupDataInDatabase(id, path));\n    } catch (error) {\n      const attempt = await incrementCleanupAttemptInDatabase(id, queueId);\n      if (error.name === 'FatalCleanupError') {\n        this.logger.error(`Fatal error in ${type} job #${id} cleanup in queue ${queueId} attempt ${attempt}`);\n        this.emit('error', error);\n        await removeCleanupFromDatabase(id);\n        this.jobIds.delete(id);\n        this.emit('fatalCleanupError', { id, queueId });\n        return;\n      }\n      const retryCleanupDelay = await this.getRetryCleanupDelay(type, attempt, error);\n      if (retryCleanupDelay === false) {\n        this.logger.error(`Error in ${type} job #${id} cleanup in queue ${queueId} attempt ${attempt} with no additional attempts requested`);\n        this.emit('error', error);\n        await removeCleanupFromDatabase(id);\n        this.jobIds.delete(id);\n        this.emit('fatalCleanupError', { id, queueId });\n        return;\n      }\n      this.logger.error(`Error in ${type} job #${id} cleanup in queue ${queueId} attempt ${attempt}, retrying ${retryCleanupDelay > 0 ? `in ${retryCleanupDelay}ms'}` : 'immediately'}`);\n      this.emit('error', error);\n      if (retryCleanupDelay > 0) {\n        this.emit('retryCleanupDelay', { id, queueId, retryCleanupDelay });\n        const newStartAfter = Date.now() + retryCleanupDelay;\n        await markCleanupStartAfterInDatabase(id, newStartAfter);\n      }\n      await this.runCleanup(id, queueId, args, type);\n      return;\n    }\n    await removeCleanupFromDatabase(id);\n    this.emit('cleanup', { id });\n  }\n\n  startCleanup(id:number, queueId:string, args:Array<any>, type:string) {\n    this.logger.info(`Adding ${type} cleanup job #${id} to queue ${queueId}`);\n    this.jobIds.add(id);\n    const priority = PRIORITY_OFFSET + id;\n    const run = async () => {\n      this.logger.info(`Starting ${type} cleanup #${id} in queue ${queueId}`);\n      await this.runCleanup(id, queueId, args, type);\n      await markJobAbortedInDatabase(id);\n      this.jobIds.delete(id);\n    };\n    this.addToQueue(queueId, priority, run);\n  }\n\n  startErrorHandler(id:number, queueId:string, args:Array<any>, type:string, attempt: number, startAfter: number) {\n    this.logger.info(`Adding ${type} error handler job #${id} to queue ${queueId}`);\n    this.jobIds.add(id);\n    const priority = PRIORITY_OFFSET + id;\n    const abortController = this.getAbortController(id, queueId);\n    const run = async () => {\n      this.logger.info(`Starting ${type} error handler #${id} in queue ${queueId}`);\n      await this.runCleanup(id, queueId, args, type);\n      if (abortController.signal.aborted) {\n        await markJobAbortedInDatabase(id);\n        this.removeAbortController(id, queueId);\n        this.jobIds.delete(id);\n      } else {\n        await markJobPendingInDatabase(id);\n        this.logger.info(`Retrying ${type} job #${id} in queue ${queueId}`);\n        this.emit('retry', { id });\n        this.startJob(id, queueId, args, type, attempt + 1, startAfter);\n      }\n    };\n    this.addToQueue(queueId, priority, run);\n  }\n\n  async delayJobStart(id:number, queueId:string, type:string, signal: AbortSignal, startAfter: number) {\n    if (signal.aborted) {\n      throw new AbortError(`Queue ${queueId} was aborted`);\n    }\n    const duration = startAfter - Date.now();\n    if (duration > 0) {\n      this.logger.info(`Delaying start of ${type} job #${id} in queue ${queueId} by ${duration}ms`);\n      await new Promise((resolve, reject) => {\n        const timeout = setTimeout(() => {\n          signal.removeEventListener('abort', handleAbort);\n          resolve();\n        }, duration);\n        const handleAbort = () => {\n          clearTimeout(timeout);\n          signal.removeEventListener('abort', handleAbort);\n          reject(new AbortError(`Queue ${queueId} was aborted`));\n        };\n        signal.addEventListener('abort', handleAbort);\n      });\n    }\n  }\n\n  startJob(id:number, queueId:string, args:Array<any>, type:string, attempt:number, startAfter: number) {\n    this.logger.info(`Adding ${type} job #${id} to queue ${queueId}`);\n    this.jobIds.add(id);\n    const priority = PRIORITY_OFFSET - id;\n    const updateCleanupData = (data:Object) => updateCleanupValuesInDatabase(id, queueId, data);\n    const abortController = this.getAbortController(id, queueId);\n    const run = async () => {\n      if (abortController.signal.aborted) {\n        this.removeAbortController(id, queueId);\n        return;\n      }\n      this.logger.info(`Starting ${type} job #${id} in queue ${queueId} attempt ${attempt}`);\n      const handler = this.handlerMap.get(type);\n      if (typeof handler !== 'function') {\n        this.logger.warn(`No handler for job type ${type}`);\n        await markJobCompleteInDatabase(id);\n        this.removeAbortController(id, queueId);\n        this.jobIds.delete(id);\n        return;\n      }\n      // Mark as error in database so the job is cleaned up and retried if execution\n      // stops before job completion or error\n      await markJobErrorInDatabase(id);\n      try {\n        await this.delayJobStart(id, queueId, type, abortController.signal, startAfter);\n        await handler(args, abortController.signal, updateCleanupData);\n        if (abortController.signal.aborted) {\n          throw new AbortError(`Queue ${queueId} was aborted`);\n        }\n        await markJobCompleteInDatabase(id);\n        this.removeAbortController(id, queueId);\n        this.jobIds.delete(id);\n        return;\n      } catch (error) {\n        await incrementJobAttemptInDatabase(id);\n        if (error.name === 'AbortError') {\n          this.logger.error(`Abort error in ${type} job #${id} in queue ${queueId} attempt ${attempt}`);\n          this.emit('error', error);\n          await markJobCleanupInDatabase(id);\n          this.removeAbortController(id, queueId);\n          this.jobIds.delete(id);\n          this.startCleanup(id, queueId, args, type);\n          return;\n        }\n        if (abortController.signal.aborted) {\n          this.logger.error(`Abort signal following error in ${type} job #${id} in queue ${queueId} attempt ${attempt}`);\n          this.emit('error', error);\n          await markJobCleanupInDatabase(id);\n          this.removeAbortController(id, queueId);\n          this.jobIds.delete(id);\n          this.startCleanup(id, queueId, args, type);\n          return;\n        }\n        if (error.name === 'FatalError') {\n          this.logger.error(`Fatal error in ${type} job #${id} in queue ${queueId} attempt ${attempt}`);\n          this.emit('error', error);\n          this.emit('fatalError', { queueId });\n          this.jobIds.delete(id);\n          this.removeAbortController(id, queueId);\n          await this.abortQueue(queueId);\n          return;\n        }\n        const retryDelay = await this.getRetryJobDelay(type, attempt, error);\n        if (retryDelay === false) {\n          this.logger.error(`Error in ${type} job #${id} in queue ${queueId} attempt ${attempt} with no additional attempts requested`);\n          this.emit('error', error);\n          this.emit('fatalError', { queueId });\n          this.jobIds.delete(id);\n          this.removeAbortController(id, queueId);\n          await this.abortQueue(queueId);\n          return;\n        }\n        this.logger.error(`Error in ${type} job #${id} in queue ${queueId} attempt ${attempt}, retrying ${retryDelay > 0 ? `in ${retryDelay}ms'}` : 'immediately'}`);\n        this.emit('error', error);\n        if (retryDelay > 0) {\n          this.emit('retryDelay', { id, queueId, retryDelay });\n          const newStartAfter = Date.now() + retryDelay;\n          await markJobStartAfterInDatabase(id, newStartAfter);\n          this.jobIds.delete(id);\n          this.startErrorHandler(id, queueId, args, type, attempt, newStartAfter);\n        } else {\n          this.jobIds.delete(id);\n          this.startErrorHandler(id, queueId, args, type, attempt, startAfter);\n        }\n      }\n    };\n    this.addToQueue(queueId, priority, run);\n    this.emit('dequeue', { id });\n  }\n\n  async handlePortMessage(event:MessageEvent) {\n    if (!(event instanceof MessageEvent)) {\n      return;\n    }\n    const { data } = event;\n    if (!data || typeof data !== 'object') {\n      this.logger.warn('Invalid message data');\n      this.logger.warnObject(event);\n      return;\n    }\n    const { type, args } = data;\n    if (typeof type !== 'string') {\n      this.logger.warn('Unknown message type');\n      this.logger.warnObject(event);\n      return;\n    }\n    if (!Array.isArray(args)) {\n      this.logger.warn('Unknown arguments type');\n      this.logger.warnObject(event);\n      return;\n    }\n    const port = this.port;\n    switch (type) {\n      case 'unlink':\n        this.logger.warn('Unlinking worker interface');\n        if (port instanceof MessagePort) {\n          port.onmessage = null;\n          delete this.port;\n        }\n        return;\n      case 'jobAdd':\n        jobEmitter.emit('jobAdd', ...args);\n        return;\n      case 'jobDelete':\n        jobEmitter.emit('jobDelete', ...args);\n        return;\n      case 'jobUpdate':\n        jobEmitter.emit('jobUpdate', ...args);\n        return;\n      case 'jobsClear':\n        jobEmitter.emit('jobsClear', ...args);\n        return;\n      default:\n        break;\n    }\n    const [requestId, ...requestArgs] = args;\n    if (typeof requestId !== 'number') {\n      throw new Error('Request arguments should start with a requestId number');\n    }\n    switch (type) {\n      case 'clear':\n        try {\n          await this.clear();\n          this.emit('clearComplete', requestId);\n        } catch (error) {\n          this.emit('clearError', requestId, error);\n          this.logger.error('Unable to handle clear message');\n          this.emit('error', error);\n        }\n        break;\n      case 'abortQueue':\n        try {\n          const [queueId] = requestArgs;\n          if (typeof queueId !== 'string') {\n            throw new Error(`Invalid \"queueId\" argument with type ${typeof queueId}, should be type string`);\n          }\n          await this.abortQueue(queueId);\n          this.emit('abortQueueComplete', requestId);\n        } catch (error) {\n          this.emit('abortQueueError', requestId, error);\n          this.logger.error('Unable to handle abort queue message');\n          this.emit('error', error);\n        }\n        break;\n      case 'dequeue':\n        try {\n          await this.dequeue();\n          this.emit('dequeueComplete', requestId);\n        } catch (error) {\n          this.emit('dequeueError', requestId, error);\n          this.logger.error('Unable to handle dequeue message');\n          this.emit('error', error);\n        }\n        break;\n      case 'enableStartOnJob':\n        try {\n          this.enableStartOnJob();\n          this.emit('enableStartOnJobComplete', requestId);\n        } catch (error) {\n          this.emit('enableStartOnJobError', requestId, error);\n          this.logger.error('Unable to handle enableStartOnJob message');\n          this.emit('error', error);\n        }\n        break;\n      case 'disableStartOnJob':\n        try {\n          this.disableStartOnJob();\n          this.emit('disableStartOnJobComplete', requestId);\n        } catch (error) {\n          this.emit('disableStartOnJobError', requestId, error);\n          this.logger.error('Unable to handle disableStartOnJob message');\n          this.emit('error', error);\n        }\n        break;\n      case 'getQueueIds':\n        try {\n          const queueIds = await this.getQueueIds();\n          this.emit('getQueuesComplete', requestId, [...queueIds]);\n        } catch (error) {\n          this.emit('getQueuesError', requestId, error);\n          this.logger.error('Unable to handle getQueueIds message');\n          this.emit('error', error);\n        }\n        break;\n      case 'idle':\n        try {\n          const [maxDuration, start] = requestArgs;\n          if (typeof maxDuration !== 'number') {\n            throw new Error(`Invalid \"queueId\" argument with type ${typeof maxDuration}, should be type number`);\n          }\n          if (typeof start !== 'number') {\n            throw new Error(`Invalid \"queueId\" argument with type ${typeof start}, should be type number`);\n          }\n          await this.onIdle(maxDuration - (Date.now() - start));\n          this.emit('idleComplete', requestId);\n        } catch (error) {\n          this.emit('idleError', requestId, error);\n          this.logger.error('Unable to handle idle message');\n          this.emit('error', error);\n        }\n        break;\n      default:\n        this.logger.warn(`Unknown worker interface message type ${type}`);\n    }\n  }\n\n  listenForServiceWorkerInterface() {\n    let activeEmitCallback;\n    let handleJobAdd;\n    let handleJobDelete;\n    let handleJobUpdate;\n    let handleJobsClear;\n\n    self.addEventListener('sync', (event) => {\n      this.logger.info(`SyncManager event ${event.tag}${event.lastChance ? ', last chance' : ''}`);\n      if (event.tag === 'syncManagerOnIdle') {\n        this.logger.info('Starting SyncManager handler');\n        this.emit('syncManagerOnIdle');\n        event.waitUntil(this.onIdle().catch((error) => {\n          this.logger.error(`SyncManager event handler failed${event.lastChance ? ' on last chance' : ''}`);\n          this.logger.errorStack(error);\n        }));\n      } else {\n        this.logger.warn(`Received unknown SyncManager event tag ${event.tag}`);\n      }\n    });\n\n    self.addEventListener('message', (event:ExtendableMessageEvent) => {\n      if (!(event instanceof ExtendableMessageEvent)) {\n        return;\n      }\n      const { data } = event;\n      if (!data || typeof data !== 'object') {\n        return;\n      }\n      const { type } = data;\n      if (type !== 'BATTERY_QUEUE_WORKER_INITIALIZATION') {\n        return;\n      }\n      if (!Array.isArray(event.ports)) {\n        return;\n      }\n      const port = event.ports[0];\n      if (!(port instanceof MessagePort)) {\n        return;\n      }\n      this.emitCallbacks = this.emitCallbacks.filter((x) => x !== activeEmitCallback);\n      const previousPort = this.port;\n      if (previousPort instanceof MessagePort) {\n        this.logger.info('Closing previous worker interface');\n        previousPort.close();\n      }\n      if (typeof handleJobAdd === 'function') {\n        localJobEmitter.removeListener('jobAdd', handleJobAdd);\n      }\n      if (typeof handleJobDelete === 'function') {\n        localJobEmitter.removeListener('jobDelete', handleJobDelete);\n      }\n      if (typeof handleJobUpdate === 'function') {\n        localJobEmitter.removeListener('jobUpdate', handleJobUpdate);\n      }\n      if (typeof handleJobsClear === 'function') {\n        localJobEmitter.removeListener('jobsClear', handleJobsClear);\n      }\n      port.postMessage({ type: 'BATTERY_QUEUE_WORKER_CONFIRMATION' });\n      this.logger.info('Linked to worker interface');\n      port.onmessage = this.handlePortMessage.bind(this);\n\n      handleJobAdd = (...args:Array<any>) => {\n        port.postMessage({ type: 'jobAdd', args });\n      };\n      handleJobDelete = (...args:Array<any>) => {\n        port.postMessage({ type: 'jobDelete', args });\n      };\n      handleJobUpdate = (...args:Array<any>) => {\n        port.postMessage({ type: 'jobUpdate', args });\n      };\n      handleJobsClear = (...args:Array<any>) => {\n        port.postMessage({ type: 'jobsClear', args });\n      };\n      localJobEmitter.addListener('jobAdd', handleJobAdd);\n      localJobEmitter.addListener('jobDelete', handleJobDelete);\n      localJobEmitter.addListener('jobUpdate', handleJobUpdate);\n      localJobEmitter.addListener('jobsClear', handleJobsClear);\n      const emitCallback = (t:string, args:Array<any>) => {\n        port.postMessage({ type: t, args });\n      };\n      activeEmitCallback = emitCallback;\n      this.emitCallbacks.push(emitCallback);\n      this.port = port;\n    });\n    self.addEventListener('messageerror', (event:MessageEvent) => {\n      this.logger.error('Service worker interface message error');\n      this.logger.errorObject(event);\n    });\n  }\n}\n\n"],"file":"queue.js"}