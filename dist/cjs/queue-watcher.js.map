{"version":3,"sources":["../../src/queue-watcher.js"],"names":["BatteryQueueWatcher","queueId","statusRequested","handleJobAdd","id","qId","emit","QUEUE_PENDING_STATUS","jobEmitter","addListener","handleJobDelete","emitStatus","handleJobUpdate","type","status","JOB_ABORTED_STATUS","JOB_CLEANUP_STATUS","QUEUE_ERROR_STATUS","JOB_ERROR_STATUS","JOB_PENDING_STATUS","JOB_CLEANUP_AND_REMOVE_STATUS","JOB_COMPLETE_STATUS","handleJobsClear","QUEUE_EMPTY_STATUS","on","newStatus","didEmitNewStatus","handleStatus","self","queueMicrotask","removeListener","EventEmitter"],"mappings":"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","sourcesContent":["// @flow\n\nimport EventEmitter from 'events';\nimport {\n  getQueueStatus,\n  jobEmitter,\n  JOB_ABORTED_STATUS,\n  JOB_COMPLETE_STATUS,\n  JOB_PENDING_STATUS,\n  JOB_ERROR_STATUS,\n  JOB_CLEANUP_STATUS,\n  JOB_CLEANUP_AND_REMOVE_STATUS,\n  QUEUE_ERROR_STATUS,\n  QUEUE_PENDING_STATUS,\n  QUEUE_EMPTY_STATUS,\n} from './database';\n\n\nexport default class BatteryQueueWatcher extends EventEmitter {\n  declare queueId: string;\n  declare statusRequested: boolean;\n  declare handleJobAdd: (number, string) => void;\n  declare handleJobDelete: (number, string) => void;\n  declare handleJobUpdate: (number, string, string, number) => void;\n  declare handleJobsClear: () => void;\n  declare status: void | number;\n\n  constructor(queueId: string) {\n    super();\n    this.queueId = queueId;\n    this.statusRequested = false;\n    const handleJobAdd = (id:number, qId:string) => {\n      if (queueId !== qId) {\n        return;\n      }\n      this.emit('status', QUEUE_PENDING_STATUS);\n    };\n    this.handleJobAdd = handleJobAdd;\n    jobEmitter.addListener('jobAdd', handleJobAdd);\n    const handleJobDelete = (id:number, qId:string) => {\n      if (queueId !== qId) {\n        return;\n      }\n      this.emitStatus();\n    };\n    this.handleJobDelete = handleJobDelete;\n    jobEmitter.addListener('jobDelete', handleJobDelete);\n    const handleJobUpdate = (id:number, qId:string, type:string, status:number) => {\n      if (queueId !== qId) {\n        return;\n      }\n      if (status === JOB_ABORTED_STATUS || status === JOB_CLEANUP_STATUS) {\n        this.emit('status', QUEUE_ERROR_STATUS);\n      } else if (status === JOB_ERROR_STATUS || status === JOB_PENDING_STATUS || status === JOB_CLEANUP_AND_REMOVE_STATUS) {\n        this.emit('status', QUEUE_PENDING_STATUS);\n      } else if (status === JOB_COMPLETE_STATUS || status === JOB_PENDING_STATUS) {\n        this.emitStatus();\n      }\n    };\n    this.handleJobUpdate = handleJobUpdate;\n    jobEmitter.addListener('jobUpdate', handleJobUpdate);\n    const handleJobsClear = () => {\n      this.emit('status', QUEUE_EMPTY_STATUS);\n    };\n    this.handleJobsClear = handleJobsClear;\n    jobEmitter.addListener('jobsClear', handleJobsClear);\n    this.on('status', (status:number) => {\n      this.status = status;\n    });\n  }\n\n  async getStatus() {\n    const { status } = this;\n    if (typeof status === 'number') {\n      return status;\n    }\n    const newStatus = await getQueueStatus(this.queueId);\n    this.status = newStatus;\n    return newStatus;\n  }\n\n  emitStatus() {\n    if (this.statusRequested) {\n      return;\n    }\n    delete this.status;\n    this.statusRequested = true;\n    let didEmitNewStatus = false;\n    const handleStatus = () => {\n      didEmitNewStatus = true;\n    };\n    this.addListener('status', handleStatus);\n    self.queueMicrotask(async () => {\n      this.statusRequested = false;\n      this.removeListener('status', handleStatus);\n      if (didEmitNewStatus) {\n        return;\n      }\n      const status = await getQueueStatus(this.queueId);\n      this.emit('status', status);\n    });\n  }\n\n  close() {\n    jobEmitter.removeListener('jobAdd', this.handleJobAdd);\n    jobEmitter.removeListener('jobDelete', this.handleJobDelete);\n    jobEmitter.removeListener('jobUpdate', this.handleJobUpdate);\n    jobEmitter.removeListener('jobsClear', this.handleJobsClear);\n  }\n}\n"],"file":"queue-watcher.js"}