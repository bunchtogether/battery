{"version":3,"sources":["../../src/queue-watcher.js"],"names":["BatteryQueueWatcher","queueId","statusRequested","handleJobAdd","id","qId","emit","QUEUE_PENDING_STATUS","jobEmitter","addListener","handleJobDelete","emitStatus","handleJobUpdate","status","JOB_ABORTED_STATUS","JOB_CLEANUP_STATUS","QUEUE_ERROR_STATUS","JOB_ERROR_STATUS","JOB_PENDING_STATUS","JOB_COMPLETE_STATUS","handleJobsClear","QUEUE_EMPTY_STATUS","didEmitNewStatus","handleStatus","self","queueMicrotask","removeListener","EventEmitter"],"mappings":"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","sourcesContent":["// @flow\n\nimport EventEmitter from 'events';\nimport {\n  getQueueStatus,\n  jobEmitter,\n  JOB_ABORTED_STATUS,\n  JOB_COMPLETE_STATUS,\n  JOB_PENDING_STATUS,\n  JOB_ERROR_STATUS,\n  JOB_CLEANUP_STATUS,\n  QUEUE_ERROR_STATUS,\n  QUEUE_PENDING_STATUS,\n  QUEUE_EMPTY_STATUS,\n} from './database';\n\n\nexport default class BatteryQueueWatcher extends EventEmitter {\n  declare queueId: string;\n  declare statusRequested: boolean;\n  declare handleJobAdd: (number, string) => void;\n  declare handleJobDelete: (number, string) => void;\n  declare handleJobUpdate: (number, string, number) => void;\n  declare handleJobsClear: () => void;\n\n  constructor(queueId: string) {\n    super();\n    this.queueId = queueId;\n    this.statusRequested = false;\n    const handleJobAdd = (id:number, qId:string) => {\n      if (queueId !== qId) {\n        return;\n      }\n      this.emit('status', QUEUE_PENDING_STATUS);\n    };\n    this.handleJobAdd = handleJobAdd;\n    jobEmitter.addListener('jobAdd', handleJobAdd);\n    const handleJobDelete = (id:number, qId:string) => {\n      if (queueId !== qId) {\n        return;\n      }\n      this.emitStatus();\n    };\n    this.handleJobDelete = handleJobDelete;\n    jobEmitter.addListener('jobDelete', handleJobDelete);\n    const handleJobUpdate = (id:number, qId:string, status:number) => {\n      if (queueId !== qId) {\n        return;\n      }\n      if (status === JOB_ABORTED_STATUS || status === JOB_CLEANUP_STATUS) {\n        this.emit('status', QUEUE_ERROR_STATUS);\n      } else if (status === JOB_ERROR_STATUS || status === JOB_PENDING_STATUS) {\n        this.emit('status', QUEUE_PENDING_STATUS);\n      } else if (status === JOB_COMPLETE_STATUS || status === JOB_PENDING_STATUS) {\n        this.emitStatus();\n      }\n    };\n    this.handleJobUpdate = handleJobUpdate;\n    jobEmitter.addListener('jobUpdate', handleJobUpdate);\n    const handleJobsClear = () => {\n      this.emit('status', QUEUE_EMPTY_STATUS);\n    };\n    this.handleJobsClear = handleJobsClear;\n    jobEmitter.addListener('jobsClear', handleJobsClear);\n  }\n\n  emitStatus() {\n    if (this.statusRequested) {\n      return;\n    }\n    this.statusRequested = true;\n    let didEmitNewStatus = false;\n    const handleStatus = () => {\n      didEmitNewStatus = true;\n    };\n    this.addListener('status', handleStatus);\n    self.queueMicrotask(async () => {\n      this.statusRequested = false;\n      this.removeListener('status', handleStatus);\n      if (didEmitNewStatus) {\n        return;\n      }\n      const status = await getQueueStatus(this.queueId);\n      this.emit('status', status);\n    });\n  }\n\n  close() {\n    jobEmitter.removeListener('jobAdd', this.handleJobAdd);\n    jobEmitter.removeListener('jobDelete', this.handleJobDelete);\n    jobEmitter.removeListener('jobUpdate', this.handleJobUpdate);\n    jobEmitter.removeListener('jobsClear', this.handleJobsClear);\n  }\n}\n"],"file":"queue-watcher.js"}