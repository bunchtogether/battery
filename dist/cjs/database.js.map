{"version":3,"sources":["../../src/database.js"],"names":["localJobEmitter","EventEmitter","jobEmitter","logger","JobDoesNotExistError","message","name","Error","CleanupDoesNotExistError","QUEUE_ERROR_STATUS","QUEUE_PENDING_STATUS","QUEUE_COMPLETE_STATUS","QUEUE_EMPTY_STATUS","JOB_ABORTED_STATUS","JOB_COMPLETE_STATUS","JOB_PENDING_STATUS","JOB_ERROR_STATUS","JOB_CLEANUP_STATUS","JOB_CLEANUP_AND_REMOVE_STATUS","databasePromise","request","self","indexedDB","open","onupgradeneeded","e","store","target","result","createObjectStore","keyPath","autoIncrement","createIndex","unique","error","db","Promise","resolve","reject","onerror","onsuccess","event","getReadWriteObjectStore","database","transaction","durability","objectStore","onabort","errorObject","getReadOnlyObjectStore","getReadWriteArgLookupObjectStore","getReadOnlyArgLookupObjectStore","getReadWriteAuthObjectStore","getReadOnlyAuthObjectStore","getReadWriteMetadataObjectStore","getReadOnlyMetadataObjectStore","getReadWriteJobsObjectStore","getReadOnlyJobsObjectStore","getReadWriteCleanupsObjectStore","getReadOnlyCleanupsObjectStore","getReadWriteJobCleanupAndArgLookupStores","getReadOnlyObjectStoreAndTransactionPromise","promise","oncomplete","getReadOnlyJobsObjectStoreAndTransactionPromise","silentlyRemoveJobCleanupAndArgLookup","jobsObjectStore","cleanupsObjectStore","argLookupObjectStore","jobId","queueId","onSuccess","onError","jobDeleteRequest","delete","cleanupDeleteRequest","argLookupJobIdIndex","index","argLookupJobRequest","getAllKeys","IDBKeyRange","only","id","argLookupDeleteRequest","deleteEvent","removeJobCleanupAndArgLookup","queueMicrotask","emit","clearAllMetadataInDatabase","clear","commit","clearJobsDatabase","clearCleanupsDatabase","clearDatabase","removeJobsWithQueueIdAndTypeFromDatabase","type","jobIds","i","length","removeQueueFromDatabase","removeCompletedExpiredItemsFromDatabase","maxAge","getAll","bound","Date","now","jobs","updateJobInDatabase","transform","get","newValue","value","deleteRequest","removeArgLookupsAndCleanupsForJobAsMicrotask","status","putRequest","put","getJobFromDatabase","updateCleanupInDatabase","removePathFromCleanupDataInDatabase","path","attempt","startAfter","data","Object","assign","updateCleanupValuesInDatabase","TypeError","combinedData","silentlyRemoveQueueFromDatabase","silentlyRemoveJobFromDatabase","removeJobFromDatabase","job","removeCleanupFromDatabase","getCleanupFromDatabase","getMetadataFromDatabase","response","metadata","undefined","clearMetadataInDatabase","setMetadataInDatabase","updateMetadataInDatabase","markJobStatusInDatabase","markJobCompleteInDatabase","markJobPendingInDatabase","markJobErrorInDatabase","markJobCleanupInDatabase","markJobAbortedInDatabase","markJobCompleteThenRemoveFromDatabase","markJobCleanupAndRemoveInDatabase","markJobAsAbortedOrRemoveFromDatabase","markJobStartAfterInDatabase","toLocaleString","markCleanupStartAfterInDatabase","markQueueForCleanupInDatabase","lastRequest","push","warn","event2","markQueueJobsGreaterThanIdCleanupAndRemoveInDatabase","shouldRemove","markQueueForCleanupAndRemoveInDatabase","markQueueJobsGreaterThanIdPendingInDatabase","markQueuePendingInDatabase","getGreatestJobIdFromQueueInDatabase","openCursor","cursor","incrementJobAttemptInDatabase","incrementCleanupAttemptInDatabase","bulkEnqueueToDatabase","items","Array","isArray","args","options","delay","prioritize","ids","created","enqueueToDatabase","restoreJobToDatabaseForCleanupAndRemove","dequeueFromDatabase","getContiguousIds","sort","a","b","points","Infinity","dequeueFromDatabaseNotIn","includes","getRequest","getJobsWithTypeFromDatabase","getJobsInQueueFromDatabase","getJobsInDatabase","getCompletedJobsCountFromDatabase","getCompletedJobsFromDatabase","storeAuthDataInDatabase","getAuthDataFromDatabase","authData","removeAuthDataFromDatabase","getQueueStatus","abortedRequest","completeRequest","pendingRequest","errorRequest","cleanupRequest","cleanupAndRemoveRequest","abortedCountPromise","completeCountPromise","pendingCountPromise","errorCountPromise","cleanupCountPromise","cleanupAndRemoveCountPromise","all","abortedCount","completeCount","pendingCount","errorCount","cleanupCount","cleanupAndRemoveCount","addArgLookup","key","jsonPath","getArgLookupJobPathMap","map","Map","x","markJobsWithArgLookupKeyCleanupAndRemoveInDatabase","lookupArgs","argLookupIndex","argLookupRequest","results","argLookupEvent","argLookups","jobRequest","json","lookupArg","jobsArgLookupsAndCleanupsToRemove","removeArgLookupsAndCleanupsForJob","slice","UNLOAD_DATA_ID","updateUnloadDataInDatabase","getUnloadDataFromDatabase","clearUnloadDataInDatabase"],"mappings":"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","sourcesContent":["// @flow\n\nimport { JSONPath } from 'jsonpath-plus';\nimport merge from 'lodash/merge';\nimport unset from 'lodash/unset';\nimport uniq from 'lodash/uniq';\nimport EventEmitter from 'events';\nimport makeLogger from './logger';\n\n// Local job emitter is for this process only,\n// jobEmitter is bridged when a MessagePort is open\nexport const localJobEmitter = new EventEmitter();\nexport const jobEmitter = new EventEmitter();\n\nconst logger = makeLogger('Jobs Database');\n\nexport class JobDoesNotExistError extends Error {\n  constructor(message:string) {\n    super(message);\n    this.name = 'JobDoesNotExistError';\n  }\n}\n\nexport class CleanupDoesNotExistError extends Error {\n  constructor(message:string) {\n    super(message);\n    this.name = 'CleanupDoesNotExistError';\n  }\n}\n\nexport type Job = {\n  id: number,\n  queueId:string,\n  type:string,\n  args:Array<any>,\n  attempt: number,\n  created: number,\n  status: number,\n  startAfter: number,\n  prioritize: boolean\n};\n\n\ntype Cleanup = {\n  id: number,\n  queueId:string,\n  data: Object,\n  attempt: number,\n  startAfter: number\n};\n\nexport const QUEUE_ERROR_STATUS = 0;\nexport const QUEUE_PENDING_STATUS = 1;\nexport const QUEUE_COMPLETE_STATUS = 2;\nexport const QUEUE_EMPTY_STATUS = 3;\n\nexport const JOB_ABORTED_STATUS = 2;\nexport const JOB_COMPLETE_STATUS = 1;\nexport const JOB_PENDING_STATUS = 0;\nexport const JOB_ERROR_STATUS = -1;\nexport const JOB_CLEANUP_STATUS = -2;\nexport const JOB_CLEANUP_AND_REMOVE_STATUS = -3;\n\nexport const databasePromise = (async () => {\n  const request = self.indexedDB.open('battery-queue-08', 1);\n\n  request.onupgradeneeded = function (e) {\n    try {\n      const store = e.target.result.createObjectStore('jobs', { keyPath: 'id', autoIncrement: true });\n      store.createIndex('statusIndex', 'status', { unique: false });\n      store.createIndex('queueIdIndex', 'queueId', { unique: false });\n      store.createIndex('queueIdTypeIndex', ['queueId', 'type'], { unique: false });\n      store.createIndex('typeIndex', 'type', { unique: false });\n      store.createIndex('statusQueueIdIndex', ['queueId', 'status'], { unique: false });\n      store.createIndex('statusCreatedIndex', ['status', 'created'], { unique: false });\n    } catch (error) {\n      if (!(error.name === 'ConstraintError')) {\n        throw error;\n      }\n    }\n    try {\n      e.target.result.createObjectStore('metadata', { keyPath: 'id' });\n    } catch (error) {\n      if (!(error.name === 'ConstraintError')) {\n        throw error;\n      }\n    }\n    try {\n      const store = e.target.result.createObjectStore('cleanups', { keyPath: 'id' });\n      store.createIndex('queueIdIndex', 'queueId', { unique: false });\n    } catch (error) {\n      if (!(error.name === 'ConstraintError')) {\n        throw error;\n      }\n    }\n    try {\n      e.target.result.createObjectStore('auth-data', { keyPath: 'id' });\n    } catch (error) {\n      if (!(error.name === 'ConstraintError')) {\n        throw error;\n      }\n    }\n    try {\n      const store = e.target.result.createObjectStore('arg-lookup', { keyPath: 'id', autoIncrement: true });\n      store.createIndex('jobIdIndex', 'jobId', { unique: false });\n      store.createIndex('keyIndex', 'key', { unique: false });\n    } catch (error) {\n      if (!(error.name === 'ConstraintError')) {\n        throw error;\n      }\n    }\n  };\n\n  const db = await new Promise((resolve, reject) => {\n    request.onerror = () => {\n      reject(new Error('Unable to open database'));\n    };\n    request.onsuccess = function (event) {\n      resolve(event.target.result);\n    };\n  });\n\n  return db;\n})();\n\nasync function getReadWriteObjectStore(name:string) {\n  const database = await databasePromise;\n  const transaction = database.transaction([name], 'readwrite', { durability: 'relaxed' });\n  const objectStore = transaction.objectStore(name);\n  transaction.onabort = (event) => {\n    logger.error(`Read-write \"${name}\" transaction was aborted`);\n    logger.errorObject(event);\n  };\n  transaction.onerror = (event) => {\n    logger.error(`Error in read-write \"${name}\" transaction`);\n    logger.errorObject(event);\n  };\n  return objectStore;\n}\n\nasync function getReadOnlyObjectStore(name:string) {\n  const database = await databasePromise;\n  const transaction = database.transaction([name], 'readonly', { durability: 'relaxed' });\n  const objectStore = transaction.objectStore(name);\n  transaction.onabort = (event) => {\n    logger.error(`Read-only \"${name}\" transaction was aborted`);\n    logger.errorObject(event);\n  };\n  transaction.onerror = (event) => {\n    logger.error(`Error in read-only \"${name}\" transaction`);\n    logger.errorObject(event);\n  };\n  return objectStore;\n}\n\nfunction getReadWriteArgLookupObjectStore() {\n  return getReadWriteObjectStore('arg-lookup');\n}\n\nfunction getReadOnlyArgLookupObjectStore() {\n  return getReadOnlyObjectStore('arg-lookup');\n}\n\nfunction getReadWriteAuthObjectStore() {\n  return getReadWriteObjectStore('auth-data');\n}\n\nfunction getReadOnlyAuthObjectStore() {\n  return getReadOnlyObjectStore('auth-data');\n}\n\nfunction getReadWriteMetadataObjectStore() {\n  return getReadWriteObjectStore('metadata');\n}\n\nfunction getReadOnlyMetadataObjectStore() {\n  return getReadOnlyObjectStore('metadata');\n}\n\nfunction getReadWriteJobsObjectStore() {\n  return getReadWriteObjectStore('jobs');\n}\n\nfunction getReadOnlyJobsObjectStore() {\n  return getReadOnlyObjectStore('jobs');\n}\n\nfunction getReadWriteCleanupsObjectStore() {\n  return getReadWriteObjectStore('cleanups');\n}\n\nfunction getReadOnlyCleanupsObjectStore() {\n  return getReadOnlyObjectStore('cleanups');\n}\n\nasync function getReadWriteJobCleanupAndArgLookupStores() {\n  const database = await databasePromise;\n  const transaction = database.transaction(['jobs', 'cleanups', 'arg-lookup'], 'readwrite', { durability: 'relaxed' });\n  transaction.onabort = (event) => {\n    logger.error('Read-write \\'jobs\\', \\'cleanups\\', and \\'arg-lookup\\' transaction was aborted');\n    logger.errorObject(event);\n  };\n  transaction.onerror = (event) => {\n    logger.error('Error in read-write \\'jobs\\', \\'cleanups\\', and \\'arg-lookup\\' transaction');\n    logger.errorObject(event);\n  };\n  return [transaction.objectStore('jobs'), transaction.objectStore('cleanups'), transaction.objectStore('arg-lookup')];\n}\n\nasync function getReadOnlyObjectStoreAndTransactionPromise(name:string) {\n  const database = await databasePromise;\n  const transaction = database.transaction([name], 'readonly', { durability: 'relaxed' });\n  const objectStore = transaction.objectStore(name);\n  const promise = new Promise((resolve, reject) => {\n    transaction.onabort = (event) => {\n      logger.error(`Read-write \"${name}\" transaction was aborted`);\n      logger.errorObject(event);\n      reject(new Error(`Read-write \"${name}\" transaction was aborted`));\n    };\n    transaction.onerror = (event) => {\n      logger.error(`Error in read-write \"${name}\" transaction`);\n      logger.errorObject(event);\n      reject(new Error(`Error in read-write \"${name}\" transaction`));\n    };\n    transaction.oncomplete = () => {\n      resolve();\n    };\n  });\n  return [objectStore, promise];\n}\n\n\nfunction getReadOnlyJobsObjectStoreAndTransactionPromise() {\n  return getReadOnlyObjectStoreAndTransactionPromise('jobs');\n}\n\nfunction silentlyRemoveJobCleanupAndArgLookup(jobsObjectStore:IDBObjectStore, cleanupsObjectStore:IDBObjectStore, argLookupObjectStore:IDBObjectStore, jobId:number, queueId:string, onSuccess?:() => void, onError?:(Error) => void) {\n  const jobDeleteRequest = jobsObjectStore.delete(jobId);\n  jobDeleteRequest.onerror = function (event) {\n    logger.error(`Request error while removing job ${jobId} in queue ${queueId} from database`);\n    logger.errorObject(event);\n    if (typeof onError === 'function') {\n      onError(new Error(`Request error while removing job ${jobId} in queue ${queueId} from database`));\n    }\n  };\n  const cleanupDeleteRequest = cleanupsObjectStore.delete(jobId);\n  cleanupDeleteRequest.onerror = function (event) {\n    logger.error(`Request error while removing cleanup for job ${jobId} in queue ${queueId} from database`);\n    logger.errorObject(event);\n    if (typeof onError === 'function') {\n      onError(new Error(`Request error while removing cleanup for job ${jobId} in queue ${queueId} from database`));\n    }\n  };\n  const argLookupJobIdIndex = argLookupObjectStore.index('jobIdIndex');\n  // $FlowFixMe\n  const argLookupJobRequest = argLookupJobIdIndex.getAllKeys(IDBKeyRange.only(jobId));\n  argLookupJobRequest.onsuccess = function (event) {\n    for (const id of event.target.result) {\n      const argLookupDeleteRequest = argLookupObjectStore.delete(id);\n      argLookupDeleteRequest.onerror = function (deleteEvent) {\n        logger.error(`Delete request error while removing argument lookups for job ${jobId} in queue ${queueId} from database`);\n        logger.errorObject(deleteEvent);\n        if (typeof onError === 'function') {\n          onError(new Error(`Delete request error while removing argument lookups for job ${jobId} in queue ${queueId} from database`));\n        }\n      };\n    }\n    if (typeof onSuccess === 'function') {\n      onSuccess();\n    }\n  };\n  argLookupJobRequest.onerror = function (event) {\n    logger.error(`Request error while removing argument lookups for job ${jobId} in queue ${queueId} from database`);\n    logger.errorObject(event);\n    if (typeof onError === 'function') {\n      onError(new Error(`Request error while removing argument lookups for job ${jobId} in queue ${queueId} from database`));\n    }\n  };\n}\n\nfunction removeJobCleanupAndArgLookup(jobsObjectStore:IDBObjectStore, cleanupsObjectStore:IDBObjectStore, argLookupObjectStore:IDBObjectStore, jobId:number, queueId:string, onSuccess?:() => void, onError?:(Error) => void) {\n  queueMicrotask(() => {\n    localJobEmitter.emit('jobDelete', jobId, queueId);\n    jobEmitter.emit('jobDelete', jobId, queueId);\n  });\n  return silentlyRemoveJobCleanupAndArgLookup(jobsObjectStore, cleanupsObjectStore, argLookupObjectStore, jobId, queueId, onSuccess, onError);\n}\n\nasync function clearAllMetadataInDatabase() {\n  const store = await getReadWriteMetadataObjectStore();\n  const request = store.clear();\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve();\n    };\n    request.onerror = function (event) {\n      logger.error('Error while clearing queue data database');\n      logger.errorObject(event);\n      reject(new Error('Error while clearing queue data database'));\n    };\n    store.transaction.commit();\n  });\n}\n\nasync function clearJobsDatabase() {\n  const store = await getReadWriteJobsObjectStore();\n  const request = store.clear();\n  localJobEmitter.emit('jobsClear');\n  jobEmitter.emit('jobsClear');\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve();\n    };\n    request.onerror = function (event) {\n      logger.error('Error while clearing jobs database');\n      logger.errorObject(event);\n      reject(new Error('Error while clearing jobs database'));\n    };\n    store.transaction.commit();\n  });\n}\n\nasync function clearCleanupsDatabase() {\n  const store = await getReadWriteCleanupsObjectStore();\n  const request = store.clear();\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve();\n    };\n    request.onerror = function (event) {\n      logger.error('Error while clearing cleanups database');\n      logger.errorObject(event);\n      reject(new Error('Error while clearing cleanups database'));\n    };\n    store.transaction.commit();\n  });\n}\n\nexport async function clearDatabase() {\n  await clearJobsDatabase();\n  await clearCleanupsDatabase();\n  await clearAllMetadataInDatabase();\n}\n\nexport async function removeJobsWithQueueIdAndTypeFromDatabase(queueId:string, type:string) {\n  const [jobsObjectStore, cleanupsObjectStore, argLookupObjectStore] = await getReadWriteJobCleanupAndArgLookupStores();\n  const index = jobsObjectStore.index('queueIdTypeIndex');\n  // $FlowFixMe\n  const request = index.getAllKeys(IDBKeyRange.only([queueId, type]));\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function (event) {\n      const jobIds = event.target.result;\n      for (let i = 0; i < jobIds.length; i += 1) {\n        const jobId = jobIds[i];\n        if (i === jobIds.length - 1) {\n          removeJobCleanupAndArgLookup(jobsObjectStore, cleanupsObjectStore, argLookupObjectStore, jobId, queueId, resolve, reject);\n        } else {\n          removeJobCleanupAndArgLookup(jobsObjectStore, cleanupsObjectStore, argLookupObjectStore, jobId, queueId);\n        }\n      }\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while removing jobs with queue ${queueId} and type ${type} from jobs database`);\n      logger.errorObject(event);\n    };\n  });\n}\n\nexport async function removeQueueFromDatabase(queueId:string) {\n  const [jobsObjectStore, cleanupsObjectStore, argLookupObjectStore] = await getReadWriteJobCleanupAndArgLookupStores();\n  const index = jobsObjectStore.index('queueIdIndex');\n  // $FlowFixMe\n  const request = index.getAllKeys(IDBKeyRange.only(queueId));\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function (event) {\n      const jobIds = event.target.result;\n      for (let i = 0; i < jobIds.length; i += 1) {\n        const jobId = jobIds[i];\n        if (i === jobIds.length - 1) {\n          removeJobCleanupAndArgLookup(jobsObjectStore, cleanupsObjectStore, argLookupObjectStore, jobId, queueId, () => {\n            jobsObjectStore.transaction.commit();\n            resolve();\n          }, reject);\n        } else {\n          removeJobCleanupAndArgLookup(jobsObjectStore, cleanupsObjectStore, argLookupObjectStore, jobId, queueId);\n        }\n      }\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while removing queue ${queueId} from jobs database`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while removing queue ${queueId} from jobs database`));\n    };\n  });\n}\n\nexport async function removeCompletedExpiredItemsFromDatabase(maxAge:number) {\n  const [jobsObjectStore, cleanupsObjectStore, argLookupObjectStore] = await getReadWriteJobCleanupAndArgLookupStores();\n  const index = jobsObjectStore.index('statusCreatedIndex');\n  // $FlowFixMe\n  const request = index.getAll(IDBKeyRange.bound([JOB_COMPLETE_STATUS, 0], [JOB_COMPLETE_STATUS, Date.now() - maxAge]));\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function (event) {\n      const jobs = event.target.result;\n      for (let i = 0; i < jobs.length; i += 1) {\n        const { id: jobId, queueId } = jobs[i];\n        if (i === jobs.length - 1) {\n          removeJobCleanupAndArgLookup(jobsObjectStore, cleanupsObjectStore, argLookupObjectStore, jobId, queueId, () => {\n            jobsObjectStore.transaction.commit();\n            resolve();\n          }, reject);\n        } else {\n          removeJobCleanupAndArgLookup(jobsObjectStore, cleanupsObjectStore, argLookupObjectStore, jobId, queueId);\n        }\n      }\n      if (jobs.length === 0) {\n        resolve();\n      }\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while removing completed jobs with age > ${maxAge}ms`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while removing completed jobs with age > ${maxAge}ms`));\n    };\n  });\n}\n\nexport async function updateJobInDatabase(id:number, transform:(Job | void) => Job | void | false):Promise<Job | void> {\n  const store = await getReadWriteJobsObjectStore();\n  const request = store.get(id);\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      let newValue;\n      const value = request.result;\n      try {\n        newValue = transform(value);\n      } catch (error) {\n        reject(error);\n        return;\n      }\n      if (typeof newValue === 'undefined') {\n        resolve();\n      } else if (newValue === false) {\n        if (typeof value !== 'undefined') {\n          const { queueId, type } = value;\n          const deleteRequest = store.delete(id);\n          localJobEmitter.emit('jobDelete', id, queueId);\n          jobEmitter.emit('jobDelete', id, queueId);\n          deleteRequest.onsuccess = function () {\n            removeArgLookupsAndCleanupsForJobAsMicrotask(id);\n            resolve();\n          };\n          deleteRequest.onerror = function (event) {\n            logger.error(`Delete request error while updating job ${id} in queue ${queueId} and type ${type} in jobs database`);\n            logger.errorObject(event);\n            reject(new Error(`Delete request error while updating job ${id} in queue ${queueId} and type ${type} from jobs database`));\n          };\n        } else {\n          resolve();\n        }\n      } else {\n        const { queueId, type, status } = newValue;\n        const putRequest = store.put(newValue);\n        localJobEmitter.emit('jobUpdate', id, queueId, type, status);\n        jobEmitter.emit('jobUpdate', id, queueId, type, status);\n        putRequest.onsuccess = function () {\n          resolve();\n        };\n        putRequest.onerror = function (event) {\n          logger.error(`Put request error while updating job ${id} in queue ${queueId} and type ${type} in jobs database`);\n          logger.errorObject(event);\n          reject(new Error(`Put request error while updating job ${id} in queue ${queueId} and type ${type} from jobs database`));\n        };\n      }\n      store.transaction.commit();\n    };\n    request.onerror = function (event) {\n      logger.error(`Get request error while updating ${id}`);\n      logger.errorObject(event);\n      reject(new Error(`Get request error while updating ${id}`));\n    };\n  });\n}\n\nexport async function getJobFromDatabase(id:number):Promise<Job | void> {\n  const store = await getReadOnlyJobsObjectStore();\n  const request = store.get(id);\n  return new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve(request.result);\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while getting ${id}`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while getting ${id}`));\n    };\n    store.transaction.commit();\n  });\n}\n\nexport async function updateCleanupInDatabase(id:number, transform:(Cleanup | void) => Object):Promise<Cleanup | void> {\n  const store = await getReadWriteCleanupsObjectStore();\n  const request = store.get(id);\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      let newValue;\n      try {\n        newValue = transform(request.result);\n      } catch (error) {\n        reject(error);\n        return;\n      }\n      if (typeof newValue === 'undefined') {\n        resolve();\n      } else {\n        const putRequest = store.put(newValue);\n        putRequest.onsuccess = function () {\n          resolve();\n        };\n        putRequest.onerror = function (event) {\n          logger.error(`Put request error while updating ${id} cleanup`);\n          logger.errorObject(event);\n          reject(new Error(`Put request error while updating ${id} cleanup`));\n        };\n      }\n      store.transaction.commit();\n    };\n    request.onerror = function (event) {\n      logger.error(`Get request error while updating ${id} cleanup`);\n      logger.errorObject(event);\n      reject(new Error(`Get request error while updating ${id} cleanup`));\n    };\n  });\n}\n\nexport async function removePathFromCleanupDataInDatabase(id:number, path:Array<string>) {\n  await updateCleanupInDatabase(id, (value: Cleanup | void) => {\n    if (typeof value === 'undefined') {\n      return;\n    }\n    const { queueId, attempt, startAfter } = value;\n    const data = Object.assign({}, value.data);\n    unset(data, path);\n    return { // eslint-disable-line consistent-return\n      id,\n      queueId,\n      attempt,\n      startAfter,\n      data,\n    };\n  });\n}\n\n\nexport async function updateCleanupValuesInDatabase(id:number, queueId:string, data:Object) {\n  if (typeof id !== 'number') {\n    throw new TypeError(`Unable to update cleanup in database, received invalid \"id\" argument type \"${typeof id}\"`);\n  }\n  if (typeof queueId !== 'string') {\n    throw new TypeError(`Unable to update cleanup in database, received invalid \"queueId\" argument type \"${typeof queueId}\"`);\n  }\n  if (typeof data !== 'object') {\n    throw new TypeError(`Unable to update cleanup in database, received invalid \"data\" argument type \"${typeof data}\"`);\n  }\n  await updateCleanupInDatabase(id, (value: Cleanup | void) => {\n    const combinedData = typeof value === 'undefined' ? data : merge({}, value.data, data);\n    return {\n      id,\n      queueId,\n      attempt: 0,\n      startAfter: Date.now(),\n      data: combinedData,\n    };\n  });\n}\n\nexport async function silentlyRemoveQueueFromDatabase(queueId:string) {\n  const [jobsObjectStore, cleanupsObjectStore, argLookupObjectStore] = await getReadWriteJobCleanupAndArgLookupStores();\n  const index = jobsObjectStore.index('queueIdIndex');\n  // $FlowFixMe\n  const request = index.getAllKeys(IDBKeyRange.only(queueId));\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function (event) {\n      const jobIds = event.target.result;\n      for (let i = 0; i < jobIds.length; i += 1) {\n        const jobId = jobIds[i];\n        if (i === jobIds.length - 1) {\n          silentlyRemoveJobCleanupAndArgLookup(jobsObjectStore, cleanupsObjectStore, argLookupObjectStore, jobId, queueId, () => {\n            jobsObjectStore.transaction.commit();\n            resolve();\n          }, reject);\n        } else {\n          silentlyRemoveJobCleanupAndArgLookup(jobsObjectStore, cleanupsObjectStore, argLookupObjectStore, jobId, queueId);\n        }\n      }\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while removing queue ${queueId} from jobs database`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while removing queue ${queueId} from jobs database`));\n    };\n  });\n}\n\nexport async function silentlyRemoveJobFromDatabase(id:number) {\n  const store = await getReadWriteJobsObjectStore();\n  const request = store.delete(id);\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve();\n    };\n    request.onerror = function (event) {\n      logger.error(`Delete request error while removing job ${id} from database`);\n      logger.errorObject(event);\n      reject(new Error(`Delete request error while removing job ${id} from database`));\n    };\n    store.transaction.commit();\n  });\n}\n\n\nexport async function removeJobFromDatabase(jobId:number) {\n  const [jobsObjectStore, cleanupsObjectStore, argLookupObjectStore] = await getReadWriteJobCleanupAndArgLookupStores();\n  const request = jobsObjectStore.get(jobId);\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      const job = request.result;\n      if (typeof job === 'undefined') {\n        resolve();\n        jobsObjectStore.transaction.commit();\n        return;\n      }\n      removeJobCleanupAndArgLookup(jobsObjectStore, cleanupsObjectStore, argLookupObjectStore, job.id, job.queueId, () => {\n        resolve();\n      }, reject);\n      jobsObjectStore.transaction.commit();\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while getting job ${jobId} before removing from database`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while getting job ${jobId} before removing from database`));\n    };\n  });\n}\n\nexport async function removeCleanupFromDatabase(id:number) {\n  const store = await getReadWriteCleanupsObjectStore();\n  const request = store.delete(id);\n  return new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve();\n    };\n    request.onerror = function (event) {\n      logger.error(`Error while removing cleanup data for ${id}`);\n      logger.errorObject(event);\n      reject(new Error(`Error while removing cleanup data for ${id}`));\n    };\n    store.transaction.commit();\n  });\n}\n\nexport async function getCleanupFromDatabase(id:number):Promise<Cleanup | void> {\n  const store = await getReadOnlyCleanupsObjectStore();\n  const request = store.get(id);\n  return new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve(request.result);\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while getting ${id}`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while getting ${id}`));\n    };\n    store.transaction.commit();\n  });\n}\n\nexport async function getMetadataFromDatabase(id:string) {\n  const store = await getReadOnlyMetadataObjectStore();\n  const request = store.get(id);\n  const response = await new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve(request.result);\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while getting ${id} metadata`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while getting ${id} metadata`));\n    };\n    store.transaction.commit();\n  });\n  return typeof response !== 'undefined' ? response.metadata : undefined;\n}\n\nexport async function clearMetadataInDatabase(id:string) {\n  const store = await getReadWriteMetadataObjectStore();\n  const request = store.delete(id);\n  return new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve();\n    };\n    request.onerror = function (event) {\n      logger.error(`Error while clearing ${id} metadata`);\n      logger.errorObject(event);\n      reject(new Error(`Error while clearing ${id} metadata`));\n    };\n    store.transaction.commit();\n  });\n}\n\nexport async function setMetadataInDatabase(id:string, metadata:Object) {\n  const store = await getReadWriteMetadataObjectStore();\n  const request = store.put({\n    id,\n    metadata,\n  });\n  return new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve();\n    };\n    request.onerror = function (event) {\n      logger.error(`Error while setting ${id} metadata`);\n      logger.errorObject(event);\n      reject(new Error(`Error while setting ${id} metadata`));\n    };\n    store.transaction.commit();\n  });\n}\n\nexport async function updateMetadataInDatabase(id:string, transform:(Object | void) => Object | void | false):Promise<Object | void> {\n  const store = await getReadWriteMetadataObjectStore();\n  const request = store.get(id);\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      let newValue;\n      const response = request.result;\n      const value = typeof response !== 'undefined' ? response.metadata : undefined;\n      try {\n        newValue = transform(value);\n      } catch (error) {\n        reject(error);\n        return;\n      }\n      if (typeof newValue === 'undefined') {\n        resolve();\n      } else if (newValue === false) {\n        if (typeof value !== 'undefined') {\n          const deleteRequest = store.delete(id);\n          deleteRequest.onsuccess = function () {\n            resolve();\n          };\n          deleteRequest.onerror = function (event) {\n            logger.error(`Delete request error while updating ${id} in metadata database`);\n            logger.errorObject(event);\n            reject(new Error(`Delete request error while updating ${id} in metadata database`));\n          };\n        }\n      } else {\n        const putRequest = store.put({\n          id,\n          metadata: newValue,\n        });\n        putRequest.onsuccess = function () {\n          resolve();\n        };\n        putRequest.onerror = function (event) {\n          logger.error(`Put request error while updating ${id} in metadata database`);\n          logger.errorObject(event);\n          reject(new Error(`Put request error while updating ${id} in metadata database`));\n        };\n      }\n      store.transaction.commit();\n    };\n    request.onerror = function (event) {\n      logger.error(`Get request error while updating ${id} in metadata database`);\n      logger.errorObject(event);\n      reject(new Error(`Get request error while updating ${id} in metadata database`));\n    };\n  });\n}\n\nexport function markJobStatusInDatabase(id:number, status:number) {\n  return updateJobInDatabase(id, (value:Job | void) => {\n    if (typeof value === 'undefined') {\n      throw new JobDoesNotExistError(`Unable to mark job ${id} as status ${status} in database, job does not exist`);\n    }\n    value.status = status; // eslint-disable-line no-param-reassign\n    return value;\n  });\n}\n\nexport function markJobCompleteInDatabase(id:number) {\n  return markJobStatusInDatabase(id, JOB_COMPLETE_STATUS);\n}\n\nexport function markJobPendingInDatabase(id:number) {\n  return markJobStatusInDatabase(id, JOB_PENDING_STATUS);\n}\n\nexport function markJobErrorInDatabase(id:number) {\n  return markJobStatusInDatabase(id, JOB_ERROR_STATUS);\n}\n\nexport function markJobCleanupInDatabase(id:number) {\n  return markJobStatusInDatabase(id, JOB_CLEANUP_STATUS);\n}\n\nexport function markJobAbortedInDatabase(id:number) {\n  return markJobStatusInDatabase(id, JOB_ABORTED_STATUS);\n}\n\nexport async function markJobCompleteThenRemoveFromDatabase(id:number):Promise<void> {\n  const [jobsObjectStore, cleanupsObjectStore, argLookupObjectStore] = await getReadWriteJobCleanupAndArgLookupStores();\n  const request = jobsObjectStore.get(id);\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      const value = request.result;\n      if (typeof value !== 'undefined') {\n        const { queueId, type } = value;\n        localJobEmitter.emit('jobUpdate', id, queueId, type, JOB_COMPLETE_STATUS);\n        jobEmitter.emit('jobUpdate', id, queueId, type, JOB_COMPLETE_STATUS);\n        removeJobCleanupAndArgLookup(jobsObjectStore, cleanupsObjectStore, argLookupObjectStore, id, queueId, () => {\n          jobsObjectStore.transaction.commit();\n          resolve();\n        });\n      }\n    };\n    request.onerror = function (event) {\n      logger.error(`Get request error while marking job ${id} complete then removing from jobs database`);\n      logger.errorObject(event);\n      reject(new Error(`Get request error while marking job ${id} complete then removing from jobs database`));\n    };\n  });\n}\n\nexport function markJobCleanupAndRemoveInDatabase(id:number) {\n  return updateJobInDatabase(id, (value:Job | void) => {\n    if (typeof value === 'undefined') {\n      return false;\n    }\n    if (value.status === JOB_PENDING_STATUS) {\n      return false;\n    }\n    if (value.status === JOB_ABORTED_STATUS) {\n      return false;\n    }\n    value.status = JOB_CLEANUP_AND_REMOVE_STATUS; // eslint-disable-line no-param-reassign\n    return value;\n  });\n}\n\nexport function markJobAsAbortedOrRemoveFromDatabase(id:number) {\n  return updateJobInDatabase(id, (value:Job | void) => {\n    if (typeof value === 'undefined') {\n      return;\n    }\n    if (value.status === JOB_ERROR_STATUS) {\n      value.status = JOB_ABORTED_STATUS; // eslint-disable-line no-param-reassign\n      return value; // eslint-disable-line consistent-return\n    }\n    if (value.status === JOB_CLEANUP_STATUS) {\n      value.status = JOB_ABORTED_STATUS; // eslint-disable-line no-param-reassign\n      return value; // eslint-disable-line consistent-return\n    }\n    if (value.status === JOB_CLEANUP_AND_REMOVE_STATUS) {\n      return false; // eslint-disable-line consistent-return\n    }\n    throw new Error(`Unable to mark job ${id} as aborted or remove after cleanup, unable to handle status ${value.status}`);\n  });\n}\n\nexport function markJobStartAfterInDatabase(id:number, startAfter:number) {\n  return updateJobInDatabase(id, (value:Job | void) => {\n    if (typeof value === 'undefined') {\n      throw new JobDoesNotExistError(`Unable to mark job ${id} start-after time to ${new Date(startAfter).toLocaleString()} in database, job does not exist`);\n    }\n    if (startAfter < value.startAfter) {\n      return;\n    }\n    value.startAfter = startAfter; // eslint-disable-line no-param-reassign\n    return value; // eslint-disable-line consistent-return\n  });\n}\n\nexport function markCleanupStartAfterInDatabase(id:number, startAfter:number) {\n  return updateCleanupInDatabase(id, (value: Cleanup | void) => {\n    if (typeof value === 'undefined') {\n      throw new CleanupDoesNotExistError(`Unable to mark cleanup ${id} start-after time to ${new Date(startAfter).toLocaleString()} in database, cleanup does not exist`);\n    }\n    if (startAfter < value.startAfter) {\n      return;\n    }\n    value.startAfter = startAfter; // eslint-disable-line  no-param-reassign\n    return value; // eslint-disable-line consistent-return\n  });\n}\n\nexport async function markQueueForCleanupInDatabase(queueId:string) {\n  const store = await getReadWriteJobsObjectStore();\n  const index = store.index('queueIdIndex');\n  // $FlowFixMe\n  const request = index.getAll(IDBKeyRange.only(queueId));\n  const jobs = [];\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function (event) {\n      const length = event.target.result.length;\n      let lastRequest;\n      for (let i = 0; i < length; i += 1) {\n        const value = Object.assign({}, event.target.result[i]);\n        switch (value.status) {\n          case JOB_ERROR_STATUS:\n            value.status = JOB_CLEANUP_STATUS;\n            jobs.push(value);\n            break;\n          case JOB_COMPLETE_STATUS:\n            value.status = JOB_CLEANUP_STATUS;\n            jobs.push(value);\n            break;\n          case JOB_PENDING_STATUS:\n            value.status = JOB_ABORTED_STATUS;\n            break;\n          case JOB_CLEANUP_STATUS:\n            jobs.push(value);\n            continue;\n          case JOB_CLEANUP_AND_REMOVE_STATUS:\n            jobs.push(value);\n            continue;\n          case JOB_ABORTED_STATUS:\n            continue;\n          default:\n            logger.warn(`Unhandled job status ${value.status} while marking queue ${queueId} for cleanup`);\n            continue;\n        }\n        const putRequest = store.put(value);\n        localJobEmitter.emit('jobUpdate', value.id, value.queueId, value.type, value.status);\n        jobEmitter.emit('jobUpdate', value.id, value.queueId, value.type, value.status);\n        lastRequest = putRequest;\n        putRequest.onerror = function (event2) {\n          logger.error(`Put request error while marking queue ${queueId} for cleanup`);\n          logger.errorObject(event2);\n          reject(new Error(`Put request error while marking queue ${queueId} for cleanup`));\n        };\n      }\n      if (typeof lastRequest !== 'undefined') {\n        lastRequest.onsuccess = function () {\n          resolve();\n        };\n      } else {\n        resolve();\n      }\n      store.transaction.commit();\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while marking queue ${queueId} for cleanup`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while marking queue ${queueId} for cleanup`));\n    };\n  });\n  return jobs;\n}\n\nexport async function markQueueJobsGreaterThanIdCleanupAndRemoveInDatabase(queueId:string, jobId:number) {\n  const store = await getReadWriteJobsObjectStore();\n  const index = store.index('queueIdIndex');\n  // $FlowFixMe\n  const request = index.getAll(IDBKeyRange.only(queueId));\n  const jobs = [];\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function (event) {\n      const length = event.target.result.length;\n      let lastRequest;\n      for (let i = 0; i < length; i += 1) {\n        const value = Object.assign({}, event.target.result[i]);\n        if (value.id <= jobId) {\n          continue;\n        }\n        let shouldRemove = false;\n        switch (value.status) {\n          case JOB_ERROR_STATUS:\n            value.status = JOB_CLEANUP_AND_REMOVE_STATUS;\n            jobs.push(value);\n            break;\n          case JOB_COMPLETE_STATUS:\n            value.status = JOB_CLEANUP_AND_REMOVE_STATUS;\n            jobs.push(value);\n            break;\n          case JOB_PENDING_STATUS:\n            shouldRemove = true;\n            break;\n          case JOB_CLEANUP_STATUS:\n            value.status = JOB_CLEANUP_AND_REMOVE_STATUS;\n            jobs.push(value);\n            break;\n          case JOB_CLEANUP_AND_REMOVE_STATUS:\n            jobs.push(value);\n            continue;\n          case JOB_ABORTED_STATUS:\n            shouldRemove = true;\n            break;\n          default:\n            logger.warn(`Unhandled job status ${value.status} while marking queue ${queueId} for cleanup and removal`);\n            continue;\n        }\n        const { id, type, status } = value;\n        if (shouldRemove) {\n          const deleteRequest = store.delete(id);\n          localJobEmitter.emit('jobDelete', id, queueId);\n          jobEmitter.emit('jobDelete', id, queueId);\n          removeArgLookupsAndCleanupsForJobAsMicrotask(id);\n          lastRequest = deleteRequest;\n          deleteRequest.onerror = function (event2) {\n            logger.error(`Delete request error while marking queue ${queueId} for cleanup and removal`);\n            logger.errorObject(event2);\n            reject(new Error(`Delete request error while marking queue ${queueId} for cleanup and removal`));\n          };\n        } else {\n          const putRequest = store.put(value);\n          localJobEmitter.emit('jobUpdate', id, queueId, type, status);\n          jobEmitter.emit('jobUpdate', id, queueId, type, status);\n          lastRequest = putRequest;\n          putRequest.onerror = function (event2) {\n            logger.error(`Put request error while marking queue ${queueId} for cleanup and removal`);\n            logger.errorObject(event2);\n            reject(new Error(`Put request error while marking queue ${queueId} for cleanup and removal`));\n          };\n        }\n      }\n      if (typeof lastRequest !== 'undefined') {\n        lastRequest.onsuccess = function () {\n          resolve();\n        };\n      } else {\n        resolve();\n      }\n      store.transaction.commit();\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while marking queue ${queueId} for cleanup and removal`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while marking queue ${queueId} for cleanup and removal`));\n    };\n  });\n  return jobs;\n}\n\nexport function markQueueForCleanupAndRemoveInDatabase(queueId:string) {\n  return markQueueJobsGreaterThanIdCleanupAndRemoveInDatabase(queueId, -1);\n}\n\nexport async function markQueueJobsGreaterThanIdPendingInDatabase(queueId:string, jobId:number) {\n  const store = await getReadWriteJobsObjectStore();\n  const index = store.index('queueIdIndex');\n  // $FlowFixMe\n  const request = index.getAll(IDBKeyRange.only(queueId));\n  const jobs = [];\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function (event) {\n      const length = event.target.result.length;\n      let lastRequest;\n      for (let i = 0; i < length; i += 1) {\n        const value = Object.assign({}, event.target.result[i]);\n        if (value.id <= jobId) {\n          continue;\n        }\n        switch (value.status) {\n          case JOB_ERROR_STATUS:\n            value.attempt = 0;\n            jobs.push(value);\n            break;\n          case JOB_COMPLETE_STATUS:\n            continue;\n          case JOB_PENDING_STATUS:\n            value.attempt = 0;\n            jobs.push(value);\n            break;\n          case JOB_CLEANUP_STATUS:\n            value.attempt = 0;\n            jobs.push(value);\n            break;\n          case JOB_CLEANUP_AND_REMOVE_STATUS:\n            jobs.push(value);\n            continue;\n          case JOB_ABORTED_STATUS:\n            value.attempt = 0;\n            value.status = JOB_PENDING_STATUS;\n            jobs.push(value);\n            break;\n          default:\n            logger.warn(`Unhandled job status ${value.status} while marking queue ${queueId} as pending`);\n            continue;\n        }\n        const { id, type, status } = value;\n        const putRequest = store.put(value);\n        localJobEmitter.emit('jobUpdate', id, queueId, type, status);\n        jobEmitter.emit('jobUpdate', id, queueId, type, status);\n        lastRequest = putRequest;\n        putRequest.onerror = function (event2) {\n          logger.error(`Put request error while marking queue ${queueId} as pending`);\n          logger.errorObject(event2);\n          reject(new Error(`Put request error while marking queue ${queueId} as pending`));\n        };\n      }\n      if (typeof lastRequest !== 'undefined') {\n        lastRequest.onsuccess = function () {\n          resolve();\n        };\n      } else {\n        resolve();\n      }\n      store.transaction.commit();\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while marking queue ${queueId} as pending`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while marking queue ${queueId} as pending`));\n    };\n  });\n  return jobs;\n}\n\n\nexport function markQueuePendingInDatabase(queueId:string) {\n  return markQueueJobsGreaterThanIdPendingInDatabase(queueId, -1);\n}\n\nexport async function getGreatestJobIdFromQueueInDatabase(queueId:string) {\n  const store = await getReadOnlyJobsObjectStore();\n  const index = store.index('queueIdIndex');\n  // $FlowFixMe\n  const request = index.openCursor(IDBKeyRange.only(queueId), 'prev');\n  return new Promise((resolve, reject) => {\n    request.onsuccess = function (event) {\n      const cursor = event.target.result;\n      if (cursor) {\n        resolve(cursor.value.id || 0);\n      } else {\n        resolve(0);\n      }\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while getting the greatest job ID in queue ${queueId}`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while getting the greatest job ID in queue ${queueId}`));\n    };\n    store.transaction.commit();\n  });\n}\n\nexport async function incrementJobAttemptInDatabase(id:number) {\n  await updateJobInDatabase(id, (value:Job | void) => {\n    if (typeof value === 'undefined') {\n      throw new JobDoesNotExistError(`Unable to increment attempts for job ${id} in database, job does not exist`);\n    }\n    value.attempt += 1; // eslint-disable-line no-param-reassign\n    return value;\n  });\n}\n\nexport async function incrementCleanupAttemptInDatabase(id:number, queueId:string) {\n  let attempt = 1;\n  await updateCleanupInDatabase(id, (value: Cleanup | void) => {\n    if (typeof value === 'undefined') {\n      return {\n        id,\n        queueId,\n        attempt: 1,\n        startAfter: Date.now(),\n        data: {},\n      };\n    }\n    attempt = value.attempt + 1;\n    value.attempt = attempt; // eslint-disable-line no-param-reassign\n    return value;\n  });\n  return attempt;\n}\n\ntype EnqueueOptions = {\n  delay?: number,\n  prioritize?: boolean\n}\n\nexport async function bulkEnqueueToDatabase(items:Array<[string, string, Array<any>, EnqueueOptions]>) { // eslint-disable-line no-underscore-dangle\n  if (!Array.isArray(items)) {\n    throw new TypeError(`Unable to bulk enqueue in database, received invalid \"items\" argument type \"${typeof items}\"`);\n  }\n  for (const [queueId, type, args, options = {}] of items) {\n    if (typeof queueId !== 'string') {\n      throw new TypeError(`Unable to enqueue in database, received invalid \"queueId\" argument type \"${typeof queueId}\", should be string`);\n    }\n    if (typeof type !== 'string') {\n      throw new TypeError(`Unable to enqueue in database, received invalid \"type\" argument type \"${typeof type}\", should be string`);\n    }\n    if (!Array.isArray(args)) {\n      throw new TypeError(`Unable to enqueue in database, received invalid \"args\" argument type \"${typeof args}\", should be Array<any>`);\n    }\n    const delay = options.delay || 0;\n    const prioritize = options.prioritize || false;\n    if (typeof delay !== 'number') {\n      throw new TypeError(`Unable to enqueue in database, received invalid \"options.delay\" argument type \"${typeof delay}\", should be number`);\n    }\n    if (typeof prioritize !== 'boolean') {\n      throw new TypeError(`Unable to enqueue in database, received invalid \"options.prioritize\" argument type \"${typeof prioritize}\", should be boolean`);\n    }\n  }\n  const ids = [];\n  const store = await getReadWriteJobsObjectStore();\n  await new Promise((resolve, reject) => {\n    for (let i = 0; i < items.length; i += 1) {\n      const [queueId, type, args, options = {}] = items[i];\n      const delay = typeof options.delay === 'number' ? options.delay : 0;\n      const prioritize = typeof options.prioritize === 'boolean' ? options.prioritize : false;\n      const value = {\n        queueId,\n        type,\n        args,\n        attempt: 0,\n        created: Date.now(),\n        status: JOB_PENDING_STATUS,\n        startAfter: Date.now() + delay,\n        prioritize,\n      };\n      const request = store.put(value);\n      request.onsuccess = function () {\n        const id = request.result;\n        ids.push(request.result);\n        localJobEmitter.emit('jobAdd', id, queueId, type);\n        jobEmitter.emit('jobAdd', id, queueId, type);\n        resolve(request.result);\n      };\n      request.onerror = function (event) {\n        logger.error(`Request error while bulk enqueueing ${items.length} ${items.length === 1 ? 'job' : 'jobs'} in queue ${queueId}`);\n        logger.errorObject(event);\n        reject(new Error(`Request error while bulk enqueueing ${items.length} ${items.length === 1 ? 'job' : 'jobs'} in queue ${queueId}`));\n      };\n    }\n    store.transaction.commit();\n  });\n  return ids;\n}\n\nexport async function enqueueToDatabase(queueId: string, type: string, args: Array<any>, options?:EnqueueOptions = {}) { // eslint-disable-line no-underscore-dangle\n  if (typeof queueId !== 'string') {\n    throw new TypeError(`Unable to enqueue in database, received invalid \"queueId\" argument type \"${typeof queueId}\", should be string`);\n  }\n  if (typeof type !== 'string') {\n    throw new TypeError(`Unable to enqueue in database, received invalid \"type\" argument type \"${typeof type}\", should be string`);\n  }\n  if (!Array.isArray(args)) {\n    throw new TypeError(`Unable to enqueue in database, received invalid \"args\" argument type \"${typeof args}\", should be Array<any>`);\n  }\n  const delay = options.delay || 0;\n  const prioritize = options.prioritize || false;\n  if (typeof delay !== 'number') {\n    throw new TypeError(`Unable to enqueue in database, received invalid \"options.delay\" argument type \"${typeof delay}\", should be number`);\n  }\n  if (typeof prioritize !== 'boolean') {\n    throw new TypeError(`Unable to enqueue in database, received invalid \"options.prioritize\" argument type \"${typeof prioritize}\", should be boolean`);\n  }\n  const value = {\n    queueId,\n    type,\n    args,\n    attempt: 0,\n    created: Date.now(),\n    status: JOB_PENDING_STATUS,\n    startAfter: Date.now() + delay,\n    prioritize,\n  };\n\n  const store = await getReadWriteJobsObjectStore();\n\n  const request = store.put(value);\n  const id = await new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve(request.result);\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while enqueueing ${type} job`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while enqueueing ${type} job`));\n    };\n    store.transaction.commit();\n  });\n  localJobEmitter.emit('jobAdd', id, queueId, type);\n  jobEmitter.emit('jobAdd', id, queueId, type);\n  return id;\n}\n\nexport async function restoreJobToDatabaseForCleanupAndRemove(id:number, queueId: string, type: string, args: Array<any>, options?:EnqueueOptions = {}) { // eslint-disable-line no-underscore-dangle\n  if (typeof id !== 'number') {\n    throw new TypeError(`Unable to restore to database, received invalid \"id\" argument type \"${typeof id}\", should be number`);\n  }\n  if (typeof queueId !== 'string') {\n    throw new TypeError(`Unable to restore to database, received invalid \"queueId\" argument type \"${typeof queueId}\", should be string`);\n  }\n  if (typeof type !== 'string') {\n    throw new TypeError(`Unable to restore to database, received invalid \"type\" argument type \"${typeof type}\", should be string`);\n  }\n  if (!Array.isArray(args)) {\n    throw new TypeError(`Unable to restore to database, received invalid \"args\" argument type \"${typeof args}\", should be Array<any>`);\n  }\n  const delay = options.delay || 0;\n  const prioritize = options.prioritize || false;\n  if (typeof delay !== 'number') {\n    throw new TypeError(`Unable to enqueue in database, received invalid \"options.delay\" argument type \"${typeof delay}\", should be number`);\n  }\n  if (typeof prioritize !== 'boolean') {\n    throw new TypeError(`Unable to enqueue in database, received invalid \"options.prioritize\" argument type \"${typeof prioritize}\", should be boolean`);\n  }\n  const value = {\n    id,\n    queueId,\n    type,\n    args,\n    attempt: 1,\n    created: Date.now(),\n    status: JOB_CLEANUP_AND_REMOVE_STATUS,\n    startAfter: Date.now() + delay,\n    prioritize,\n  };\n  const store = await getReadWriteJobsObjectStore();\n  const request = store.put(value);\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve(request.result);\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while enqueueing ${type} job`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while enqueueing ${type} job`));\n    };\n    store.transaction.commit();\n  });\n  localJobEmitter.emit('jobAdd', id, queueId, type);\n  jobEmitter.emit('jobAdd', id, queueId, type);\n  return id;\n}\n\nexport async function dequeueFromDatabase():Promise<Array<Job>> { // eslint-disable-line no-underscore-dangle\n  const store = await getReadOnlyJobsObjectStore();\n  const index = store.index('statusIndex');\n  // $FlowFixMe\n  const request = index.getAll(IDBKeyRange.bound(JOB_CLEANUP_AND_REMOVE_STATUS, JOB_PENDING_STATUS));\n  const jobs = await new Promise((resolve, reject) => {\n    request.onsuccess = function (event) {\n      resolve(event.target.result);\n    };\n    request.onerror = function (event) {\n      logger.error('Request error while dequeing');\n      logger.errorObject(event);\n      reject(new Error('Request error while dequeing'));\n    };\n    store.transaction.commit();\n  });\n  return jobs;\n}\n\nexport function getContiguousIds(ids:Array<number>) {\n  ids.sort((a, b) => a - b);\n  const points = [[0, ids[0] - 1]];\n  for (let i = 0; i < ids.length; i += 1) {\n    if (ids[i] + 1 !== ids[i + 1]) {\n      if (i + 1 >= ids.length) {\n        points.push([ids[i] + 1, Infinity]);\n      } else {\n        points.push([ids[i] + 1, ids[i + 1] - 1]);\n      }\n    }\n  }\n  return points;\n}\n\nexport async function dequeueFromDatabaseNotIn(ids:Array<number>):Promise<Array<Job>> { // eslint-disable-line no-underscore-dangle\n  if (ids.length === 0) {\n    return dequeueFromDatabase();\n  }\n  const [store, promise] = await getReadOnlyJobsObjectStoreAndTransactionPromise();\n  const index = store.index('statusIndex');\n  const jobs = [];\n  // $FlowFixMe\n  const request = index.getAllKeys(IDBKeyRange.bound(JOB_CLEANUP_AND_REMOVE_STATUS, JOB_PENDING_STATUS));\n  request.onsuccess = function (event) {\n    for (const id of event.target.result) {\n      if (ids.includes(id)) {\n        continue;\n      }\n      const getRequest = store.get(id);\n      getRequest.onsuccess = function () {\n        jobs.push(getRequest.result);\n      };\n      getRequest.onerror = function (event2) {\n        logger.error(`Request error while getting job ${id}`);\n        logger.errorObject(event2);\n      };\n    }\n    store.transaction.commit();\n  };\n  request.onerror = function (event) {\n    logger.error('Request error while dequeing');\n    logger.errorObject(event);\n  };\n  await promise;\n  return jobs;\n}\n\nexport async function getJobsWithTypeFromDatabase(type:string):Promise<Array<Job>> {\n  const store = await getReadOnlyJobsObjectStore();\n  const index = store.index('typeIndex');\n  // $FlowFixMe\n  const request = index.getAll(IDBKeyRange.only(type));\n  return new Promise((resolve, reject) => {\n    request.onsuccess = function (event) {\n      resolve(event.target.result);\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while getting jobs with type ${type} from jobs database`);\n      logger.errorObject(event);\n      reject(new Error(`Error while getting jobs with type ${type} from jobs database`));\n    };\n    store.transaction.commit();\n  });\n}\n\nexport async function getJobsInQueueFromDatabase(queueId: string):Promise<Array<Job>> { // eslint-disable-line no-underscore-dangle\n  if (typeof queueId !== 'string') {\n    throw new TypeError(`Unable to get jobs in queue from database, received invalid \"queueId\" argument type \"${typeof queueId}\"`);\n  }\n  const store = await getReadOnlyJobsObjectStore();\n  const index = store.index('queueIdIndex');\n  // $FlowFixMe\n  const request = index.getAll(IDBKeyRange.only(queueId));\n  const jobs = await new Promise((resolve, reject) => {\n    request.onsuccess = function (event) {\n      resolve(event.target.result);\n    };\n    request.onerror = function (event) {\n      logger.error('Request error while dequeing');\n      logger.errorObject(event);\n      reject(new Error('Request error while dequeing'));\n    };\n    store.transaction.commit();\n  });\n  return jobs;\n}\n\nexport async function getJobsInDatabase(jobIds: Array<number>):Promise<Array<Job>> { // eslint-disable-line no-underscore-dangle\n  if (!Array.isArray(jobIds)) {\n    throw new TypeError(`Unable to get jobs from database, received invalid \"jobIds\" argument type \"${typeof jobIds}\"`);\n  }\n  const [store, promise] = await getReadOnlyJobsObjectStoreAndTransactionPromise();\n  const jobs = [];\n  for (const jobId of jobIds) {\n    const request = store.get(jobId);\n    request.onsuccess = function () {\n      if (typeof request.result !== 'undefined') {\n        jobs.push(request.result);\n      }\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while getting job ${jobId}`);\n      logger.errorObject(event);\n    };\n  }\n  store.transaction.commit();\n  await promise;\n  return jobs;\n}\n\nexport async function getCompletedJobsCountFromDatabase(queueId: string) { // eslint-disable-line no-underscore-dangle\n  const jobs = await getCompletedJobsFromDatabase(queueId);\n  return jobs.length;\n}\n\n\nexport async function getCompletedJobsFromDatabase(queueId: string):Promise<Array<Job>> { // eslint-disable-line no-underscore-dangle\n  if (typeof queueId !== 'string') {\n    throw new TypeError(`Unable to get completed jobs database, received invalid \"queueId\" argument type \"${typeof queueId}\"`);\n  }\n  const store = await getReadOnlyJobsObjectStore();\n  const index = store.index('statusQueueIdIndex');\n  // $FlowFixMe\n  const request = index.getAll(IDBKeyRange.only([queueId, JOB_COMPLETE_STATUS]));\n  const jobs = await new Promise((resolve, reject) => {\n    request.onsuccess = function (event) {\n      resolve(event.target.result);\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while getting completed jobs for queue ${queueId}`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while getting completed jobs for queue ${queueId}`));\n    };\n    store.transaction.commit();\n  });\n  return jobs;\n}\n\n\nexport async function storeAuthDataInDatabase(id:string, data: Object) { // eslint-disable-line no-underscore-dangle\n  if (typeof id !== 'string') {\n    throw new TypeError(`Unable to store auth data in database, received invalid \"id\" argument type \"${typeof id}\"`);\n  }\n  if (typeof data !== 'object') {\n    throw new TypeError(`Unable to store auth data in database, received invalid \"data\" argument type \"${typeof data}\"`);\n  }\n  const store = await getReadWriteAuthObjectStore();\n  const request = store.put({ id, data });\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve();\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while storing auth data for ${id}`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while storing auth data for ${id}`));\n    };\n    store.transaction.commit();\n  });\n}\n\nexport async function getAuthDataFromDatabase(id:string) {\n  if (typeof id !== 'string') {\n    throw new TypeError(`Unable to store auth data in database, received invalid \"id\" argument type \"${typeof id}\"`);\n  }\n  const store = await getReadOnlyAuthObjectStore();\n  const request = store.get(id);\n  const authData = await new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve(request.result);\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while getting auth data for ${id}`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while getting auth data for ${id}`));\n    };\n    store.transaction.commit();\n  });\n  return typeof authData !== 'undefined' ? authData.data : undefined;\n}\n\nexport async function removeAuthDataFromDatabase(id:string) {\n  if (typeof id !== 'string') {\n    throw new TypeError(`Unable to store auth data in database, received invalid \"id\" argument type \"${typeof id}\"`);\n  }\n  const store = await getReadWriteAuthObjectStore();\n  const request = store.delete(id);\n  return new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve();\n    };\n    request.onerror = function (event) {\n      logger.error(`Error while removing auth data for ${id}`);\n      logger.errorObject(event);\n      reject(new Error(`Error while removing auth data for ${id}`));\n    };\n    store.transaction.commit();\n  });\n}\n\nexport async function getQueueStatus(queueId:string) {\n  const store = await getReadOnlyJobsObjectStore();\n  const index = store.index('statusQueueIdIndex');\n  // $FlowFixMe\n  const abortedRequest = index.getAllKeys(IDBKeyRange.only([queueId, JOB_ABORTED_STATUS]));\n  // $FlowFixMe\n  const completeRequest = index.getAllKeys(IDBKeyRange.only([queueId, JOB_COMPLETE_STATUS]));\n  // $FlowFixMe\n  const pendingRequest = index.getAllKeys(IDBKeyRange.only([queueId, JOB_PENDING_STATUS]));\n  // $FlowFixMe\n  const errorRequest = index.getAllKeys(IDBKeyRange.only([queueId, JOB_ERROR_STATUS]));\n  // $FlowFixMe\n  const cleanupRequest = index.getAllKeys(IDBKeyRange.only([queueId, JOB_CLEANUP_STATUS]));\n  // $FlowFixMe\n  const cleanupAndRemoveRequest = index.getAllKeys(IDBKeyRange.only([queueId, JOB_CLEANUP_AND_REMOVE_STATUS]));\n  const abortedCountPromise = new Promise((resolve, reject) => {\n    abortedRequest.onsuccess = function (event) {\n      resolve(event.target.result.length);\n    };\n    abortedRequest.onerror = function (event) {\n      logger.error(`Request error while getting status of queue ${queueId}`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while getting status of queue ${queueId}`));\n    };\n  });\n  const completeCountPromise = new Promise((resolve, reject) => {\n    completeRequest.onsuccess = function (event) {\n      resolve(event.target.result.length);\n    };\n    completeRequest.onerror = function (event) {\n      logger.error(`Request error while getting status of queue ${queueId}`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while getting status of queue ${queueId}`));\n    };\n  });\n  const pendingCountPromise = new Promise((resolve, reject) => {\n    pendingRequest.onsuccess = function (event) {\n      resolve(event.target.result.length);\n    };\n    pendingRequest.onerror = function (event) {\n      logger.error(`Request error while getting status of queue ${queueId}`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while getting status of queue ${queueId}`));\n    };\n  });\n  const errorCountPromise = new Promise((resolve, reject) => {\n    errorRequest.onsuccess = function (event) {\n      resolve(event.target.result.length);\n    };\n    errorRequest.onerror = function (event) {\n      logger.error(`Request error while getting status of queue ${queueId}`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while getting status of queue ${queueId}`));\n    };\n  });\n  const cleanupCountPromise = new Promise((resolve, reject) => {\n    cleanupRequest.onsuccess = function (event) {\n      resolve(event.target.result.length);\n    };\n    cleanupRequest.onerror = function (event) {\n      logger.error(`Request error while getting status of queue ${queueId}`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while getting status of queue ${queueId}`));\n    };\n  });\n  const cleanupAndRemoveCountPromise = new Promise((resolve, reject) => {\n    cleanupAndRemoveRequest.onsuccess = function (event) {\n      resolve(event.target.result.length);\n    };\n    cleanupAndRemoveRequest.onerror = function (event) {\n      logger.error(`Request error while getting status of queue ${queueId}`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while getting status of queue ${queueId}`));\n    };\n  });\n  store.transaction.commit();\n  const [\n    abortedCount,\n    completeCount,\n    pendingCount,\n    errorCount,\n    cleanupCount,\n    cleanupAndRemoveCount,\n  ] = await Promise.all([\n    abortedCountPromise,\n    completeCountPromise,\n    pendingCountPromise,\n    errorCountPromise,\n    cleanupCountPromise,\n    cleanupAndRemoveCountPromise,\n  ]);\n  if (abortedCount > 0 || cleanupCount > 0) {\n    return QUEUE_ERROR_STATUS;\n  }\n  if (errorCount > 0 || pendingCount > 0 || cleanupAndRemoveCount > 0) {\n    return QUEUE_PENDING_STATUS;\n  }\n  if (completeCount > 0) {\n    return QUEUE_COMPLETE_STATUS;\n  }\n  return QUEUE_EMPTY_STATUS;\n}\n\nexport async function addArgLookup(jobId:number, key:string, jsonPath:string) {\n  if (typeof jobId !== 'number') {\n    throw new TypeError(`Unable add argument lookup, received invalid \"jobId\" argument type \"${typeof jobId}\"`);\n  }\n  if (typeof key !== 'string') {\n    throw new TypeError(`Unable add argument lookup, received invalid \"key\" argument type \"${typeof key}\"`);\n  }\n  if (typeof jsonPath !== 'string') {\n    throw new TypeError(`Unable add argument lookup, received invalid \"jsonPath\" argument type \"${typeof jsonPath}\"`);\n  }\n  const store = await getReadWriteArgLookupObjectStore();\n  const request = store.put({\n    jobId,\n    key,\n    jsonPath,\n  });\n  return new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve();\n    };\n    request.onerror = function (event) {\n      logger.error(`Error while adding argument lookup for job ${jobId} with key \"${key}\" and JSON path \"${jsonPath}\"`);\n      logger.errorObject(event);\n      reject(new Error(`Error while adding argument lookup for job ${jobId} with key \"${key}\" and JSON path \"${jsonPath}\"`));\n    };\n    store.transaction.commit();\n  });\n}\n\nexport async function getArgLookupJobPathMap(key:string) {\n  if (typeof key !== 'string') {\n    throw new TypeError(`Unable to lookup arguments, received invalid \"key\" argument type \"${typeof key}\"`);\n  }\n  const store = await getReadOnlyArgLookupObjectStore();\n  const index = store.index('keyIndex');\n  // $FlowFixMe\n  const request = index.getAll(IDBKeyRange.only(key));\n  return new Promise((resolve, reject) => {\n    request.onsuccess = function (event) {\n      const map: Map<number, string> = new Map(event.target.result.map((x) => [x.jobId, x.jsonPath]));\n      resolve(map);\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error looking up arguments for key ${key}`);\n      logger.errorObject(event);\n      reject(new Error(`Request error looking up arguments for key ${key}`));\n    };\n    store.transaction.commit();\n  });\n}\n\n\nexport async function markJobsWithArgLookupKeyCleanupAndRemoveInDatabase(key:string) {\n  if (typeof key !== 'string') {\n    throw new TypeError(`Unable to lookup arguments, received invalid \"key\" argument type \"${typeof key}\"`);\n  }\n  const store = await getReadOnlyArgLookupObjectStore();\n  const index = store.index('keyIndex');\n  // $FlowFixMe\n  const request = index.getAll(IDBKeyRange.only(key));\n  const jobIds = await new Promise((resolve, reject) => {\n    request.onsuccess = function (event) {\n      resolve(uniq(event.target.result.map((x) => x.jobId)));\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error looking up arguments for key ${key}`);\n      logger.errorObject(event);\n      reject(new Error(`Request error looking up arguments for key ${key}`));\n    };\n    store.transaction.commit();\n  });\n  await Promise.all(jobIds.map(markJobCleanupAndRemoveInDatabase));\n}\n\nexport async function lookupArgs(key:string) {\n  const database = await databasePromise;\n  const transaction = database.transaction(['arg-lookup', 'jobs'], 'readonly', { durability: 'relaxed' });\n  const argLookupObjectStore = transaction.objectStore('arg-lookup');\n  transaction.onabort = (event) => {\n    logger.error('Read-only lookupArgs transaction was aborted');\n    logger.errorObject(event);\n  };\n  transaction.onerror = (event) => {\n    logger.error('Error in read-only lookupArgs transaction');\n    logger.errorObject(event);\n  };\n  const argLookupIndex = argLookupObjectStore.index('keyIndex');\n  // $FlowFixMe\n  const argLookupRequest = argLookupIndex.getAll(IDBKeyRange.only(key));\n  const results = [];\n  return new Promise((resolve, reject) => {\n    argLookupRequest.onsuccess = function (argLookupEvent) {\n      const argLookups = argLookupEvent.target.result;\n      if (argLookups.length === 0) {\n        resolve([]);\n        transaction.commit();\n        return;\n      }\n      const jobsObjectStore = transaction.objectStore('jobs');\n      for (let i = 0; i < argLookups.length; i += 1) {\n        const { jobId, jsonPath } = argLookups[i];\n        const jobRequest = jobsObjectStore.get(jobId);\n        jobRequest.onsuccess = function () {\n          if (typeof jobRequest.result === 'undefined') {\n            return;\n          }\n          const { args } = jobRequest.result;\n          for (const result of JSONPath({ path: jsonPath, json: args })) {\n            results.push(result);\n          }\n          if (i === argLookups.length - 1) {\n            resolve(results);\n          }\n        };\n        jobRequest.onerror = function (event) {\n          logger.error(`Request error while getting job ${jobId}`);\n          logger.errorObject(event);\n          reject(new Error(`Request error looking up jobs for key ${key}`));\n        };\n      }\n      transaction.commit();\n    };\n    argLookupRequest.onerror = function (event) {\n      logger.error(`Request error looking up arguments for key ${key}`);\n      logger.errorObject(event);\n      reject(new Error(`Request error looking up arguments for key ${key}`));\n    };\n  });\n}\n\nexport async function lookupArg(key:string) {\n  const results = await lookupArgs(key);\n  return results[0];\n}\n\nconst jobsArgLookupsAndCleanupsToRemove = [];\n\nasync function removeArgLookupsAndCleanupsForJob() {\n  if (jobsArgLookupsAndCleanupsToRemove.length === 0) {\n    return;\n  }\n  const jobIds = jobsArgLookupsAndCleanupsToRemove.slice();\n  jobsArgLookupsAndCleanupsToRemove.length = 0;\n  const database = await databasePromise;\n  const transaction = database.transaction(['cleanups', 'arg-lookup'], 'readwrite', { durability: 'relaxed' });\n  transaction.onabort = (event) => {\n    logger.error('Read-write \"cleanups\", and \"arg-lookup\" transaction was aborted');\n    logger.errorObject(event);\n  };\n  transaction.onerror = (event) => {\n    logger.error('Error in read-write \"cleanups\" and \"arg-lookup\" transaction');\n    logger.errorObject(event);\n  };\n  const cleanupsObjectStore = transaction.objectStore('cleanups');\n  const argLookupObjectStore = transaction.objectStore('arg-lookup');\n  const argLookupJobIdIndex = argLookupObjectStore.index('jobIdIndex');\n  for (const jobId of jobIds) {\n    const cleanupDeleteRequest = cleanupsObjectStore.delete(jobId);\n    cleanupDeleteRequest.onerror = function (event) {\n      logger.error(`Request error while removing cleanups for job ${jobId} from database`);\n      logger.errorObject(event);\n    };\n    // $FlowFixMe\n    const argLookupJobRequest = argLookupJobIdIndex.getAllKeys(IDBKeyRange.only(jobId));\n    argLookupJobRequest.onsuccess = function (event) {\n      for (const id of event.target.result) {\n        const argLookupDeleteRequest = argLookupObjectStore.delete(id);\n        argLookupDeleteRequest.onerror = function (deleteEvent) {\n          logger.error(`Delete request error while removing argument lookups for job ${jobId} from database`);\n          logger.errorObject(deleteEvent);\n        };\n      }\n    };\n    argLookupJobRequest.onerror = function (event) {\n      logger.error(`Request error while removing argument lookups for job ${jobId} from database`);\n      logger.errorObject(event);\n    };\n  }\n}\n\nexport function removeArgLookupsAndCleanupsForJobAsMicrotask(jobId:number) {\n  jobsArgLookupsAndCleanupsToRemove.push(jobId);\n  self.queueMicrotask(removeArgLookupsAndCleanupsForJob);\n}\n\nconst UNLOAD_DATA_ID = '_UNLOAD_DATA';\n\nexport function updateUnloadDataInDatabase(transform:(Object | void) => Object | void | false):Promise<Object | void> {\n  return updateMetadataInDatabase(UNLOAD_DATA_ID, transform);\n}\n\nexport function getUnloadDataFromDatabase() {\n  return getMetadataFromDatabase(UNLOAD_DATA_ID);\n}\n\nexport function clearUnloadDataInDatabase() {\n  return clearMetadataInDatabase(UNLOAD_DATA_ID);\n}\n\n"],"file":"database.js"}