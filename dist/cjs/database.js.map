{"version":3,"sources":["../../src/database.js"],"names":["localJobEmitter","EventEmitter","jobEmitter","logger","JobDoesNotExistError","message","name","Error","CleanupDoesNotExistError","QUEUE_ERROR_STATUS","QUEUE_PENDING_STATUS","QUEUE_COMPLETE_STATUS","QUEUE_EMPTY_STATUS","JOB_ABORTED_STATUS","JOB_COMPLETE_STATUS","JOB_PENDING_STATUS","JOB_ERROR_STATUS","JOB_CLEANUP_STATUS","JOB_CLEANUP_AND_REMOVE_STATUS","databasePromise","request","self","indexedDB","open","onupgradeneeded","e","store","target","result","createObjectStore","keyPath","autoIncrement","createIndex","unique","error","Promise","resolve","reject","onerror","onsuccess","event","db","getReadWriteObjectStore","database","transaction","durability","objectStore","onabort","errorObject","getReadOnlyObjectStore","getReadWriteArgLookupObjectStore","getReadOnlyArgLookupObjectStore","getReadWriteAuthObjectStore","getReadOnlyAuthObjectStore","getReadWriteMetadataObjectStore","getReadOnlyMetadataObjectStore","getReadWriteJobsObjectStore","getReadOnlyJobsObjectStore","getReadWriteCleanupsObjectStore","getReadOnlyCleanupsObjectStore","getReadWriteObjectStoreAndTransactionPromise","promise","oncomplete","getReadOnlyObjectStoreAndTransactionPromise","getReadWriteJobsObjectStoreAndTransactionPromise","getReadOnlyJobsObjectStoreAndTransactionPromise","getReadWriteArgLookupObjectStoreAndTransactionPromise","removeJobFromObjectStore","id","queueId","deleteRequest","delete","emit","removeArgLookupsForJobAsMicrotask","clearAllMetadataInDatabase","clear","commit","clearJobsDatabase","clearCleanupsDatabase","clearDatabase","removeJobsWithQueueIdAndTypeFromDatabase","type","index","getAllKeys","IDBKeyRange","only","removeQueueFromDatabase","jobsObjectStore","cleanupsObjectStore","argLookupObjectStore","queueIdIndex","argLookupJobIdIndex","jobIds","jobId","jobDeleteRequest","cleanupDeleteRequest","argLookupJobRequest","argLookupDeleteRequest","deleteEvent","removeCompletedExpiredItemsFromDatabase","maxAge","getAll","bound","Date","now","status","updateJobInDatabase","transform","get","newValue","value","putRequest","put","getJobFromDatabase","updateCleanupInDatabase","removePathFromCleanupDataInDatabase","path","attempt","startAfter","data","Object","assign","updateCleanupValuesInDatabase","TypeError","combinedData","silentlyRemoveJobFromDatabase","removeJobFromDatabase","job","removeCleanupFromDatabase","getCleanupFromDatabase","getMetadataFromDatabase","response","metadata","undefined","clearMetadataInDatabase","setMetadataInDatabase","updateMetadataInDatabase","markJobStatusInDatabase","markJobCompleteInDatabase","markJobPendingInDatabase","markJobErrorInDatabase","markJobCleanupInDatabase","markJobAbortedInDatabase","markJobCompleteThenRemoveFromDatabase","markJobCleanupAndRemoveInDatabase","markJobAsAbortedOrRemoveFromDatabase","markJobStartAfterInDatabase","toLocaleString","markCleanupStartAfterInDatabase","markQueueForCleanupInDatabase","jobs","length","lastRequest","i","push","warn","event2","markQueueJobsGreaterThanIdCleanupAndRemoveInDatabase","shouldRemove","markQueueForCleanupAndRemoveInDatabase","markQueueJobsGreaterThanIdPendingInDatabase","markQueuePendingInDatabase","getGreatestJobIdFromQueueInDatabase","openCursor","cursor","incrementJobAttemptInDatabase","incrementCleanupAttemptInDatabase","bulkEnqueueToDatabase","items","delay","Array","isArray","args","ids","created","enqueueToDatabase","restoreJobToDatabaseForCleanupAndRemove","dequeueFromDatabase","getContiguousIds","sort","a","b","points","Infinity","dequeueFromDatabaseNotIn","includes","getRequest","getJobsWithTypeFromDatabase","getJobsInQueueFromDatabase","getJobsInDatabase","getCompletedJobsCountFromDatabase","getCompletedJobsFromDatabase","storeAuthDataInDatabase","getAuthDataFromDatabase","authData","removeAuthDataFromDatabase","getQueueStatus","abortedRequest","completeRequest","pendingRequest","errorRequest","cleanupRequest","cleanupAndRemoveRequest","abortedCountPromise","completeCountPromise","pendingCountPromise","errorCountPromise","cleanupCountPromise","cleanupAndRemoveCountPromise","all","abortedCount","completeCount","pendingCount","errorCount","cleanupCount","cleanupAndRemoveCount","addArgLookup","key","jsonPath","getArgLookupJobPathMap","map","Map","x","markJobsWithArgLookupKeyCleanupAndRemoveInDatabase","lookupArgs","argLookupIndex","argLookupRequest","results","argLookupEvent","argLookups","jobRequest","json","lookupArg","queueMicrotask","removeArgLookupsForJob","catch","errorStack","UNLOAD_DATA_ID","updateUnloadDataInDatabase","getUnloadDataFromDatabase","clearUnloadDataInDatabase"],"mappings":"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","sourcesContent":["// @flow\n\nimport { JSONPath } from 'jsonpath-plus';\nimport merge from 'lodash/merge';\nimport unset from 'lodash/unset';\nimport uniq from 'lodash/uniq';\nimport EventEmitter from 'events';\nimport makeLogger from './logger';\n\n// Local job emitter is for this process only,\n// jobEmitter is bridged when a MessagePort is open\nexport const localJobEmitter = new EventEmitter();\nexport const jobEmitter = new EventEmitter();\n\nconst logger = makeLogger('Jobs Database');\n\nexport class JobDoesNotExistError extends Error {\n  constructor(message:string) {\n    super(message);\n    this.name = 'JobDoesNotExistError';\n  }\n}\n\nexport class CleanupDoesNotExistError extends Error {\n  constructor(message:string) {\n    super(message);\n    this.name = 'CleanupDoesNotExistError';\n  }\n}\n\nexport type Job = {\n  id: number,\n  queueId:string,\n  type:string,\n  args:Array<any>,\n  attempt: number,\n  created: number,\n  status: number,\n  startAfter: number\n};\n\n\ntype Cleanup = {\n  id: number,\n  queueId:string,\n  data: Object,\n  attempt: number,\n  startAfter: number\n};\n\nexport const QUEUE_ERROR_STATUS = 0;\nexport const QUEUE_PENDING_STATUS = 1;\nexport const QUEUE_COMPLETE_STATUS = 2;\nexport const QUEUE_EMPTY_STATUS = 3;\n\nexport const JOB_ABORTED_STATUS = 2;\nexport const JOB_COMPLETE_STATUS = 1;\nexport const JOB_PENDING_STATUS = 0;\nexport const JOB_ERROR_STATUS = -1;\nexport const JOB_CLEANUP_STATUS = -2;\nexport const JOB_CLEANUP_AND_REMOVE_STATUS = -3;\n\nexport const databasePromise = (async () => {\n  const request = self.indexedDB.open('battery-queue-07', 1);\n\n  request.onupgradeneeded = function (e) {\n    try {\n      const store = e.target.result.createObjectStore('jobs', { keyPath: 'id', autoIncrement: true });\n      store.createIndex('statusIndex', 'status', { unique: false });\n      store.createIndex('queueIdIndex', 'queueId', { unique: false });\n      store.createIndex('queueIdTypeIndex', ['queueId', 'type'], { unique: false });\n      store.createIndex('typeIndex', 'type', { unique: false });\n      store.createIndex('statusQueueIdIndex', ['queueId', 'status'], { unique: false });\n      store.createIndex('createdIndex', 'created', { unique: false });\n    } catch (error) {\n      if (!(error.name === 'ConstraintError')) {\n        throw error;\n      }\n    }\n    try {\n      e.target.result.createObjectStore('metadata', { keyPath: 'id' });\n    } catch (error) {\n      if (!(error.name === 'ConstraintError')) {\n        throw error;\n      }\n    }\n    try {\n      const store = e.target.result.createObjectStore('cleanups', { keyPath: 'id' });\n      store.createIndex('queueIdIndex', 'queueId', { unique: false });\n    } catch (error) {\n      if (!(error.name === 'ConstraintError')) {\n        throw error;\n      }\n    }\n    try {\n      e.target.result.createObjectStore('auth-data', { keyPath: 'id' });\n    } catch (error) {\n      if (!(error.name === 'ConstraintError')) {\n        throw error;\n      }\n    }\n    try {\n      const store = e.target.result.createObjectStore('arg-lookup', { keyPath: 'id', autoIncrement: true });\n      store.createIndex('jobIdIndex', 'jobId', { unique: false });\n      store.createIndex('keyIndex', 'key', { unique: false });\n    } catch (error) {\n      if (!(error.name === 'ConstraintError')) {\n        throw error;\n      }\n    }\n  };\n\n  const db = await new Promise((resolve, reject) => {\n    request.onerror = () => {\n      reject(new Error('Unable to open database'));\n    };\n    request.onsuccess = function (event) {\n      resolve(event.target.result);\n    };\n  });\n\n  return db;\n})();\n\nasync function getReadWriteObjectStore(name:string) {\n  const database = await databasePromise;\n  const transaction = database.transaction([name], 'readwrite', { durability: 'relaxed' });\n  const objectStore = transaction.objectStore(name);\n  transaction.onabort = (event) => {\n    logger.error(`Read-write \"${name}\" transaction was aborted`);\n    logger.errorObject(event);\n  };\n  transaction.onerror = (event) => {\n    logger.error(`Error in read-write \"${name}\" transaction`);\n    logger.errorObject(event);\n  };\n  return objectStore;\n}\n\nasync function getReadOnlyObjectStore(name:string) {\n  const database = await databasePromise;\n  const transaction = database.transaction([name], 'readonly', { durability: 'relaxed' });\n  const objectStore = transaction.objectStore(name);\n  transaction.onabort = (event) => {\n    logger.error(`Read-only \"${name}\" transaction was aborted`);\n    logger.errorObject(event);\n  };\n  transaction.onerror = (event) => {\n    logger.error(`Error in read-only \"${name}\" transaction`);\n    logger.errorObject(event);\n  };\n  return objectStore;\n}\n\nfunction getReadWriteArgLookupObjectStore() {\n  return getReadWriteObjectStore('arg-lookup');\n}\n\nfunction getReadOnlyArgLookupObjectStore() {\n  return getReadOnlyObjectStore('arg-lookup');\n}\n\nfunction getReadWriteAuthObjectStore() {\n  return getReadWriteObjectStore('auth-data');\n}\n\nfunction getReadOnlyAuthObjectStore() {\n  return getReadOnlyObjectStore('auth-data');\n}\n\nfunction getReadWriteMetadataObjectStore() {\n  return getReadWriteObjectStore('metadata');\n}\n\nfunction getReadOnlyMetadataObjectStore() {\n  return getReadOnlyObjectStore('metadata');\n}\n\nfunction getReadWriteJobsObjectStore() {\n  return getReadWriteObjectStore('jobs');\n}\n\nfunction getReadOnlyJobsObjectStore() {\n  return getReadOnlyObjectStore('jobs');\n}\n\nfunction getReadWriteCleanupsObjectStore() {\n  return getReadWriteObjectStore('cleanups');\n}\n\nfunction getReadOnlyCleanupsObjectStore() {\n  return getReadOnlyObjectStore('cleanups');\n}\n\nasync function getReadWriteObjectStoreAndTransactionPromise(name:string) {\n  const database = await databasePromise;\n  const transaction = database.transaction([name], 'readwrite', { durability: 'relaxed' });\n  const objectStore = transaction.objectStore(name);\n  const promise = new Promise((resolve, reject) => {\n    transaction.onabort = (event) => {\n      logger.error(`Read-write \"${name}\" transaction was aborted`);\n      logger.errorObject(event);\n      reject(new Error(`Read-write \"${name}\" transaction was aborted`));\n    };\n    transaction.onerror = (event) => {\n      logger.error(`Error in read-write \"${name}\" transaction`);\n      logger.errorObject(event);\n      reject(new Error(`Error in read-write \"${name}\" transaction`));\n    };\n    transaction.oncomplete = () => {\n      resolve();\n    };\n  });\n  return [objectStore, promise];\n}\n\nasync function getReadOnlyObjectStoreAndTransactionPromise(name:string) {\n  const database = await databasePromise;\n  const transaction = database.transaction([name], 'readonly', { durability: 'relaxed' });\n  const objectStore = transaction.objectStore(name);\n  const promise = new Promise((resolve, reject) => {\n    transaction.onabort = (event) => {\n      logger.error(`Read-write \"${name}\" transaction was aborted`);\n      logger.errorObject(event);\n      reject(new Error(`Read-write \"${name}\" transaction was aborted`));\n    };\n    transaction.onerror = (event) => {\n      logger.error(`Error in read-write \"${name}\" transaction`);\n      logger.errorObject(event);\n      reject(new Error(`Error in read-write \"${name}\" transaction`));\n    };\n    transaction.oncomplete = () => {\n      resolve();\n    };\n  });\n  return [objectStore, promise];\n}\n\n\nfunction getReadWriteJobsObjectStoreAndTransactionPromise() {\n  return getReadWriteObjectStoreAndTransactionPromise('jobs');\n}\n\nfunction getReadOnlyJobsObjectStoreAndTransactionPromise() {\n  return getReadOnlyObjectStoreAndTransactionPromise('jobs');\n}\n\nfunction getReadWriteArgLookupObjectStoreAndTransactionPromise() {\n  return getReadWriteObjectStoreAndTransactionPromise('arg-lookup');\n}\n\nfunction removeJobFromObjectStore(store:IDBObjectStore, id:number, queueId:string) {\n  const deleteRequest = store.delete(id);\n  localJobEmitter.emit('jobDelete', id, queueId);\n  jobEmitter.emit('jobDelete', id, queueId);\n  deleteRequest.onsuccess = function () {\n    removeArgLookupsForJobAsMicrotask(id);\n  };\n  deleteRequest.onerror = function (event) {\n    logger.error(`Request error while removing job ${id} in queue ${queueId} from database`);\n    logger.errorObject(event);\n  };\n}\n\nasync function clearAllMetadataInDatabase() {\n  const store = await getReadWriteMetadataObjectStore();\n  const request = store.clear();\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve();\n    };\n    request.onerror = function (event) {\n      logger.error('Error while clearing queue data database');\n      logger.errorObject(event);\n      reject(new Error('Error while clearing queue data database'));\n    };\n    store.transaction.commit();\n  });\n}\n\nasync function clearJobsDatabase() {\n  const store = await getReadWriteJobsObjectStore();\n  const request = store.clear();\n  localJobEmitter.emit('jobsClear');\n  jobEmitter.emit('jobsClear');\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve();\n    };\n    request.onerror = function (event) {\n      logger.error('Error while clearing jobs database');\n      logger.errorObject(event);\n      reject(new Error('Error while clearing jobs database'));\n    };\n    store.transaction.commit();\n  });\n}\n\nasync function clearCleanupsDatabase() {\n  const store = await getReadWriteCleanupsObjectStore();\n  const request = store.clear();\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve();\n    };\n    request.onerror = function (event) {\n      logger.error('Error while clearing cleanups database');\n      logger.errorObject(event);\n      reject(new Error('Error while clearing cleanups database'));\n    };\n    store.transaction.commit();\n  });\n}\n\nexport async function clearDatabase() {\n  await clearJobsDatabase();\n  await clearCleanupsDatabase();\n  await clearAllMetadataInDatabase();\n}\n\nexport async function removeJobsWithQueueIdAndTypeFromDatabase(queueId:string, type:string) {\n  const [store, promise] = await getReadWriteJobsObjectStoreAndTransactionPromise();\n  const index = store.index('queueIdTypeIndex');\n  // $FlowFixMe\n  const request = index.getAllKeys(IDBKeyRange.only([queueId, type]));\n  request.onsuccess = function (event) {\n    for (const id of event.target.result) {\n      removeJobFromObjectStore(store, id, queueId);\n    }\n  };\n  request.onerror = function (event) {\n    logger.error(`Request error while removing jobs with queue ${queueId} and type ${type} from jobs database`);\n    logger.errorObject(event);\n  };\n  await promise;\n}\n\nexport async function removeQueueFromDatabase(queueId:string) {\n  const database = await databasePromise;\n  const transaction = database.transaction(['jobs', 'cleanups', 'arg-lookup'], 'readwrite', { durability: 'relaxed' });\n  const jobsObjectStore = transaction.objectStore('jobs');\n  const cleanupsObjectStore = transaction.objectStore('cleanups');\n  const argLookupObjectStore = transaction.objectStore('arg-lookup');\n  const promise = new Promise((resolve, reject) => {\n    transaction.onabort = (event) => {\n      logger.error('Read-write remove queue transaction was aborted');\n      logger.errorObject(event);\n      reject(new Error('Read-write emove queue transaction was aborted'));\n    };\n    transaction.onerror = (event) => {\n      logger.error('Error in read-write remove queue transaction');\n      logger.errorObject(event);\n      reject(new Error('Error in read-write remove queue transaction'));\n    };\n    transaction.oncomplete = () => {\n      resolve();\n    };\n  });\n  const queueIdIndex = jobsObjectStore.index('queueIdIndex');\n  const argLookupJobIdIndex = argLookupObjectStore.index('jobIdIndex');\n  // $FlowFixMe\n  const request = queueIdIndex.getAllKeys(IDBKeyRange.only(queueId));\n\n  request.onsuccess = function ({ target: { result: jobIds } }) {\n    for (const jobId of jobIds) {\n      const jobDeleteRequest = jobsObjectStore.delete(jobId);\n      localJobEmitter.emit('jobDelete', jobId, queueId);\n      jobEmitter.emit('jobDelete', jobId, queueId);\n      jobDeleteRequest.onerror = function (event) {\n        logger.error(`Request error while removing job ${jobId} in queue ${queueId} from database`);\n        logger.errorObject(event);\n      };\n      const cleanupDeleteRequest = cleanupsObjectStore.delete(jobId);\n      cleanupDeleteRequest.onerror = function (event) {\n        logger.error(`Request error while removing cleanup for job ${jobId} in queue ${queueId} from database`);\n        logger.errorObject(event);\n      };\n      // $FlowFixMe\n      const argLookupJobRequest = argLookupJobIdIndex.getAllKeys(IDBKeyRange.only(jobId));\n      argLookupJobRequest.onsuccess = function (event) {\n        for (const id of event.target.result) {\n          const argLookupDeleteRequest = argLookupObjectStore.delete(id);\n          argLookupDeleteRequest.onerror = function (deleteEvent) {\n            logger.error(`Delete request error while removing argument lookups for job ${jobId} in queue ${queueId} from database`);\n            logger.errorObject(deleteEvent);\n          };\n        }\n      };\n      argLookupJobRequest.onerror = function (event) {\n        logger.error(`Request error while removing argument lookups for job ${jobId} in queue ${queueId} from database`);\n        logger.errorObject(event);\n      };\n    }\n  };\n  request.onerror = function (event) {\n    logger.error(`Request error while removing queue ${queueId} from jobs database`);\n    logger.errorObject(event);\n  };\n  await promise;\n}\n\nexport async function removeCompletedExpiredItemsFromDatabase(maxAge:number) {\n  const [store, promise] = await getReadWriteJobsObjectStoreAndTransactionPromise();\n  const index = store.index('createdIndex');\n  // $FlowFixMe\n  const request = index.getAll(IDBKeyRange.bound(0, Date.now() - maxAge));\n  request.onsuccess = function (event) {\n    for (const { id, queueId, status } of event.target.result) {\n      if (status !== JOB_COMPLETE_STATUS) {\n        continue;\n      }\n      removeJobFromObjectStore(store, id, queueId);\n    }\n  };\n  request.onerror = function (event) {\n    logger.error('Request error while removing completed exired items from jobs database');\n    logger.errorObject(event);\n  };\n  await promise;\n}\n\nexport async function updateJobInDatabase(id:number, transform:(Job | void) => Job | void | false):Promise<Job | void> {\n  const store = await getReadWriteJobsObjectStore();\n  const request = store.get(id);\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      let newValue;\n      const value = request.result;\n      try {\n        newValue = transform(value);\n      } catch (error) {\n        reject(error);\n        return;\n      }\n      if (typeof newValue === 'undefined') {\n        resolve();\n      } else if (newValue === false) {\n        if (typeof value !== 'undefined') {\n          const { queueId, type } = value;\n          const deleteRequest = store.delete(id);\n          localJobEmitter.emit('jobDelete', id, queueId);\n          jobEmitter.emit('jobDelete', id, queueId);\n          deleteRequest.onsuccess = function () {\n            removeArgLookupsForJobAsMicrotask(id);\n            resolve();\n          };\n          deleteRequest.onerror = function (event) {\n            logger.error(`Delete request error while updating job ${id} in queue ${queueId} and type ${type} in jobs database`);\n            logger.errorObject(event);\n            reject(new Error(`Delete request error while updating job ${id} in queue ${queueId} and type ${type} from jobs database`));\n          };\n        }\n      } else {\n        const { queueId, type, status } = newValue;\n        const putRequest = store.put(newValue);\n        localJobEmitter.emit('jobUpdate', id, queueId, type, status);\n        jobEmitter.emit('jobUpdate', id, queueId, type, status);\n        putRequest.onsuccess = function () {\n          resolve();\n        };\n        putRequest.onerror = function (event) {\n          logger.error(`Put request error while updating job ${id} in queue ${queueId} and type ${type} in jobs database`);\n          logger.errorObject(event);\n          reject(new Error(`Put request error while updating job ${id} in queue ${queueId} and type ${type} from jobs database`));\n        };\n      }\n      store.transaction.commit();\n    };\n    request.onerror = function (event) {\n      logger.error(`Get request error while updating ${id}`);\n      logger.errorObject(event);\n      reject(new Error(`Get request error while updating ${id}`));\n    };\n  });\n}\n\nexport async function getJobFromDatabase(id:number):Promise<Job | void> {\n  const store = await getReadOnlyJobsObjectStore();\n  const request = store.get(id);\n  return new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve(request.result);\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while getting ${id}`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while getting ${id}`));\n    };\n    store.transaction.commit();\n  });\n}\n\nexport async function updateCleanupInDatabase(id:number, transform:(Cleanup | void) => Object):Promise<Cleanup | void> {\n  const store = await getReadWriteCleanupsObjectStore();\n  const request = store.get(id);\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      let newValue;\n      try {\n        newValue = transform(request.result);\n      } catch (error) {\n        reject(error);\n        return;\n      }\n      if (typeof newValue === 'undefined') {\n        resolve();\n      } else {\n        const putRequest = store.put(newValue);\n        putRequest.onsuccess = function () {\n          resolve();\n        };\n        putRequest.onerror = function (event) {\n          logger.error(`Put request error while updating ${id} cleanup`);\n          logger.errorObject(event);\n          reject(new Error(`Put request error while updating ${id} cleanup`));\n        };\n      }\n      store.transaction.commit();\n    };\n    request.onerror = function (event) {\n      logger.error(`Get request error while updating ${id} cleanup`);\n      logger.errorObject(event);\n      reject(new Error(`Get request error while updating ${id} cleanup`));\n    };\n  });\n}\n\nexport async function removePathFromCleanupDataInDatabase(id:number, path:Array<string>) {\n  await updateCleanupInDatabase(id, (value: Cleanup | void) => {\n    if (typeof value === 'undefined') {\n      return;\n    }\n    const { queueId, attempt, startAfter } = value;\n    const data = Object.assign({}, value.data);\n    unset(data, path);\n    return { // eslint-disable-line consistent-return\n      id,\n      queueId,\n      attempt,\n      startAfter,\n      data,\n    };\n  });\n}\n\n\nexport async function updateCleanupValuesInDatabase(id:number, queueId:string, data:Object) {\n  if (typeof id !== 'number') {\n    throw new TypeError(`Unable to update cleanup in database, received invalid \"id\" argument type \"${typeof id}\"`);\n  }\n  if (typeof queueId !== 'string') {\n    throw new TypeError(`Unable to update cleanup in database, received invalid \"queueId\" argument type \"${typeof queueId}\"`);\n  }\n  if (typeof data !== 'object') {\n    throw new TypeError(`Unable to update cleanup in database, received invalid \"data\" argument type \"${typeof data}\"`);\n  }\n  await updateCleanupInDatabase(id, (value: Cleanup | void) => {\n    const combinedData = typeof value === 'undefined' ? data : merge({}, value.data, data);\n    return {\n      id,\n      queueId,\n      attempt: 0,\n      startAfter: Date.now(),\n      data: combinedData,\n    };\n  });\n}\n\nexport async function silentlyRemoveJobFromDatabase(id:number) {\n  const store = await getReadWriteJobsObjectStore();\n  const request = store.delete(id);\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve();\n    };\n    request.onerror = function (event) {\n      logger.error(`Delete request error while removing job ${id} from database`);\n      logger.errorObject(event);\n      reject(new Error(`Delete request error while removing job ${id} from database`));\n    };\n    store.transaction.commit();\n  });\n}\n\nexport async function removeJobFromDatabase(id:number) {\n  const store = await getReadWriteJobsObjectStore();\n  const request = store.get(id);\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      const job = request.result;\n      if (typeof job === 'undefined') {\n        resolve();\n        return;\n      }\n      const { queueId, type } = job;\n      const deleteRequest = store.delete(id);\n      localJobEmitter.emit('jobDelete', id, queueId);\n      jobEmitter.emit('jobDelete', id, queueId);\n      deleteRequest.onsuccess = function () {\n        removeArgLookupsForJobAsMicrotask(id);\n        resolve();\n      };\n      deleteRequest.onerror = function (event) {\n        logger.error(`Delete request error while removing job ${id} in queue ${queueId} with type ${type} from database`);\n        logger.errorObject(event);\n        reject(new Error(`Delete request error while removing job ${id} in queue ${queueId} with type ${type} from database`));\n      };\n      store.transaction.commit();\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while getting ${id} before removing from database`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while getting ${id} before removing from database`));\n    };\n  });\n}\n\nexport async function removeCleanupFromDatabase(id:number) {\n  const store = await getReadWriteCleanupsObjectStore();\n  const request = store.delete(id);\n  return new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve();\n    };\n    request.onerror = function (event) {\n      logger.error(`Error while removing cleanup data for ${id}`);\n      logger.errorObject(event);\n      reject(new Error(`Error while removing cleanup data for ${id}`));\n    };\n    store.transaction.commit();\n  });\n}\n\nexport async function getCleanupFromDatabase(id:number):Promise<Cleanup | void> {\n  const store = await getReadOnlyCleanupsObjectStore();\n  const request = store.get(id);\n  return new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve(request.result);\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while getting ${id}`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while getting ${id}`));\n    };\n    store.transaction.commit();\n  });\n}\n\nexport async function getMetadataFromDatabase(id:string) {\n  const store = await getReadOnlyMetadataObjectStore();\n  const request = store.get(id);\n  const response = await new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve(request.result);\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while getting ${id} metadata`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while getting ${id} metadata`));\n    };\n    store.transaction.commit();\n  });\n  return typeof response !== 'undefined' ? response.metadata : undefined;\n}\n\nexport async function clearMetadataInDatabase(id:string) {\n  const store = await getReadWriteMetadataObjectStore();\n  const request = store.delete(id);\n  return new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve();\n    };\n    request.onerror = function (event) {\n      logger.error(`Error while clearing ${id} metadata`);\n      logger.errorObject(event);\n      reject(new Error(`Error while clearing ${id} metadata`));\n    };\n    store.transaction.commit();\n  });\n}\n\nexport async function setMetadataInDatabase(id:string, metadata:Object) {\n  const store = await getReadWriteMetadataObjectStore();\n  const request = store.put({\n    id,\n    metadata,\n  });\n  return new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve();\n    };\n    request.onerror = function (event) {\n      logger.error(`Error while setting ${id} metadata`);\n      logger.errorObject(event);\n      reject(new Error(`Error while setting ${id} metadata`));\n    };\n    store.transaction.commit();\n  });\n}\n\nexport async function updateMetadataInDatabase(id:string, transform:(Object | void) => Object | void | false):Promise<Object | void> {\n  const store = await getReadWriteMetadataObjectStore();\n  const request = store.get(id);\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      let newValue;\n      const response = request.result;\n      const value = typeof response !== 'undefined' ? response.metadata : undefined;\n      try {\n        newValue = transform(value);\n      } catch (error) {\n        reject(error);\n        return;\n      }\n      if (typeof newValue === 'undefined') {\n        resolve();\n      } else if (newValue === false) {\n        if (typeof value !== 'undefined') {\n          const deleteRequest = store.delete(id);\n          deleteRequest.onsuccess = function () {\n            resolve();\n          };\n          deleteRequest.onerror = function (event) {\n            logger.error(`Delete request error while updating ${id} in metadata database`);\n            logger.errorObject(event);\n            reject(new Error(`Delete request error while updating ${id} in metadata database`));\n          };\n        }\n      } else {\n        const putRequest = store.put({\n          id,\n          metadata: newValue,\n        });\n        putRequest.onsuccess = function () {\n          resolve();\n        };\n        putRequest.onerror = function (event) {\n          logger.error(`Put request error while updating ${id} in metadata database`);\n          logger.errorObject(event);\n          reject(new Error(`Put request error while updating ${id} in metadata database`));\n        };\n      }\n      store.transaction.commit();\n    };\n    request.onerror = function (event) {\n      logger.error(`Get request error while updating ${id} in metadata database`);\n      logger.errorObject(event);\n      reject(new Error(`Get request error while updating ${id} in metadata database`));\n    };\n  });\n}\n\nexport function markJobStatusInDatabase(id:number, status:number) {\n  return updateJobInDatabase(id, (value:Job | void) => {\n    if (typeof value === 'undefined') {\n      throw new JobDoesNotExistError(`Unable to mark job ${id} as status ${status} in database, job does not exist`);\n    }\n    value.status = status; // eslint-disable-line no-param-reassign\n    return value;\n  });\n}\n\nexport function markJobCompleteInDatabase(id:number) {\n  return markJobStatusInDatabase(id, JOB_COMPLETE_STATUS);\n}\n\nexport function markJobPendingInDatabase(id:number) {\n  return markJobStatusInDatabase(id, JOB_PENDING_STATUS);\n}\n\nexport function markJobErrorInDatabase(id:number) {\n  return markJobStatusInDatabase(id, JOB_ERROR_STATUS);\n}\n\nexport function markJobCleanupInDatabase(id:number) {\n  return markJobStatusInDatabase(id, JOB_CLEANUP_STATUS);\n}\n\nexport function markJobAbortedInDatabase(id:number) {\n  return markJobStatusInDatabase(id, JOB_ABORTED_STATUS);\n}\n\nexport async function markJobCompleteThenRemoveFromDatabase(id:number):Promise<void> {\n  const store = await getReadWriteJobsObjectStore();\n  const request = store.get(id);\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      const value = request.result;\n      if (typeof value !== 'undefined') {\n        const { queueId, type } = value;\n        localJobEmitter.emit('jobUpdate', id, queueId, type, JOB_COMPLETE_STATUS);\n        jobEmitter.emit('jobUpdate', id, queueId, type, JOB_COMPLETE_STATUS);\n        const deleteRequest = store.delete(id);\n        deleteRequest.onsuccess = function () {\n          localJobEmitter.emit('jobDelete', id, queueId);\n          jobEmitter.emit('jobDelete', id, queueId);\n          removeArgLookupsForJobAsMicrotask(id);\n          resolve();\n        };\n        deleteRequest.onerror = function (event) {\n          logger.error(`Delete request error while marking job ${id} in queue ${queueId} with type ${type} complete then removing from jobs database`);\n          logger.errorObject(event);\n          reject(new Error(`Delete request error while marking job ${id} in queue ${queueId} with type ${type} complete then removing from jobs database`));\n        };\n      }\n      store.transaction.commit();\n    };\n    request.onerror = function (event) {\n      logger.error(`Get request error while marking job ${id} complete then removing from jobs database`);\n      logger.errorObject(event);\n      reject(new Error(`Get request error while marking job ${id} complete then removing from jobs database`));\n    };\n  });\n}\n\nexport function markJobCleanupAndRemoveInDatabase(id:number) {\n  return updateJobInDatabase(id, (value:Job | void) => {\n    if (typeof value === 'undefined') {\n      throw new JobDoesNotExistError(`Unable to mark job ${id} as status ${JOB_CLEANUP_AND_REMOVE_STATUS} in database, job does not exist`);\n    }\n    if (value.status === JOB_PENDING_STATUS) {\n      return false;\n    }\n    if (value.status === JOB_ABORTED_STATUS) {\n      return false;\n    }\n    value.status = JOB_CLEANUP_AND_REMOVE_STATUS; // eslint-disable-line no-param-reassign\n    return value;\n  });\n}\n\nexport function markJobAsAbortedOrRemoveFromDatabase(id:number) {\n  return updateJobInDatabase(id, (value:Job | void) => {\n    if (typeof value === 'undefined') {\n      return;\n    }\n    if (value.status === JOB_ERROR_STATUS) {\n      value.status = JOB_ABORTED_STATUS; // eslint-disable-line no-param-reassign\n      return value; // eslint-disable-line consistent-return\n    }\n    if (value.status === JOB_CLEANUP_STATUS) {\n      value.status = JOB_ABORTED_STATUS; // eslint-disable-line no-param-reassign\n      return value; // eslint-disable-line consistent-return\n    }\n    if (value.status === JOB_CLEANUP_AND_REMOVE_STATUS) {\n      return false; // eslint-disable-line consistent-return\n    }\n    throw new Error(`Unable to mark job ${id} as aborted or remove after cleanup, unable to handle status ${value.status}`);\n  });\n}\n\nexport function markJobStartAfterInDatabase(id:number, startAfter:number) {\n  return updateJobInDatabase(id, (value:Job | void) => {\n    if (typeof value === 'undefined') {\n      throw new JobDoesNotExistError(`Unable to mark job ${id} start-after time to ${new Date(startAfter).toLocaleString()} in database, job does not exist`);\n    }\n    if (startAfter < value.startAfter) {\n      return;\n    }\n    value.startAfter = startAfter; // eslint-disable-line no-param-reassign\n    return value; // eslint-disable-line consistent-return\n  });\n}\n\nexport function markCleanupStartAfterInDatabase(id:number, startAfter:number) {\n  return updateCleanupInDatabase(id, (value: Cleanup | void) => {\n    if (typeof value === 'undefined') {\n      throw new CleanupDoesNotExistError(`Unable to mark cleanup ${id} start-after time to ${new Date(startAfter).toLocaleString()} in database, cleanup does not exist`);\n    }\n    if (startAfter < value.startAfter) {\n      return;\n    }\n    value.startAfter = startAfter; // eslint-disable-line  no-param-reassign\n    return value; // eslint-disable-line consistent-return\n  });\n}\n\nexport async function markQueueForCleanupInDatabase(queueId:string) {\n  const store = await getReadWriteJobsObjectStore();\n  const index = store.index('queueIdIndex');\n  // $FlowFixMe\n  const request = index.getAll(IDBKeyRange.only(queueId));\n  const jobs = [];\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function (event) {\n      const length = event.target.result.length;\n      let lastRequest;\n      for (let i = 0; i < length; i += 1) {\n        const value = Object.assign({}, event.target.result[i]);\n        switch (value.status) {\n          case JOB_ERROR_STATUS:\n            value.status = JOB_CLEANUP_STATUS;\n            jobs.push(value);\n            break;\n          case JOB_COMPLETE_STATUS:\n            value.status = JOB_CLEANUP_STATUS;\n            jobs.push(value);\n            break;\n          case JOB_PENDING_STATUS:\n            value.status = JOB_ABORTED_STATUS;\n            break;\n          case JOB_CLEANUP_STATUS:\n            jobs.push(value);\n            continue;\n          case JOB_CLEANUP_AND_REMOVE_STATUS:\n            jobs.push(value);\n            continue;\n          case JOB_ABORTED_STATUS:\n            continue;\n          default:\n            logger.warn(`Unhandled job status ${value.status} while marking queue ${queueId} for cleanup`);\n            continue;\n        }\n        const putRequest = store.put(value);\n        localJobEmitter.emit('jobUpdate', value.id, value.queueId, value.type, value.status);\n        jobEmitter.emit('jobUpdate', value.id, value.queueId, value.type, value.status);\n        lastRequest = putRequest;\n        putRequest.onerror = function (event2) {\n          logger.error(`Put request error while marking queue ${queueId} for cleanup`);\n          logger.errorObject(event2);\n          reject(new Error(`Put request error while marking queue ${queueId} for cleanup`));\n        };\n      }\n      if (typeof lastRequest !== 'undefined') {\n        lastRequest.onsuccess = function () {\n          resolve();\n        };\n      } else {\n        resolve();\n      }\n      store.transaction.commit();\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while marking queue ${queueId} for cleanup`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while marking queue ${queueId} for cleanup`));\n    };\n  });\n  return jobs;\n}\n\nexport async function markQueueJobsGreaterThanIdCleanupAndRemoveInDatabase(queueId:string, jobId:number) {\n  const store = await getReadWriteJobsObjectStore();\n  const index = store.index('queueIdIndex');\n  // $FlowFixMe\n  const request = index.getAll(IDBKeyRange.only(queueId));\n  const jobs = [];\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function (event) {\n      const length = event.target.result.length;\n      let lastRequest;\n      for (let i = 0; i < length; i += 1) {\n        const value = Object.assign({}, event.target.result[i]);\n        if (value.id <= jobId) {\n          continue;\n        }\n        let shouldRemove = false;\n        switch (value.status) {\n          case JOB_ERROR_STATUS:\n            value.status = JOB_CLEANUP_AND_REMOVE_STATUS;\n            jobs.push(value);\n            break;\n          case JOB_COMPLETE_STATUS:\n            value.status = JOB_CLEANUP_AND_REMOVE_STATUS;\n            jobs.push(value);\n            break;\n          case JOB_PENDING_STATUS:\n            shouldRemove = true;\n            break;\n          case JOB_CLEANUP_STATUS:\n            value.status = JOB_CLEANUP_AND_REMOVE_STATUS;\n            jobs.push(value);\n            break;\n          case JOB_CLEANUP_AND_REMOVE_STATUS:\n            jobs.push(value);\n            continue;\n          case JOB_ABORTED_STATUS:\n            shouldRemove = true;\n            break;\n          default:\n            logger.warn(`Unhandled job status ${value.status} while marking queue ${queueId} for cleanup and removal`);\n            continue;\n        }\n        const { id, type, status } = value;\n        if (shouldRemove) {\n          const deleteRequest = store.delete(id);\n          localJobEmitter.emit('jobDelete', id, queueId);\n          jobEmitter.emit('jobDelete', id, queueId);\n          lastRequest = deleteRequest;\n          deleteRequest.onerror = function (event2) {\n            logger.error(`Delete request error while marking queue ${queueId} for cleanup and removal`);\n            logger.errorObject(event2);\n            reject(new Error(`Delete request error while marking queue ${queueId} for cleanup and removal`));\n          };\n        } else {\n          const putRequest = store.put(value);\n          localJobEmitter.emit('jobUpdate', id, queueId, type, status);\n          jobEmitter.emit('jobUpdate', id, queueId, type, status);\n          lastRequest = putRequest;\n          putRequest.onerror = function (event2) {\n            logger.error(`Put request error while marking queue ${queueId} for cleanup and removal`);\n            logger.errorObject(event2);\n            reject(new Error(`Put request error while marking queue ${queueId} for cleanup and removal`));\n          };\n        }\n      }\n      if (typeof lastRequest !== 'undefined') {\n        lastRequest.onsuccess = function () {\n          resolve();\n        };\n      } else {\n        resolve();\n      }\n      store.transaction.commit();\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while marking queue ${queueId} for cleanup and removal`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while marking queue ${queueId} for cleanup and removal`));\n    };\n  });\n  return jobs;\n}\n\nexport function markQueueForCleanupAndRemoveInDatabase(queueId:string) {\n  return markQueueJobsGreaterThanIdCleanupAndRemoveInDatabase(queueId, -1);\n}\n\nexport async function markQueueJobsGreaterThanIdPendingInDatabase(queueId:string, jobId:number) {\n  const store = await getReadWriteJobsObjectStore();\n  const index = store.index('queueIdIndex');\n  // $FlowFixMe\n  const request = index.getAll(IDBKeyRange.only(queueId));\n  const jobs = [];\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function (event) {\n      const length = event.target.result.length;\n      let lastRequest;\n      for (let i = 0; i < length; i += 1) {\n        const value = Object.assign({}, event.target.result[i]);\n        if (value.id <= jobId) {\n          continue;\n        }\n        switch (value.status) {\n          case JOB_ERROR_STATUS:\n            value.attempt = 0;\n            jobs.push(value);\n            break;\n          case JOB_COMPLETE_STATUS:\n            continue;\n          case JOB_PENDING_STATUS:\n            value.attempt = 0;\n            jobs.push(value);\n            break;\n          case JOB_CLEANUP_STATUS:\n            value.attempt = 0;\n            jobs.push(value);\n            break;\n          case JOB_CLEANUP_AND_REMOVE_STATUS:\n            jobs.push(value);\n            continue;\n          case JOB_ABORTED_STATUS:\n            value.attempt = 0;\n            value.status = JOB_PENDING_STATUS;\n            jobs.push(value);\n            break;\n          default:\n            logger.warn(`Unhandled job status ${value.status} while marking queue ${queueId} as pending`);\n            continue;\n        }\n        const { id, type, status } = value;\n        const putRequest = store.put(value);\n        localJobEmitter.emit('jobUpdate', id, queueId, type, status);\n        jobEmitter.emit('jobUpdate', id, queueId, type, status);\n        lastRequest = putRequest;\n        putRequest.onerror = function (event2) {\n          logger.error(`Put request error while marking queue ${queueId} as pending`);\n          logger.errorObject(event2);\n          reject(new Error(`Put request error while marking queue ${queueId} as pending`));\n        };\n      }\n      if (typeof lastRequest !== 'undefined') {\n        lastRequest.onsuccess = function () {\n          resolve();\n        };\n      } else {\n        resolve();\n      }\n      store.transaction.commit();\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while marking queue ${queueId} as pending`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while marking queue ${queueId} as pending`));\n    };\n  });\n  return jobs;\n}\n\n\nexport function markQueuePendingInDatabase(queueId:string) {\n  return markQueueJobsGreaterThanIdPendingInDatabase(queueId, -1);\n}\n\nexport async function getGreatestJobIdFromQueueInDatabase(queueId:string) {\n  const store = await getReadOnlyJobsObjectStore();\n  const index = store.index('queueIdIndex');\n  // $FlowFixMe\n  const request = index.openCursor(IDBKeyRange.only(queueId), 'prev');\n  return new Promise((resolve, reject) => {\n    request.onsuccess = function (event) {\n      const cursor = event.target.result;\n      if (cursor) {\n        resolve(cursor.value.id || 0);\n      } else {\n        resolve(0);\n      }\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while getting the greatest job ID in queue ${queueId}`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while getting the greatest job ID in queue ${queueId}`));\n    };\n    store.transaction.commit();\n  });\n}\n\nexport async function incrementJobAttemptInDatabase(id:number) {\n  await updateJobInDatabase(id, (value:Job | void) => {\n    if (typeof value === 'undefined') {\n      throw new JobDoesNotExistError(`Unable to increment attempts for job ${id} in database, job does not exist`);\n    }\n    value.attempt += 1; // eslint-disable-line no-param-reassign\n    return value;\n  });\n}\n\nexport async function incrementCleanupAttemptInDatabase(id:number, queueId:string) {\n  let attempt = 1;\n  await updateCleanupInDatabase(id, (value: Cleanup | void) => {\n    if (typeof value === 'undefined') {\n      return {\n        id,\n        queueId,\n        attempt: 1,\n        startAfter: Date.now(),\n        data: {},\n      };\n    }\n    attempt = value.attempt + 1;\n    value.attempt = attempt; // eslint-disable-line no-param-reassign\n    return value;\n  });\n  return attempt;\n}\n\nexport async function bulkEnqueueToDatabase(queueId: string, items:Array<[string, Array<any>]>, delay: number) { // eslint-disable-line no-underscore-dangle\n  if (typeof queueId !== 'string') {\n    throw new TypeError(`Unable to bulk enqueue in database, received invalid \"queueId\" argument type \"${typeof queueId}\"`);\n  }\n  if (!Array.isArray(items)) {\n    throw new TypeError(`Unable to bulk enqueue in database, received invalid \"items\" argument type \"${typeof items}\"`);\n  }\n  for (let i = 0; i < items.length; i += 1) {\n    const [type, args] = items[i];\n    if (typeof type !== 'string') {\n      throw new TypeError(`Unable to bulk enqueue in database, received invalid items[${i}] \"type\" argument type \"${typeof type}\"`);\n    }\n    if (!Array.isArray(args)) {\n      throw new TypeError(`Unable to bulk enqueue in database, received invalid items[${i}] \"args\" argument type \"${typeof args}\"`);\n    }\n  }\n  if (typeof delay !== 'number') {\n    throw new TypeError(`Unable to bulk enqueue in database, received invalid \"delay\" argument type \"${typeof delay}\"`);\n  }\n  const ids = [];\n  const store = await getReadWriteJobsObjectStore();\n  await new Promise((resolve, reject) => {\n    for (let i = 0; i < items.length; i += 1) {\n      const [type, args] = items[i];\n      const value = {\n        queueId,\n        type,\n        args,\n        attempt: 0,\n        created: Date.now(),\n        status: JOB_PENDING_STATUS,\n        startAfter: Date.now() + delay,\n      };\n      const request = store.put(value);\n      request.onsuccess = function () {\n        const id = request.result;\n        ids.push(request.result);\n        localJobEmitter.emit('jobAdd', id, queueId, type);\n        jobEmitter.emit('jobAdd', id, queueId, type);\n        resolve(request.result);\n      };\n      request.onerror = function (event) {\n        logger.error(`Request error while bulk enqueueing ${items.length} ${items.length === 1 ? 'job' : 'jobs'} in queue ${queueId}`);\n        logger.errorObject(event);\n        reject(new Error(`Request error while bulk enqueueing ${items.length} ${items.length === 1 ? 'job' : 'jobs'} in queue ${queueId}`));\n      };\n    }\n    store.transaction.commit();\n  });\n  return ids;\n}\n\nexport async function enqueueToDatabase(queueId: string, type: string, args: Array<any>, delay: number) { // eslint-disable-line no-underscore-dangle\n  if (typeof queueId !== 'string') {\n    throw new TypeError(`Unable to enqueue in database, received invalid \"queueId\" argument type \"${typeof queueId}\"`);\n  }\n  if (typeof type !== 'string') {\n    throw new TypeError(`Unable to enqueue in database, received invalid \"type\" argument type \"${typeof type}\"`);\n  }\n  if (!Array.isArray(args)) {\n    throw new TypeError(`Unable to enqueue in database, received invalid \"args\" argument type \"${typeof args}\"`);\n  }\n  if (typeof delay !== 'number') {\n    throw new TypeError(`Unable to enqueue in database, received invalid \"delay\" argument type \"${typeof delay}\"`);\n  }\n  const value = {\n    queueId,\n    type,\n    args,\n    attempt: 0,\n    created: Date.now(),\n    status: JOB_PENDING_STATUS,\n    startAfter: Date.now() + delay,\n  };\n  const store = await getReadWriteJobsObjectStore();\n\n  const request = store.put(value);\n  const id = await new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve(request.result);\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while enqueueing ${type} job`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while enqueueing ${type} job`));\n    };\n    store.transaction.commit();\n  });\n  localJobEmitter.emit('jobAdd', id, queueId, type);\n  jobEmitter.emit('jobAdd', id, queueId, type);\n  return id;\n}\n\nexport async function restoreJobToDatabaseForCleanupAndRemove(id:number, queueId: string, type: string, args: Array<any>) { // eslint-disable-line no-underscore-dangle\n  if (typeof id !== 'number') {\n    throw new TypeError(`Unable to restore to database, received invalid \"id\" argument type \"${typeof id}\"`);\n  }\n  if (typeof queueId !== 'string') {\n    throw new TypeError(`Unable to restore to database, received invalid \"queueId\" argument type \"${typeof queueId}\"`);\n  }\n  if (typeof type !== 'string') {\n    throw new TypeError(`Unable to restore to database, received invalid \"type\" argument type \"${typeof type}\"`);\n  }\n  if (!Array.isArray(args)) {\n    throw new TypeError(`Unable to restore to database, received invalid \"args\" argument type \"${typeof args}\"`);\n  }\n  const value = {\n    id,\n    queueId,\n    type,\n    args,\n    attempt: 1,\n    created: Date.now(),\n    status: JOB_CLEANUP_AND_REMOVE_STATUS,\n    startAfter: Date.now(),\n  };\n  const store = await getReadWriteJobsObjectStore();\n  const request = store.put(value);\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve(request.result);\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while enqueueing ${type} job`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while enqueueing ${type} job`));\n    };\n    store.transaction.commit();\n  });\n  localJobEmitter.emit('jobAdd', id, queueId, type);\n  jobEmitter.emit('jobAdd', id, queueId, type);\n  return id;\n}\n\nexport async function dequeueFromDatabase():Promise<Array<Job>> { // eslint-disable-line no-underscore-dangle\n  const store = await getReadOnlyJobsObjectStore();\n  const index = store.index('statusIndex');\n  // $FlowFixMe\n  const request = index.getAll(IDBKeyRange.bound(JOB_CLEANUP_AND_REMOVE_STATUS, JOB_PENDING_STATUS));\n  const jobs = await new Promise((resolve, reject) => {\n    request.onsuccess = function (event) {\n      resolve(event.target.result);\n    };\n    request.onerror = function (event) {\n      logger.error('Request error while dequeing');\n      logger.errorObject(event);\n      reject(new Error('Request error while dequeing'));\n    };\n    store.transaction.commit();\n  });\n  return jobs;\n}\n\nexport function getContiguousIds(ids:Array<number>) {\n  ids.sort((a, b) => a - b);\n  const points = [[0, ids[0] - 1]];\n  for (let i = 0; i < ids.length; i += 1) {\n    if (ids[i] + 1 !== ids[i + 1]) {\n      if (i + 1 >= ids.length) {\n        points.push([ids[i] + 1, Infinity]);\n      } else {\n        points.push([ids[i] + 1, ids[i + 1] - 1]);\n      }\n    }\n  }\n  return points;\n}\n\nexport async function dequeueFromDatabaseNotIn(ids:Array<number>):Promise<Array<Job>> { // eslint-disable-line no-underscore-dangle\n  if (ids.length === 0) {\n    return dequeueFromDatabase();\n  }\n  const [store, promise] = await getReadOnlyJobsObjectStoreAndTransactionPromise();\n  const index = store.index('statusIndex');\n  const jobs = [];\n  // $FlowFixMe\n  const request = index.getAllKeys(IDBKeyRange.bound(JOB_CLEANUP_AND_REMOVE_STATUS, JOB_PENDING_STATUS));\n  request.onsuccess = function (event) {\n    for (const id of event.target.result) {\n      if (ids.includes(id)) {\n        continue;\n      }\n      const getRequest = store.get(id);\n      getRequest.onsuccess = function () {\n        jobs.push(getRequest.result);\n      };\n      getRequest.onerror = function (event2) {\n        logger.error(`Request error while getting job ${id}`);\n        logger.errorObject(event2);\n      };\n    }\n    store.transaction.commit();\n  };\n  request.onerror = function (event) {\n    logger.error('Request error while dequeing');\n    logger.errorObject(event);\n  };\n  await promise;\n  return jobs;\n}\n\nexport async function getJobsWithTypeFromDatabase(type:string):Promise<Array<Job>> {\n  const store = await getReadOnlyJobsObjectStore();\n  const index = store.index('typeIndex');\n  // $FlowFixMe\n  const request = index.getAll(IDBKeyRange.only(type));\n  return new Promise((resolve, reject) => {\n    request.onsuccess = function (event) {\n      resolve(event.target.result);\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while getting jobs with type ${type} from jobs database`);\n      logger.errorObject(event);\n      reject(new Error(`Error while getting jobs with type ${type} from jobs database`));\n    };\n    store.transaction.commit();\n  });\n}\n\nexport async function getJobsInQueueFromDatabase(queueId: string):Promise<Array<Job>> { // eslint-disable-line no-underscore-dangle\n  if (typeof queueId !== 'string') {\n    throw new TypeError(`Unable to get jobs in queue from database, received invalid \"queueId\" argument type \"${typeof queueId}\"`);\n  }\n  const store = await getReadOnlyJobsObjectStore();\n  const index = store.index('queueIdIndex');\n  // $FlowFixMe\n  const request = index.getAll(IDBKeyRange.only(queueId));\n  const jobs = await new Promise((resolve, reject) => {\n    request.onsuccess = function (event) {\n      resolve(event.target.result);\n    };\n    request.onerror = function (event) {\n      logger.error('Request error while dequeing');\n      logger.errorObject(event);\n      reject(new Error('Request error while dequeing'));\n    };\n    store.transaction.commit();\n  });\n  return jobs;\n}\n\nexport async function getJobsInDatabase(jobIds: Array<number>):Promise<Array<Job>> { // eslint-disable-line no-underscore-dangle\n  if (!Array.isArray(jobIds)) {\n    throw new TypeError(`Unable to get jobs from database, received invalid \"jobIds\" argument type \"${typeof jobIds}\"`);\n  }\n  const [store, promise] = await getReadOnlyJobsObjectStoreAndTransactionPromise();\n  const jobs = [];\n  for (const jobId of jobIds) {\n    const request = store.get(jobId);\n    request.onsuccess = function () {\n      if (typeof request.result !== 'undefined') {\n        jobs.push(request.result);\n      }\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while getting job ${jobId}`);\n      logger.errorObject(event);\n    };\n  }\n  store.transaction.commit();\n  await promise;\n  return jobs;\n}\n\nexport async function getCompletedJobsCountFromDatabase(queueId: string) { // eslint-disable-line no-underscore-dangle\n  const jobs = await getCompletedJobsFromDatabase(queueId);\n  return jobs.length;\n}\n\n\nexport async function getCompletedJobsFromDatabase(queueId: string):Promise<Array<Job>> { // eslint-disable-line no-underscore-dangle\n  if (typeof queueId !== 'string') {\n    throw new TypeError(`Unable to get completed jobs database, received invalid \"queueId\" argument type \"${typeof queueId}\"`);\n  }\n  const store = await getReadOnlyJobsObjectStore();\n  const index = store.index('statusQueueIdIndex');\n  // $FlowFixMe\n  const request = index.getAll(IDBKeyRange.only([queueId, JOB_COMPLETE_STATUS]));\n  const jobs = await new Promise((resolve, reject) => {\n    request.onsuccess = function (event) {\n      resolve(event.target.result);\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while getting completed jobs for queue ${queueId}`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while getting completed jobs for queue ${queueId}`));\n    };\n    store.transaction.commit();\n  });\n  return jobs;\n}\n\n\nexport async function storeAuthDataInDatabase(id:string, data: Object) { // eslint-disable-line no-underscore-dangle\n  if (typeof id !== 'string') {\n    throw new TypeError(`Unable to store auth data in database, received invalid \"id\" argument type \"${typeof id}\"`);\n  }\n  if (typeof data !== 'object') {\n    throw new TypeError(`Unable to store auth data in database, received invalid \"data\" argument type \"${typeof data}\"`);\n  }\n  const store = await getReadWriteAuthObjectStore();\n  const request = store.put({ id, data });\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve();\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while storing auth data for ${id}`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while storing auth data for ${id}`));\n    };\n    store.transaction.commit();\n  });\n}\n\nexport async function getAuthDataFromDatabase(id:string) {\n  if (typeof id !== 'string') {\n    throw new TypeError(`Unable to store auth data in database, received invalid \"id\" argument type \"${typeof id}\"`);\n  }\n  const store = await getReadOnlyAuthObjectStore();\n  const request = store.get(id);\n  const authData = await new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve(request.result);\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while getting auth data for ${id}`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while getting auth data for ${id}`));\n    };\n    store.transaction.commit();\n  });\n  return typeof authData !== 'undefined' ? authData.data : undefined;\n}\n\nexport async function removeAuthDataFromDatabase(id:string) {\n  if (typeof id !== 'string') {\n    throw new TypeError(`Unable to store auth data in database, received invalid \"id\" argument type \"${typeof id}\"`);\n  }\n  const store = await getReadWriteAuthObjectStore();\n  const request = store.delete(id);\n  return new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve();\n    };\n    request.onerror = function (event) {\n      logger.error(`Error while removing auth data for ${id}`);\n      logger.errorObject(event);\n      reject(new Error(`Error while removing auth data for ${id}`));\n    };\n    store.transaction.commit();\n  });\n}\n\nexport async function getQueueStatus(queueId:string) {\n  const store = await getReadOnlyJobsObjectStore();\n  const index = store.index('statusQueueIdIndex');\n  // $FlowFixMe\n  const abortedRequest = index.getAllKeys(IDBKeyRange.only([queueId, JOB_ABORTED_STATUS]));\n  // $FlowFixMe\n  const completeRequest = index.getAllKeys(IDBKeyRange.only([queueId, JOB_COMPLETE_STATUS]));\n  // $FlowFixMe\n  const pendingRequest = index.getAllKeys(IDBKeyRange.only([queueId, JOB_PENDING_STATUS]));\n  // $FlowFixMe\n  const errorRequest = index.getAllKeys(IDBKeyRange.only([queueId, JOB_ERROR_STATUS]));\n  // $FlowFixMe\n  const cleanupRequest = index.getAllKeys(IDBKeyRange.only([queueId, JOB_CLEANUP_STATUS]));\n  // $FlowFixMe\n  const cleanupAndRemoveRequest = index.getAllKeys(IDBKeyRange.only([queueId, JOB_CLEANUP_AND_REMOVE_STATUS]));\n  const abortedCountPromise = new Promise((resolve, reject) => {\n    abortedRequest.onsuccess = function (event) {\n      resolve(event.target.result.length);\n    };\n    abortedRequest.onerror = function (event) {\n      logger.error(`Request error while getting status of queue ${queueId}`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while getting status of queue ${queueId}`));\n    };\n  });\n  const completeCountPromise = new Promise((resolve, reject) => {\n    completeRequest.onsuccess = function (event) {\n      resolve(event.target.result.length);\n    };\n    completeRequest.onerror = function (event) {\n      logger.error(`Request error while getting status of queue ${queueId}`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while getting status of queue ${queueId}`));\n    };\n  });\n  const pendingCountPromise = new Promise((resolve, reject) => {\n    pendingRequest.onsuccess = function (event) {\n      resolve(event.target.result.length);\n    };\n    pendingRequest.onerror = function (event) {\n      logger.error(`Request error while getting status of queue ${queueId}`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while getting status of queue ${queueId}`));\n    };\n  });\n  const errorCountPromise = new Promise((resolve, reject) => {\n    errorRequest.onsuccess = function (event) {\n      resolve(event.target.result.length);\n    };\n    errorRequest.onerror = function (event) {\n      logger.error(`Request error while getting status of queue ${queueId}`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while getting status of queue ${queueId}`));\n    };\n  });\n  const cleanupCountPromise = new Promise((resolve, reject) => {\n    cleanupRequest.onsuccess = function (event) {\n      resolve(event.target.result.length);\n    };\n    cleanupRequest.onerror = function (event) {\n      logger.error(`Request error while getting status of queue ${queueId}`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while getting status of queue ${queueId}`));\n    };\n  });\n  const cleanupAndRemoveCountPromise = new Promise((resolve, reject) => {\n    cleanupAndRemoveRequest.onsuccess = function (event) {\n      resolve(event.target.result.length);\n    };\n    cleanupAndRemoveRequest.onerror = function (event) {\n      logger.error(`Request error while getting status of queue ${queueId}`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while getting status of queue ${queueId}`));\n    };\n  });\n  store.transaction.commit();\n  const [\n    abortedCount,\n    completeCount,\n    pendingCount,\n    errorCount,\n    cleanupCount,\n    cleanupAndRemoveCount,\n  ] = await Promise.all([\n    abortedCountPromise,\n    completeCountPromise,\n    pendingCountPromise,\n    errorCountPromise,\n    cleanupCountPromise,\n    cleanupAndRemoveCountPromise,\n  ]);\n  if (abortedCount > 0 || cleanupCount > 0) {\n    return QUEUE_ERROR_STATUS;\n  }\n  if (errorCount > 0 || pendingCount > 0 || cleanupAndRemoveCount > 0) {\n    return QUEUE_PENDING_STATUS;\n  }\n  if (completeCount > 0) {\n    return QUEUE_COMPLETE_STATUS;\n  }\n  return QUEUE_EMPTY_STATUS;\n}\n\nexport async function addArgLookup(jobId:number, key:string, jsonPath:string) {\n  if (typeof jobId !== 'number') {\n    throw new TypeError(`Unable add argument lookup, received invalid \"jobId\" argument type \"${typeof jobId}\"`);\n  }\n  if (typeof key !== 'string') {\n    throw new TypeError(`Unable add argument lookup, received invalid \"key\" argument type \"${typeof key}\"`);\n  }\n  if (typeof jsonPath !== 'string') {\n    throw new TypeError(`Unable add argument lookup, received invalid \"jsonPath\" argument type \"${typeof jsonPath}\"`);\n  }\n  const store = await getReadWriteArgLookupObjectStore();\n  const request = store.put({\n    jobId,\n    key,\n    jsonPath,\n  });\n  return new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve();\n    };\n    request.onerror = function (event) {\n      logger.error(`Error while adding argument lookup for job ${jobId} with key \"${key}\" and JSON path \"${jsonPath}\"`);\n      logger.errorObject(event);\n      reject(new Error(`Error while adding argument lookup for job ${jobId} with key \"${key}\" and JSON path \"${jsonPath}\"`));\n    };\n    store.transaction.commit();\n  });\n}\n\nexport async function getArgLookupJobPathMap(key:string) {\n  if (typeof key !== 'string') {\n    throw new TypeError(`Unable to lookup arguments, received invalid \"key\" argument type \"${typeof key}\"`);\n  }\n  const store = await getReadOnlyArgLookupObjectStore();\n  const index = store.index('keyIndex');\n  // $FlowFixMe\n  const request = index.getAll(IDBKeyRange.only(key));\n  return new Promise((resolve, reject) => {\n    request.onsuccess = function (event) {\n      const map: Map<number, string> = new Map(event.target.result.map((x) => [x.jobId, x.jsonPath]));\n      resolve(map);\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error looking up arguments for key ${key}`);\n      logger.errorObject(event);\n      reject(new Error(`Request error looking up arguments for key ${key}`));\n    };\n    store.transaction.commit();\n  });\n}\n\n\nexport async function markJobsWithArgLookupKeyCleanupAndRemoveInDatabase(key:string) {\n  if (typeof key !== 'string') {\n    throw new TypeError(`Unable to lookup arguments, received invalid \"key\" argument type \"${typeof key}\"`);\n  }\n  const store = await getReadOnlyArgLookupObjectStore();\n  const index = store.index('keyIndex');\n  // $FlowFixMe\n  const request = index.getAll(IDBKeyRange.only(key));\n  const jobIds = await new Promise((resolve, reject) => {\n    request.onsuccess = function (event) {\n      resolve(uniq(event.target.result.map((x) => x.jobId)));\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error looking up arguments for key ${key}`);\n      logger.errorObject(event);\n      reject(new Error(`Request error looking up arguments for key ${key}`));\n    };\n    store.transaction.commit();\n  });\n  await Promise.all(jobIds.map(markJobCleanupAndRemoveInDatabase));\n}\n\nexport async function lookupArgs(key:string) {\n  const database = await databasePromise;\n  const transaction = database.transaction(['arg-lookup', 'jobs'], 'readonly', { durability: 'relaxed' });\n  const argLookupObjectStore = transaction.objectStore('arg-lookup');\n  transaction.onabort = (event) => {\n    logger.error('Read-only lookupArgs transaction was aborted');\n    logger.errorObject(event);\n  };\n  transaction.onerror = (event) => {\n    logger.error('Error in read-only lookupArgs transaction');\n    logger.errorObject(event);\n  };\n  const argLookupIndex = argLookupObjectStore.index('keyIndex');\n  // $FlowFixMe\n  const argLookupRequest = argLookupIndex.getAll(IDBKeyRange.only(key));\n  const results = [];\n  return new Promise((resolve, reject) => {\n    argLookupRequest.onsuccess = function (argLookupEvent) {\n      const argLookups = argLookupEvent.target.result;\n      if (argLookups.length === 0) {\n        resolve([]);\n        transaction.commit();\n        return;\n      }\n      const jobsObjectStore = transaction.objectStore('jobs');\n      for (let i = 0; i < argLookups.length; i += 1) {\n        const { jobId, jsonPath } = argLookups[i];\n        const jobRequest = jobsObjectStore.get(jobId);\n        jobRequest.onsuccess = function () {\n          if (typeof jobRequest.result === 'undefined') {\n            return;\n          }\n          const { args } = jobRequest.result;\n          for (const result of JSONPath({ path: jsonPath, json: args })) {\n            results.push(result);\n          }\n          if (i === argLookups.length - 1) {\n            resolve(results);\n          }\n        };\n        jobRequest.onerror = function (event) {\n          logger.error(`Request error while getting job ${jobId}`);\n          logger.errorObject(event);\n          reject(new Error(`Request error looking up jobs for key ${key}`));\n        };\n      }\n      transaction.commit();\n    };\n    argLookupRequest.onerror = function (event) {\n      logger.error(`Request error looking up arguments for key ${key}`);\n      logger.errorObject(event);\n      reject(new Error(`Request error looking up arguments for key ${key}`));\n    };\n  });\n}\n\nexport async function lookupArg(key:string) {\n  const results = await lookupArgs(key);\n  return results[0];\n}\n\nfunction removeArgLookupsForJobAsMicrotask(jobId:number) {\n  self.queueMicrotask(() => removeArgLookupsForJob(jobId).catch((error) => {\n    logger.error(`Unable to remove argument lookups for job ${jobId} in microtask`);\n    logger.errorStack(error);\n  }));\n}\n\nexport async function removeArgLookupsForJob(jobId:number) {\n  const [store, promise] = await getReadWriteArgLookupObjectStoreAndTransactionPromise();\n  const index = store.index('jobIdIndex');\n  // $FlowFixMe\n  const request = index.getAllKeys(IDBKeyRange.only(jobId));\n  request.onsuccess = function (event) {\n    for (const id of event.target.result) {\n      const deleteRequest = store.delete(id);\n      deleteRequest.onerror = function (deleteEvent) {\n        logger.error(`Delete request error while removing argument lookups for job ${jobId}`);\n        logger.errorObject(deleteEvent);\n      };\n    }\n    store.transaction.commit();\n  };\n  request.onerror = function (event) {\n    logger.error(`Request error while removing argument lookups for job ${jobId}`);\n    logger.errorObject(event);\n  };\n  await promise;\n}\n\nconst UNLOAD_DATA_ID = '_UNLOAD_DATA';\n\nexport function updateUnloadDataInDatabase(transform:(Object | void) => Object | void | false):Promise<Object | void> {\n  return updateMetadataInDatabase(UNLOAD_DATA_ID, transform);\n}\n\nexport function getUnloadDataFromDatabase() {\n  return getMetadataFromDatabase(UNLOAD_DATA_ID);\n}\n\nexport function clearUnloadDataInDatabase() {\n  return clearMetadataInDatabase(UNLOAD_DATA_ID);\n}\n\n"],"file":"database.js"}