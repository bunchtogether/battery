{"version":3,"sources":["../../src/database.js"],"names":["logger","JOB_ABORTED_STATUS","JOB_COMPLETE_STATUS","JOB_PENDING_STATUS","JOB_ERROR_STATUS","JOB_CLEANUP_STATUS","databasePromise","request","self","indexedDB","open","onupgradeneeded","e","store","target","result","createObjectStore","keyPath","autoIncrement","createIndex","unique","error","name","Promise","resolve","reject","onerror","Error","onsuccess","event","db","getReadWriteAuthObjectStore","database","transaction","objectStore","onabort","errorObject","getReadOnlyAuthObjectStore","getReadWriteQueueDataObjectStore","getReadOnlyQueueDataObjectStore","getReadWriteJobsObjectStore","getReadOnlyJobsObjectStore","getReadWriteCleanupsObjectStore","getReadOnlyCleanupsObjectStore","clearQueueDataDatabase","clear","clearJobsDatabase","clearCleanupsDatabase","clearDatabase","removeJobsWithQueueIdAndTypeFromDatabase","queueId","type","index","openCursor","IDBKeyRange","only","cursor","delete","primaryKey","continue","removeQueueIdFromJobsDatabase","removeQueueIdFromCleanupsDatabase","removeQueueIdFromDatabase","removeCompletedExpiredItemsFromDatabase","maxAge","bound","Date","now","queueIds","Set","add","value","getJobFromDatabase","id","get","removePathFromCleanupDataInDatabase","path","getCleanupFromDatabase","put","data","Array","isArray","join","updateCleanupInDatabase","removeCleanupFromDatabase","cleanupData","undefined","getQueueDataFromDatabase","queueData","updateQueueDataInDatabase","markJobStatusInDatabase","status","markJobCompleteInDatabase","markJobPendingInDatabase","markJobErrorInDatabase","markJobCleanupInDatabase","markJobAbortedInDatabase","markQueueForCleanupInDatabase","Object","assign","warn","updateRequest","update","event2","decrementAttemptsRemainingInDatabase","attemptsRemaining","bulkEnqueueToDatabase","items","delay","i","args","maxAttempts","created","startAfter","length","enqueueToDatabase","dequeueFromDatabase","jobs","push","getCompletedJobsCountFromDatabase","getCompletedJobsFromDatabase","storeAuthDataInDatabase","getAuthDataFromDatabase","teamId","removeAuthDataFromDatabase"],"mappings":"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","sourcesContent":["// @flow\n\nimport merge from 'lodash/merge';\nimport unset from 'lodash/unset';\nimport makeLogger from './logger';\n\nconst logger = makeLogger('Jobs Database');\n\ntype Job = {\n  id: number,\n  queueId:string,\n  type:string,\n  args:Array<any>,\n  attemptsRemaining: number,\n  created: number,\n  status: number,\n  startAfter: number\n}\n\nexport const JOB_ABORTED_STATUS = 2;\nexport const JOB_COMPLETE_STATUS = 1;\nexport const JOB_PENDING_STATUS = 0;\nexport const JOB_ERROR_STATUS = -1;\nexport const JOB_CLEANUP_STATUS = -2;\n\nexport const databasePromise = (async () => {\n  const request = self.indexedDB.open('battery-queue', 1);\n\n  request.onupgradeneeded = function (e) {\n    try {\n      const store = e.target.result.createObjectStore('jobs', { keyPath: 'id', autoIncrement: true });\n      store.createIndex('statusIndex', 'status', { unique: false });\n      store.createIndex('queueIdIndex', 'queueId', { unique: false });\n      store.createIndex('queueIdTypeIndex', ['queueId', 'type'], { unique: false });\n      store.createIndex('statusQueueIdIndex', ['queueId', 'status'], { unique: false });\n      store.createIndex('statusCreatedIndex', ['status', 'created'], { unique: false });\n    } catch (error) {\n      if (!(error.name === 'ConstraintError')) {\n        throw error;\n      }\n    }\n    try {\n      e.target.result.createObjectStore('queue-data', { keyPath: 'queueId' });\n    } catch (error) {\n      if (!(error.name === 'ConstraintError')) {\n        throw error;\n      }\n    }\n    try {\n      const store = e.target.result.createObjectStore('cleanups', { keyPath: 'id' });\n      store.createIndex('queueIdIndex', 'queueId', { unique: false });\n    } catch (error) {\n      if (!(error.name === 'ConstraintError')) {\n        throw error;\n      }\n    }\n    try {\n      e.target.result.createObjectStore('auth', { keyPath: 'teamId' });\n    } catch (error) {\n      if (!(error.name === 'ConstraintError')) {\n        throw error;\n      }\n    }\n  };\n\n  const db = await new Promise((resolve, reject) => {\n    request.onerror = () => {\n      reject(new Error('Unable to open database'));\n    };\n    request.onsuccess = function (event) {\n      resolve(event.target.result);\n    };\n  });\n\n  return db;\n})();\n\nasync function getReadWriteAuthObjectStore() {\n  const database = await databasePromise;\n  const transaction = database.transaction(['auth'], 'readwrite');\n  const objectStore = transaction.objectStore('auth');\n  transaction.onabort = (event) => {\n    logger.error('Read-write auth transaction was aborted');\n    logger.errorObject(event);\n  };\n  transaction.onerror = (event) => {\n    logger.error('Error in read-write auth transaction');\n    logger.errorObject(event);\n  };\n  return objectStore;\n}\n\nasync function getReadOnlyAuthObjectStore() {\n  const database = await databasePromise;\n  const transaction = database.transaction(['auth'], 'readonly');\n  const objectStore = transaction.objectStore('auth');\n  transaction.onabort = (event) => {\n    logger.error('Read-only auth transaction was aborted');\n    logger.errorObject(event);\n  };\n  transaction.onerror = (event) => {\n    logger.error('Error in read-only auth transaction');\n    logger.errorObject(event);\n  };\n  return objectStore;\n}\n\nasync function getReadWriteQueueDataObjectStore() {\n  const database = await databasePromise;\n  const transaction = database.transaction(['queue-data'], 'readwrite');\n  const objectStore = transaction.objectStore('queue-data');\n  transaction.onabort = (event) => {\n    logger.error('Read-write queue data transaction was aborted');\n    logger.errorObject(event);\n  };\n  transaction.onerror = (event) => {\n    logger.error('Error in read-write queue data transaction');\n    logger.errorObject(event);\n  };\n  return objectStore;\n}\n\nasync function getReadOnlyQueueDataObjectStore() {\n  const database = await databasePromise;\n  const transaction = database.transaction(['queue-data'], 'readonly');\n  const objectStore = transaction.objectStore('queue-data');\n  transaction.onabort = (event) => {\n    logger.error('Read-only queue data transaction was aborted');\n    logger.errorObject(event);\n  };\n  transaction.onerror = (event) => {\n    logger.error('Error in read-only queue data transaction');\n    logger.errorObject(event);\n  };\n  return objectStore;\n}\n\nasync function getReadWriteJobsObjectStore() {\n  const database = await databasePromise;\n  const transaction = database.transaction(['jobs'], 'readwrite');\n  const objectStore = transaction.objectStore('jobs');\n  transaction.onabort = (event) => {\n    logger.error('Read-write jobs transaction was aborted');\n    logger.errorObject(event);\n  };\n  transaction.onerror = (event) => {\n    logger.error('Error in read-write jobs transaction');\n    logger.errorObject(event);\n  };\n  return objectStore;\n}\n\nasync function getReadOnlyJobsObjectStore() {\n  const database = await databasePromise;\n  const transaction = database.transaction(['jobs'], 'readonly');\n  const objectStore = transaction.objectStore('jobs');\n  transaction.onabort = (event) => {\n    logger.error('Read-only jobs transaction was aborted');\n    logger.errorObject(event);\n  };\n  transaction.onerror = (event) => {\n    logger.error('Error in read-only jobs transaction');\n    logger.errorObject(event);\n  };\n  return objectStore;\n}\n\nasync function getReadWriteCleanupsObjectStore() {\n  const database = await databasePromise;\n  const transaction = database.transaction(['cleanups'], 'readwrite');\n  const objectStore = transaction.objectStore('cleanups');\n  transaction.onabort = (event) => {\n    logger.error('Read-write cleanups transaction was aborted');\n    logger.errorObject(event);\n  };\n  transaction.onerror = (event) => {\n    logger.error('Error in read-write cleanups transaction');\n    logger.errorObject(event);\n  };\n  return objectStore;\n}\n\nasync function getReadOnlyCleanupsObjectStore() {\n  const database = await databasePromise;\n  const transaction = database.transaction(['cleanups'], 'readonly');\n  const objectStore = transaction.objectStore('cleanups');\n  transaction.onabort = (event) => {\n    logger.error('Read-only cleanups transaction was aborted');\n    logger.errorObject(event);\n  };\n  transaction.onerror = (event) => {\n    logger.error('Error in read-only cleanups transaction');\n    logger.errorObject(event);\n  };\n  return objectStore;\n}\n\nasync function clearQueueDataDatabase() {\n  const store = await getReadWriteQueueDataObjectStore();\n  const request = store.clear();\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve();\n    };\n    request.onerror = function (event) {\n      logger.error('Error while clearing queue data database');\n      logger.errorObject(event);\n      reject(new Error('Error while clearing queue data database'));\n    };\n  });\n}\n\nasync function clearJobsDatabase() {\n  const store = await getReadWriteJobsObjectStore();\n  const request = store.clear();\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve();\n    };\n    request.onerror = function (event) {\n      logger.error('Error while clearing jobs database');\n      logger.errorObject(event);\n      reject(new Error('Error while clearing jobs database'));\n    };\n  });\n}\n\nasync function clearCleanupsDatabase() {\n  const store = await getReadWriteCleanupsObjectStore();\n  const request = store.clear();\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve();\n    };\n    request.onerror = function (event) {\n      logger.error('Error while clearing cleanups database');\n      logger.errorObject(event);\n      reject(new Error('Error while clearing cleanups database'));\n    };\n  });\n}\n\nexport async function clearDatabase() {\n  await clearJobsDatabase();\n  await clearCleanupsDatabase();\n  await clearQueueDataDatabase();\n}\n\nexport async function removeJobsWithQueueIdAndTypeFromDatabase(queueId:string, type:string) {\n  const store = await getReadWriteJobsObjectStore();\n  const index = store.index('queueIdTypeIndex');\n  // $FlowFixMe\n  const request = index.openCursor(IDBKeyRange.only([queueId, type]));\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function (event) {\n      const cursor = event.target.result;\n      if (cursor) {\n        store.delete(cursor.primaryKey);\n        cursor.continue();\n      } else {\n        resolve();\n      }\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while removing jobs with queue ${queueId} and type ${type} from jobs database`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while removing jobs with queue ${queueId} and type ${type} from jobs database`));\n    };\n  });\n}\n\nasync function removeQueueIdFromJobsDatabase(queueId:string) {\n  const store = await getReadWriteJobsObjectStore();\n  const index = store.index('queueIdIndex');\n  // $FlowFixMe\n  const request = index.openCursor(IDBKeyRange.only(queueId));\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function (event) {\n      const cursor = event.target.result;\n      if (cursor) {\n        store.delete(cursor.primaryKey);\n        cursor.continue();\n      } else {\n        resolve();\n      }\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while removing queue ${queueId} from jobs database`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while removing queue ${queueId} from jobs database`));\n    };\n  });\n}\n\nasync function removeQueueIdFromCleanupsDatabase(queueId:string) {\n  const store = await getReadWriteCleanupsObjectStore();\n  const index = store.index('queueIdIndex');\n  // $FlowFixMe\n  const request = index.openCursor(IDBKeyRange.only(queueId));\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function (event) {\n      const cursor = event.target.result;\n      if (cursor) {\n        store.delete(cursor.primaryKey);\n        cursor.continue();\n      } else {\n        resolve();\n      }\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while removing queue ${queueId} from jobs database`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while removing queue ${queueId} from jobs database`));\n    };\n  });\n}\n\nexport async function removeQueueIdFromDatabase(queueId:string) {\n  await removeQueueIdFromJobsDatabase(queueId);\n  await removeQueueIdFromCleanupsDatabase(queueId);\n}\n\nexport async function removeCompletedExpiredItemsFromDatabase(maxAge:number) {\n  const store = await getReadWriteJobsObjectStore();\n  const index = store.index('statusCreatedIndex');\n  // $FlowFixMe\n  const request = index.openCursor(IDBKeyRange.bound([JOB_COMPLETE_STATUS, 0], [JOB_COMPLETE_STATUS, Date.now() - maxAge]));\n  const queueIds = new Set();\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function (event) {\n      const cursor = event.target.result;\n      if (cursor) {\n        queueIds.add(cursor.value.queueId);\n        store.delete(cursor.primaryKey);\n        cursor.continue();\n      } else {\n        resolve();\n      }\n    };\n    request.onerror = function (event) {\n      logger.error('Request error while removing completed exired items from jobs database');\n      logger.errorObject(event);\n      reject(new Error('Request error while removing completed exired items from jobs database'));\n    };\n  });\n  for (const queueId of queueIds) {\n    await removeQueueIdFromDatabase(queueId);\n  }\n}\n\nexport async function getJobFromDatabase(id:number):Promise<Job | void> {\n  const store = await getReadOnlyJobsObjectStore();\n  const request = store.get(id);\n  return new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve(request.result);\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while getting ${id}`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while getting ${id}`));\n    };\n  });\n}\n\nexport async function removePathFromCleanupDataInDatabase(id:number, queueId:string, path:Array<string>) {\n  const value = await getCleanupFromDatabase(id);\n  const store = await getReadWriteCleanupsObjectStore();\n  const request = store.put({\n    id,\n    queueId,\n    data: unset(value || {}, path),\n  });\n  return new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve();\n    };\n    request.onerror = function (event) {\n      logger.error(`Error while removing path ${Array.isArray(path) ? path.join('.') : path} from cleanup data for ${id} in queue ${queueId}`);\n      logger.errorObject(event);\n      reject(new Error(`Error while removing path ${Array.isArray(path) ? path.join('.') : path} from cleanup data for ${id} in queue ${queueId}`));\n    };\n  });\n}\n\nexport async function updateCleanupInDatabase(id:number, queueId:string, data:Object) {\n  const value = await getCleanupFromDatabase(id);\n  const store = await getReadWriteCleanupsObjectStore();\n  const request = store.put({\n    id,\n    queueId,\n    data: merge({}, value, data),\n  });\n  return new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve();\n    };\n    request.onerror = function (event) {\n      logger.error(`Error while updating cleanup data for ${id}`);\n      logger.errorObject(event);\n      reject(new Error(`Error while updating cleanup data for ${id}`));\n    };\n  });\n}\n\nexport async function removeCleanupFromDatabase(id:number) {\n  const store = await getReadWriteCleanupsObjectStore();\n  const request = store.delete(id);\n  return new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve();\n    };\n    request.onerror = function (event) {\n      logger.error(`Error while removing cleanup data for ${id}`);\n      logger.errorObject(event);\n      reject(new Error(`Error while removing cleanup data for ${id}`));\n    };\n  });\n}\n\nexport async function getCleanupFromDatabase(id:number) {\n  const store = await getReadOnlyCleanupsObjectStore();\n  const request = store.get(id);\n  const cleanupData = await new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve(request.result);\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while getting ${id}`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while getting ${id}`));\n    };\n  });\n  return typeof cleanupData !== 'undefined' ? cleanupData.data : undefined;\n}\n\nexport async function getQueueDataFromDatabase(queueId:string) {\n  const store = await getReadOnlyQueueDataObjectStore();\n  const request = store.get(queueId);\n  const queueData = await new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve(request.result);\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while getting queue ${queueId} data`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while getting queue ${queueId} data`));\n    };\n  });\n  return typeof queueData !== 'undefined' ? queueData.data : undefined;\n}\n\nexport async function updateQueueDataInDatabase(queueId:string, data:Object) {\n  const value = await getQueueDataFromDatabase(queueId);\n  const store = await getReadWriteQueueDataObjectStore();\n  const request = store.put({\n    queueId,\n    data: merge({}, value, data),\n  });\n  return new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve();\n    };\n    request.onerror = function (event) {\n      logger.error(`Error while updating queue ${queueId} data`);\n      logger.errorObject(event);\n      reject(new Error(`Error while updating queue ${queueId} data`));\n    };\n  });\n}\n\nexport async function markJobStatusInDatabase(id:number, status:number) {\n  const value = await getJobFromDatabase(id);\n  if (typeof value === 'undefined') {\n    throw new Error(`Unable to mark ${id} as statys ${status} in database, job does not exist`);\n  }\n  value.status = status;\n  const store = await getReadWriteJobsObjectStore();\n  const request = store.put(value);\n  return new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve();\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while marking ${id} complete`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while marking ${id} complete`));\n    };\n  });\n}\n\nexport function markJobCompleteInDatabase(id:number) {\n  return markJobStatusInDatabase(id, JOB_COMPLETE_STATUS);\n}\n\nexport function markJobPendingInDatabase(id:number) {\n  return markJobStatusInDatabase(id, JOB_PENDING_STATUS);\n}\n\nexport function markJobErrorInDatabase(id:number) {\n  return markJobStatusInDatabase(id, JOB_ERROR_STATUS);\n}\n\nexport function markJobCleanupInDatabase(id:number) {\n  return markJobStatusInDatabase(id, JOB_CLEANUP_STATUS);\n}\n\nexport function markJobAbortedInDatabase(id:number) {\n  return markJobStatusInDatabase(id, JOB_ABORTED_STATUS);\n}\n\nexport async function markQueueForCleanupInDatabase(queueId:string) {\n  const store = await getReadWriteJobsObjectStore();\n  const index = store.index('queueIdIndex');\n  // $FlowFixMe\n  const request = index.openCursor(IDBKeyRange.only(queueId));\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function (event) {\n      const cursor = event.target.result;\n      if (cursor) {\n        const value = Object.assign({}, cursor.value);\n        switch (value.status) {\n          case JOB_ERROR_STATUS:\n            value.status = JOB_CLEANUP_STATUS;\n            break;\n          case JOB_COMPLETE_STATUS:\n            value.status = JOB_CLEANUP_STATUS;\n            break;\n          case JOB_PENDING_STATUS:\n            value.status = JOB_ABORTED_STATUS;\n            break;\n          case JOB_CLEANUP_STATUS:\n            cursor.continue();\n            return;\n          case JOB_ABORTED_STATUS:\n            cursor.continue();\n            return;\n          default:\n            logger.warn(`Unhandled job status ${value.status}`);\n            cursor.continue();\n            return;\n        }\n        const updateRequest = cursor.update(value);\n        updateRequest.onsuccess = function () {\n          cursor.continue();\n        };\n        updateRequest.onerror = function (event2) {\n          logger.error(`Update request error while marking queue ${queueId} error`);\n          logger.errorObject(event2);\n          cursor.continue();\n        };\n      } else {\n        resolve();\n      }\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while marking queue ${queueId} error`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while marking queue ${queueId} error`));\n    };\n  });\n}\n\nexport async function decrementAttemptsRemainingInDatabase(id:number) {\n  const value = await getJobFromDatabase(id);\n  if (typeof value === 'undefined') {\n    throw new Error(`Unable to decrement attempts remaining for job ${id} in database, job does not exist`);\n  }\n  const attemptsRemaining = value.attemptsRemaining - 1;\n  value.attemptsRemaining = attemptsRemaining;\n  const store = await getReadWriteJobsObjectStore();\n  const request = store.put(value);\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve();\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while decrementing attempts remaining for ${id}`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while decrementing attempts remaining for ${id}`));\n    };\n  });\n  return attemptsRemaining;\n}\n\nexport async function bulkEnqueueToDatabase(queueId: string, items:Array<[string, Array<any>, number]>, delay: number) { // eslint-disable-line no-underscore-dangle\n  const store = await getReadWriteJobsObjectStore();\n  await new Promise((resolve, reject) => {\n    for (let i = 0; i < items.length; i += 1) {\n      const [type, args, maxAttempts] = items[i];\n      const value = {\n        queueId,\n        type,\n        args,\n        attemptsRemaining: maxAttempts,\n        created: Date.now(),\n        status: JOB_PENDING_STATUS,\n        startAfter: Date.now() + delay,\n      };\n      const request = store.put(value);\n      if (i === items.length - 1) {\n        request.onsuccess = function () {\n          resolve(request.result);\n        };\n        request.onerror = function (event) {\n          logger.error(`Request error while bulk enqueueing ${items.length} ${items.length === 1 ? 'job' : 'jobs'} in queue ${queueId}`);\n          logger.errorObject(event);\n          reject(new Error(`Request error while bulk enqueueing ${items.length} ${items.length === 1 ? 'job' : 'jobs'} in queue ${queueId}`));\n        };\n      }\n    }\n  });\n}\n\nexport async function enqueueToDatabase(queueId: string, type: string, args: Array<any>, maxAttempts: number, delay: number) { // eslint-disable-line no-underscore-dangle\n  const value = {\n    queueId,\n    type,\n    args,\n    attemptsRemaining: maxAttempts,\n    created: Date.now(),\n    status: JOB_PENDING_STATUS,\n    startAfter: Date.now() + delay,\n  };\n  const store = await getReadWriteJobsObjectStore();\n  const request = store.put(value);\n  const id = await new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve(request.result);\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while enqueueing ${type} job`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while enqueueing ${type} job`));\n    };\n  });\n  return id;\n}\n\nexport async function dequeueFromDatabase():Promise<Array<Job>> { // eslint-disable-line no-underscore-dangle\n  const store = await getReadOnlyJobsObjectStore();\n  const index = store.index('statusIndex');\n  // $FlowFixMe\n  const request = index.openCursor(IDBKeyRange.bound(JOB_CLEANUP_STATUS, JOB_PENDING_STATUS));\n  const jobs = [];\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function (event) {\n      const cursor = event.target.result;\n      if (cursor) {\n        jobs.push(cursor.value);\n        cursor.continue();\n      } else {\n        resolve();\n      }\n    };\n    request.onerror = function (event) {\n      logger.error('Request error while dequeing');\n      logger.errorObject(event);\n      reject(new Error('Request error while dequeing'));\n    };\n  });\n  return jobs;\n}\n\nexport async function getCompletedJobsCountFromDatabase(queueId: string) { // eslint-disable-line no-underscore-dangle\n  const jobs = await getCompletedJobsFromDatabase(queueId);\n  return jobs.length;\n}\n\nexport async function getCompletedJobsFromDatabase(queueId: string):Promise<Array<Job>> { // eslint-disable-line no-underscore-dangle\n  const store = await getReadOnlyJobsObjectStore();\n  const index = store.index('statusQueueIdIndex');\n  // $FlowFixMe\n  const request = index.openCursor(IDBKeyRange.only([queueId, JOB_COMPLETE_STATUS]));\n  const jobs = [];\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function (event) {\n      const cursor = event.target.result;\n      if (cursor) {\n        jobs.push(cursor.value);\n        cursor.continue();\n      } else {\n        resolve();\n      }\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while getting completed jobs for queue ${queueId}`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while getting completed jobs for queue ${queueId}`));\n    };\n  });\n  return jobs;\n}\n\nexport async function storeAuthDataInDatabase(value: Object) { // eslint-disable-line no-underscore-dangle\n  const store = await getReadWriteAuthObjectStore();\n  const request = store.put(value);\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve();\n    };\n    request.onerror = function (event) {\n      logger.error('Request error while storing auth data');\n      logger.errorObject(event);\n      reject(new Error('Request error while storing auth data'));\n    };\n  });\n}\n\nexport async function getAuthDataFromDatabase(teamId:string) {\n  const store = await getReadOnlyAuthObjectStore();\n  const request = store.get(teamId);\n  return new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve(request.result);\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while getting auth data for team ${teamId}`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while getting auth data for team ${teamId}`));\n    };\n  });\n}\n\nexport async function removeAuthDataFromDatabase(teamId:string) {\n  const store = await getReadWriteAuthObjectStore();\n  const request = store.delete(teamId);\n  return new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve();\n    };\n    request.onerror = function (event) {\n      logger.error(`Error while removing auth data for ${teamId}`);\n      logger.errorObject(event);\n      reject(new Error(`Error while removing auth data for ${teamId}`));\n    };\n  });\n}\n"],"file":"database.js"}