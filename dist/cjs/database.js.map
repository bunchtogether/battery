{"version":3,"sources":["../../src/database.js"],"names":["localJobEmitter","EventEmitter","jobEmitter","logger","JobDoesNotExistError","message","name","Error","CleanupDoesNotExistError","QUEUE_ERROR_STATUS","QUEUE_PENDING_STATUS","QUEUE_COMPLETE_STATUS","QUEUE_EMPTY_STATUS","JOB_ABORTED_STATUS","JOB_COMPLETE_STATUS","JOB_PENDING_STATUS","JOB_ERROR_STATUS","JOB_CLEANUP_STATUS","JOB_CLEANUP_AND_REMOVE_STATUS","databasePromise","request","self","indexedDB","open","onupgradeneeded","e","store","target","result","createObjectStore","keyPath","autoIncrement","createIndex","unique","error","Promise","resolve","reject","onerror","onsuccess","event","db","getReadWriteObjectStore","database","transaction","objectStore","onabort","errorObject","getReadOnlyObjectStore","getReadWriteArgLookupObjectStore","getReadOnlyArgLookupObjectStore","getReadWriteAuthObjectStore","getReadOnlyAuthObjectStore","getReadWriteQueueDataObjectStore","getReadOnlyQueueDataObjectStore","getReadWriteJobsObjectStore","getReadOnlyJobsObjectStore","getReadWriteCleanupsObjectStore","getReadOnlyCleanupsObjectStore","getReadWriteObjectStoreAndTransactionPromise","promise","oncomplete","getReadOnlyObjectStoreAndTransactionPromise","getReadWriteJobsObjectStoreAndTransactionPromise","getReadOnlyJobsObjectStoreAndTransactionPromise","getReadWriteArgLookupObjectStoreAndTransactionPromise","removeJobFromObjectStore","id","queueId","deleteRequest","delete","emit","removeArgLookupsForJobAsMicrotask","clearQueueDataDatabase","clear","clearJobsDatabase","clearCleanupsDatabase","clearDatabase","removeJobsWithQueueIdAndTypeFromDatabase","type","index","getAllKeys","IDBKeyRange","only","removeQueueIdFromJobsDatabase","removeQueueIdFromCleanupsDatabase","openCursor","cursor","primaryKey","continue","removeQueueIdFromDatabase","removeCompletedExpiredItemsFromDatabase","maxAge","getAll","bound","Date","now","status","updateJobInDatabase","transform","get","newValue","value","putRequest","put","getJobFromDatabase","updateCleanupInDatabase","removePathFromCleanupDataInDatabase","path","attempt","startAfter","data","Object","assign","updateCleanupValuesInDatabase","TypeError","combinedData","silentlyRemoveJobFromDatabase","removeJobFromDatabase","job","removeCleanupFromDatabase","getCleanupFromDatabase","getQueueDataFromDatabase","queueData","undefined","updateQueueDataInDatabase","markJobStatusInDatabase","markJobCompleteInDatabase","markJobPendingInDatabase","markJobErrorInDatabase","markJobCleanupInDatabase","markJobAbortedInDatabase","markJobCleanupAndRemoveInDatabase","markJobAsAbortedOrRemoveFromDatabase","markJobStartAfterInDatabase","toLocaleString","markCleanupStartAfterInDatabase","markQueueForCleanupInDatabase","jobs","push","warn","updateRequest","update","event2","incrementJobAttemptInDatabase","incrementCleanupAttemptInDatabase","bulkEnqueueToDatabase","items","delay","Array","isArray","i","length","args","ids","created","enqueueToDatabase","restoreJobToDatabaseForCleanupAndRemove","dequeueFromDatabase","getContiguousIds","sort","a","b","points","Infinity","dequeueFromDatabaseNotIn","includes","getRequest","getJobsInQueueFromDatabase","getJobsInDatabase","jobIds","jobId","getCompletedJobsCountFromDatabase","getCompletedJobsFromDatabase","storeAuthDataInDatabase","getAuthDataFromDatabase","authData","removeAuthDataFromDatabase","getQueueStatus","abortedRequest","completeRequest","pendingRequest","errorRequest","cleanupRequest","cleanupAndRemoveRequest","abortedCountPromise","completeCountPromise","pendingCountPromise","errorCountPromise","cleanupCountPromise","cleanupAndRemoveCountPromise","all","abortedCount","completeCount","pendingCount","errorCount","cleanupCount","cleanupAndRemoveCount","addArgLookup","key","jsonPath","getArgLookupJobPathMap","map","Map","x","lookupArgs","keys","results","json","lookupArg","queueMicrotask","removeArgLookupsForJob","catch","errorStack","deleteEvent"],"mappings":"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","sourcesContent":["// @flow\n\nimport { JSONPath } from 'jsonpath-plus';\nimport merge from 'lodash/merge';\nimport unset from 'lodash/unset';\nimport EventEmitter from 'events';\nimport makeLogger from './logger';\n\n// Local job emitter is for this process only,\n// jobEmitter is bridged when a MessagePort is open\nexport const localJobEmitter = new EventEmitter();\nexport const jobEmitter = new EventEmitter();\n\nconst logger = makeLogger('Jobs Database');\n\nexport class JobDoesNotExistError extends Error {\n  constructor(message:string) {\n    super(message);\n    this.name = 'JobDoesNotExistError';\n  }\n}\n\nexport class CleanupDoesNotExistError extends Error {\n  constructor(message:string) {\n    super(message);\n    this.name = 'CleanupDoesNotExistError';\n  }\n}\n\nexport type Job = {\n  id: number,\n  queueId:string,\n  type:string,\n  args:Array<any>,\n  attempt: number,\n  created: number,\n  status: number,\n  startAfter: number\n};\n\n\ntype Cleanup = {\n  id: number,\n  queueId:string,\n  data: Object,\n  attempt: number,\n  startAfter: number\n};\n\nexport const QUEUE_ERROR_STATUS = 0;\nexport const QUEUE_PENDING_STATUS = 1;\nexport const QUEUE_COMPLETE_STATUS = 2;\nexport const QUEUE_EMPTY_STATUS = 3;\n\nexport const JOB_ABORTED_STATUS = 2;\nexport const JOB_COMPLETE_STATUS = 1;\nexport const JOB_PENDING_STATUS = 0;\nexport const JOB_ERROR_STATUS = -1;\nexport const JOB_CLEANUP_STATUS = -2;\nexport const JOB_CLEANUP_AND_REMOVE_STATUS = -3;\n\nexport const databasePromise = (async () => {\n  const request = self.indexedDB.open('battery-queue-03', 1);\n\n  request.onupgradeneeded = function (e) {\n    try {\n      const store = e.target.result.createObjectStore('jobs', { keyPath: 'id', autoIncrement: true });\n      store.createIndex('statusIndex', 'status', { unique: false });\n      store.createIndex('queueIdIndex', 'queueId', { unique: false });\n      store.createIndex('queueIdTypeIndex', ['queueId', 'type'], { unique: false });\n      store.createIndex('statusQueueIdIndex', ['queueId', 'status'], { unique: false });\n      store.createIndex('createdIndex', 'created', { unique: false });\n    } catch (error) {\n      if (!(error.name === 'ConstraintError')) {\n        throw error;\n      }\n    }\n    try {\n      e.target.result.createObjectStore('queue-data', { keyPath: 'queueId' });\n    } catch (error) {\n      if (!(error.name === 'ConstraintError')) {\n        throw error;\n      }\n    }\n    try {\n      const store = e.target.result.createObjectStore('cleanups', { keyPath: 'id' });\n      store.createIndex('queueIdIndex', 'queueId', { unique: false });\n    } catch (error) {\n      if (!(error.name === 'ConstraintError')) {\n        throw error;\n      }\n    }\n    try {\n      e.target.result.createObjectStore('auth-data', { keyPath: 'id' });\n    } catch (error) {\n      if (!(error.name === 'ConstraintError')) {\n        throw error;\n      }\n    }\n    try {\n      const store = e.target.result.createObjectStore('arg-lookup', { keyPath: 'id', autoIncrement: true });\n      store.createIndex('jobIdIndex', 'jobId', { unique: false });\n      store.createIndex('keyIndex', 'key', { unique: false });\n    } catch (error) {\n      if (!(error.name === 'ConstraintError')) {\n        throw error;\n      }\n    }\n  };\n\n  const db = await new Promise((resolve, reject) => {\n    request.onerror = () => {\n      reject(new Error('Unable to open database'));\n    };\n    request.onsuccess = function (event) {\n      resolve(event.target.result);\n    };\n  });\n\n  return db;\n})();\n\nasync function getReadWriteObjectStore(name:string) {\n  const database = await databasePromise;\n  const transaction = database.transaction([name], 'readwrite');\n  const objectStore = transaction.objectStore(name);\n  transaction.onabort = (event) => {\n    logger.error(`Read-write \"${name}\" transaction was aborted`);\n    logger.errorObject(event);\n  };\n  transaction.onerror = (event) => {\n    logger.error(`Error in read-write \"${name}\" transaction`);\n    logger.errorObject(event);\n  };\n  return objectStore;\n}\n\nasync function getReadOnlyObjectStore(name:string) {\n  const database = await databasePromise;\n  const transaction = database.transaction([name], 'readonly');\n  const objectStore = transaction.objectStore(name);\n  transaction.onabort = (event) => {\n    logger.error(`Read-only \"${name}\" transaction was aborted`);\n    logger.errorObject(event);\n  };\n  transaction.onerror = (event) => {\n    logger.error(`Error in read-only \"${name}\" transaction`);\n    logger.errorObject(event);\n  };\n  return objectStore;\n}\n\nfunction getReadWriteArgLookupObjectStore() {\n  return getReadWriteObjectStore('arg-lookup');\n}\n\nfunction getReadOnlyArgLookupObjectStore() {\n  return getReadOnlyObjectStore('arg-lookup');\n}\n\nfunction getReadWriteAuthObjectStore() {\n  return getReadWriteObjectStore('auth-data');\n}\n\nfunction getReadOnlyAuthObjectStore() {\n  return getReadOnlyObjectStore('auth-data');\n}\n\nfunction getReadWriteQueueDataObjectStore() {\n  return getReadWriteObjectStore('queue-data');\n}\n\nfunction getReadOnlyQueueDataObjectStore() {\n  return getReadOnlyObjectStore('queue-data');\n}\n\nfunction getReadWriteJobsObjectStore() {\n  return getReadWriteObjectStore('jobs');\n}\n\nfunction getReadOnlyJobsObjectStore() {\n  return getReadOnlyObjectStore('jobs');\n}\n\nfunction getReadWriteCleanupsObjectStore() {\n  return getReadWriteObjectStore('cleanups');\n}\n\nfunction getReadOnlyCleanupsObjectStore() {\n  return getReadOnlyObjectStore('cleanups');\n}\n\nasync function getReadWriteObjectStoreAndTransactionPromise(name:string) {\n  const database = await databasePromise;\n  const transaction = database.transaction([name], 'readwrite');\n  const objectStore = transaction.objectStore(name);\n  const promise = new Promise((resolve, reject) => {\n    transaction.onabort = (event) => {\n      logger.error(`Read-write \"${name}\" transaction was aborted`);\n      logger.errorObject(event);\n      reject(new Error(`Read-write \"${name}\" transaction was aborted`));\n    };\n    transaction.onerror = (event) => {\n      logger.error(`Error in read-write \"${name}\" transaction`);\n      logger.errorObject(event);\n      reject(new Error(`Error in read-write \"${name}\" transaction`));\n    };\n    transaction.oncomplete = () => {\n      resolve();\n    };\n  });\n  return [objectStore, promise];\n}\n\nasync function getReadOnlyObjectStoreAndTransactionPromise(name:string) {\n  const database = await databasePromise;\n  const transaction = database.transaction([name], 'readonly');\n  const objectStore = transaction.objectStore(name);\n  const promise = new Promise((resolve, reject) => {\n    transaction.onabort = (event) => {\n      logger.error(`Read-write \"${name}\" transaction was aborted`);\n      logger.errorObject(event);\n      reject(new Error(`Read-write \"${name}\" transaction was aborted`));\n    };\n    transaction.onerror = (event) => {\n      logger.error(`Error in read-write \"${name}\" transaction`);\n      logger.errorObject(event);\n      reject(new Error(`Error in read-write \"${name}\" transaction`));\n    };\n    transaction.oncomplete = () => {\n      resolve();\n    };\n  });\n  return [objectStore, promise];\n}\n\n\nfunction getReadWriteJobsObjectStoreAndTransactionPromise() {\n  return getReadWriteObjectStoreAndTransactionPromise('jobs');\n}\n\nfunction getReadOnlyJobsObjectStoreAndTransactionPromise() {\n  return getReadOnlyObjectStoreAndTransactionPromise('jobs');\n}\n\nfunction getReadWriteArgLookupObjectStoreAndTransactionPromise() {\n  return getReadWriteObjectStoreAndTransactionPromise('arg-lookup');\n}\n\nfunction removeJobFromObjectStore(store:IDBObjectStore, id:number, queueId:string) {\n  const deleteRequest = store.delete(id);\n  deleteRequest.onsuccess = function () {\n    localJobEmitter.emit('jobDelete', id, queueId);\n    jobEmitter.emit('jobDelete', id, queueId);\n    removeArgLookupsForJobAsMicrotask(id);\n  };\n  deleteRequest.onerror = function (event) {\n    logger.error(`Request error while removing job ${id} in queue ${queueId} from database`);\n    logger.errorObject(event);\n  };\n}\n\nasync function clearQueueDataDatabase() {\n  const store = await getReadWriteQueueDataObjectStore();\n  const request = store.clear();\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve();\n    };\n    request.onerror = function (event) {\n      logger.error('Error while clearing queue data database');\n      logger.errorObject(event);\n      reject(new Error('Error while clearing queue data database'));\n    };\n  });\n}\n\nasync function clearJobsDatabase() {\n  const store = await getReadWriteJobsObjectStore();\n  const request = store.clear();\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve();\n    };\n    request.onerror = function (event) {\n      logger.error('Error while clearing jobs database');\n      logger.errorObject(event);\n      reject(new Error('Error while clearing jobs database'));\n    };\n  });\n  localJobEmitter.emit('jobsClear');\n  jobEmitter.emit('jobsClear');\n}\n\nasync function clearCleanupsDatabase() {\n  const store = await getReadWriteCleanupsObjectStore();\n  const request = store.clear();\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve();\n    };\n    request.onerror = function (event) {\n      logger.error('Error while clearing cleanups database');\n      logger.errorObject(event);\n      reject(new Error('Error while clearing cleanups database'));\n    };\n  });\n}\n\nexport async function clearDatabase() {\n  await clearJobsDatabase();\n  await clearCleanupsDatabase();\n  await clearQueueDataDatabase();\n}\n\nexport async function removeJobsWithQueueIdAndTypeFromDatabase(queueId:string, type:string) {\n  const [store, promise] = await getReadWriteJobsObjectStoreAndTransactionPromise();\n  const index = store.index('queueIdTypeIndex');\n  // $FlowFixMe\n  const request = index.getAllKeys(IDBKeyRange.only([queueId, type]));\n  request.onsuccess = function (event) {\n    for (const id of event.target.result) {\n      removeJobFromObjectStore(store, id, queueId);\n    }\n  };\n  request.onerror = function (event) {\n    logger.error(`Request error while removing jobs with queue ${queueId} and type ${type} from jobs database`);\n    logger.errorObject(event);\n  };\n  await promise;\n}\n\nexport async function removeQueueIdFromJobsDatabase(queueId:string) {\n  const [store, promise] = await getReadWriteJobsObjectStoreAndTransactionPromise();\n  const index = store.index('queueIdIndex');\n  // $FlowFixMe\n  const request = index.getAllKeys(IDBKeyRange.only(queueId));\n  request.onsuccess = function (event) {\n    for (const id of event.target.result) {\n      removeJobFromObjectStore(store, id, queueId);\n    }\n  };\n  request.onerror = function (event) {\n    logger.error(`Request error while removing queue ${queueId} from jobs database`);\n    logger.errorObject(event);\n  };\n  await promise;\n}\n\nasync function removeQueueIdFromCleanupsDatabase(queueId:string) {\n  const store = await getReadWriteCleanupsObjectStore();\n  const index = store.index('queueIdIndex');\n  // $FlowFixMe\n  const request = index.openCursor(IDBKeyRange.only(queueId));\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function (event) {\n      const cursor = event.target.result;\n      if (cursor) {\n        store.delete(cursor.primaryKey);\n        cursor.continue();\n      } else {\n        resolve();\n      }\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while removing queue ${queueId} from jobs database`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while removing queue ${queueId} from jobs database`));\n    };\n  });\n}\n\nexport async function removeQueueIdFromDatabase(queueId:string) {\n  await removeQueueIdFromJobsDatabase(queueId);\n  await removeQueueIdFromCleanupsDatabase(queueId);\n}\n\nexport async function removeCompletedExpiredItemsFromDatabase(maxAge:number) {\n  const [store, promise] = await getReadWriteJobsObjectStoreAndTransactionPromise();\n  const index = store.index('createdIndex');\n  // $FlowFixMe\n  const request = index.getAll(IDBKeyRange.bound(0, Date.now() - maxAge));\n  request.onsuccess = function (event) {\n    for (const { id, queueId, status } of event.target.result) {\n      if (status !== JOB_COMPLETE_STATUS) {\n        continue;\n      }\n      removeJobFromObjectStore(store, id, queueId);\n    }\n  };\n  request.onerror = function (event) {\n    logger.error('Request error while removing completed exired items from jobs database');\n    logger.errorObject(event);\n  };\n  await promise;\n}\n\nexport async function updateJobInDatabase(id:number, transform:(Job | void) => Job | void | false):Promise<Job | void> {\n  const store = await getReadWriteJobsObjectStore();\n  const request = store.get(id);\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      let newValue;\n      const value = request.result;\n      try {\n        newValue = transform(value);\n      } catch (error) {\n        reject(error);\n        return;\n      }\n      if (typeof newValue === 'undefined') {\n        resolve();\n      } else if (newValue === false) {\n        if (typeof value !== 'undefined') {\n          const { queueId, type } = value;\n          const deleteRequest = store.delete(id);\n          deleteRequest.onsuccess = function () {\n            localJobEmitter.emit('jobDelete', id, queueId);\n            jobEmitter.emit('jobDelete', id, queueId);\n            removeArgLookupsForJobAsMicrotask(id);\n            resolve();\n          };\n          deleteRequest.onerror = function (event) {\n            logger.error(`Delete request error while updating job ${id} in queue ${queueId} and type ${type} in jobs database`);\n            logger.errorObject(event);\n            reject(new Error(`Delete request error while updating job ${id} in queue ${queueId} and type ${type} from jobs database`));\n          };\n        }\n      } else {\n        const putRequest = store.put(newValue);\n        const { queueId, type, status } = newValue;\n        putRequest.onsuccess = function () {\n          localJobEmitter.emit('jobUpdate', id, queueId, type, status);\n          jobEmitter.emit('jobUpdate', id, queueId, type, status);\n          resolve();\n        };\n        putRequest.onerror = function (event) {\n          logger.error(`Put request error while updating job ${id} in queue ${queueId} and type ${type} in jobs database`);\n          logger.errorObject(event);\n          reject(new Error(`Put request error while updating job ${id} in queue ${queueId} and type ${type} from jobs database`));\n        };\n      }\n    };\n    request.onerror = function (event) {\n      logger.error(`Get request error while updating ${id}`);\n      logger.errorObject(event);\n      reject(new Error(`Get request error while updating ${id}`));\n    };\n  });\n}\n\nexport async function getJobFromDatabase(id:number):Promise<Job | void> {\n  const store = await getReadOnlyJobsObjectStore();\n  const request = store.get(id);\n  return new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve(request.result);\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while getting ${id}`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while getting ${id}`));\n    };\n  });\n}\n\nexport async function updateCleanupInDatabase(id:number, transform:(Cleanup | void) => Object):Promise<Cleanup | void> {\n  const store = await getReadWriteCleanupsObjectStore();\n  const request = store.get(id);\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      let newValue;\n      try {\n        newValue = transform(request.result);\n      } catch (error) {\n        reject(error);\n        return;\n      }\n      if (typeof newValue === 'undefined') {\n        resolve();\n      } else {\n        const putRequest = store.put(newValue);\n        putRequest.onsuccess = function () {\n          resolve();\n        };\n        putRequest.onerror = function (event) {\n          logger.error(`Put request error while updating ${id} cleanup`);\n          logger.errorObject(event);\n          reject(new Error(`Put request error while updating ${id} cleanup`));\n        };\n      }\n    };\n    request.onerror = function (event) {\n      logger.error(`Get request error while updating ${id} cleanup`);\n      logger.errorObject(event);\n      reject(new Error(`Get request error while updating ${id} cleanup`));\n    };\n  });\n}\n\nexport async function removePathFromCleanupDataInDatabase(id:number, path:Array<string>) {\n  await updateCleanupInDatabase(id, (value: Cleanup | void) => {\n    if (typeof value === 'undefined') {\n      return;\n    }\n    const { queueId, attempt, startAfter } = value;\n    const data = Object.assign({}, value.data);\n    unset(data, path);\n    return { // eslint-disable-line consistent-return\n      id,\n      queueId,\n      attempt,\n      startAfter,\n      data,\n    };\n  });\n}\n\n\nexport async function updateCleanupValuesInDatabase(id:number, queueId:string, data:Object) {\n  if (typeof id !== 'number') {\n    throw new TypeError(`Unable to update cleanup in database, received invalid \"id\" argument type \"${typeof id}\"`);\n  }\n  if (typeof queueId !== 'string') {\n    throw new TypeError(`Unable to update cleanup in database, received invalid \"queueId\" argument type \"${typeof queueId}\"`);\n  }\n  if (typeof data !== 'object') {\n    throw new TypeError(`Unable to update cleanup in database, received invalid \"data\" argument type \"${typeof data}\"`);\n  }\n  await updateCleanupInDatabase(id, (value: Cleanup | void) => {\n    const combinedData = typeof value === 'undefined' ? data : merge({}, value.data, data);\n    return {\n      id,\n      queueId,\n      attempt: 0,\n      startAfter: Date.now(),\n      data: combinedData,\n    };\n  });\n}\n\nexport async function silentlyRemoveJobFromDatabase(id:number) {\n  const store = await getReadWriteJobsObjectStore();\n  const request = store.delete(id);\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve();\n    };\n    request.onerror = function (event) {\n      logger.error(`Delete request error while removing job ${id} from database`);\n      logger.errorObject(event);\n      reject(new Error(`Delete request error while removing job ${id} from database`));\n    };\n  });\n}\n\nexport async function removeJobFromDatabase(id:number) {\n  const store = await getReadWriteJobsObjectStore();\n  const request = store.get(id);\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      const job = request.result;\n      if (typeof job === 'undefined') {\n        resolve();\n        return;\n      }\n      const { queueId, type } = job;\n      const deleteRequest = store.delete(id);\n      deleteRequest.onsuccess = function () {\n        localJobEmitter.emit('jobDelete', id, queueId);\n        jobEmitter.emit('jobDelete', id, queueId);\n        removeArgLookupsForJobAsMicrotask(id);\n        resolve();\n      };\n      deleteRequest.onerror = function (event) {\n        logger.error(`Delete request error while removing job ${id} in queue ${queueId} with type ${type} from database`);\n        logger.errorObject(event);\n        reject(new Error(`Delete request error while removing job ${id} in queue ${queueId} with type ${type} from database`));\n      };\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while getting ${id} before removing from database`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while getting ${id} before removing from database`));\n    };\n  });\n}\n\nexport async function removeCleanupFromDatabase(id:number) {\n  const store = await getReadWriteCleanupsObjectStore();\n  const request = store.delete(id);\n  return new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve();\n    };\n    request.onerror = function (event) {\n      logger.error(`Error while removing cleanup data for ${id}`);\n      logger.errorObject(event);\n      reject(new Error(`Error while removing cleanup data for ${id}`));\n    };\n  });\n}\n\nexport async function getCleanupFromDatabase(id:number):Promise<Cleanup | void> {\n  const store = await getReadOnlyCleanupsObjectStore();\n  const request = store.get(id);\n  return new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve(request.result);\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while getting ${id}`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while getting ${id}`));\n    };\n  });\n}\n\nexport async function getQueueDataFromDatabase(queueId:string) {\n  const store = await getReadOnlyQueueDataObjectStore();\n  const request = store.get(queueId);\n  const queueData = await new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve(request.result);\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while getting queue ${queueId} data`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while getting queue ${queueId} data`));\n    };\n  });\n  return typeof queueData !== 'undefined' ? queueData.data : undefined;\n}\n\nexport async function updateQueueDataInDatabase(queueId:string, data:Object) {\n  const value = await getQueueDataFromDatabase(queueId);\n  const store = await getReadWriteQueueDataObjectStore();\n  const request = store.put({\n    queueId,\n    data: merge({}, value, data),\n  });\n  return new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve();\n    };\n    request.onerror = function (event) {\n      logger.error(`Error while updating queue ${queueId} data`);\n      logger.errorObject(event);\n      reject(new Error(`Error while updating queue ${queueId} data`));\n    };\n  });\n}\n\nexport function markJobStatusInDatabase(id:number, status:number) {\n  return updateJobInDatabase(id, (value:Job | void) => {\n    if (typeof value === 'undefined') {\n      throw new JobDoesNotExistError(`Unable to mark job ${id} as status ${status} in database, job does not exist`);\n    }\n    value.status = status; // eslint-disable-line no-param-reassign\n    return value;\n  });\n}\n\nexport function markJobCompleteInDatabase(id:number) {\n  return markJobStatusInDatabase(id, JOB_COMPLETE_STATUS);\n}\n\nexport function markJobPendingInDatabase(id:number) {\n  return markJobStatusInDatabase(id, JOB_PENDING_STATUS);\n}\n\nexport function markJobErrorInDatabase(id:number) {\n  return markJobStatusInDatabase(id, JOB_ERROR_STATUS);\n}\n\nexport function markJobCleanupInDatabase(id:number) {\n  return markJobStatusInDatabase(id, JOB_CLEANUP_STATUS);\n}\n\nexport function markJobAbortedInDatabase(id:number) {\n  return markJobStatusInDatabase(id, JOB_ABORTED_STATUS);\n}\n\nexport function markJobCleanupAndRemoveInDatabase(id:number) {\n  return updateJobInDatabase(id, (value:Job | void) => {\n    if (typeof value === 'undefined') {\n      throw new JobDoesNotExistError(`Unable to mark job ${id} as status ${JOB_CLEANUP_AND_REMOVE_STATUS} in database, job does not exist`);\n    }\n    if (value.status === JOB_PENDING_STATUS) {\n      return false;\n    }\n    if (value.status === JOB_ABORTED_STATUS) {\n      return false;\n    }\n    value.status = JOB_CLEANUP_AND_REMOVE_STATUS; // eslint-disable-line no-param-reassign\n    return value;\n  });\n}\n\nexport function markJobAsAbortedOrRemoveFromDatabase(id:number) {\n  return updateJobInDatabase(id, (value:Job | void) => {\n    if (typeof value === 'undefined') {\n      return;\n    }\n    if (value.status === JOB_ERROR_STATUS) {\n      value.status = JOB_ABORTED_STATUS; // eslint-disable-line no-param-reassign\n      return value; // eslint-disable-line consistent-return\n    }\n    if (value.status === JOB_CLEANUP_STATUS) {\n      value.status = JOB_ABORTED_STATUS; // eslint-disable-line no-param-reassign\n      return value; // eslint-disable-line consistent-return\n    }\n    if (value.status === JOB_CLEANUP_AND_REMOVE_STATUS) {\n      return false; // eslint-disable-line consistent-return\n    }\n    throw new Error(`Unable to mark job ${id} as aborted or remove after cleanup, unable to handle status ${value.status}`);\n  });\n}\n\nexport function markJobStartAfterInDatabase(id:number, startAfter:number) {\n  return updateJobInDatabase(id, (value:Job | void) => {\n    if (typeof value === 'undefined') {\n      throw new JobDoesNotExistError(`Unable to mark job ${id} start-after time to ${new Date(startAfter).toLocaleString()} in database, job does not exist`);\n    }\n    if (startAfter < value.startAfter) {\n      return;\n    }\n    value.startAfter = startAfter; // eslint-disable-line no-param-reassign\n    return value; // eslint-disable-line consistent-return\n  });\n}\n\nexport function markCleanupStartAfterInDatabase(id:number, startAfter:number) {\n  return updateCleanupInDatabase(id, (value: Cleanup | void) => {\n    if (typeof value === 'undefined') {\n      throw new CleanupDoesNotExistError(`Unable to mark cleanup ${id} start-after time to ${new Date(startAfter).toLocaleString()} in database, cleanup does not exist`);\n    }\n    if (startAfter < value.startAfter) {\n      return;\n    }\n    value.startAfter = startAfter; // eslint-disable-line  no-param-reassign\n    return value; // eslint-disable-line consistent-return\n  });\n}\n\nexport async function markQueueForCleanupInDatabase(queueId:string) {\n  const store = await getReadWriteJobsObjectStore();\n  const index = store.index('queueIdIndex');\n  // $FlowFixMe\n  const request = index.openCursor(IDBKeyRange.only(queueId));\n  const jobs = [];\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function (event) {\n      const cursor = event.target.result;\n      if (cursor) {\n        const value = Object.assign({}, cursor.value);\n        switch (value.status) {\n          case JOB_ERROR_STATUS:\n            value.status = JOB_CLEANUP_STATUS;\n            jobs.push(value);\n            break;\n          case JOB_COMPLETE_STATUS:\n            value.status = JOB_CLEANUP_STATUS;\n            jobs.push(value);\n            break;\n          case JOB_PENDING_STATUS:\n            value.status = JOB_ABORTED_STATUS;\n            break;\n          case JOB_CLEANUP_STATUS:\n            cursor.continue();\n            return;\n          case JOB_ABORTED_STATUS:\n            cursor.continue();\n            return;\n          default:\n            logger.warn(`Unhandled job status ${value.status}`);\n            cursor.continue();\n            return;\n        }\n        const updateRequest = cursor.update(value);\n        updateRequest.onsuccess = function () {\n          localJobEmitter.emit('jobUpdate', value.id, value.queueId, value.type, value.status);\n          jobEmitter.emit('jobUpdate', value.id, value.queueId, value.type, value.status);\n          cursor.continue();\n        };\n        updateRequest.onerror = function (event2) {\n          logger.error(`Update request error while marking queue ${queueId} error`);\n          logger.errorObject(event2);\n          cursor.continue();\n        };\n      } else {\n        resolve();\n      }\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while marking queue ${queueId} error`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while marking queue ${queueId} error`));\n    };\n  });\n  return jobs;\n}\n\nexport async function incrementJobAttemptInDatabase(id:number) {\n  await updateJobInDatabase(id, (value:Job | void) => {\n    if (typeof value === 'undefined') {\n      throw new JobDoesNotExistError(`Unable to increment attempts for job ${id} in database, job does not exist`);\n    }\n    value.attempt += 1; // eslint-disable-line no-param-reassign\n    return value;\n  });\n}\n\nexport async function incrementCleanupAttemptInDatabase(id:number, queueId:string) {\n  let attempt = 1;\n  await updateCleanupInDatabase(id, (value: Cleanup | void) => {\n    if (typeof value === 'undefined') {\n      return {\n        id,\n        queueId,\n        attempt: 1,\n        startAfter: Date.now(),\n        data: {},\n      };\n    }\n    attempt = value.attempt + 1;\n    value.attempt = attempt; // eslint-disable-line no-param-reassign\n    return value;\n  });\n  return attempt;\n}\n\nexport async function bulkEnqueueToDatabase(queueId: string, items:Array<[string, Array<any>]>, delay: number) { // eslint-disable-line no-underscore-dangle\n  if (typeof queueId !== 'string') {\n    throw new TypeError(`Unable to bulk enqueue in database, received invalid \"queueId\" argument type \"${typeof queueId}\"`);\n  }\n  if (!Array.isArray(items)) {\n    throw new TypeError(`Unable to bulk enqueue in database, received invalid \"items\" argument type \"${typeof items}\"`);\n  }\n  for (let i = 0; i < items.length; i += 1) {\n    const [type, args] = items[i];\n    if (typeof type !== 'string') {\n      throw new TypeError(`Unable to bulk enqueue in database, received invalid items[${i}] \"type\" argument type \"${typeof type}\"`);\n    }\n    if (!Array.isArray(args)) {\n      throw new TypeError(`Unable to bulk enqueue in database, received invalid items[${i}] \"args\" argument type \"${typeof args}\"`);\n    }\n  }\n  if (typeof delay !== 'number') {\n    throw new TypeError(`Unable to bulk enqueue in database, received invalid \"delay\" argument type \"${typeof delay}\"`);\n  }\n  const ids = [];\n  const store = await getReadWriteJobsObjectStore();\n  await new Promise((resolve, reject) => {\n    for (let i = 0; i < items.length; i += 1) {\n      const [type, args] = items[i];\n      const value = {\n        queueId,\n        type,\n        args,\n        attempt: 0,\n        created: Date.now(),\n        status: JOB_PENDING_STATUS,\n        startAfter: Date.now() + delay,\n      };\n      const request = store.put(value);\n      request.onsuccess = function () {\n        const id = request.result;\n        ids.push(request.result);\n        localJobEmitter.emit('jobAdd', id, queueId, type);\n        jobEmitter.emit('jobAdd', id, queueId, type);\n        resolve(request.result);\n      };\n      request.onerror = function (event) {\n        logger.error(`Request error while bulk enqueueing ${items.length} ${items.length === 1 ? 'job' : 'jobs'} in queue ${queueId}`);\n        logger.errorObject(event);\n        reject(new Error(`Request error while bulk enqueueing ${items.length} ${items.length === 1 ? 'job' : 'jobs'} in queue ${queueId}`));\n      };\n    }\n  });\n  return ids;\n}\n\nexport async function enqueueToDatabase(queueId: string, type: string, args: Array<any>, delay: number) { // eslint-disable-line no-underscore-dangle\n  if (typeof queueId !== 'string') {\n    throw new TypeError(`Unable to enqueue in database, received invalid \"queueId\" argument type \"${typeof queueId}\"`);\n  }\n  if (typeof type !== 'string') {\n    throw new TypeError(`Unable to enqueue in database, received invalid \"type\" argument type \"${typeof type}\"`);\n  }\n  if (!Array.isArray(args)) {\n    throw new TypeError(`Unable to enqueue in database, received invalid \"args\" argument type \"${typeof args}\"`);\n  }\n  if (typeof delay !== 'number') {\n    throw new TypeError(`Unable to enqueue in database, received invalid \"delay\" argument type \"${typeof delay}\"`);\n  }\n  const value = {\n    queueId,\n    type,\n    args,\n    attempt: 0,\n    created: Date.now(),\n    status: JOB_PENDING_STATUS,\n    startAfter: Date.now() + delay,\n  };\n  const store = await getReadWriteJobsObjectStore();\n\n  const request = store.put(value);\n  const id = await new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve(request.result);\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while enqueueing ${type} job`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while enqueueing ${type} job`));\n    };\n  });\n  localJobEmitter.emit('jobAdd', id, queueId, type);\n  jobEmitter.emit('jobAdd', id, queueId, type);\n  return id;\n}\n\nexport async function restoreJobToDatabaseForCleanupAndRemove(id:number, queueId: string, type: string, args: Array<any>) { // eslint-disable-line no-underscore-dangle\n  if (typeof id !== 'number') {\n    throw new TypeError(`Unable to restore to database, received invalid \"id\" argument type \"${typeof id}\"`);\n  }\n  if (typeof queueId !== 'string') {\n    throw new TypeError(`Unable to restore to database, received invalid \"queueId\" argument type \"${typeof queueId}\"`);\n  }\n  if (typeof type !== 'string') {\n    throw new TypeError(`Unable to restore to database, received invalid \"type\" argument type \"${typeof type}\"`);\n  }\n  if (!Array.isArray(args)) {\n    throw new TypeError(`Unable to restore to database, received invalid \"args\" argument type \"${typeof args}\"`);\n  }\n  const value = {\n    id,\n    queueId,\n    type,\n    args,\n    attempt: 1,\n    created: Date.now(),\n    status: JOB_CLEANUP_AND_REMOVE_STATUS,\n    startAfter: Date.now(),\n  };\n  const store = await getReadWriteJobsObjectStore();\n  const request = store.put(value);\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve(request.result);\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while enqueueing ${type} job`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while enqueueing ${type} job`));\n    };\n  });\n  localJobEmitter.emit('jobAdd', id, queueId, type);\n  jobEmitter.emit('jobAdd', id, queueId, type);\n  return id;\n}\n\nexport async function dequeueFromDatabase():Promise<Array<Job>> { // eslint-disable-line no-underscore-dangle\n  const store = await getReadOnlyJobsObjectStore();\n  const index = store.index('statusIndex');\n  // $FlowFixMe\n  const request = index.getAll(IDBKeyRange.bound(JOB_CLEANUP_AND_REMOVE_STATUS, JOB_PENDING_STATUS));\n  const jobs = await new Promise((resolve, reject) => {\n    request.onsuccess = function (event) {\n      resolve(event.target.result);\n    };\n    request.onerror = function (event) {\n      logger.error('Request error while dequeing');\n      logger.errorObject(event);\n      reject(new Error('Request error while dequeing'));\n    };\n  });\n  return jobs;\n}\n\nexport function getContiguousIds(ids:Array<number>) {\n  ids.sort((a, b) => a - b);\n  const points = [[0, ids[0] - 1]];\n  for (let i = 0; i < ids.length; i += 1) {\n    if (ids[i] + 1 !== ids[i + 1]) {\n      if (i + 1 >= ids.length) {\n        points.push([ids[i] + 1, Infinity]);\n      } else {\n        points.push([ids[i] + 1, ids[i + 1] - 1]);\n      }\n    }\n  }\n  return points;\n}\n\nexport async function dequeueFromDatabaseNotIn(ids:Array<number>):Promise<Array<Job>> { // eslint-disable-line no-underscore-dangle\n  if (ids.length === 0) {\n    return dequeueFromDatabase();\n  }\n  const [store, promise] = await getReadOnlyJobsObjectStoreAndTransactionPromise();\n  const index = store.index('statusIndex');\n  const jobs = [];\n  // $FlowFixMe\n  const request = index.getAllKeys(IDBKeyRange.bound(JOB_CLEANUP_AND_REMOVE_STATUS, JOB_PENDING_STATUS));\n  request.onsuccess = function (event) {\n    for (const id of event.target.result) {\n      if (ids.includes(id)) {\n        continue;\n      }\n      const getRequest = store.get(id);\n      getRequest.onsuccess = function () {\n        jobs.push(getRequest.result);\n      };\n      getRequest.onerror = function (event2) {\n        logger.error(`Request error while getting job ${id}`);\n        logger.errorObject(event2);\n      };\n    }\n  };\n  request.onerror = function (event) {\n    logger.error('Request error while dequeing');\n    logger.errorObject(event);\n  };\n  await promise;\n  return jobs;\n}\n\nexport async function getJobsInQueueFromDatabase(queueId: string):Promise<Array<Job>> { // eslint-disable-line no-underscore-dangle\n  if (typeof queueId !== 'string') {\n    throw new TypeError(`Unable to get jobs in queue from database, received invalid \"queueId\" argument type \"${typeof queueId}\"`);\n  }\n  const store = await getReadOnlyJobsObjectStore();\n  const index = store.index('queueIdIndex');\n  // $FlowFixMe\n  const request = index.getAll(IDBKeyRange.only(queueId));\n  const jobs = await new Promise((resolve, reject) => {\n    request.onsuccess = function (event) {\n      resolve(event.target.result);\n    };\n    request.onerror = function (event) {\n      logger.error('Request error while dequeing');\n      logger.errorObject(event);\n      reject(new Error('Request error while dequeing'));\n    };\n  });\n  return jobs;\n}\n\nexport async function getJobsInDatabase(jobIds: Array<number>):Promise<Array<Job>> { // eslint-disable-line no-underscore-dangle\n  if (!Array.isArray(jobIds)) {\n    throw new TypeError(`Unable to get jobs from database, received invalid \"jobIds\" argument type \"${typeof jobIds}\"`);\n  }\n  const [store, promise] = await getReadOnlyJobsObjectStoreAndTransactionPromise();\n  const jobs = [];\n  for (const jobId of jobIds) {\n    const request = store.get(jobId);\n    request.onsuccess = function () {\n      if (typeof request.result !== 'undefined') {\n        jobs.push(request.result);\n      }\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while getting job ${jobId}`);\n      logger.errorObject(event);\n    };\n  }\n  await promise;\n  return jobs;\n}\n\nexport async function getCompletedJobsCountFromDatabase(queueId: string) { // eslint-disable-line no-underscore-dangle\n  const jobs = await getCompletedJobsFromDatabase(queueId);\n  return jobs.length;\n}\n\nexport async function getCompletedJobsFromDatabase(queueId: string):Promise<Array<Job>> { // eslint-disable-line no-underscore-dangle\n  if (typeof queueId !== 'string') {\n    throw new TypeError(`Unable to get completed jobs database, received invalid \"queueId\" argument type \"${typeof queueId}\"`);\n  }\n  const store = await getReadOnlyJobsObjectStore();\n  const index = store.index('statusQueueIdIndex');\n  // $FlowFixMe\n  const request = index.openCursor(IDBKeyRange.only([queueId, JOB_COMPLETE_STATUS]));\n  const jobs = [];\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function (event) {\n      const cursor = event.target.result;\n      if (cursor) {\n        jobs.push(cursor.value);\n        cursor.continue();\n      } else {\n        resolve();\n      }\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while getting completed jobs for queue ${queueId}`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while getting completed jobs for queue ${queueId}`));\n    };\n  });\n  return jobs;\n}\n\nexport async function storeAuthDataInDatabase(id:string, data: Object) { // eslint-disable-line no-underscore-dangle\n  if (typeof id !== 'string') {\n    throw new TypeError(`Unable to store auth data in database, received invalid \"id\" argument type \"${typeof id}\"`);\n  }\n  if (typeof data !== 'object') {\n    throw new TypeError(`Unable to store auth data in database, received invalid \"data\" argument type \"${typeof data}\"`);\n  }\n  const store = await getReadWriteAuthObjectStore();\n  const request = store.put({ id, data });\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve();\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while storing auth data for ${id}`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while storing auth data for ${id}`));\n    };\n  });\n}\n\nexport async function getAuthDataFromDatabase(id:string) {\n  if (typeof id !== 'string') {\n    throw new TypeError(`Unable to store auth data in database, received invalid \"id\" argument type \"${typeof id}\"`);\n  }\n  const store = await getReadOnlyAuthObjectStore();\n  const request = store.get(id);\n  const authData = await new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve(request.result);\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while getting auth data for ${id}`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while getting auth data for ${id}`));\n    };\n  });\n  return typeof authData !== 'undefined' ? authData.data : undefined;\n}\n\nexport async function removeAuthDataFromDatabase(id:string) {\n  if (typeof id !== 'string') {\n    throw new TypeError(`Unable to store auth data in database, received invalid \"id\" argument type \"${typeof id}\"`);\n  }\n  const store = await getReadWriteAuthObjectStore();\n  const request = store.delete(id);\n  return new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve();\n    };\n    request.onerror = function (event) {\n      logger.error(`Error while removing auth data for ${id}`);\n      logger.errorObject(event);\n      reject(new Error(`Error while removing auth data for ${id}`));\n    };\n  });\n}\n\nexport async function getQueueStatus(queueId:string) {\n  const store = await getReadOnlyJobsObjectStore();\n  const index = store.index('statusQueueIdIndex');\n  // $FlowFixMe\n  const abortedRequest = index.getAllKeys(IDBKeyRange.only([queueId, JOB_ABORTED_STATUS]));\n  // $FlowFixMe\n  const completeRequest = index.getAllKeys(IDBKeyRange.only([queueId, JOB_COMPLETE_STATUS]));\n  // $FlowFixMe\n  const pendingRequest = index.getAllKeys(IDBKeyRange.only([queueId, JOB_PENDING_STATUS]));\n  // $FlowFixMe\n  const errorRequest = index.getAllKeys(IDBKeyRange.only([queueId, JOB_ERROR_STATUS]));\n  // $FlowFixMe\n  const cleanupRequest = index.getAllKeys(IDBKeyRange.only([queueId, JOB_CLEANUP_STATUS]));\n  // $FlowFixMe\n  const cleanupAndRemoveRequest = index.getAllKeys(IDBKeyRange.only([queueId, JOB_CLEANUP_AND_REMOVE_STATUS]));\n  const abortedCountPromise = new Promise((resolve, reject) => {\n    abortedRequest.onsuccess = function (event) {\n      resolve(event.target.result.length);\n    };\n    abortedRequest.onerror = function (event) {\n      logger.error(`Request error while getting status of queue ${queueId}`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while getting status of queue ${queueId}`));\n    };\n  });\n  const completeCountPromise = new Promise((resolve, reject) => {\n    completeRequest.onsuccess = function (event) {\n      resolve(event.target.result.length);\n    };\n    completeRequest.onerror = function (event) {\n      logger.error(`Request error while getting status of queue ${queueId}`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while getting status of queue ${queueId}`));\n    };\n  });\n  const pendingCountPromise = new Promise((resolve, reject) => {\n    pendingRequest.onsuccess = function (event) {\n      resolve(event.target.result.length);\n    };\n    pendingRequest.onerror = function (event) {\n      logger.error(`Request error while getting status of queue ${queueId}`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while getting status of queue ${queueId}`));\n    };\n  });\n  const errorCountPromise = new Promise((resolve, reject) => {\n    errorRequest.onsuccess = function (event) {\n      resolve(event.target.result.length);\n    };\n    errorRequest.onerror = function (event) {\n      logger.error(`Request error while getting status of queue ${queueId}`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while getting status of queue ${queueId}`));\n    };\n  });\n  const cleanupCountPromise = new Promise((resolve, reject) => {\n    cleanupRequest.onsuccess = function (event) {\n      resolve(event.target.result.length);\n    };\n    cleanupRequest.onerror = function (event) {\n      logger.error(`Request error while getting status of queue ${queueId}`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while getting status of queue ${queueId}`));\n    };\n  });\n  const cleanupAndRemoveCountPromise = new Promise((resolve, reject) => {\n    cleanupAndRemoveRequest.onsuccess = function (event) {\n      resolve(event.target.result.length);\n    };\n    cleanupAndRemoveRequest.onerror = function (event) {\n      logger.error(`Request error while getting status of queue ${queueId}`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while getting status of queue ${queueId}`));\n    };\n  });\n  const [\n    abortedCount,\n    completeCount,\n    pendingCount,\n    errorCount,\n    cleanupCount,\n    cleanupAndRemoveCount,\n  ] = await Promise.all([\n    abortedCountPromise,\n    completeCountPromise,\n    pendingCountPromise,\n    errorCountPromise,\n    cleanupCountPromise,\n    cleanupAndRemoveCountPromise,\n  ]);\n  if (abortedCount > 0 || cleanupCount > 0) {\n    return QUEUE_ERROR_STATUS;\n  }\n  if (errorCount > 0 || pendingCount > 0 || cleanupAndRemoveCount > 0) {\n    return QUEUE_PENDING_STATUS;\n  }\n  if (completeCount > 0) {\n    return QUEUE_COMPLETE_STATUS;\n  }\n  return QUEUE_EMPTY_STATUS;\n}\n\nexport async function addArgLookup(jobId:number, key:string, jsonPath:string) {\n  if (typeof jobId !== 'number') {\n    throw new TypeError(`Unable add argument lookup, received invalid \"jobId\" argument type \"${typeof jobId}\"`);\n  }\n  if (typeof key !== 'string') {\n    throw new TypeError(`Unable add argument lookup, received invalid \"key\" argument type \"${typeof key}\"`);\n  }\n  if (typeof jsonPath !== 'string') {\n    throw new TypeError(`Unable add argument lookup, received invalid \"jsonPath\" argument type \"${typeof jsonPath}\"`);\n  }\n  const store = await getReadWriteArgLookupObjectStore();\n  const request = store.put({\n    jobId,\n    key,\n    jsonPath,\n  });\n  return new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve();\n    };\n    request.onerror = function (event) {\n      logger.error(`Error while adding argument lookup for job ${jobId} with key \"${key}\" and JSON path \"${jsonPath}\"`);\n      logger.errorObject(event);\n      reject(new Error(`Error while adding argument lookup for job ${jobId} with key \"${key}\" and JSON path \"${jsonPath}\"`));\n    };\n  });\n}\n\nexport async function getArgLookupJobPathMap(key:string) {\n  if (typeof key !== 'string') {\n    throw new TypeError(`Unable to lookup arguments, received invalid \"key\" argument type \"${typeof key}\"`);\n  }\n  const store = await getReadOnlyArgLookupObjectStore();\n  const index = store.index('keyIndex');\n  // $FlowFixMe\n  const request = index.getAll(IDBKeyRange.only(key));\n  return new Promise((resolve, reject) => {\n    request.onsuccess = function (event) {\n      const map: Map<number, string> = new Map(event.target.result.map((x) => [x.jobId, x.jsonPath]));\n      resolve(map);\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error looking up arguments for key ${key}`);\n      logger.errorObject(event);\n      reject(new Error(`Request error looking up arguments for key ${key}`));\n    };\n  });\n}\n\nexport async function lookupArgs(key:string) {\n  const map = await getArgLookupJobPathMap(key);\n  const jobs = await getJobsInDatabase([...map.keys()]);\n  const results = [];\n  for (const { id, args } of jobs) {\n    const jsonPath = map.get(id);\n    if (typeof jsonPath !== 'string') {\n      continue;\n    }\n    for (const result of JSONPath({ path: jsonPath, json: args })) {\n      results.push(result);\n    }\n  }\n  return results;\n}\n\nexport async function lookupArg(key:string) {\n  const results = await lookupArgs(key);\n  return results[0];\n}\n\nfunction removeArgLookupsForJobAsMicrotask(jobId:number) {\n  self.queueMicrotask(() => removeArgLookupsForJob(jobId).catch((error) => {\n    logger.error(`Unable to remove argument lookups for job ${jobId} in microtask`);\n    logger.errorStack(error);\n  }));\n}\n\nexport async function removeArgLookupsForJob(jobId:number) {\n  const [store, promise] = await getReadWriteArgLookupObjectStoreAndTransactionPromise();\n  const index = store.index('jobIdIndex');\n  // $FlowFixMe\n  const request = index.getAllKeys(IDBKeyRange.only(jobId));\n  request.onsuccess = function (event) {\n    for (const id of event.target.result) {\n      const deleteRequest = store.delete(id);\n      deleteRequest.onerror = function (deleteEvent) {\n        logger.error(`Delete request error while removing argument lookups for job ${jobId}`);\n        logger.errorObject(deleteEvent);\n      };\n    }\n  };\n  request.onerror = function (event) {\n    logger.error(`Request error while removing argument lookups for job ${jobId}`);\n    logger.errorObject(event);\n  };\n  await promise;\n}\n"],"file":"database.js"}