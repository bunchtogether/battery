{"version":3,"sources":["../../src/database.js"],"names":["localJobEmitter","EventEmitter","jobEmitter","logger","QUEUE_ERROR_STATUS","QUEUE_PENDING_STATUS","QUEUE_COMPLETE_STATUS","QUEUE_EMPTY_STATUS","JOB_ABORTED_STATUS","JOB_COMPLETE_STATUS","JOB_PENDING_STATUS","JOB_ERROR_STATUS","JOB_CLEANUP_STATUS","databasePromise","request","self","indexedDB","open","onupgradeneeded","e","store","target","result","createObjectStore","keyPath","autoIncrement","createIndex","unique","error","name","Promise","resolve","reject","onerror","Error","onsuccess","event","db","getReadWriteAuthObjectStore","database","transaction","objectStore","onabort","errorObject","getReadOnlyAuthObjectStore","getReadWriteQueueDataObjectStore","getReadOnlyQueueDataObjectStore","getReadWriteJobsObjectStoreAndTransactionPromise","promise","oncomplete","getReadOnlyJobsObjectStoreAndTransactionPromise","getReadWriteJobsObjectStore","getReadOnlyJobsObjectStore","getReadWriteCleanupsObjectStore","getReadOnlyCleanupsObjectStore","clearQueueDataDatabase","clear","clearJobsDatabase","emit","clearCleanupsDatabase","clearDatabase","removeJobsWithQueueIdAndTypeFromDatabase","queueId","type","index","getAllKeys","IDBKeyRange","only","id","deleteRequest","delete","deleteEvent","removeQueueIdFromJobsDatabase","removeQueueIdFromCleanupsDatabase","openCursor","cursor","primaryKey","continue","removeQueueIdFromDatabase","removeCompletedExpiredItemsFromDatabase","maxAge","getAll","bound","Date","now","status","updateJobInDatabase","transform","get","newValue","putRequest","put","getJobFromDatabase","updateCleanupInDatabase","removePathFromCleanupDataInDatabase","path","value","attempt","startAfter","data","Object","assign","updateCleanupValuesInDatabase","TypeError","combinedData","removeCleanupFromDatabase","getCleanupFromDatabase","getQueueDataFromDatabase","queueData","undefined","updateQueueDataInDatabase","markJobStatusInDatabase","markJobCompleteInDatabase","markJobPendingInDatabase","markJobErrorInDatabase","markJobCleanupInDatabase","markJobAbortedInDatabase","markJobStartAfterInDatabase","toLocaleString","markCleanupStartAfterInDatabase","markQueueForCleanupInDatabase","jobs","push","warn","updateRequest","update","event2","incrementJobAttemptInDatabase","incrementCleanupAttemptInDatabase","bulkEnqueueToDatabase","items","delay","Array","isArray","i","length","args","ids","created","enqueueToDatabase","dequeueFromDatabase","getContiguousIds","sort","a","b","points","Infinity","dequeueFromDatabaseNotIn","includes","getRequest","getJobsFromDatabase","getCompletedJobsCountFromDatabase","getCompletedJobsFromDatabase","storeAuthDataInDatabase","getAuthDataFromDatabase","authData","removeAuthDataFromDatabase","getQueueStatus","abortedRequest","completeRequest","pendingRequest","errorRequest","cleanupRequest","abortedCountPromise","completeCountPromise","pendingCountPromise","errorCountPromise","cleanupCountPromise","all","abortedCount","completeCount","pendingCount","errorCount","cleanupCount"],"mappings":"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","sourcesContent":["// @flow\n\nimport merge from 'lodash/merge';\nimport unset from 'lodash/unset';\nimport EventEmitter from 'events';\nimport makeLogger from './logger';\n\n// Local job emitter is for this process only,\n// jobEmitter is bridged when a MessagePort is open\nexport const localJobEmitter = new EventEmitter();\nexport const jobEmitter = new EventEmitter();\n\nconst logger = makeLogger('Jobs Database');\n\nexport type Job = {\n  id: number,\n  queueId:string,\n  type:string,\n  args:Array<any>,\n  attempt: number,\n  created: number,\n  status: number,\n  startAfter: number\n};\n\n\ntype Cleanup = {\n  id: number,\n  queueId:string,\n  data: Object,\n  attempt: number,\n  startAfter: number\n};\n\nexport const QUEUE_ERROR_STATUS = 0;\nexport const QUEUE_PENDING_STATUS = 1;\nexport const QUEUE_COMPLETE_STATUS = 2;\nexport const QUEUE_EMPTY_STATUS = 3;\n\nexport const JOB_ABORTED_STATUS = 2;\nexport const JOB_COMPLETE_STATUS = 1;\nexport const JOB_PENDING_STATUS = 0;\nexport const JOB_ERROR_STATUS = -1;\nexport const JOB_CLEANUP_STATUS = -2;\n\n\nexport const databasePromise = (async () => {\n  const request = self.indexedDB.open('battery-queue-01', 2);\n\n  request.onupgradeneeded = function (e) {\n    try {\n      const store = e.target.result.createObjectStore('jobs', { keyPath: 'id', autoIncrement: true });\n      store.createIndex('statusIndex', 'status', { unique: false });\n      store.createIndex('queueIdIndex', 'queueId', { unique: false });\n      store.createIndex('queueIdTypeIndex', ['queueId', 'type'], { unique: false });\n      store.createIndex('statusQueueIdIndex', ['queueId', 'status'], { unique: false });\n      store.createIndex('createdIndex', 'created', { unique: false });\n    } catch (error) {\n      if (!(error.name === 'ConstraintError')) {\n        throw error;\n      }\n    }\n    try {\n      e.target.result.createObjectStore('queue-data', { keyPath: 'queueId' });\n    } catch (error) {\n      if (!(error.name === 'ConstraintError')) {\n        throw error;\n      }\n    }\n    try {\n      const store = e.target.result.createObjectStore('cleanups', { keyPath: 'id' });\n      store.createIndex('queueIdIndex', 'queueId', { unique: false });\n    } catch (error) {\n      if (!(error.name === 'ConstraintError')) {\n        throw error;\n      }\n    }\n    try {\n      e.target.result.createObjectStore('auth-data', { keyPath: 'id' });\n    } catch (error) {\n      if (!(error.name === 'ConstraintError')) {\n        throw error;\n      }\n    }\n  };\n\n  const db = await new Promise((resolve, reject) => {\n    request.onerror = () => {\n      reject(new Error('Unable to open database'));\n    };\n    request.onsuccess = function (event) {\n      resolve(event.target.result);\n    };\n  });\n\n  return db;\n})();\n\nasync function getReadWriteAuthObjectStore() {\n  const database = await databasePromise;\n  const transaction = database.transaction(['auth-data'], 'readwrite');\n  const objectStore = transaction.objectStore('auth-data');\n  transaction.onabort = (event) => {\n    logger.error('Read-write auth transaction was aborted');\n    logger.errorObject(event);\n  };\n  transaction.onerror = (event) => {\n    logger.error('Error in read-write auth transaction');\n    logger.errorObject(event);\n  };\n  return objectStore;\n}\n\nasync function getReadOnlyAuthObjectStore() {\n  const database = await databasePromise;\n  const transaction = database.transaction(['auth-data'], 'readonly');\n  const objectStore = transaction.objectStore('auth-data');\n  transaction.onabort = (event) => {\n    logger.error('Read-only auth transaction was aborted');\n    logger.errorObject(event);\n  };\n  transaction.onerror = (event) => {\n    logger.error('Error in read-only auth transaction');\n    logger.errorObject(event);\n  };\n  return objectStore;\n}\n\nasync function getReadWriteQueueDataObjectStore() {\n  const database = await databasePromise;\n  const transaction = database.transaction(['queue-data'], 'readwrite');\n  const objectStore = transaction.objectStore('queue-data');\n  transaction.onabort = (event) => {\n    logger.error('Read-write queue data transaction was aborted');\n    logger.errorObject(event);\n  };\n  transaction.onerror = (event) => {\n    logger.error('Error in read-write queue data transaction');\n    logger.errorObject(event);\n  };\n  return objectStore;\n}\n\nasync function getReadOnlyQueueDataObjectStore() {\n  const database = await databasePromise;\n  const transaction = database.transaction(['queue-data'], 'readonly');\n  const objectStore = transaction.objectStore('queue-data');\n  transaction.onabort = (event) => {\n    logger.error('Read-only queue data transaction was aborted');\n    logger.errorObject(event);\n  };\n  transaction.onerror = (event) => {\n    logger.error('Error in read-only queue data transaction');\n    logger.errorObject(event);\n  };\n  return objectStore;\n}\n\nasync function getReadWriteJobsObjectStoreAndTransactionPromise() {\n  const database = await databasePromise;\n  const transaction = database.transaction(['jobs'], 'readwrite');\n  const objectStore = transaction.objectStore('jobs');\n  const promise = new Promise((resolve, reject) => {\n    transaction.onabort = (event) => {\n      logger.error('Read-write jobs transaction was aborted');\n      logger.errorObject(event);\n      reject(new Error('Read-write jobs transaction was aborted'));\n    };\n    transaction.onerror = (event) => {\n      logger.error('Error in read-write jobs transaction');\n      logger.errorObject(event);\n      reject(new Error('Error in read-write jobs transaction'));\n    };\n    transaction.oncomplete = () => {\n      resolve();\n    };\n  });\n  return [objectStore, promise];\n}\n\nasync function getReadOnlyJobsObjectStoreAndTransactionPromise() {\n  const database = await databasePromise;\n  const transaction = database.transaction(['jobs'], 'readonly');\n  const objectStore = transaction.objectStore('jobs');\n  const promise = new Promise((resolve, reject) => {\n    transaction.onabort = (event) => {\n      logger.error('Read-only jobs transaction was aborted');\n      logger.errorObject(event);\n      reject(new Error('Read-only jobs transaction was aborted'));\n    };\n    transaction.onerror = (event) => {\n      logger.error('Error in read-only jobs transaction');\n      logger.errorObject(event);\n      reject(new Error('Error in read-only jobs transaction'));\n    };\n    transaction.oncomplete = () => {\n      resolve();\n    };\n  });\n  return [objectStore, promise];\n}\n\nasync function getReadWriteJobsObjectStore() {\n  const database = await databasePromise;\n  const transaction = database.transaction(['jobs'], 'readwrite');\n  const objectStore = transaction.objectStore('jobs');\n  transaction.onabort = (event) => {\n    logger.error('Read-write jobs transaction was aborted');\n    logger.errorObject(event);\n  };\n  transaction.onerror = (event) => {\n    logger.error('Error in read-write jobs transaction');\n    logger.errorObject(event);\n  };\n  return objectStore;\n}\n\nasync function getReadOnlyJobsObjectStore() {\n  const database = await databasePromise;\n  const transaction = database.transaction(['jobs'], 'readonly');\n  const objectStore = transaction.objectStore('jobs');\n  transaction.onabort = (event) => {\n    logger.error('Read-only jobs transaction was aborted');\n    logger.errorObject(event);\n  };\n  transaction.onerror = (event) => {\n    logger.error('Error in read-only jobs transaction');\n    logger.errorObject(event);\n  };\n  return objectStore;\n}\n\nasync function getReadWriteCleanupsObjectStore() {\n  const database = await databasePromise;\n  const transaction = database.transaction(['cleanups'], 'readwrite');\n  const objectStore = transaction.objectStore('cleanups');\n  transaction.onabort = (event) => {\n    logger.error('Read-write cleanups transaction was aborted');\n    logger.errorObject(event);\n  };\n  transaction.onerror = (event) => {\n    logger.error('Error in read-write cleanups transaction');\n    logger.errorObject(event);\n  };\n  return objectStore;\n}\n\nasync function getReadOnlyCleanupsObjectStore() {\n  const database = await databasePromise;\n  const transaction = database.transaction(['cleanups'], 'readonly');\n  const objectStore = transaction.objectStore('cleanups');\n  transaction.onabort = (event) => {\n    logger.error('Read-only cleanups transaction was aborted');\n    logger.errorObject(event);\n  };\n  transaction.onerror = (event) => {\n    logger.error('Error in read-only cleanups transaction');\n    logger.errorObject(event);\n  };\n  return objectStore;\n}\n\nasync function clearQueueDataDatabase() {\n  const store = await getReadWriteQueueDataObjectStore();\n  const request = store.clear();\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve();\n    };\n    request.onerror = function (event) {\n      logger.error('Error while clearing queue data database');\n      logger.errorObject(event);\n      reject(new Error('Error while clearing queue data database'));\n    };\n  });\n}\n\nasync function clearJobsDatabase() {\n  const store = await getReadWriteJobsObjectStore();\n  const request = store.clear();\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve();\n    };\n    request.onerror = function (event) {\n      logger.error('Error while clearing jobs database');\n      logger.errorObject(event);\n      reject(new Error('Error while clearing jobs database'));\n    };\n  });\n  localJobEmitter.emit('jobsClear');\n  jobEmitter.emit('jobsClear');\n}\n\nasync function clearCleanupsDatabase() {\n  const store = await getReadWriteCleanupsObjectStore();\n  const request = store.clear();\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve();\n    };\n    request.onerror = function (event) {\n      logger.error('Error while clearing cleanups database');\n      logger.errorObject(event);\n      reject(new Error('Error while clearing cleanups database'));\n    };\n  });\n}\n\nexport async function clearDatabase() {\n  await clearJobsDatabase();\n  await clearCleanupsDatabase();\n  await clearQueueDataDatabase();\n}\n\nexport async function removeJobsWithQueueIdAndTypeFromDatabase(queueId:string, type:string) {\n  const [store, promise] = await getReadWriteJobsObjectStoreAndTransactionPromise();\n  const index = store.index('queueIdTypeIndex');\n  // $FlowFixMe\n  const request = index.getAllKeys(IDBKeyRange.only([queueId, type]));\n  request.onsuccess = function (event) {\n    for (const id of event.target.result) {\n      localJobEmitter.emit('jobDelete', id, queueId);\n      jobEmitter.emit('jobDelete', id, queueId);\n      const deleteRequest = store.delete(id);\n      deleteRequest.onerror = function (deleteEvent) {\n        logger.error(`Request error while removing job ${id} in queue ${queueId} and type ${type} from jobs database`);\n        logger.errorObject(deleteEvent);\n      };\n    }\n  };\n  request.onerror = function (event) {\n    logger.error(`Request error while removing jobs with queue ${queueId} and type ${type} from jobs database`);\n    logger.errorObject(event);\n  };\n  await promise;\n}\n\nexport async function removeQueueIdFromJobsDatabase(queueId:string) {\n  const [store, promise] = await getReadWriteJobsObjectStoreAndTransactionPromise();\n  const index = store.index('queueIdIndex');\n  // $FlowFixMe\n  const request = index.getAllKeys(IDBKeyRange.only(queueId));\n  request.onsuccess = function (event) {\n    for (const id of event.target.result) {\n      localJobEmitter.emit('jobDelete', id, queueId);\n      jobEmitter.emit('jobDelete', id, queueId);\n      const deleteRequest = store.delete(id);\n      deleteRequest.onerror = function (deleteEvent) {\n        logger.error(`Request error while removing job ${id} in queue ${queueId} from jobs database`);\n        logger.errorObject(deleteEvent);\n      };\n    }\n  };\n  request.onerror = function (event) {\n    logger.error(`Request error while removing queue ${queueId} from jobs database`);\n    logger.errorObject(event);\n  };\n  await promise;\n}\n\nasync function removeQueueIdFromCleanupsDatabase(queueId:string) {\n  const store = await getReadWriteCleanupsObjectStore();\n  const index = store.index('queueIdIndex');\n  // $FlowFixMe\n  const request = index.openCursor(IDBKeyRange.only(queueId));\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function (event) {\n      const cursor = event.target.result;\n      if (cursor) {\n        store.delete(cursor.primaryKey);\n        cursor.continue();\n      } else {\n        resolve();\n      }\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while removing queue ${queueId} from jobs database`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while removing queue ${queueId} from jobs database`));\n    };\n  });\n}\n\nexport async function removeQueueIdFromDatabase(queueId:string) {\n  await removeQueueIdFromJobsDatabase(queueId);\n  await removeQueueIdFromCleanupsDatabase(queueId);\n}\n\nexport async function removeCompletedExpiredItemsFromDatabase(maxAge:number) {\n  const [store, promise] = await getReadWriteJobsObjectStoreAndTransactionPromise();\n  const index = store.index('createdIndex');\n  // $FlowFixMe\n  const request = index.getAll(IDBKeyRange.bound(0, Date.now() - maxAge));\n  request.onsuccess = function (event) {\n    for (const { id, queueId, status } of event.target.result) {\n      if (status !== JOB_COMPLETE_STATUS) {\n        continue;\n      }\n      const deleteRequest = store.delete(id);\n      deleteRequest.onsuccess = function () {\n        localJobEmitter.emit('jobDelete', id, queueId);\n        jobEmitter.emit('jobDelete', id, queueId);\n      };\n      deleteRequest.onerror = function (deleteEvent) {\n        logger.error(`Request error while removing job ${id} in queue ${queueId} from completed exired items from jobs database`);\n        logger.errorObject(deleteEvent);\n      };\n    }\n  };\n  request.onerror = function (event) {\n    logger.error('Request error while removing completed exired items from jobs database');\n    logger.errorObject(event);\n  };\n  await promise;\n}\n\nexport async function updateJobInDatabase(id:number, transform:(Job | void) => Object):Promise<Job | void> {\n  const store = await getReadWriteJobsObjectStore();\n  const request = store.get(id);\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      const newValue = transform(request.result);\n      if (typeof newValue === 'undefined') {\n        resolve();\n      } else {\n        const putRequest = store.put(newValue);\n        putRequest.onsuccess = function () {\n          localJobEmitter.emit('jobUpdate', newValue.id, newValue.queueId, newValue.type, newValue.status);\n          jobEmitter.emit('jobUpdate', newValue.id, newValue.queueId, newValue.type, newValue.status);\n          resolve();\n        };\n        putRequest.onerror = function (event) {\n          logger.error(`Put request error while updating ${id}`);\n          logger.errorObject(event);\n          reject(new Error(`Put request error while updating ${id}`));\n        };\n      }\n    };\n    request.onerror = function (event) {\n      logger.error(`Get request error while updating ${id}`);\n      logger.errorObject(event);\n      reject(new Error(`Get request error while updating ${id}`));\n    };\n  });\n}\n\nexport async function getJobFromDatabase(id:number):Promise<Job | void> {\n  const store = await getReadOnlyJobsObjectStore();\n  const request = store.get(id);\n  return new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve(request.result);\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while getting ${id}`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while getting ${id}`));\n    };\n  });\n}\n\nexport async function updateCleanupInDatabase(id:number, transform:(Cleanup | void) => Object):Promise<Cleanup | void> {\n  const store = await getReadWriteCleanupsObjectStore();\n  const request = store.get(id);\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      const newValue = transform(request.result);\n      if (typeof newValue === 'undefined') {\n        resolve();\n      } else {\n        const putRequest = store.put(newValue);\n        putRequest.onsuccess = function () {\n          resolve();\n        };\n        putRequest.onerror = function (event) {\n          logger.error(`Put request error while updating ${id} cleanup`);\n          logger.errorObject(event);\n          reject(new Error(`Put request error while updating ${id} cleanup`));\n        };\n      }\n    };\n    request.onerror = function (event) {\n      logger.error(`Get request error while updating ${id} cleanup`);\n      logger.errorObject(event);\n      reject(new Error(`Get request error while updating ${id} cleanup`));\n    };\n  });\n}\n\nexport async function removePathFromCleanupDataInDatabase(id:number, path:Array<string>) {\n  await updateCleanupInDatabase(id, (value: Cleanup | void) => {\n    if (typeof value === 'undefined') {\n      return;\n    }\n    const { queueId, attempt, startAfter } = value;\n    const data = Object.assign({}, value.data);\n    unset(data, path);\n    return { // eslint-disable-line consistent-return\n      id,\n      queueId,\n      attempt,\n      startAfter,\n      data,\n    };\n  });\n}\n\n\nexport async function updateCleanupValuesInDatabase(id:number, queueId:string, data:Object) {\n  if (typeof id !== 'number') {\n    throw new TypeError(`Unable to update cleanup in database, received invalid \"id\" argument type \"${typeof id}\"`);\n  }\n  if (typeof queueId !== 'string') {\n    throw new TypeError(`Unable to update cleanup in database, received invalid \"queueId\" argument type \"${typeof queueId}\"`);\n  }\n  if (typeof data !== 'object') {\n    throw new TypeError(`Unable to update cleanup in database, received invalid \"data\" argument type \"${typeof data}\"`);\n  }\n  await updateCleanupInDatabase(id, (value: Cleanup | void) => {\n    const combinedData = typeof value === 'undefined' ? data : merge({}, value.data, data);\n    return {\n      id,\n      queueId,\n      attempt: 0,\n      startAfter: Date.now(),\n      data: combinedData,\n    };\n  });\n}\n\nexport async function removeCleanupFromDatabase(id:number) {\n  const store = await getReadWriteCleanupsObjectStore();\n  const request = store.delete(id);\n  return new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve();\n    };\n    request.onerror = function (event) {\n      logger.error(`Error while removing cleanup data for ${id}`);\n      logger.errorObject(event);\n      reject(new Error(`Error while removing cleanup data for ${id}`));\n    };\n  });\n}\n\nexport async function getCleanupFromDatabase(id:number):Promise<Cleanup | void> {\n  const store = await getReadOnlyCleanupsObjectStore();\n  const request = store.get(id);\n  return new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve(request.result);\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while getting ${id}`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while getting ${id}`));\n    };\n  });\n}\n\nexport async function getQueueDataFromDatabase(queueId:string) {\n  const store = await getReadOnlyQueueDataObjectStore();\n  const request = store.get(queueId);\n  const queueData = await new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve(request.result);\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while getting queue ${queueId} data`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while getting queue ${queueId} data`));\n    };\n  });\n  return typeof queueData !== 'undefined' ? queueData.data : undefined;\n}\n\nexport async function updateQueueDataInDatabase(queueId:string, data:Object) {\n  const value = await getQueueDataFromDatabase(queueId);\n  const store = await getReadWriteQueueDataObjectStore();\n  const request = store.put({\n    queueId,\n    data: merge({}, value, data),\n  });\n  return new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve();\n    };\n    request.onerror = function (event) {\n      logger.error(`Error while updating queue ${queueId} data`);\n      logger.errorObject(event);\n      reject(new Error(`Error while updating queue ${queueId} data`));\n    };\n  });\n}\n\nexport async function markJobStatusInDatabase(id:number, status:number) {\n  return updateJobInDatabase(id, (value:Job | void) => {\n    if (typeof value === 'undefined') {\n      throw new Error(`Unable to mark job ${id} as status ${status} in database, job does not exist`);\n    }\n    value.status = status; // eslint-disable-line no-param-reassign\n    return value;\n  });\n}\n\nexport function markJobCompleteInDatabase(id:number) {\n  return markJobStatusInDatabase(id, JOB_COMPLETE_STATUS);\n}\n\nexport function markJobPendingInDatabase(id:number) {\n  return markJobStatusInDatabase(id, JOB_PENDING_STATUS);\n}\n\nexport function markJobErrorInDatabase(id:number) {\n  return markJobStatusInDatabase(id, JOB_ERROR_STATUS);\n}\n\nexport function markJobCleanupInDatabase(id:number) {\n  return markJobStatusInDatabase(id, JOB_CLEANUP_STATUS);\n}\n\nexport function markJobAbortedInDatabase(id:number) {\n  return markJobStatusInDatabase(id, JOB_ABORTED_STATUS);\n}\n\nexport async function markJobStartAfterInDatabase(id:number, startAfter:number) {\n  return updateJobInDatabase(id, (value:Job | void) => {\n    if (typeof value === 'undefined') {\n      throw new Error(`Unable to mark job ${id} start-after time to ${new Date(startAfter).toLocaleString()} in database, job does not exist`);\n    }\n    if (startAfter < value.startAfter) {\n      return;\n    }\n    value.startAfter = startAfter; // eslint-disable-line no-param-reassign\n    return value; // eslint-disable-line consistent-return\n  });\n}\n\nexport async function markCleanupStartAfterInDatabase(id:number, startAfter:number) {\n  await updateCleanupInDatabase(id, (value: Cleanup | void) => {\n    if (typeof value === 'undefined') {\n      throw new Error(`Unable to mark cleanup ${id} start-after time to ${new Date(startAfter).toLocaleString()} in database, cleanup does not exist`);\n    }\n    if (startAfter < value.startAfter) {\n      return;\n    }\n    value.startAfter = startAfter; // eslint-disable-line  no-param-reassign\n    return value; // eslint-disable-line consistent-return\n  });\n}\n\nexport async function markQueueForCleanupInDatabase(queueId:string) {\n  const store = await getReadWriteJobsObjectStore();\n  const index = store.index('queueIdIndex');\n  // $FlowFixMe\n  const request = index.openCursor(IDBKeyRange.only(queueId));\n  const jobs = [];\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function (event) {\n      const cursor = event.target.result;\n      if (cursor) {\n        const value = Object.assign({}, cursor.value);\n        switch (value.status) {\n          case JOB_ERROR_STATUS:\n            value.status = JOB_CLEANUP_STATUS;\n            jobs.push(value);\n            break;\n          case JOB_COMPLETE_STATUS:\n            value.status = JOB_CLEANUP_STATUS;\n            jobs.push(value);\n            break;\n          case JOB_PENDING_STATUS:\n            value.status = JOB_ABORTED_STATUS;\n            break;\n          case JOB_CLEANUP_STATUS:\n            cursor.continue();\n            return;\n          case JOB_ABORTED_STATUS:\n            cursor.continue();\n            return;\n          default:\n            logger.warn(`Unhandled job status ${value.status}`);\n            cursor.continue();\n            return;\n        }\n        const updateRequest = cursor.update(value);\n        updateRequest.onsuccess = function () {\n          localJobEmitter.emit('jobUpdate', value.id, value.queueId, value.type, value.status);\n          jobEmitter.emit('jobUpdate', value.id, value.queueId, value.type, value.status);\n          cursor.continue();\n        };\n        updateRequest.onerror = function (event2) {\n          logger.error(`Update request error while marking queue ${queueId} error`);\n          logger.errorObject(event2);\n          cursor.continue();\n        };\n      } else {\n        resolve();\n      }\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while marking queue ${queueId} error`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while marking queue ${queueId} error`));\n    };\n  });\n  return jobs;\n}\n\nexport async function incrementJobAttemptInDatabase(id:number) {\n  await updateJobInDatabase(id, (value:Job | void) => {\n    if (typeof value === 'undefined') {\n      throw new Error(`Unable to increment attempts for job ${id} in database, job does not exist`);\n    }\n    value.attempt += 1; // eslint-disable-line no-param-reassign\n    return value;\n  });\n}\n\nexport async function incrementCleanupAttemptInDatabase(id:number, queueId:string) {\n  let attempt = 1;\n  await updateCleanupInDatabase(id, (value: Cleanup | void) => {\n    if (typeof value === 'undefined') {\n      return {\n        id,\n        queueId,\n        attempt: 1,\n        startAfter: Date.now(),\n        data: {},\n      };\n    }\n    attempt = value.attempt + 1;\n    value.attempt = attempt; // eslint-disable-line no-param-reassign\n    return value;\n  });\n  return attempt;\n}\n\nexport async function bulkEnqueueToDatabase(queueId: string, items:Array<[string, Array<any>]>, delay: number) { // eslint-disable-line no-underscore-dangle\n  if (typeof queueId !== 'string') {\n    throw new TypeError(`Unable to bulk enqueue in database, received invalid \"queueId\" argument type \"${typeof queueId}\"`);\n  }\n  if (!Array.isArray(items)) {\n    throw new TypeError(`Unable to bulk enqueue in database, received invalid \"items\" argument type \"${typeof items}\"`);\n  }\n  for (let i = 0; i < items.length; i += 1) {\n    const [type, args] = items[i];\n    if (typeof type !== 'string') {\n      throw new TypeError(`Unable to bulk enqueue in database, received invalid items[${i}] \"type\" argument type \"${typeof type}\"`);\n    }\n    if (!Array.isArray(args)) {\n      throw new TypeError(`Unable to bulk enqueue in database, received invalid items[${i}] \"args\" argument type \"${typeof args}\"`);\n    }\n  }\n  if (typeof delay !== 'number') {\n    throw new TypeError(`Unable to bulk enqueue in database, received invalid \"delay\" argument type \"${typeof delay}\"`);\n  }\n  const ids = [];\n  const store = await getReadWriteJobsObjectStore();\n  await new Promise((resolve, reject) => {\n    for (let i = 0; i < items.length; i += 1) {\n      const [type, args] = items[i];\n      const value = {\n        queueId,\n        type,\n        args,\n        attempt: 0,\n        created: Date.now(),\n        status: JOB_PENDING_STATUS,\n        startAfter: Date.now() + delay,\n      };\n      const request = store.put(value);\n      request.onsuccess = function () {\n        const id = request.result;\n        ids.push(request.result);\n        localJobEmitter.emit('jobAdd', id, queueId, type);\n        jobEmitter.emit('jobAdd', id, queueId, type);\n        resolve(request.result);\n      };\n      request.onerror = function (event) {\n        logger.error(`Request error while bulk enqueueing ${items.length} ${items.length === 1 ? 'job' : 'jobs'} in queue ${queueId}`);\n        logger.errorObject(event);\n        reject(new Error(`Request error while bulk enqueueing ${items.length} ${items.length === 1 ? 'job' : 'jobs'} in queue ${queueId}`));\n      };\n    }\n  });\n  return ids;\n}\n\nexport async function enqueueToDatabase(queueId: string, type: string, args: Array<any>, delay: number) { // eslint-disable-line no-underscore-dangle\n  if (typeof queueId !== 'string') {\n    throw new TypeError(`Unable to enqueue in database, received invalid \"queueId\" argument type \"${typeof queueId}\"`);\n  }\n  if (typeof type !== 'string') {\n    throw new TypeError(`Unable to enqueue in database, received invalid \"type\" argument type \"${typeof type}\"`);\n  }\n  if (!Array.isArray(args)) {\n    throw new TypeError(`Unable to enqueue in database, received invalid \"args\" argument type \"${typeof args}\"`);\n  }\n  if (typeof delay !== 'number') {\n    throw new TypeError(`Unable to enqueue in database, received invalid \"delay\" argument type \"${typeof delay}\"`);\n  }\n  const value = {\n    queueId,\n    type,\n    args,\n    attempt: 0,\n    created: Date.now(),\n    status: JOB_PENDING_STATUS,\n    startAfter: Date.now() + delay,\n  };\n  const store = await getReadWriteJobsObjectStore();\n\n  const request = store.put(value);\n  const id = await new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve(request.result);\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while enqueueing ${type} job`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while enqueueing ${type} job`));\n    };\n  });\n  localJobEmitter.emit('jobAdd', id, queueId, type);\n  jobEmitter.emit('jobAdd', id, queueId, type);\n  return id;\n}\n\nexport async function dequeueFromDatabase():Promise<Array<Job>> { // eslint-disable-line no-underscore-dangle\n  const store = await getReadOnlyJobsObjectStore();\n  const index = store.index('statusIndex');\n  // $FlowFixMe\n  const request = index.getAll(IDBKeyRange.bound(JOB_CLEANUP_STATUS, JOB_PENDING_STATUS));\n  const jobs = await new Promise((resolve, reject) => {\n    request.onsuccess = function (event) {\n      resolve(event.target.result);\n    };\n    request.onerror = function (event) {\n      logger.error('Request error while dequeing');\n      logger.errorObject(event);\n      reject(new Error('Request error while dequeing'));\n    };\n  });\n  return jobs;\n}\n\nexport function getContiguousIds(ids:Array<number>) {\n  ids.sort((a, b) => a - b);\n  const points = [[0, ids[0] - 1]];\n  for (let i = 0; i < ids.length; i += 1) {\n    if (ids[i] + 1 !== ids[i + 1]) {\n      if (i + 1 >= ids.length) {\n        points.push([ids[i] + 1, Infinity]);\n      } else {\n        points.push([ids[i] + 1, ids[i + 1] - 1]);\n      }\n    }\n  }\n  return points;\n}\n\nexport async function dequeueFromDatabaseNotIn(ids:Array<number>):Promise<Array<Job>> { // eslint-disable-line no-underscore-dangle\n  if (ids.length === 0) {\n    return dequeueFromDatabase();\n  }\n  const [store, promise] = await getReadOnlyJobsObjectStoreAndTransactionPromise();\n  const index = store.index('statusIndex');\n  const jobs = [];\n  // $FlowFixMe\n  const request = index.getAllKeys(IDBKeyRange.bound(JOB_CLEANUP_STATUS, JOB_PENDING_STATUS));\n  request.onsuccess = function (event) {\n    for (const id of event.target.result) {\n      if (ids.includes(id)) {\n        continue;\n      }\n      const getRequest = store.get(id);\n      getRequest.onsuccess = function () {\n        jobs.push(getRequest.result);\n      };\n      getRequest.onerror = function (event2) {\n        logger.error(`Request error while getting job ${id}`);\n        logger.errorObject(event2);\n      };\n    }\n  };\n  request.onerror = function (event) {\n    logger.error('Request error while dequeing');\n    logger.errorObject(event);\n  };\n  await promise;\n  return jobs;\n}\n\nexport async function getJobsFromDatabase(queueId: string):Promise<Array<Job>> { // eslint-disable-line no-underscore-dangle\n  if (typeof queueId !== 'string') {\n    throw new TypeError(`Unable to get completed jobs database, received invalid \"queueId\" argument type \"${typeof queueId}\"`);\n  }\n  const store = await getReadOnlyJobsObjectStore();\n  const index = store.index('queueIdIndex');\n  // $FlowFixMe\n  const request = index.getAll(IDBKeyRange.only(queueId));\n  const jobs = await new Promise((resolve, reject) => {\n    request.onsuccess = function (event) {\n      resolve(event.target.result);\n    };\n    request.onerror = function (event) {\n      logger.error('Request error while dequeing');\n      logger.errorObject(event);\n      reject(new Error('Request error while dequeing'));\n    };\n  });\n  return jobs;\n}\n\nexport async function getCompletedJobsCountFromDatabase(queueId: string) { // eslint-disable-line no-underscore-dangle\n  const jobs = await getCompletedJobsFromDatabase(queueId);\n  return jobs.length;\n}\n\nexport async function getCompletedJobsFromDatabase(queueId: string):Promise<Array<Job>> { // eslint-disable-line no-underscore-dangle\n  if (typeof queueId !== 'string') {\n    throw new TypeError(`Unable to get completed jobs database, received invalid \"queueId\" argument type \"${typeof queueId}\"`);\n  }\n  const store = await getReadOnlyJobsObjectStore();\n  const index = store.index('statusQueueIdIndex');\n  // $FlowFixMe\n  const request = index.openCursor(IDBKeyRange.only([queueId, JOB_COMPLETE_STATUS]));\n  const jobs = [];\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function (event) {\n      const cursor = event.target.result;\n      if (cursor) {\n        jobs.push(cursor.value);\n        cursor.continue();\n      } else {\n        resolve();\n      }\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while getting completed jobs for queue ${queueId}`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while getting completed jobs for queue ${queueId}`));\n    };\n  });\n  return jobs;\n}\n\nexport async function storeAuthDataInDatabase(id:string, data: Object) { // eslint-disable-line no-underscore-dangle\n  if (typeof id !== 'string') {\n    throw new TypeError(`Unable to store auth data in database, received invalid \"id\" argument type \"${typeof id}\"`);\n  }\n  if (typeof data !== 'object') {\n    throw new TypeError(`Unable to store auth data in database, received invalid \"data\" argument type \"${typeof data}\"`);\n  }\n  const store = await getReadWriteAuthObjectStore();\n  const request = store.put({ id, data });\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve();\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while storing auth data for ${id}`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while storing auth data for ${id}`));\n    };\n  });\n}\n\nexport async function getAuthDataFromDatabase(id:string) {\n  if (typeof id !== 'string') {\n    throw new TypeError(`Unable to store auth data in database, received invalid \"id\" argument type \"${typeof id}\"`);\n  }\n  const store = await getReadOnlyAuthObjectStore();\n  const request = store.get(id);\n  const authData = await new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve(request.result);\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while getting auth data for ${id}`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while getting auth data for ${id}`));\n    };\n  });\n  return typeof authData !== 'undefined' ? authData.data : undefined;\n}\n\nexport async function removeAuthDataFromDatabase(id:string) {\n  if (typeof id !== 'string') {\n    throw new TypeError(`Unable to store auth data in database, received invalid \"id\" argument type \"${typeof id}\"`);\n  }\n  const store = await getReadWriteAuthObjectStore();\n  const request = store.delete(id);\n  return new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve();\n    };\n    request.onerror = function (event) {\n      logger.error(`Error while removing auth data for ${id}`);\n      logger.errorObject(event);\n      reject(new Error(`Error while removing auth data for ${id}`));\n    };\n  });\n}\n\nexport async function getQueueStatus(queueId:string) {\n  const store = await getReadOnlyJobsObjectStore();\n  const index = store.index('statusQueueIdIndex');\n  // $FlowFixMe\n  const abortedRequest = index.getAllKeys(IDBKeyRange.only([queueId, JOB_ABORTED_STATUS]));\n  // $FlowFixMe\n  const completeRequest = index.getAllKeys(IDBKeyRange.only([queueId, JOB_COMPLETE_STATUS]));\n  // $FlowFixMe\n  const pendingRequest = index.getAllKeys(IDBKeyRange.only([queueId, JOB_PENDING_STATUS]));\n  // $FlowFixMe\n  const errorRequest = index.getAllKeys(IDBKeyRange.only([queueId, JOB_ERROR_STATUS]));\n  // $FlowFixMe\n  const cleanupRequest = index.getAllKeys(IDBKeyRange.only([queueId, JOB_CLEANUP_STATUS]));\n  const abortedCountPromise = new Promise((resolve, reject) => {\n    abortedRequest.onsuccess = function (event) {\n      resolve(event.target.result.length);\n    };\n    abortedRequest.onerror = function (event) {\n      logger.error(`Request error while getting status of queue ${queueId}`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while getting status of queue ${queueId}`));\n    };\n  });\n  const completeCountPromise = new Promise((resolve, reject) => {\n    completeRequest.onsuccess = function (event) {\n      resolve(event.target.result.length);\n    };\n    completeRequest.onerror = function (event) {\n      logger.error(`Request error while getting status of queue ${queueId}`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while getting status of queue ${queueId}`));\n    };\n  });\n  const pendingCountPromise = new Promise((resolve, reject) => {\n    pendingRequest.onsuccess = function (event) {\n      resolve(event.target.result.length);\n    };\n    pendingRequest.onerror = function (event) {\n      logger.error(`Request error while getting status of queue ${queueId}`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while getting status of queue ${queueId}`));\n    };\n  });\n  const errorCountPromise = new Promise((resolve, reject) => {\n    errorRequest.onsuccess = function (event) {\n      resolve(event.target.result.length);\n    };\n    errorRequest.onerror = function (event) {\n      logger.error(`Request error while getting status of queue ${queueId}`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while getting status of queue ${queueId}`));\n    };\n  });\n  const cleanupCountPromise = new Promise((resolve, reject) => {\n    cleanupRequest.onsuccess = function (event) {\n      resolve(event.target.result.length);\n    };\n    cleanupRequest.onerror = function (event) {\n      logger.error(`Request error while getting status of queue ${queueId}`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while getting status of queue ${queueId}`));\n    };\n  });\n  const [\n    abortedCount,\n    completeCount,\n    pendingCount,\n    errorCount,\n    cleanupCount,\n  ] = await Promise.all([\n    abortedCountPromise,\n    completeCountPromise,\n    pendingCountPromise,\n    errorCountPromise,\n    cleanupCountPromise,\n  ]);\n  if (abortedCount > 0 || cleanupCount > 0) {\n    return QUEUE_ERROR_STATUS;\n  }\n  if (errorCount > 0 || pendingCount > 0) {\n    return QUEUE_PENDING_STATUS;\n  }\n  if (completeCount > 0) {\n    return QUEUE_COMPLETE_STATUS;\n  }\n  return QUEUE_EMPTY_STATUS;\n}\n\n"],"file":"database.js"}