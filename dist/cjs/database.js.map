{"version":3,"sources":["../../src/database.js"],"names":["localJobEmitter","EventEmitter","jobEmitter","logger","JobDoesNotExistError","message","name","Error","CleanupDoesNotExistError","QUEUE_ERROR_STATUS","QUEUE_PENDING_STATUS","QUEUE_COMPLETE_STATUS","QUEUE_EMPTY_STATUS","JOB_ABORTED_STATUS","JOB_COMPLETE_STATUS","JOB_PENDING_STATUS","JOB_ERROR_STATUS","JOB_CLEANUP_STATUS","JOB_CLEANUP_AND_REMOVE_STATUS","databasePromise","request","self","indexedDB","open","onupgradeneeded","e","store","target","result","createObjectStore","keyPath","autoIncrement","createIndex","unique","error","Promise","resolve","reject","onerror","onsuccess","event","db","getReadWriteObjectStore","database","transaction","durability","objectStore","onabort","errorObject","getReadOnlyObjectStore","getReadWriteArgLookupObjectStore","getReadOnlyArgLookupObjectStore","getReadWriteAuthObjectStore","getReadOnlyAuthObjectStore","getReadWriteMetadataObjectStore","getReadOnlyMetadataObjectStore","getReadWriteJobsObjectStore","getReadOnlyJobsObjectStore","getReadWriteCleanupsObjectStore","getReadOnlyCleanupsObjectStore","getReadWriteObjectStoreAndTransactionPromise","promise","oncomplete","getReadOnlyObjectStoreAndTransactionPromise","getReadWriteJobsObjectStoreAndTransactionPromise","getReadOnlyJobsObjectStoreAndTransactionPromise","getReadWriteArgLookupObjectStoreAndTransactionPromise","removeJobFromObjectStore","id","queueId","deleteRequest","delete","emit","removeArgLookupsForJobAsMicrotask","clearAllMetadataInDatabase","clear","commit","clearJobsDatabase","clearCleanupsDatabase","clearDatabase","getJobsWithQueueIdAndTypeFromDatabase","type","index","getAllKeys","IDBKeyRange","only","removeJobsWithQueueIdAndTypeFromDatabase","removeQueueIdFromJobsDatabase","removeQueueIdFromCleanupsDatabase","removeQueueIdFromDatabase","removeCompletedExpiredItemsFromDatabase","maxAge","getAll","bound","Date","now","status","updateJobInDatabase","transform","get","newValue","value","putRequest","put","getJobFromDatabase","updateCleanupInDatabase","removePathFromCleanupDataInDatabase","path","attempt","startAfter","data","Object","assign","updateCleanupValuesInDatabase","TypeError","combinedData","silentlyRemoveJobFromDatabase","removeJobFromDatabase","job","removeCleanupFromDatabase","getCleanupFromDatabase","getMetadataFromDatabase","response","metadata","undefined","clearMetadataInDatabase","setMetadataInDatabase","updateMetadataInDatabase","markJobStatusInDatabase","markJobCompleteInDatabase","markJobPendingInDatabase","markJobErrorInDatabase","markJobCleanupInDatabase","markJobAbortedInDatabase","markJobCompleteThenRemoveFromDatabase","markJobCleanupAndRemoveInDatabase","markJobAsAbortedOrRemoveFromDatabase","markJobStartAfterInDatabase","toLocaleString","markCleanupStartAfterInDatabase","markQueueForCleanupInDatabase","openCursor","jobs","cursor","push","continue","warn","updateRequest","update","event2","markQueueJobsGreaterThanIdCleanupAndRemoveInDatabase","jobId","shouldRemove","markQueueForCleanupAndRemoveInDatabase","getGreatestJobIdFromQueueInDatabase","incrementJobAttemptInDatabase","incrementCleanupAttemptInDatabase","bulkEnqueueToDatabase","items","delay","Array","isArray","i","length","args","ids","created","enqueueToDatabase","restoreJobToDatabaseForCleanupAndRemove","dequeueFromDatabase","getContiguousIds","sort","a","b","points","Infinity","dequeueFromDatabaseNotIn","includes","getRequest","getJobsInQueueFromDatabase","getJobsInDatabase","jobIds","getCompletedJobsCountFromDatabase","getCompletedJobsFromDatabase","storeAuthDataInDatabase","getAuthDataFromDatabase","authData","removeAuthDataFromDatabase","getQueueStatus","abortedRequest","completeRequest","pendingRequest","errorRequest","cleanupRequest","cleanupAndRemoveRequest","abortedCountPromise","completeCountPromise","pendingCountPromise","errorCountPromise","cleanupCountPromise","cleanupAndRemoveCountPromise","all","abortedCount","completeCount","pendingCount","errorCount","cleanupCount","cleanupAndRemoveCount","addArgLookup","key","jsonPath","getArgLookupJobPathMap","map","Map","x","markJobsWithArgLookupKeyCleanupAndRemoveInDatabase","keys","lookupArgs","size","results","json","lookupArg","queueMicrotask","removeArgLookupsForJob","catch","errorStack","deleteEvent","UNLOAD_DATA_ID","updateUnloadDataInDatabase","getUnloadDataFromDatabase","clearUnloadDataInDatabase"],"mappings":"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","sourcesContent":["// @flow\n\nimport { JSONPath } from 'jsonpath-plus';\nimport merge from 'lodash/merge';\nimport unset from 'lodash/unset';\nimport EventEmitter from 'events';\nimport makeLogger from './logger';\n\n// Local job emitter is for this process only,\n// jobEmitter is bridged when a MessagePort is open\nexport const localJobEmitter = new EventEmitter();\nexport const jobEmitter = new EventEmitter();\n\nconst logger = makeLogger('Jobs Database');\n\nexport class JobDoesNotExistError extends Error {\n  constructor(message:string) {\n    super(message);\n    this.name = 'JobDoesNotExistError';\n  }\n}\n\nexport class CleanupDoesNotExistError extends Error {\n  constructor(message:string) {\n    super(message);\n    this.name = 'CleanupDoesNotExistError';\n  }\n}\n\nexport type Job = {\n  id: number,\n  queueId:string,\n  type:string,\n  args:Array<any>,\n  attempt: number,\n  created: number,\n  status: number,\n  startAfter: number\n};\n\n\ntype Cleanup = {\n  id: number,\n  queueId:string,\n  data: Object,\n  attempt: number,\n  startAfter: number\n};\n\nexport const QUEUE_ERROR_STATUS = 0;\nexport const QUEUE_PENDING_STATUS = 1;\nexport const QUEUE_COMPLETE_STATUS = 2;\nexport const QUEUE_EMPTY_STATUS = 3;\n\nexport const JOB_ABORTED_STATUS = 2;\nexport const JOB_COMPLETE_STATUS = 1;\nexport const JOB_PENDING_STATUS = 0;\nexport const JOB_ERROR_STATUS = -1;\nexport const JOB_CLEANUP_STATUS = -2;\nexport const JOB_CLEANUP_AND_REMOVE_STATUS = -3;\n\nexport const databasePromise = (async () => {\n  const request = self.indexedDB.open('battery-queue-06', 1);\n\n  request.onupgradeneeded = function (e) {\n    try {\n      const store = e.target.result.createObjectStore('jobs', { keyPath: 'id', autoIncrement: true });\n      store.createIndex('statusIndex', 'status', { unique: false });\n      store.createIndex('queueIdIndex', 'queueId', { unique: false });\n      store.createIndex('queueIdTypeIndex', ['queueId', 'type'], { unique: false });\n      store.createIndex('statusQueueIdIndex', ['queueId', 'status'], { unique: false });\n      store.createIndex('createdIndex', 'created', { unique: false });\n    } catch (error) {\n      if (!(error.name === 'ConstraintError')) {\n        throw error;\n      }\n    }\n    try {\n      e.target.result.createObjectStore('metadata', { keyPath: 'id' });\n    } catch (error) {\n      if (!(error.name === 'ConstraintError')) {\n        throw error;\n      }\n    }\n    try {\n      const store = e.target.result.createObjectStore('cleanups', { keyPath: 'id' });\n      store.createIndex('queueIdIndex', 'queueId', { unique: false });\n    } catch (error) {\n      if (!(error.name === 'ConstraintError')) {\n        throw error;\n      }\n    }\n    try {\n      e.target.result.createObjectStore('auth-data', { keyPath: 'id' });\n    } catch (error) {\n      if (!(error.name === 'ConstraintError')) {\n        throw error;\n      }\n    }\n    try {\n      const store = e.target.result.createObjectStore('arg-lookup', { keyPath: 'id', autoIncrement: true });\n      store.createIndex('jobIdIndex', 'jobId', { unique: false });\n      store.createIndex('keyIndex', 'key', { unique: false });\n    } catch (error) {\n      if (!(error.name === 'ConstraintError')) {\n        throw error;\n      }\n    }\n  };\n\n  const db = await new Promise((resolve, reject) => {\n    request.onerror = () => {\n      reject(new Error('Unable to open database'));\n    };\n    request.onsuccess = function (event) {\n      resolve(event.target.result);\n    };\n  });\n\n  return db;\n})();\n\nasync function getReadWriteObjectStore(name:string) {\n  const database = await databasePromise;\n  const transaction = database.transaction([name], 'readwrite', { durability: 'relaxed' });\n  const objectStore = transaction.objectStore(name);\n  transaction.onabort = (event) => {\n    logger.error(`Read-write \"${name}\" transaction was aborted`);\n    logger.errorObject(event);\n  };\n  transaction.onerror = (event) => {\n    logger.error(`Error in read-write \"${name}\" transaction`);\n    logger.errorObject(event);\n  };\n  return objectStore;\n}\n\nasync function getReadOnlyObjectStore(name:string) {\n  const database = await databasePromise;\n  const transaction = database.transaction([name], 'readonly', { durability: 'relaxed' });\n  const objectStore = transaction.objectStore(name);\n  transaction.onabort = (event) => {\n    logger.error(`Read-only \"${name}\" transaction was aborted`);\n    logger.errorObject(event);\n  };\n  transaction.onerror = (event) => {\n    logger.error(`Error in read-only \"${name}\" transaction`);\n    logger.errorObject(event);\n  };\n  return objectStore;\n}\n\nfunction getReadWriteArgLookupObjectStore() {\n  return getReadWriteObjectStore('arg-lookup');\n}\n\nfunction getReadOnlyArgLookupObjectStore() {\n  return getReadOnlyObjectStore('arg-lookup');\n}\n\nfunction getReadWriteAuthObjectStore() {\n  return getReadWriteObjectStore('auth-data');\n}\n\nfunction getReadOnlyAuthObjectStore() {\n  return getReadOnlyObjectStore('auth-data');\n}\n\nfunction getReadWriteMetadataObjectStore() {\n  return getReadWriteObjectStore('metadata');\n}\n\nfunction getReadOnlyMetadataObjectStore() {\n  return getReadOnlyObjectStore('metadata');\n}\n\nfunction getReadWriteJobsObjectStore() {\n  return getReadWriteObjectStore('jobs');\n}\n\nfunction getReadOnlyJobsObjectStore() {\n  return getReadOnlyObjectStore('jobs');\n}\n\nfunction getReadWriteCleanupsObjectStore() {\n  return getReadWriteObjectStore('cleanups');\n}\n\nfunction getReadOnlyCleanupsObjectStore() {\n  return getReadOnlyObjectStore('cleanups');\n}\n\nasync function getReadWriteObjectStoreAndTransactionPromise(name:string) {\n  const database = await databasePromise;\n  const transaction = database.transaction([name], 'readwrite', { durability: 'relaxed' });\n  const objectStore = transaction.objectStore(name);\n  const promise = new Promise((resolve, reject) => {\n    transaction.onabort = (event) => {\n      logger.error(`Read-write \"${name}\" transaction was aborted`);\n      logger.errorObject(event);\n      reject(new Error(`Read-write \"${name}\" transaction was aborted`));\n    };\n    transaction.onerror = (event) => {\n      logger.error(`Error in read-write \"${name}\" transaction`);\n      logger.errorObject(event);\n      reject(new Error(`Error in read-write \"${name}\" transaction`));\n    };\n    transaction.oncomplete = () => {\n      resolve();\n    };\n  });\n  return [objectStore, promise];\n}\n\nasync function getReadOnlyObjectStoreAndTransactionPromise(name:string) {\n  const database = await databasePromise;\n  const transaction = database.transaction([name], 'readonly', { durability: 'relaxed' });\n  const objectStore = transaction.objectStore(name);\n  const promise = new Promise((resolve, reject) => {\n    transaction.onabort = (event) => {\n      logger.error(`Read-write \"${name}\" transaction was aborted`);\n      logger.errorObject(event);\n      reject(new Error(`Read-write \"${name}\" transaction was aborted`));\n    };\n    transaction.onerror = (event) => {\n      logger.error(`Error in read-write \"${name}\" transaction`);\n      logger.errorObject(event);\n      reject(new Error(`Error in read-write \"${name}\" transaction`));\n    };\n    transaction.oncomplete = () => {\n      resolve();\n    };\n  });\n  return [objectStore, promise];\n}\n\n\nfunction getReadWriteJobsObjectStoreAndTransactionPromise() {\n  return getReadWriteObjectStoreAndTransactionPromise('jobs');\n}\n\nfunction getReadOnlyJobsObjectStoreAndTransactionPromise() {\n  return getReadOnlyObjectStoreAndTransactionPromise('jobs');\n}\n\nfunction getReadWriteArgLookupObjectStoreAndTransactionPromise() {\n  return getReadWriteObjectStoreAndTransactionPromise('arg-lookup');\n}\n\nfunction removeJobFromObjectStore(store:IDBObjectStore, id:number, queueId:string) {\n  const deleteRequest = store.delete(id);\n  localJobEmitter.emit('jobDelete', id, queueId);\n  jobEmitter.emit('jobDelete', id, queueId);\n  deleteRequest.onsuccess = function () {\n    removeArgLookupsForJobAsMicrotask(id);\n  };\n  deleteRequest.onerror = function (event) {\n    logger.error(`Request error while removing job ${id} in queue ${queueId} from database`);\n    logger.errorObject(event);\n  };\n}\n\nasync function clearAllMetadataInDatabase() {\n  const store = await getReadWriteMetadataObjectStore();\n  const request = store.clear();\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve();\n    };\n    request.onerror = function (event) {\n      logger.error('Error while clearing queue data database');\n      logger.errorObject(event);\n      reject(new Error('Error while clearing queue data database'));\n    };\n    store.transaction.commit();\n  });\n}\n\nasync function clearJobsDatabase() {\n  const store = await getReadWriteJobsObjectStore();\n  const request = store.clear();\n  localJobEmitter.emit('jobsClear');\n  jobEmitter.emit('jobsClear');\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve();\n    };\n    request.onerror = function (event) {\n      logger.error('Error while clearing jobs database');\n      logger.errorObject(event);\n      reject(new Error('Error while clearing jobs database'));\n    };\n    store.transaction.commit();\n  });\n}\n\nasync function clearCleanupsDatabase() {\n  const store = await getReadWriteCleanupsObjectStore();\n  const request = store.clear();\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve();\n    };\n    request.onerror = function (event) {\n      logger.error('Error while clearing cleanups database');\n      logger.errorObject(event);\n      reject(new Error('Error while clearing cleanups database'));\n    };\n    store.transaction.commit();\n  });\n}\n\nexport async function clearDatabase() {\n  await clearJobsDatabase();\n  await clearCleanupsDatabase();\n  await clearAllMetadataInDatabase();\n}\n\nexport async function getJobsWithQueueIdAndTypeFromDatabase(queueId:string, type:string) {\n  const store = await getReadWriteJobsObjectStore();\n  const index = store.index('queueIdTypeIndex');\n  // $FlowFixMe\n  const request = index.getAllKeys(IDBKeyRange.only([queueId, type]));\n  return new Promise((resolve, reject) => {\n    request.onsuccess = function (event) {\n      resolve(event.target.result);\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while getting jobs with queue ${queueId} and type ${type} from jobs database`);\n      logger.errorObject(event);\n      reject(new Error(`Error while getting jobs with queue ${queueId} and type ${type}`));\n    };\n    store.transaction.commit();\n  });\n}\n\nexport async function removeJobsWithQueueIdAndTypeFromDatabase(queueId:string, type:string) {\n  const [store, promise] = await getReadWriteJobsObjectStoreAndTransactionPromise();\n  const index = store.index('queueIdTypeIndex');\n  // $FlowFixMe\n  const request = index.getAllKeys(IDBKeyRange.only([queueId, type]));\n  request.onsuccess = function (event) {\n    for (const id of event.target.result) {\n      removeJobFromObjectStore(store, id, queueId);\n    }\n  };\n  request.onerror = function (event) {\n    logger.error(`Request error while removing jobs with queue ${queueId} and type ${type} from jobs database`);\n    logger.errorObject(event);\n  };\n  await promise;\n}\n\nexport async function removeQueueIdFromJobsDatabase(queueId:string) {\n  const [store, promise] = await getReadWriteJobsObjectStoreAndTransactionPromise();\n  const index = store.index('queueIdIndex');\n  // $FlowFixMe\n  const request = index.getAllKeys(IDBKeyRange.only(queueId));\n  request.onsuccess = function (event) {\n    for (const id of event.target.result) {\n      removeJobFromObjectStore(store, id, queueId);\n    }\n  };\n  request.onerror = function (event) {\n    logger.error(`Request error while removing queue ${queueId} from jobs database`);\n    logger.errorObject(event);\n  };\n  await promise;\n}\n\nasync function removeQueueIdFromCleanupsDatabase(queueId:string) {\n  const store = await getReadWriteCleanupsObjectStore();\n  const index = store.index('queueIdIndex');\n  // $FlowFixMe\n  const request = index.clear(IDBKeyRange.only(queueId));\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve();\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while removing queue ${queueId} from jobs database`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while removing queue ${queueId} from jobs database`));\n    };\n    store.transaction.commit();\n  });\n}\n\nexport async function removeQueueIdFromDatabase(queueId:string) {\n  await removeQueueIdFromJobsDatabase(queueId);\n  await removeQueueIdFromCleanupsDatabase(queueId);\n}\n\nexport async function removeCompletedExpiredItemsFromDatabase(maxAge:number) {\n  const [store, promise] = await getReadWriteJobsObjectStoreAndTransactionPromise();\n  const index = store.index('createdIndex');\n  // $FlowFixMe\n  const request = index.getAll(IDBKeyRange.bound(0, Date.now() - maxAge));\n  request.onsuccess = function (event) {\n    for (const { id, queueId, status } of event.target.result) {\n      if (status !== JOB_COMPLETE_STATUS) {\n        continue;\n      }\n      removeJobFromObjectStore(store, id, queueId);\n    }\n  };\n  request.onerror = function (event) {\n    logger.error('Request error while removing completed exired items from jobs database');\n    logger.errorObject(event);\n  };\n  await promise;\n}\n\nexport async function updateJobInDatabase(id:number, transform:(Job | void) => Job | void | false):Promise<Job | void> {\n  const store = await getReadWriteJobsObjectStore();\n  const request = store.get(id);\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      let newValue;\n      const value = request.result;\n      try {\n        newValue = transform(value);\n      } catch (error) {\n        reject(error);\n        return;\n      }\n      if (typeof newValue === 'undefined') {\n        resolve();\n      } else if (newValue === false) {\n        if (typeof value !== 'undefined') {\n          const { queueId, type } = value;\n          const deleteRequest = store.delete(id);\n          localJobEmitter.emit('jobDelete', id, queueId);\n          jobEmitter.emit('jobDelete', id, queueId);\n          deleteRequest.onsuccess = function () {\n            removeArgLookupsForJobAsMicrotask(id);\n            resolve();\n          };\n          deleteRequest.onerror = function (event) {\n            logger.error(`Delete request error while updating job ${id} in queue ${queueId} and type ${type} in jobs database`);\n            logger.errorObject(event);\n            reject(new Error(`Delete request error while updating job ${id} in queue ${queueId} and type ${type} from jobs database`));\n          };\n        }\n      } else {\n        const { queueId, type, status } = newValue;\n        const putRequest = store.put(newValue);\n        localJobEmitter.emit('jobUpdate', id, queueId, type, status);\n        jobEmitter.emit('jobUpdate', id, queueId, type, status);\n        putRequest.onsuccess = function () {\n          resolve();\n        };\n        putRequest.onerror = function (event) {\n          logger.error(`Put request error while updating job ${id} in queue ${queueId} and type ${type} in jobs database`);\n          logger.errorObject(event);\n          reject(new Error(`Put request error while updating job ${id} in queue ${queueId} and type ${type} from jobs database`));\n        };\n      }\n      store.transaction.commit();\n    };\n    request.onerror = function (event) {\n      logger.error(`Get request error while updating ${id}`);\n      logger.errorObject(event);\n      reject(new Error(`Get request error while updating ${id}`));\n    };\n  });\n}\n\nexport async function getJobFromDatabase(id:number):Promise<Job | void> {\n  const store = await getReadOnlyJobsObjectStore();\n  const request = store.get(id);\n  return new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve(request.result);\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while getting ${id}`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while getting ${id}`));\n    };\n    store.transaction.commit();\n  });\n}\n\nexport async function updateCleanupInDatabase(id:number, transform:(Cleanup | void) => Object):Promise<Cleanup | void> {\n  const store = await getReadWriteCleanupsObjectStore();\n  const request = store.get(id);\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      let newValue;\n      try {\n        newValue = transform(request.result);\n      } catch (error) {\n        reject(error);\n        return;\n      }\n      if (typeof newValue === 'undefined') {\n        resolve();\n      } else {\n        const putRequest = store.put(newValue);\n        putRequest.onsuccess = function () {\n          resolve();\n        };\n        putRequest.onerror = function (event) {\n          logger.error(`Put request error while updating ${id} cleanup`);\n          logger.errorObject(event);\n          reject(new Error(`Put request error while updating ${id} cleanup`));\n        };\n      }\n      store.transaction.commit();\n    };\n    request.onerror = function (event) {\n      logger.error(`Get request error while updating ${id} cleanup`);\n      logger.errorObject(event);\n      reject(new Error(`Get request error while updating ${id} cleanup`));\n    };\n  });\n}\n\nexport async function removePathFromCleanupDataInDatabase(id:number, path:Array<string>) {\n  await updateCleanupInDatabase(id, (value: Cleanup | void) => {\n    if (typeof value === 'undefined') {\n      return;\n    }\n    const { queueId, attempt, startAfter } = value;\n    const data = Object.assign({}, value.data);\n    unset(data, path);\n    return { // eslint-disable-line consistent-return\n      id,\n      queueId,\n      attempt,\n      startAfter,\n      data,\n    };\n  });\n}\n\n\nexport async function updateCleanupValuesInDatabase(id:number, queueId:string, data:Object) {\n  if (typeof id !== 'number') {\n    throw new TypeError(`Unable to update cleanup in database, received invalid \"id\" argument type \"${typeof id}\"`);\n  }\n  if (typeof queueId !== 'string') {\n    throw new TypeError(`Unable to update cleanup in database, received invalid \"queueId\" argument type \"${typeof queueId}\"`);\n  }\n  if (typeof data !== 'object') {\n    throw new TypeError(`Unable to update cleanup in database, received invalid \"data\" argument type \"${typeof data}\"`);\n  }\n  await updateCleanupInDatabase(id, (value: Cleanup | void) => {\n    const combinedData = typeof value === 'undefined' ? data : merge({}, value.data, data);\n    return {\n      id,\n      queueId,\n      attempt: 0,\n      startAfter: Date.now(),\n      data: combinedData,\n    };\n  });\n}\n\nexport async function silentlyRemoveJobFromDatabase(id:number) {\n  const store = await getReadWriteJobsObjectStore();\n  const request = store.delete(id);\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve();\n    };\n    request.onerror = function (event) {\n      logger.error(`Delete request error while removing job ${id} from database`);\n      logger.errorObject(event);\n      reject(new Error(`Delete request error while removing job ${id} from database`));\n    };\n    store.transaction.commit();\n  });\n}\n\nexport async function removeJobFromDatabase(id:number) {\n  const store = await getReadWriteJobsObjectStore();\n  const request = store.get(id);\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      const job = request.result;\n      if (typeof job === 'undefined') {\n        resolve();\n        return;\n      }\n      const { queueId, type } = job;\n      const deleteRequest = store.delete(id);\n      localJobEmitter.emit('jobDelete', id, queueId);\n      jobEmitter.emit('jobDelete', id, queueId);\n      deleteRequest.onsuccess = function () {\n        removeArgLookupsForJobAsMicrotask(id);\n        resolve();\n      };\n      deleteRequest.onerror = function (event) {\n        logger.error(`Delete request error while removing job ${id} in queue ${queueId} with type ${type} from database`);\n        logger.errorObject(event);\n        reject(new Error(`Delete request error while removing job ${id} in queue ${queueId} with type ${type} from database`));\n      };\n      store.transaction.commit();\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while getting ${id} before removing from database`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while getting ${id} before removing from database`));\n    };\n  });\n}\n\nexport async function removeCleanupFromDatabase(id:number) {\n  const store = await getReadWriteCleanupsObjectStore();\n  const request = store.delete(id);\n  return new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve();\n    };\n    request.onerror = function (event) {\n      logger.error(`Error while removing cleanup data for ${id}`);\n      logger.errorObject(event);\n      reject(new Error(`Error while removing cleanup data for ${id}`));\n    };\n    store.transaction.commit();\n  });\n}\n\nexport async function getCleanupFromDatabase(id:number):Promise<Cleanup | void> {\n  const store = await getReadOnlyCleanupsObjectStore();\n  const request = store.get(id);\n  return new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve(request.result);\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while getting ${id}`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while getting ${id}`));\n    };\n    store.transaction.commit();\n  });\n}\n\nexport async function getMetadataFromDatabase(id:string) {\n  const store = await getReadOnlyMetadataObjectStore();\n  const request = store.get(id);\n  const response = await new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve(request.result);\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while getting ${id} metadata`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while getting ${id} metadata`));\n    };\n    store.transaction.commit();\n  });\n  return typeof response !== 'undefined' ? response.metadata : undefined;\n}\n\nexport async function clearMetadataInDatabase(id:string) {\n  const store = await getReadWriteMetadataObjectStore();\n  const request = store.delete(id);\n  return new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve();\n    };\n    request.onerror = function (event) {\n      logger.error(`Error while clearing ${id} metadata`);\n      logger.errorObject(event);\n      reject(new Error(`Error while clearing ${id} metadata`));\n    };\n    store.transaction.commit();\n  });\n}\n\nexport async function setMetadataInDatabase(id:string, metadata:Object) {\n  const store = await getReadWriteMetadataObjectStore();\n  const request = store.put({\n    id,\n    metadata,\n  });\n  return new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve();\n    };\n    request.onerror = function (event) {\n      logger.error(`Error while setting ${id} metadata`);\n      logger.errorObject(event);\n      reject(new Error(`Error while setting ${id} metadata`));\n    };\n    store.transaction.commit();\n  });\n}\n\nexport async function updateMetadataInDatabase(id:string, transform:(Object | void) => Object | void | false):Promise<Object | void> {\n  const store = await getReadWriteMetadataObjectStore();\n  const request = store.get(id);\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      let newValue;\n      const response = request.result;\n      const value = typeof response !== 'undefined' ? response.metadata : undefined;\n      try {\n        newValue = transform(value);\n      } catch (error) {\n        reject(error);\n        return;\n      }\n      if (typeof newValue === 'undefined') {\n        resolve();\n      } else if (newValue === false) {\n        if (typeof value !== 'undefined') {\n          const deleteRequest = store.delete(id);\n          deleteRequest.onsuccess = function () {\n            resolve();\n          };\n          deleteRequest.onerror = function (event) {\n            logger.error(`Delete request error while updating ${id} in metadata database`);\n            logger.errorObject(event);\n            reject(new Error(`Delete request error while updating ${id} in metadata database`));\n          };\n        }\n      } else {\n        const putRequest = store.put({\n          id,\n          metadata: newValue,\n        });\n        putRequest.onsuccess = function () {\n          resolve();\n        };\n        putRequest.onerror = function (event) {\n          logger.error(`Put request error while updating ${id} in metadata database`);\n          logger.errorObject(event);\n          reject(new Error(`Put request error while updating ${id} in metadata database`));\n        };\n      }\n      store.transaction.commit();\n    };\n    request.onerror = function (event) {\n      logger.error(`Get request error while updating ${id} in metadata database`);\n      logger.errorObject(event);\n      reject(new Error(`Get request error while updating ${id} in metadata database`));\n    };\n  });\n}\n\nexport function markJobStatusInDatabase(id:number, status:number) {\n  return updateJobInDatabase(id, (value:Job | void) => {\n    if (typeof value === 'undefined') {\n      throw new JobDoesNotExistError(`Unable to mark job ${id} as status ${status} in database, job does not exist`);\n    }\n    value.status = status; // eslint-disable-line no-param-reassign\n    return value;\n  });\n}\n\nexport function markJobCompleteInDatabase(id:number) {\n  return markJobStatusInDatabase(id, JOB_COMPLETE_STATUS);\n}\n\nexport function markJobPendingInDatabase(id:number) {\n  return markJobStatusInDatabase(id, JOB_PENDING_STATUS);\n}\n\nexport function markJobErrorInDatabase(id:number) {\n  return markJobStatusInDatabase(id, JOB_ERROR_STATUS);\n}\n\nexport function markJobCleanupInDatabase(id:number) {\n  return markJobStatusInDatabase(id, JOB_CLEANUP_STATUS);\n}\n\nexport function markJobAbortedInDatabase(id:number) {\n  return markJobStatusInDatabase(id, JOB_ABORTED_STATUS);\n}\n\nexport async function markJobCompleteThenRemoveFromDatabase(id:number):Promise<void> {\n  const store = await getReadWriteJobsObjectStore();\n  const request = store.get(id);\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      const value = request.result;\n      if (typeof value !== 'undefined') {\n        const { queueId, type } = value;\n        localJobEmitter.emit('jobUpdate', id, queueId, type, JOB_COMPLETE_STATUS);\n        jobEmitter.emit('jobUpdate', id, queueId, type, JOB_COMPLETE_STATUS);\n        const deleteRequest = store.delete(id);\n        deleteRequest.onsuccess = function () {\n          localJobEmitter.emit('jobDelete', id, queueId);\n          jobEmitter.emit('jobDelete', id, queueId);\n          removeArgLookupsForJobAsMicrotask(id);\n          resolve();\n        };\n        deleteRequest.onerror = function (event) {\n          logger.error(`Delete request error while marking job ${id} in queue ${queueId} with type ${type} complete then removing from jobs database`);\n          logger.errorObject(event);\n          reject(new Error(`Delete request error while marking job ${id} in queue ${queueId} with type ${type} complete then removing from jobs database`));\n        };\n      }\n      store.transaction.commit();\n    };\n    request.onerror = function (event) {\n      logger.error(`Get request error while marking job ${id} complete then removing from jobs database`);\n      logger.errorObject(event);\n      reject(new Error(`Get request error while marking job ${id} complete then removing from jobs database`));\n    };\n  });\n}\n\nexport function markJobCleanupAndRemoveInDatabase(id:number) {\n  return updateJobInDatabase(id, (value:Job | void) => {\n    if (typeof value === 'undefined') {\n      throw new JobDoesNotExistError(`Unable to mark job ${id} as status ${JOB_CLEANUP_AND_REMOVE_STATUS} in database, job does not exist`);\n    }\n    if (value.status === JOB_PENDING_STATUS) {\n      return false;\n    }\n    if (value.status === JOB_ABORTED_STATUS) {\n      return false;\n    }\n    value.status = JOB_CLEANUP_AND_REMOVE_STATUS; // eslint-disable-line no-param-reassign\n    return value;\n  });\n}\n\nexport function markJobAsAbortedOrRemoveFromDatabase(id:number) {\n  return updateJobInDatabase(id, (value:Job | void) => {\n    if (typeof value === 'undefined') {\n      return;\n    }\n    if (value.status === JOB_ERROR_STATUS) {\n      value.status = JOB_ABORTED_STATUS; // eslint-disable-line no-param-reassign\n      return value; // eslint-disable-line consistent-return\n    }\n    if (value.status === JOB_CLEANUP_STATUS) {\n      value.status = JOB_ABORTED_STATUS; // eslint-disable-line no-param-reassign\n      return value; // eslint-disable-line consistent-return\n    }\n    if (value.status === JOB_CLEANUP_AND_REMOVE_STATUS) {\n      return false; // eslint-disable-line consistent-return\n    }\n    throw new Error(`Unable to mark job ${id} as aborted or remove after cleanup, unable to handle status ${value.status}`);\n  });\n}\n\nexport function markJobStartAfterInDatabase(id:number, startAfter:number) {\n  return updateJobInDatabase(id, (value:Job | void) => {\n    if (typeof value === 'undefined') {\n      throw new JobDoesNotExistError(`Unable to mark job ${id} start-after time to ${new Date(startAfter).toLocaleString()} in database, job does not exist`);\n    }\n    if (startAfter < value.startAfter) {\n      return;\n    }\n    value.startAfter = startAfter; // eslint-disable-line no-param-reassign\n    return value; // eslint-disable-line consistent-return\n  });\n}\n\nexport function markCleanupStartAfterInDatabase(id:number, startAfter:number) {\n  return updateCleanupInDatabase(id, (value: Cleanup | void) => {\n    if (typeof value === 'undefined') {\n      throw new CleanupDoesNotExistError(`Unable to mark cleanup ${id} start-after time to ${new Date(startAfter).toLocaleString()} in database, cleanup does not exist`);\n    }\n    if (startAfter < value.startAfter) {\n      return;\n    }\n    value.startAfter = startAfter; // eslint-disable-line  no-param-reassign\n    return value; // eslint-disable-line consistent-return\n  });\n}\n\nexport async function markQueueForCleanupInDatabase(queueId:string) {\n  const store = await getReadWriteJobsObjectStore();\n  const index = store.index('queueIdIndex');\n  // $FlowFixMe\n  const request = index.openCursor(IDBKeyRange.only(queueId));\n  const jobs = [];\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function (event) {\n      const cursor = event.target.result;\n      if (cursor) {\n        const value = Object.assign({}, cursor.value);\n        switch (value.status) {\n          case JOB_ERROR_STATUS:\n            value.status = JOB_CLEANUP_STATUS;\n            jobs.push(value);\n            break;\n          case JOB_COMPLETE_STATUS:\n            value.status = JOB_CLEANUP_STATUS;\n            jobs.push(value);\n            break;\n          case JOB_PENDING_STATUS:\n            value.status = JOB_ABORTED_STATUS;\n            break;\n          case JOB_CLEANUP_STATUS:\n            jobs.push(value);\n            cursor.continue();\n            return;\n          case JOB_CLEANUP_AND_REMOVE_STATUS:\n            jobs.push(value);\n            cursor.continue();\n            return;\n          case JOB_ABORTED_STATUS:\n            cursor.continue();\n            return;\n          default:\n            logger.warn(`Unhandled job status ${value.status} while marking queue ${queueId} for cleanup`);\n            cursor.continue();\n            return;\n        }\n        const updateRequest = cursor.update(value);\n        localJobEmitter.emit('jobUpdate', value.id, value.queueId, value.type, value.status);\n        jobEmitter.emit('jobUpdate', value.id, value.queueId, value.type, value.status);\n        updateRequest.onsuccess = function () {\n          cursor.continue();\n        };\n        updateRequest.onerror = function (event2) {\n          logger.error(`Update request error while marking queue ${queueId} for cleanup`);\n          logger.errorObject(event2);\n          cursor.continue();\n        };\n      } else {\n        resolve();\n      }\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while marking queue ${queueId} for cleanup`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while marking queue ${queueId} for cleanup`));\n    };\n  });\n  return jobs;\n}\n\nexport async function markQueueJobsGreaterThanIdCleanupAndRemoveInDatabase(queueId:string, jobId:number) {\n  const store = await getReadWriteJobsObjectStore();\n  const index = store.index('queueIdIndex');\n  // $FlowFixMe\n  const request = index.openCursor(IDBKeyRange.only(queueId));\n  const jobs = [];\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function (event) {\n      const cursor = event.target.result;\n      if (cursor) {\n        const value = Object.assign({}, cursor.value);\n        if (value.id <= jobId) {\n          cursor.continue();\n          return;\n        }\n        let shouldRemove = false;\n        switch (value.status) {\n          case JOB_ERROR_STATUS:\n            value.status = JOB_CLEANUP_AND_REMOVE_STATUS;\n            jobs.push(value);\n            break;\n          case JOB_COMPLETE_STATUS:\n            value.status = JOB_CLEANUP_AND_REMOVE_STATUS;\n            jobs.push(value);\n            break;\n          case JOB_PENDING_STATUS:\n            shouldRemove = true;\n            break;\n          case JOB_CLEANUP_STATUS:\n            value.status = JOB_CLEANUP_AND_REMOVE_STATUS;\n            jobs.push(value);\n            break;\n          case JOB_CLEANUP_AND_REMOVE_STATUS:\n            jobs.push(value);\n            cursor.continue();\n            return;\n          case JOB_ABORTED_STATUS:\n            shouldRemove = true;\n            break;\n          default:\n            logger.warn(`Unhandled job status ${value.status} while marking queue ${queueId} for cleanup and removal`);\n            cursor.continue();\n            return;\n        }\n        const { id, type, status } = value;\n        if (shouldRemove) {\n          const deleteRequest = cursor.delete(id);\n          localJobEmitter.emit('jobDelete', id, queueId);\n          jobEmitter.emit('jobDelete', id, queueId);\n          deleteRequest.onsuccess = function () {\n            cursor.continue();\n          };\n          deleteRequest.onerror = function (event2) {\n            logger.error(`Update request error while marking queue ${queueId} for cleanup and removal`);\n            logger.errorObject(event2);\n            cursor.continue();\n          };\n        } else {\n          const updateRequest = cursor.update(value);\n          localJobEmitter.emit('jobUpdate', id, queueId, type, status);\n          jobEmitter.emit('jobUpdate', id, queueId, type, status);\n          updateRequest.onsuccess = function () {\n            cursor.continue();\n          };\n          updateRequest.onerror = function (event2) {\n            logger.error(`Update request error while marking queue ${queueId} for cleanup and removal`);\n            logger.errorObject(event2);\n            cursor.continue();\n          };\n        }\n      } else {\n        resolve();\n      }\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while marking queue ${queueId} for cleanup and removal`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while marking queue ${queueId} for cleanup and removal`));\n    };\n  });\n  return jobs;\n}\n\n\nexport function markQueueForCleanupAndRemoveInDatabase(queueId:string) {\n  return markQueueJobsGreaterThanIdCleanupAndRemoveInDatabase(queueId, -1);\n}\n\nexport async function getGreatestJobIdFromQueueInDatabase(queueId:string) {\n  const store = await getReadOnlyJobsObjectStore();\n  const index = store.index('queueIdIndex');\n  // $FlowFixMe\n  const request = index.openCursor(IDBKeyRange.only(queueId), 'prev');\n  return new Promise((resolve, reject) => {\n    request.onsuccess = function (event) {\n      const cursor = event.target.result;\n      if (cursor) {\n        resolve(cursor.value.id || 0);\n      } else {\n        resolve(0);\n      }\n      store.transaction.commit();\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while getting the greatest job ID in queue ${queueId}`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while getting the greatest job ID in queue ${queueId}`));\n    };\n  });\n}\n\nexport async function incrementJobAttemptInDatabase(id:number) {\n  await updateJobInDatabase(id, (value:Job | void) => {\n    if (typeof value === 'undefined') {\n      throw new JobDoesNotExistError(`Unable to increment attempts for job ${id} in database, job does not exist`);\n    }\n    value.attempt += 1; // eslint-disable-line no-param-reassign\n    return value;\n  });\n}\n\nexport async function incrementCleanupAttemptInDatabase(id:number, queueId:string) {\n  let attempt = 1;\n  await updateCleanupInDatabase(id, (value: Cleanup | void) => {\n    if (typeof value === 'undefined') {\n      return {\n        id,\n        queueId,\n        attempt: 1,\n        startAfter: Date.now(),\n        data: {},\n      };\n    }\n    attempt = value.attempt + 1;\n    value.attempt = attempt; // eslint-disable-line no-param-reassign\n    return value;\n  });\n  return attempt;\n}\n\nexport async function bulkEnqueueToDatabase(queueId: string, items:Array<[string, Array<any>]>, delay: number) { // eslint-disable-line no-underscore-dangle\n  if (typeof queueId !== 'string') {\n    throw new TypeError(`Unable to bulk enqueue in database, received invalid \"queueId\" argument type \"${typeof queueId}\"`);\n  }\n  if (!Array.isArray(items)) {\n    throw new TypeError(`Unable to bulk enqueue in database, received invalid \"items\" argument type \"${typeof items}\"`);\n  }\n  for (let i = 0; i < items.length; i += 1) {\n    const [type, args] = items[i];\n    if (typeof type !== 'string') {\n      throw new TypeError(`Unable to bulk enqueue in database, received invalid items[${i}] \"type\" argument type \"${typeof type}\"`);\n    }\n    if (!Array.isArray(args)) {\n      throw new TypeError(`Unable to bulk enqueue in database, received invalid items[${i}] \"args\" argument type \"${typeof args}\"`);\n    }\n  }\n  if (typeof delay !== 'number') {\n    throw new TypeError(`Unable to bulk enqueue in database, received invalid \"delay\" argument type \"${typeof delay}\"`);\n  }\n  const ids = [];\n  const store = await getReadWriteJobsObjectStore();\n  await new Promise((resolve, reject) => {\n    for (let i = 0; i < items.length; i += 1) {\n      const [type, args] = items[i];\n      const value = {\n        queueId,\n        type,\n        args,\n        attempt: 0,\n        created: Date.now(),\n        status: JOB_PENDING_STATUS,\n        startAfter: Date.now() + delay,\n      };\n      const request = store.put(value);\n      request.onsuccess = function () {\n        const id = request.result;\n        ids.push(request.result);\n        localJobEmitter.emit('jobAdd', id, queueId, type);\n        jobEmitter.emit('jobAdd', id, queueId, type);\n        resolve(request.result);\n      };\n      request.onerror = function (event) {\n        logger.error(`Request error while bulk enqueueing ${items.length} ${items.length === 1 ? 'job' : 'jobs'} in queue ${queueId}`);\n        logger.errorObject(event);\n        reject(new Error(`Request error while bulk enqueueing ${items.length} ${items.length === 1 ? 'job' : 'jobs'} in queue ${queueId}`));\n      };\n    }\n    store.transaction.commit();\n  });\n  return ids;\n}\n\nexport async function enqueueToDatabase(queueId: string, type: string, args: Array<any>, delay: number) { // eslint-disable-line no-underscore-dangle\n  if (typeof queueId !== 'string') {\n    throw new TypeError(`Unable to enqueue in database, received invalid \"queueId\" argument type \"${typeof queueId}\"`);\n  }\n  if (typeof type !== 'string') {\n    throw new TypeError(`Unable to enqueue in database, received invalid \"type\" argument type \"${typeof type}\"`);\n  }\n  if (!Array.isArray(args)) {\n    throw new TypeError(`Unable to enqueue in database, received invalid \"args\" argument type \"${typeof args}\"`);\n  }\n  if (typeof delay !== 'number') {\n    throw new TypeError(`Unable to enqueue in database, received invalid \"delay\" argument type \"${typeof delay}\"`);\n  }\n  const value = {\n    queueId,\n    type,\n    args,\n    attempt: 0,\n    created: Date.now(),\n    status: JOB_PENDING_STATUS,\n    startAfter: Date.now() + delay,\n  };\n  const store = await getReadWriteJobsObjectStore();\n\n  const request = store.put(value);\n  const id = await new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve(request.result);\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while enqueueing ${type} job`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while enqueueing ${type} job`));\n    };\n    store.transaction.commit();\n  });\n  localJobEmitter.emit('jobAdd', id, queueId, type);\n  jobEmitter.emit('jobAdd', id, queueId, type);\n  return id;\n}\n\nexport async function restoreJobToDatabaseForCleanupAndRemove(id:number, queueId: string, type: string, args: Array<any>) { // eslint-disable-line no-underscore-dangle\n  if (typeof id !== 'number') {\n    throw new TypeError(`Unable to restore to database, received invalid \"id\" argument type \"${typeof id}\"`);\n  }\n  if (typeof queueId !== 'string') {\n    throw new TypeError(`Unable to restore to database, received invalid \"queueId\" argument type \"${typeof queueId}\"`);\n  }\n  if (typeof type !== 'string') {\n    throw new TypeError(`Unable to restore to database, received invalid \"type\" argument type \"${typeof type}\"`);\n  }\n  if (!Array.isArray(args)) {\n    throw new TypeError(`Unable to restore to database, received invalid \"args\" argument type \"${typeof args}\"`);\n  }\n  const value = {\n    id,\n    queueId,\n    type,\n    args,\n    attempt: 1,\n    created: Date.now(),\n    status: JOB_CLEANUP_AND_REMOVE_STATUS,\n    startAfter: Date.now(),\n  };\n  const store = await getReadWriteJobsObjectStore();\n  const request = store.put(value);\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve(request.result);\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while enqueueing ${type} job`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while enqueueing ${type} job`));\n    };\n    store.transaction.commit();\n  });\n  localJobEmitter.emit('jobAdd', id, queueId, type);\n  jobEmitter.emit('jobAdd', id, queueId, type);\n  return id;\n}\n\nexport async function dequeueFromDatabase():Promise<Array<Job>> { // eslint-disable-line no-underscore-dangle\n  const store = await getReadOnlyJobsObjectStore();\n  const index = store.index('statusIndex');\n  // $FlowFixMe\n  const request = index.getAll(IDBKeyRange.bound(JOB_CLEANUP_AND_REMOVE_STATUS, JOB_PENDING_STATUS));\n  const jobs = await new Promise((resolve, reject) => {\n    request.onsuccess = function (event) {\n      resolve(event.target.result);\n    };\n    request.onerror = function (event) {\n      logger.error('Request error while dequeing');\n      logger.errorObject(event);\n      reject(new Error('Request error while dequeing'));\n    };\n    store.transaction.commit();\n  });\n  return jobs;\n}\n\nexport function getContiguousIds(ids:Array<number>) {\n  ids.sort((a, b) => a - b);\n  const points = [[0, ids[0] - 1]];\n  for (let i = 0; i < ids.length; i += 1) {\n    if (ids[i] + 1 !== ids[i + 1]) {\n      if (i + 1 >= ids.length) {\n        points.push([ids[i] + 1, Infinity]);\n      } else {\n        points.push([ids[i] + 1, ids[i + 1] - 1]);\n      }\n    }\n  }\n  return points;\n}\n\nexport async function dequeueFromDatabaseNotIn(ids:Array<number>):Promise<Array<Job>> { // eslint-disable-line no-underscore-dangle\n  if (ids.length === 0) {\n    return dequeueFromDatabase();\n  }\n  const [store, promise] = await getReadOnlyJobsObjectStoreAndTransactionPromise();\n  const index = store.index('statusIndex');\n  const jobs = [];\n  // $FlowFixMe\n  const request = index.getAllKeys(IDBKeyRange.bound(JOB_CLEANUP_AND_REMOVE_STATUS, JOB_PENDING_STATUS));\n  request.onsuccess = function (event) {\n    for (const id of event.target.result) {\n      if (ids.includes(id)) {\n        continue;\n      }\n      const getRequest = store.get(id);\n      getRequest.onsuccess = function () {\n        jobs.push(getRequest.result);\n      };\n      getRequest.onerror = function (event2) {\n        logger.error(`Request error while getting job ${id}`);\n        logger.errorObject(event2);\n      };\n    }\n    store.transaction.commit();\n  };\n  request.onerror = function (event) {\n    logger.error('Request error while dequeing');\n    logger.errorObject(event);\n  };\n  await promise;\n  return jobs;\n}\n\nexport async function getJobsInQueueFromDatabase(queueId: string):Promise<Array<Job>> { // eslint-disable-line no-underscore-dangle\n  if (typeof queueId !== 'string') {\n    throw new TypeError(`Unable to get jobs in queue from database, received invalid \"queueId\" argument type \"${typeof queueId}\"`);\n  }\n  const store = await getReadOnlyJobsObjectStore();\n  const index = store.index('queueIdIndex');\n  // $FlowFixMe\n  const request = index.getAll(IDBKeyRange.only(queueId));\n  const jobs = await new Promise((resolve, reject) => {\n    request.onsuccess = function (event) {\n      resolve(event.target.result);\n    };\n    request.onerror = function (event) {\n      logger.error('Request error while dequeing');\n      logger.errorObject(event);\n      reject(new Error('Request error while dequeing'));\n    };\n    store.transaction.commit();\n  });\n  return jobs;\n}\n\nexport async function getJobsInDatabase(jobIds: Array<number>):Promise<Array<Job>> { // eslint-disable-line no-underscore-dangle\n  if (!Array.isArray(jobIds)) {\n    throw new TypeError(`Unable to get jobs from database, received invalid \"jobIds\" argument type \"${typeof jobIds}\"`);\n  }\n  const [store, promise] = await getReadOnlyJobsObjectStoreAndTransactionPromise();\n  const jobs = [];\n  for (const jobId of jobIds) {\n    const request = store.get(jobId);\n    request.onsuccess = function () {\n      if (typeof request.result !== 'undefined') {\n        jobs.push(request.result);\n      }\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while getting job ${jobId}`);\n      logger.errorObject(event);\n    };\n  }\n  store.transaction.commit();\n  await promise;\n  return jobs;\n}\n\nexport async function getCompletedJobsCountFromDatabase(queueId: string) { // eslint-disable-line no-underscore-dangle\n  const jobs = await getCompletedJobsFromDatabase(queueId);\n  return jobs.length;\n}\n\nexport async function getCompletedJobsFromDatabase(queueId: string):Promise<Array<Job>> { // eslint-disable-line no-underscore-dangle\n  if (typeof queueId !== 'string') {\n    throw new TypeError(`Unable to get completed jobs database, received invalid \"queueId\" argument type \"${typeof queueId}\"`);\n  }\n  const store = await getReadOnlyJobsObjectStore();\n  const index = store.index('statusQueueIdIndex');\n  // $FlowFixMe\n  const request = index.openCursor(IDBKeyRange.only([queueId, JOB_COMPLETE_STATUS]));\n  const jobs = [];\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function (event) {\n      const cursor = event.target.result;\n      if (cursor) {\n        jobs.push(cursor.value);\n        cursor.continue();\n      } else {\n        resolve();\n      }\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while getting completed jobs for queue ${queueId}`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while getting completed jobs for queue ${queueId}`));\n    };\n  });\n  return jobs;\n}\n\nexport async function storeAuthDataInDatabase(id:string, data: Object) { // eslint-disable-line no-underscore-dangle\n  if (typeof id !== 'string') {\n    throw new TypeError(`Unable to store auth data in database, received invalid \"id\" argument type \"${typeof id}\"`);\n  }\n  if (typeof data !== 'object') {\n    throw new TypeError(`Unable to store auth data in database, received invalid \"data\" argument type \"${typeof data}\"`);\n  }\n  const store = await getReadWriteAuthObjectStore();\n  const request = store.put({ id, data });\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve();\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while storing auth data for ${id}`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while storing auth data for ${id}`));\n    };\n    store.transaction.commit();\n  });\n}\n\nexport async function getAuthDataFromDatabase(id:string) {\n  if (typeof id !== 'string') {\n    throw new TypeError(`Unable to store auth data in database, received invalid \"id\" argument type \"${typeof id}\"`);\n  }\n  const store = await getReadOnlyAuthObjectStore();\n  const request = store.get(id);\n  const authData = await new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve(request.result);\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while getting auth data for ${id}`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while getting auth data for ${id}`));\n    };\n    store.transaction.commit();\n  });\n  return typeof authData !== 'undefined' ? authData.data : undefined;\n}\n\nexport async function removeAuthDataFromDatabase(id:string) {\n  if (typeof id !== 'string') {\n    throw new TypeError(`Unable to store auth data in database, received invalid \"id\" argument type \"${typeof id}\"`);\n  }\n  const store = await getReadWriteAuthObjectStore();\n  const request = store.delete(id);\n  return new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve();\n    };\n    request.onerror = function (event) {\n      logger.error(`Error while removing auth data for ${id}`);\n      logger.errorObject(event);\n      reject(new Error(`Error while removing auth data for ${id}`));\n    };\n    store.transaction.commit();\n  });\n}\n\nexport async function getQueueStatus(queueId:string) {\n  const store = await getReadOnlyJobsObjectStore();\n  const index = store.index('statusQueueIdIndex');\n  // $FlowFixMe\n  const abortedRequest = index.getAllKeys(IDBKeyRange.only([queueId, JOB_ABORTED_STATUS]));\n  // $FlowFixMe\n  const completeRequest = index.getAllKeys(IDBKeyRange.only([queueId, JOB_COMPLETE_STATUS]));\n  // $FlowFixMe\n  const pendingRequest = index.getAllKeys(IDBKeyRange.only([queueId, JOB_PENDING_STATUS]));\n  // $FlowFixMe\n  const errorRequest = index.getAllKeys(IDBKeyRange.only([queueId, JOB_ERROR_STATUS]));\n  // $FlowFixMe\n  const cleanupRequest = index.getAllKeys(IDBKeyRange.only([queueId, JOB_CLEANUP_STATUS]));\n  // $FlowFixMe\n  const cleanupAndRemoveRequest = index.getAllKeys(IDBKeyRange.only([queueId, JOB_CLEANUP_AND_REMOVE_STATUS]));\n  const abortedCountPromise = new Promise((resolve, reject) => {\n    abortedRequest.onsuccess = function (event) {\n      resolve(event.target.result.length);\n    };\n    abortedRequest.onerror = function (event) {\n      logger.error(`Request error while getting status of queue ${queueId}`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while getting status of queue ${queueId}`));\n    };\n  });\n  const completeCountPromise = new Promise((resolve, reject) => {\n    completeRequest.onsuccess = function (event) {\n      resolve(event.target.result.length);\n    };\n    completeRequest.onerror = function (event) {\n      logger.error(`Request error while getting status of queue ${queueId}`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while getting status of queue ${queueId}`));\n    };\n  });\n  const pendingCountPromise = new Promise((resolve, reject) => {\n    pendingRequest.onsuccess = function (event) {\n      resolve(event.target.result.length);\n    };\n    pendingRequest.onerror = function (event) {\n      logger.error(`Request error while getting status of queue ${queueId}`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while getting status of queue ${queueId}`));\n    };\n  });\n  const errorCountPromise = new Promise((resolve, reject) => {\n    errorRequest.onsuccess = function (event) {\n      resolve(event.target.result.length);\n    };\n    errorRequest.onerror = function (event) {\n      logger.error(`Request error while getting status of queue ${queueId}`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while getting status of queue ${queueId}`));\n    };\n  });\n  const cleanupCountPromise = new Promise((resolve, reject) => {\n    cleanupRequest.onsuccess = function (event) {\n      resolve(event.target.result.length);\n    };\n    cleanupRequest.onerror = function (event) {\n      logger.error(`Request error while getting status of queue ${queueId}`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while getting status of queue ${queueId}`));\n    };\n  });\n  const cleanupAndRemoveCountPromise = new Promise((resolve, reject) => {\n    cleanupAndRemoveRequest.onsuccess = function (event) {\n      resolve(event.target.result.length);\n    };\n    cleanupAndRemoveRequest.onerror = function (event) {\n      logger.error(`Request error while getting status of queue ${queueId}`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while getting status of queue ${queueId}`));\n    };\n  });\n  store.transaction.commit();\n  const [\n    abortedCount,\n    completeCount,\n    pendingCount,\n    errorCount,\n    cleanupCount,\n    cleanupAndRemoveCount,\n  ] = await Promise.all([\n    abortedCountPromise,\n    completeCountPromise,\n    pendingCountPromise,\n    errorCountPromise,\n    cleanupCountPromise,\n    cleanupAndRemoveCountPromise,\n  ]);\n  if (abortedCount > 0 || cleanupCount > 0) {\n    return QUEUE_ERROR_STATUS;\n  }\n  if (errorCount > 0 || pendingCount > 0 || cleanupAndRemoveCount > 0) {\n    return QUEUE_PENDING_STATUS;\n  }\n  if (completeCount > 0) {\n    return QUEUE_COMPLETE_STATUS;\n  }\n  return QUEUE_EMPTY_STATUS;\n}\n\nexport async function addArgLookup(jobId:number, key:string, jsonPath:string) {\n  if (typeof jobId !== 'number') {\n    throw new TypeError(`Unable add argument lookup, received invalid \"jobId\" argument type \"${typeof jobId}\"`);\n  }\n  if (typeof key !== 'string') {\n    throw new TypeError(`Unable add argument lookup, received invalid \"key\" argument type \"${typeof key}\"`);\n  }\n  if (typeof jsonPath !== 'string') {\n    throw new TypeError(`Unable add argument lookup, received invalid \"jsonPath\" argument type \"${typeof jsonPath}\"`);\n  }\n  const store = await getReadWriteArgLookupObjectStore();\n  const request = store.put({\n    jobId,\n    key,\n    jsonPath,\n  });\n  return new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve();\n    };\n    request.onerror = function (event) {\n      logger.error(`Error while adding argument lookup for job ${jobId} with key \"${key}\" and JSON path \"${jsonPath}\"`);\n      logger.errorObject(event);\n      reject(new Error(`Error while adding argument lookup for job ${jobId} with key \"${key}\" and JSON path \"${jsonPath}\"`));\n    };\n    store.transaction.commit();\n  });\n}\n\nexport async function getArgLookupJobPathMap(key:string) {\n  if (typeof key !== 'string') {\n    throw new TypeError(`Unable to lookup arguments, received invalid \"key\" argument type \"${typeof key}\"`);\n  }\n  const store = await getReadOnlyArgLookupObjectStore();\n  const index = store.index('keyIndex');\n  // $FlowFixMe\n  const request = index.getAll(IDBKeyRange.only(key));\n  return new Promise((resolve, reject) => {\n    request.onsuccess = function (event) {\n      const map: Map<number, string> = new Map(event.target.result.map((x) => [x.jobId, x.jsonPath]));\n      resolve(map);\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error looking up arguments for key ${key}`);\n      logger.errorObject(event);\n      reject(new Error(`Request error looking up arguments for key ${key}`));\n    };\n    store.transaction.commit();\n  });\n}\n\n\nexport async function markJobsWithArgLookupKeyCleanupAndRemoveInDatabase(key:string) {\n  const map = await getArgLookupJobPathMap(key);\n  for (const jobId of map.keys()) {\n    await markJobCleanupAndRemoveInDatabase(jobId);\n  }\n}\n\nexport async function lookupArgs(key:string) {\n  const map = await getArgLookupJobPathMap(key);\n  if (map.size === 0) {\n    return [];\n  }\n  const jobs = await getJobsInDatabase([...map.keys()]);\n  const results = [];\n  for (const { id, args } of jobs) {\n    const jsonPath = map.get(id);\n    if (typeof jsonPath !== 'string') {\n      continue;\n    }\n    for (const result of JSONPath({ path: jsonPath, json: args })) {\n      results.push(result);\n    }\n  }\n  return results;\n}\n\nexport async function lookupArg(key:string) {\n  const results = await lookupArgs(key);\n  return results[0];\n}\n\nfunction removeArgLookupsForJobAsMicrotask(jobId:number) {\n  self.queueMicrotask(() => removeArgLookupsForJob(jobId).catch((error) => {\n    logger.error(`Unable to remove argument lookups for job ${jobId} in microtask`);\n    logger.errorStack(error);\n  }));\n}\n\nexport async function removeArgLookupsForJob(jobId:number) {\n  const [store, promise] = await getReadWriteArgLookupObjectStoreAndTransactionPromise();\n  const index = store.index('jobIdIndex');\n  // $FlowFixMe\n  const request = index.getAllKeys(IDBKeyRange.only(jobId));\n  request.onsuccess = function (event) {\n    for (const id of event.target.result) {\n      const deleteRequest = store.delete(id);\n      deleteRequest.onerror = function (deleteEvent) {\n        logger.error(`Delete request error while removing argument lookups for job ${jobId}`);\n        logger.errorObject(deleteEvent);\n      };\n    }\n    store.transaction.commit();\n  };\n  request.onerror = function (event) {\n    logger.error(`Request error while removing argument lookups for job ${jobId}`);\n    logger.errorObject(event);\n  };\n  await promise;\n}\n\nconst UNLOAD_DATA_ID = '_UNLOAD_DATA';\n\nexport function updateUnloadDataInDatabase(transform:(Object | void) => Object | void | false):Promise<Object | void> {\n  return updateMetadataInDatabase(UNLOAD_DATA_ID, transform);\n}\n\nexport function getUnloadDataFromDatabase() {\n  return getMetadataFromDatabase(UNLOAD_DATA_ID);\n}\n\nexport function clearUnloadDataInDatabase() {\n  return clearMetadataInDatabase(UNLOAD_DATA_ID);\n}\n\n"],"file":"database.js"}