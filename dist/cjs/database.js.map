{"version":3,"sources":["../../src/database.js"],"names":["localJobEmitter","EventEmitter","jobEmitter","logger","JobDoesNotExistError","message","name","Error","CleanupDoesNotExistError","QUEUE_ERROR_STATUS","QUEUE_PENDING_STATUS","QUEUE_COMPLETE_STATUS","QUEUE_EMPTY_STATUS","JOB_ABORTED_STATUS","JOB_COMPLETE_STATUS","JOB_PENDING_STATUS","JOB_ERROR_STATUS","JOB_CLEANUP_STATUS","JOB_CLEANUP_AND_REMOVE_STATUS","databasePromise","request","self","indexedDB","open","onupgradeneeded","e","store","target","result","createObjectStore","keyPath","autoIncrement","createIndex","unique","error","Promise","resolve","reject","onerror","onsuccess","event","db","getReadWriteAuthObjectStore","database","transaction","objectStore","onabort","errorObject","getReadOnlyAuthObjectStore","getReadWriteQueueDataObjectStore","getReadOnlyQueueDataObjectStore","getReadWriteJobsObjectStoreAndTransactionPromise","promise","oncomplete","getReadOnlyJobsObjectStoreAndTransactionPromise","getReadWriteJobsObjectStore","getReadOnlyJobsObjectStore","getReadWriteCleanupsObjectStore","getReadOnlyCleanupsObjectStore","clearQueueDataDatabase","clear","clearJobsDatabase","emit","clearCleanupsDatabase","clearDatabase","removeJobsWithQueueIdAndTypeFromDatabase","queueId","type","index","getAllKeys","IDBKeyRange","only","id","deleteRequest","delete","deleteEvent","removeQueueIdFromJobsDatabase","removeQueueIdFromCleanupsDatabase","openCursor","cursor","primaryKey","continue","removeQueueIdFromDatabase","removeCompletedExpiredItemsFromDatabase","maxAge","getAll","bound","Date","now","status","updateJobInDatabase","transform","get","newValue","value","putRequest","put","getJobFromDatabase","updateCleanupInDatabase","removePathFromCleanupDataInDatabase","path","attempt","startAfter","data","Object","assign","updateCleanupValuesInDatabase","TypeError","combinedData","removeJobFromDatabase","removeCleanupFromDatabase","getCleanupFromDatabase","getQueueDataFromDatabase","queueData","undefined","updateQueueDataInDatabase","markJobStatusInDatabase","markJobCompleteInDatabase","markJobPendingInDatabase","markJobErrorInDatabase","markJobCleanupInDatabase","markJobAbortedInDatabase","markJobCleanupAndRemoveInDatabase","markJobAsAbortedOrRemoveFromDatabase","markJobStartAfterInDatabase","toLocaleString","markCleanupStartAfterInDatabase","markQueueForCleanupInDatabase","jobs","push","warn","updateRequest","update","event2","incrementJobAttemptInDatabase","incrementCleanupAttemptInDatabase","bulkEnqueueToDatabase","items","delay","Array","isArray","i","length","args","ids","created","enqueueToDatabase","restoreJobToDatabaseForCleanupAndRemove","dequeueFromDatabase","getContiguousIds","sort","a","b","points","Infinity","dequeueFromDatabaseNotIn","includes","getRequest","getJobsFromDatabase","getCompletedJobsCountFromDatabase","getCompletedJobsFromDatabase","storeAuthDataInDatabase","getAuthDataFromDatabase","authData","removeAuthDataFromDatabase","getQueueStatus","abortedRequest","completeRequest","pendingRequest","errorRequest","cleanupRequest","cleanupAndRemoveRequest","abortedCountPromise","completeCountPromise","pendingCountPromise","errorCountPromise","cleanupCountPromise","cleanupAndRemoveCountPromise","all","abortedCount","completeCount","pendingCount","errorCount","cleanupCount","cleanupAndRemoveCount"],"mappings":"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","sourcesContent":["// @flow\n\nimport merge from 'lodash/merge';\nimport unset from 'lodash/unset';\nimport EventEmitter from 'events';\nimport makeLogger from './logger';\n\n// Local job emitter is for this process only,\n// jobEmitter is bridged when a MessagePort is open\nexport const localJobEmitter = new EventEmitter();\nexport const jobEmitter = new EventEmitter();\n\nconst logger = makeLogger('Jobs Database');\n\nexport class JobDoesNotExistError extends Error {\n  constructor(message:string) {\n    super(message);\n    this.name = 'JobDoesNotExistError';\n  }\n}\n\nexport class CleanupDoesNotExistError extends Error {\n  constructor(message:string) {\n    super(message);\n    this.name = 'CleanupDoesNotExistError';\n  }\n}\n\nexport type Job = {\n  id: number,\n  queueId:string,\n  type:string,\n  args:Array<any>,\n  attempt: number,\n  created: number,\n  status: number,\n  startAfter: number\n};\n\n\ntype Cleanup = {\n  id: number,\n  queueId:string,\n  data: Object,\n  attempt: number,\n  startAfter: number\n};\n\nexport const QUEUE_ERROR_STATUS = 0;\nexport const QUEUE_PENDING_STATUS = 1;\nexport const QUEUE_COMPLETE_STATUS = 2;\nexport const QUEUE_EMPTY_STATUS = 3;\n\nexport const JOB_ABORTED_STATUS = 2;\nexport const JOB_COMPLETE_STATUS = 1;\nexport const JOB_PENDING_STATUS = 0;\nexport const JOB_ERROR_STATUS = -1;\nexport const JOB_CLEANUP_STATUS = -2;\nexport const JOB_CLEANUP_AND_REMOVE_STATUS = -3;\n\nexport const databasePromise = (async () => {\n  const request = self.indexedDB.open('battery-queue-02', 1);\n\n  request.onupgradeneeded = function (e) {\n    try {\n      const store = e.target.result.createObjectStore('jobs', { keyPath: 'id', autoIncrement: true });\n      store.createIndex('statusIndex', 'status', { unique: false });\n      store.createIndex('queueIdIndex', 'queueId', { unique: false });\n      store.createIndex('queueIdTypeIndex', ['queueId', 'type'], { unique: false });\n      store.createIndex('statusQueueIdIndex', ['queueId', 'status'], { unique: false });\n      store.createIndex('createdIndex', 'created', { unique: false });\n    } catch (error) {\n      if (!(error.name === 'ConstraintError')) {\n        throw error;\n      }\n    }\n    try {\n      e.target.result.createObjectStore('queue-data', { keyPath: 'queueId' });\n    } catch (error) {\n      if (!(error.name === 'ConstraintError')) {\n        throw error;\n      }\n    }\n    try {\n      const store = e.target.result.createObjectStore('cleanups', { keyPath: 'id' });\n      store.createIndex('queueIdIndex', 'queueId', { unique: false });\n    } catch (error) {\n      if (!(error.name === 'ConstraintError')) {\n        throw error;\n      }\n    }\n    try {\n      e.target.result.createObjectStore('auth-data', { keyPath: 'id' });\n    } catch (error) {\n      if (!(error.name === 'ConstraintError')) {\n        throw error;\n      }\n    }\n  };\n\n  const db = await new Promise((resolve, reject) => {\n    request.onerror = () => {\n      reject(new Error('Unable to open database'));\n    };\n    request.onsuccess = function (event) {\n      resolve(event.target.result);\n    };\n  });\n\n  return db;\n})();\n\nasync function getReadWriteAuthObjectStore() {\n  const database = await databasePromise;\n  const transaction = database.transaction(['auth-data'], 'readwrite');\n  const objectStore = transaction.objectStore('auth-data');\n  transaction.onabort = (event) => {\n    logger.error('Read-write auth transaction was aborted');\n    logger.errorObject(event);\n  };\n  transaction.onerror = (event) => {\n    logger.error('Error in read-write auth transaction');\n    logger.errorObject(event);\n  };\n  return objectStore;\n}\n\nasync function getReadOnlyAuthObjectStore() {\n  const database = await databasePromise;\n  const transaction = database.transaction(['auth-data'], 'readonly');\n  const objectStore = transaction.objectStore('auth-data');\n  transaction.onabort = (event) => {\n    logger.error('Read-only auth transaction was aborted');\n    logger.errorObject(event);\n  };\n  transaction.onerror = (event) => {\n    logger.error('Error in read-only auth transaction');\n    logger.errorObject(event);\n  };\n  return objectStore;\n}\n\nasync function getReadWriteQueueDataObjectStore() {\n  const database = await databasePromise;\n  const transaction = database.transaction(['queue-data'], 'readwrite');\n  const objectStore = transaction.objectStore('queue-data');\n  transaction.onabort = (event) => {\n    logger.error('Read-write queue data transaction was aborted');\n    logger.errorObject(event);\n  };\n  transaction.onerror = (event) => {\n    logger.error('Error in read-write queue data transaction');\n    logger.errorObject(event);\n  };\n  return objectStore;\n}\n\nasync function getReadOnlyQueueDataObjectStore() {\n  const database = await databasePromise;\n  const transaction = database.transaction(['queue-data'], 'readonly');\n  const objectStore = transaction.objectStore('queue-data');\n  transaction.onabort = (event) => {\n    logger.error('Read-only queue data transaction was aborted');\n    logger.errorObject(event);\n  };\n  transaction.onerror = (event) => {\n    logger.error('Error in read-only queue data transaction');\n    logger.errorObject(event);\n  };\n  return objectStore;\n}\n\nasync function getReadWriteJobsObjectStoreAndTransactionPromise() {\n  const database = await databasePromise;\n  const transaction = database.transaction(['jobs'], 'readwrite');\n  const objectStore = transaction.objectStore('jobs');\n  const promise = new Promise((resolve, reject) => {\n    transaction.onabort = (event) => {\n      logger.error('Read-write jobs transaction was aborted');\n      logger.errorObject(event);\n      reject(new Error('Read-write jobs transaction was aborted'));\n    };\n    transaction.onerror = (event) => {\n      logger.error('Error in read-write jobs transaction');\n      logger.errorObject(event);\n      reject(new Error('Error in read-write jobs transaction'));\n    };\n    transaction.oncomplete = () => {\n      resolve();\n    };\n  });\n  return [objectStore, promise];\n}\n\nasync function getReadOnlyJobsObjectStoreAndTransactionPromise() {\n  const database = await databasePromise;\n  const transaction = database.transaction(['jobs'], 'readonly');\n  const objectStore = transaction.objectStore('jobs');\n  const promise = new Promise((resolve, reject) => {\n    transaction.onabort = (event) => {\n      logger.error('Read-only jobs transaction was aborted');\n      logger.errorObject(event);\n      reject(new Error('Read-only jobs transaction was aborted'));\n    };\n    transaction.onerror = (event) => {\n      logger.error('Error in read-only jobs transaction');\n      logger.errorObject(event);\n      reject(new Error('Error in read-only jobs transaction'));\n    };\n    transaction.oncomplete = () => {\n      resolve();\n    };\n  });\n  return [objectStore, promise];\n}\n\nasync function getReadWriteJobsObjectStore() {\n  const database = await databasePromise;\n  const transaction = database.transaction(['jobs'], 'readwrite');\n  const objectStore = transaction.objectStore('jobs');\n  transaction.onabort = (event) => {\n    logger.error('Read-write jobs transaction was aborted');\n    logger.errorObject(event);\n  };\n  transaction.onerror = (event) => {\n    logger.error('Error in read-write jobs transaction');\n    logger.errorObject(event);\n  };\n  return objectStore;\n}\n\nasync function getReadOnlyJobsObjectStore() {\n  const database = await databasePromise;\n  const transaction = database.transaction(['jobs'], 'readonly');\n  const objectStore = transaction.objectStore('jobs');\n  transaction.onabort = (event) => {\n    logger.error('Read-only jobs transaction was aborted');\n    logger.errorObject(event);\n  };\n  transaction.onerror = (event) => {\n    logger.error('Error in read-only jobs transaction');\n    logger.errorObject(event);\n  };\n  return objectStore;\n}\n\nasync function getReadWriteCleanupsObjectStore() {\n  const database = await databasePromise;\n  const transaction = database.transaction(['cleanups'], 'readwrite');\n  const objectStore = transaction.objectStore('cleanups');\n  transaction.onabort = (event) => {\n    logger.error('Read-write cleanups transaction was aborted');\n    logger.errorObject(event);\n  };\n  transaction.onerror = (event) => {\n    logger.error('Error in read-write cleanups transaction');\n    logger.errorObject(event);\n  };\n  return objectStore;\n}\n\nasync function getReadOnlyCleanupsObjectStore() {\n  const database = await databasePromise;\n  const transaction = database.transaction(['cleanups'], 'readonly');\n  const objectStore = transaction.objectStore('cleanups');\n  transaction.onabort = (event) => {\n    logger.error('Read-only cleanups transaction was aborted');\n    logger.errorObject(event);\n  };\n  transaction.onerror = (event) => {\n    logger.error('Error in read-only cleanups transaction');\n    logger.errorObject(event);\n  };\n  return objectStore;\n}\n\nasync function clearQueueDataDatabase() {\n  const store = await getReadWriteQueueDataObjectStore();\n  const request = store.clear();\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve();\n    };\n    request.onerror = function (event) {\n      logger.error('Error while clearing queue data database');\n      logger.errorObject(event);\n      reject(new Error('Error while clearing queue data database'));\n    };\n  });\n}\n\nasync function clearJobsDatabase() {\n  const store = await getReadWriteJobsObjectStore();\n  const request = store.clear();\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve();\n    };\n    request.onerror = function (event) {\n      logger.error('Error while clearing jobs database');\n      logger.errorObject(event);\n      reject(new Error('Error while clearing jobs database'));\n    };\n  });\n  localJobEmitter.emit('jobsClear');\n  jobEmitter.emit('jobsClear');\n}\n\nasync function clearCleanupsDatabase() {\n  const store = await getReadWriteCleanupsObjectStore();\n  const request = store.clear();\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve();\n    };\n    request.onerror = function (event) {\n      logger.error('Error while clearing cleanups database');\n      logger.errorObject(event);\n      reject(new Error('Error while clearing cleanups database'));\n    };\n  });\n}\n\nexport async function clearDatabase() {\n  await clearJobsDatabase();\n  await clearCleanupsDatabase();\n  await clearQueueDataDatabase();\n}\n\nexport async function removeJobsWithQueueIdAndTypeFromDatabase(queueId:string, type:string) {\n  const [store, promise] = await getReadWriteJobsObjectStoreAndTransactionPromise();\n  const index = store.index('queueIdTypeIndex');\n  // $FlowFixMe\n  const request = index.getAllKeys(IDBKeyRange.only([queueId, type]));\n  request.onsuccess = function (event) {\n    for (const id of event.target.result) {\n      const deleteRequest = store.delete(id);\n      deleteRequest.onsuccess = function () {\n        localJobEmitter.emit('jobDelete', id, queueId);\n        jobEmitter.emit('jobDelete', id, queueId);\n      };\n      deleteRequest.onerror = function (deleteEvent) {\n        logger.error(`Request error while removing job ${id} in queue ${queueId} and type ${type} from jobs database`);\n        logger.errorObject(deleteEvent);\n      };\n    }\n  };\n  request.onerror = function (event) {\n    logger.error(`Request error while removing jobs with queue ${queueId} and type ${type} from jobs database`);\n    logger.errorObject(event);\n  };\n  await promise;\n}\n\nexport async function removeQueueIdFromJobsDatabase(queueId:string) {\n  const [store, promise] = await getReadWriteJobsObjectStoreAndTransactionPromise();\n  const index = store.index('queueIdIndex');\n  // $FlowFixMe\n  const request = index.getAllKeys(IDBKeyRange.only(queueId));\n  request.onsuccess = function (event) {\n    for (const id of event.target.result) {\n      const deleteRequest = store.delete(id);\n      deleteRequest.onsuccess = function () {\n        localJobEmitter.emit('jobDelete', id, queueId);\n        jobEmitter.emit('jobDelete', id, queueId);\n      };\n      deleteRequest.onerror = function (deleteEvent) {\n        logger.error(`Request error while removing job ${id} in queue ${queueId} from jobs database`);\n        logger.errorObject(deleteEvent);\n      };\n    }\n  };\n  request.onerror = function (event) {\n    logger.error(`Request error while removing queue ${queueId} from jobs database`);\n    logger.errorObject(event);\n  };\n  await promise;\n}\n\nasync function removeQueueIdFromCleanupsDatabase(queueId:string) {\n  const store = await getReadWriteCleanupsObjectStore();\n  const index = store.index('queueIdIndex');\n  // $FlowFixMe\n  const request = index.openCursor(IDBKeyRange.only(queueId));\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function (event) {\n      const cursor = event.target.result;\n      if (cursor) {\n        store.delete(cursor.primaryKey);\n        cursor.continue();\n      } else {\n        resolve();\n      }\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while removing queue ${queueId} from jobs database`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while removing queue ${queueId} from jobs database`));\n    };\n  });\n}\n\nexport async function removeQueueIdFromDatabase(queueId:string) {\n  await removeQueueIdFromJobsDatabase(queueId);\n  await removeQueueIdFromCleanupsDatabase(queueId);\n}\n\nexport async function removeCompletedExpiredItemsFromDatabase(maxAge:number) {\n  const [store, promise] = await getReadWriteJobsObjectStoreAndTransactionPromise();\n  const index = store.index('createdIndex');\n  // $FlowFixMe\n  const request = index.getAll(IDBKeyRange.bound(0, Date.now() - maxAge));\n  request.onsuccess = function (event) {\n    for (const { id, queueId, status } of event.target.result) {\n      if (status !== JOB_COMPLETE_STATUS) {\n        continue;\n      }\n      const deleteRequest = store.delete(id);\n      deleteRequest.onsuccess = function () {\n        localJobEmitter.emit('jobDelete', id, queueId);\n        jobEmitter.emit('jobDelete', id, queueId);\n      };\n      deleteRequest.onerror = function (deleteEvent) {\n        logger.error(`Request error while removing job ${id} in queue ${queueId} from completed exired items from jobs database`);\n        logger.errorObject(deleteEvent);\n      };\n    }\n  };\n  request.onerror = function (event) {\n    logger.error('Request error while removing completed exired items from jobs database');\n    logger.errorObject(event);\n  };\n  await promise;\n}\n\nexport async function updateJobInDatabase(id:number, transform:(Job | void) => Job | void | false):Promise<Job | void> {\n  const store = await getReadWriteJobsObjectStore();\n  const request = store.get(id);\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      let newValue;\n      const value = request.result;\n      try {\n        newValue = transform(value);\n      } catch (error) {\n        reject(error);\n        return;\n      }\n      if (typeof newValue === 'undefined') {\n        resolve();\n      } else if (newValue === false) {\n        if (typeof value !== 'undefined') {\n          const { queueId, type } = value;\n          const deleteRequest = store.delete(id);\n          deleteRequest.onsuccess = function () {\n            localJobEmitter.emit('jobDelete', id, queueId);\n            jobEmitter.emit('jobDelete', id, queueId);\n            resolve();\n          };\n          deleteRequest.onerror = function (event) {\n            logger.error(`Delete request error while updating job ${id} in queue ${queueId} and type ${type} in jobs database`);\n            logger.errorObject(event);\n            reject(new Error(`Delete request error while updating job ${id} in queue ${queueId} and type ${type} from jobs database`));\n          };\n        }\n      } else {\n        const putRequest = store.put(newValue);\n        const { queueId, type, status } = newValue;\n        putRequest.onsuccess = function () {\n          localJobEmitter.emit('jobUpdate', id, queueId, type, status);\n          jobEmitter.emit('jobUpdate', id, queueId, type, status);\n          resolve();\n        };\n        putRequest.onerror = function (event) {\n          logger.error(`Put request error while updating job ${id} in queue ${queueId} and type ${type} in jobs database`);\n          logger.errorObject(event);\n          reject(new Error(`Put request error while updating job ${id} in queue ${queueId} and type ${type} from jobs database`));\n        };\n      }\n    };\n    request.onerror = function (event) {\n      logger.error(`Get request error while updating ${id}`);\n      logger.errorObject(event);\n      reject(new Error(`Get request error while updating ${id}`));\n    };\n  });\n}\n\nexport async function getJobFromDatabase(id:number):Promise<Job | void> {\n  const store = await getReadOnlyJobsObjectStore();\n  const request = store.get(id);\n  return new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve(request.result);\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while getting ${id}`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while getting ${id}`));\n    };\n  });\n}\n\nexport async function updateCleanupInDatabase(id:number, transform:(Cleanup | void) => Object):Promise<Cleanup | void> {\n  const store = await getReadWriteCleanupsObjectStore();\n  const request = store.get(id);\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      let newValue;\n      try {\n        newValue = transform(request.result);\n      } catch (error) {\n        reject(error);\n        return;\n      }\n      if (typeof newValue === 'undefined') {\n        resolve();\n      } else {\n        const putRequest = store.put(newValue);\n        putRequest.onsuccess = function () {\n          resolve();\n        };\n        putRequest.onerror = function (event) {\n          logger.error(`Put request error while updating ${id} cleanup`);\n          logger.errorObject(event);\n          reject(new Error(`Put request error while updating ${id} cleanup`));\n        };\n      }\n    };\n    request.onerror = function (event) {\n      logger.error(`Get request error while updating ${id} cleanup`);\n      logger.errorObject(event);\n      reject(new Error(`Get request error while updating ${id} cleanup`));\n    };\n  });\n}\n\nexport async function removePathFromCleanupDataInDatabase(id:number, path:Array<string>) {\n  await updateCleanupInDatabase(id, (value: Cleanup | void) => {\n    if (typeof value === 'undefined') {\n      return;\n    }\n    const { queueId, attempt, startAfter } = value;\n    const data = Object.assign({}, value.data);\n    unset(data, path);\n    return { // eslint-disable-line consistent-return\n      id,\n      queueId,\n      attempt,\n      startAfter,\n      data,\n    };\n  });\n}\n\n\nexport async function updateCleanupValuesInDatabase(id:number, queueId:string, data:Object) {\n  if (typeof id !== 'number') {\n    throw new TypeError(`Unable to update cleanup in database, received invalid \"id\" argument type \"${typeof id}\"`);\n  }\n  if (typeof queueId !== 'string') {\n    throw new TypeError(`Unable to update cleanup in database, received invalid \"queueId\" argument type \"${typeof queueId}\"`);\n  }\n  if (typeof data !== 'object') {\n    throw new TypeError(`Unable to update cleanup in database, received invalid \"data\" argument type \"${typeof data}\"`);\n  }\n  await updateCleanupInDatabase(id, (value: Cleanup | void) => {\n    const combinedData = typeof value === 'undefined' ? data : merge({}, value.data, data);\n    return {\n      id,\n      queueId,\n      attempt: 0,\n      startAfter: Date.now(),\n      data: combinedData,\n    };\n  });\n}\n\nexport async function removeJobFromDatabase(id:number) {\n  const store = await getReadWriteJobsObjectStore();\n  const request = store.delete(id);\n  return new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve();\n    };\n    request.onerror = function (event) {\n      logger.error(`Error while removing job ${id}`);\n      logger.errorObject(event);\n      reject(new Error(`Error while removing job ${id}`));\n    };\n  });\n}\n\nexport async function removeCleanupFromDatabase(id:number) {\n  const store = await getReadWriteCleanupsObjectStore();\n  const request = store.delete(id);\n  return new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve();\n    };\n    request.onerror = function (event) {\n      logger.error(`Error while removing cleanup data for ${id}`);\n      logger.errorObject(event);\n      reject(new Error(`Error while removing cleanup data for ${id}`));\n    };\n  });\n}\n\nexport async function getCleanupFromDatabase(id:number):Promise<Cleanup | void> {\n  const store = await getReadOnlyCleanupsObjectStore();\n  const request = store.get(id);\n  return new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve(request.result);\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while getting ${id}`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while getting ${id}`));\n    };\n  });\n}\n\nexport async function getQueueDataFromDatabase(queueId:string) {\n  const store = await getReadOnlyQueueDataObjectStore();\n  const request = store.get(queueId);\n  const queueData = await new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve(request.result);\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while getting queue ${queueId} data`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while getting queue ${queueId} data`));\n    };\n  });\n  return typeof queueData !== 'undefined' ? queueData.data : undefined;\n}\n\nexport async function updateQueueDataInDatabase(queueId:string, data:Object) {\n  const value = await getQueueDataFromDatabase(queueId);\n  const store = await getReadWriteQueueDataObjectStore();\n  const request = store.put({\n    queueId,\n    data: merge({}, value, data),\n  });\n  return new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve();\n    };\n    request.onerror = function (event) {\n      logger.error(`Error while updating queue ${queueId} data`);\n      logger.errorObject(event);\n      reject(new Error(`Error while updating queue ${queueId} data`));\n    };\n  });\n}\n\nexport function markJobStatusInDatabase(id:number, status:number) {\n  return updateJobInDatabase(id, (value:Job | void) => {\n    if (typeof value === 'undefined') {\n      throw new JobDoesNotExistError(`Unable to mark job ${id} as status ${status} in database, job does not exist`);\n    }\n    value.status = status; // eslint-disable-line no-param-reassign\n    return value;\n  });\n}\n\nexport function markJobCompleteInDatabase(id:number) {\n  return markJobStatusInDatabase(id, JOB_COMPLETE_STATUS);\n}\n\nexport function markJobPendingInDatabase(id:number) {\n  return markJobStatusInDatabase(id, JOB_PENDING_STATUS);\n}\n\nexport function markJobErrorInDatabase(id:number) {\n  return markJobStatusInDatabase(id, JOB_ERROR_STATUS);\n}\n\nexport function markJobCleanupInDatabase(id:number) {\n  return markJobStatusInDatabase(id, JOB_CLEANUP_STATUS);\n}\n\nexport function markJobAbortedInDatabase(id:number) {\n  return markJobStatusInDatabase(id, JOB_ABORTED_STATUS);\n}\n\nexport function markJobCleanupAndRemoveInDatabase(id:number) {\n  return updateJobInDatabase(id, (value:Job | void) => {\n    if (typeof value === 'undefined') {\n      throw new JobDoesNotExistError(`Unable to mark job ${id} as status ${JOB_CLEANUP_AND_REMOVE_STATUS} in database, job does not exist`);\n    }\n    if (value.status === JOB_PENDING_STATUS) {\n      return false;\n    }\n    if (value.status === JOB_ABORTED_STATUS) {\n      return false;\n    }\n    value.status = JOB_CLEANUP_AND_REMOVE_STATUS; // eslint-disable-line no-param-reassign\n    return value;\n  });\n}\n\nexport function markJobAsAbortedOrRemoveFromDatabase(id:number) {\n  return updateJobInDatabase(id, (value:Job | void) => {\n    if (typeof value === 'undefined') {\n      return;\n    }\n    if (value.status === JOB_ERROR_STATUS) {\n      value.status = JOB_ABORTED_STATUS; // eslint-disable-line no-param-reassign\n      return value; // eslint-disable-line consistent-return\n    }\n    if (value.status === JOB_CLEANUP_STATUS) {\n      value.status = JOB_ABORTED_STATUS; // eslint-disable-line no-param-reassign\n      return value; // eslint-disable-line consistent-return\n    }\n    if (value.status === JOB_CLEANUP_AND_REMOVE_STATUS) {\n      return false; // eslint-disable-line consistent-return\n    }\n    throw new Error(`Unable to mark job ${id} as aborted or remove after cleanup, unable to handle status ${value.status}`);\n  });\n}\n\nexport function markJobStartAfterInDatabase(id:number, startAfter:number) {\n  return updateJobInDatabase(id, (value:Job | void) => {\n    if (typeof value === 'undefined') {\n      throw new JobDoesNotExistError(`Unable to mark job ${id} start-after time to ${new Date(startAfter).toLocaleString()} in database, job does not exist`);\n    }\n    if (startAfter < value.startAfter) {\n      return;\n    }\n    value.startAfter = startAfter; // eslint-disable-line no-param-reassign\n    return value; // eslint-disable-line consistent-return\n  });\n}\n\nexport function markCleanupStartAfterInDatabase(id:number, startAfter:number) {\n  return updateCleanupInDatabase(id, (value: Cleanup | void) => {\n    if (typeof value === 'undefined') {\n      throw new CleanupDoesNotExistError(`Unable to mark cleanup ${id} start-after time to ${new Date(startAfter).toLocaleString()} in database, cleanup does not exist`);\n    }\n    if (startAfter < value.startAfter) {\n      return;\n    }\n    value.startAfter = startAfter; // eslint-disable-line  no-param-reassign\n    return value; // eslint-disable-line consistent-return\n  });\n}\n\nexport async function markQueueForCleanupInDatabase(queueId:string) {\n  const store = await getReadWriteJobsObjectStore();\n  const index = store.index('queueIdIndex');\n  // $FlowFixMe\n  const request = index.openCursor(IDBKeyRange.only(queueId));\n  const jobs = [];\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function (event) {\n      const cursor = event.target.result;\n      if (cursor) {\n        const value = Object.assign({}, cursor.value);\n        switch (value.status) {\n          case JOB_ERROR_STATUS:\n            value.status = JOB_CLEANUP_STATUS;\n            jobs.push(value);\n            break;\n          case JOB_COMPLETE_STATUS:\n            value.status = JOB_CLEANUP_STATUS;\n            jobs.push(value);\n            break;\n          case JOB_PENDING_STATUS:\n            value.status = JOB_ABORTED_STATUS;\n            break;\n          case JOB_CLEANUP_STATUS:\n            cursor.continue();\n            return;\n          case JOB_ABORTED_STATUS:\n            cursor.continue();\n            return;\n          default:\n            logger.warn(`Unhandled job status ${value.status}`);\n            cursor.continue();\n            return;\n        }\n        const updateRequest = cursor.update(value);\n        updateRequest.onsuccess = function () {\n          localJobEmitter.emit('jobUpdate', value.id, value.queueId, value.type, value.status);\n          jobEmitter.emit('jobUpdate', value.id, value.queueId, value.type, value.status);\n          cursor.continue();\n        };\n        updateRequest.onerror = function (event2) {\n          logger.error(`Update request error while marking queue ${queueId} error`);\n          logger.errorObject(event2);\n          cursor.continue();\n        };\n      } else {\n        resolve();\n      }\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while marking queue ${queueId} error`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while marking queue ${queueId} error`));\n    };\n  });\n  return jobs;\n}\n\nexport async function incrementJobAttemptInDatabase(id:number) {\n  await updateJobInDatabase(id, (value:Job | void) => {\n    if (typeof value === 'undefined') {\n      throw new JobDoesNotExistError(`Unable to increment attempts for job ${id} in database, job does not exist`);\n    }\n    value.attempt += 1; // eslint-disable-line no-param-reassign\n    return value;\n  });\n}\n\nexport async function incrementCleanupAttemptInDatabase(id:number, queueId:string) {\n  let attempt = 1;\n  await updateCleanupInDatabase(id, (value: Cleanup | void) => {\n    if (typeof value === 'undefined') {\n      return {\n        id,\n        queueId,\n        attempt: 1,\n        startAfter: Date.now(),\n        data: {},\n      };\n    }\n    attempt = value.attempt + 1;\n    value.attempt = attempt; // eslint-disable-line no-param-reassign\n    return value;\n  });\n  return attempt;\n}\n\nexport async function bulkEnqueueToDatabase(queueId: string, items:Array<[string, Array<any>]>, delay: number) { // eslint-disable-line no-underscore-dangle\n  if (typeof queueId !== 'string') {\n    throw new TypeError(`Unable to bulk enqueue in database, received invalid \"queueId\" argument type \"${typeof queueId}\"`);\n  }\n  if (!Array.isArray(items)) {\n    throw new TypeError(`Unable to bulk enqueue in database, received invalid \"items\" argument type \"${typeof items}\"`);\n  }\n  for (let i = 0; i < items.length; i += 1) {\n    const [type, args] = items[i];\n    if (typeof type !== 'string') {\n      throw new TypeError(`Unable to bulk enqueue in database, received invalid items[${i}] \"type\" argument type \"${typeof type}\"`);\n    }\n    if (!Array.isArray(args)) {\n      throw new TypeError(`Unable to bulk enqueue in database, received invalid items[${i}] \"args\" argument type \"${typeof args}\"`);\n    }\n  }\n  if (typeof delay !== 'number') {\n    throw new TypeError(`Unable to bulk enqueue in database, received invalid \"delay\" argument type \"${typeof delay}\"`);\n  }\n  const ids = [];\n  const store = await getReadWriteJobsObjectStore();\n  await new Promise((resolve, reject) => {\n    for (let i = 0; i < items.length; i += 1) {\n      const [type, args] = items[i];\n      const value = {\n        queueId,\n        type,\n        args,\n        attempt: 0,\n        created: Date.now(),\n        status: JOB_PENDING_STATUS,\n        startAfter: Date.now() + delay,\n      };\n      const request = store.put(value);\n      request.onsuccess = function () {\n        const id = request.result;\n        ids.push(request.result);\n        localJobEmitter.emit('jobAdd', id, queueId, type);\n        jobEmitter.emit('jobAdd', id, queueId, type);\n        resolve(request.result);\n      };\n      request.onerror = function (event) {\n        logger.error(`Request error while bulk enqueueing ${items.length} ${items.length === 1 ? 'job' : 'jobs'} in queue ${queueId}`);\n        logger.errorObject(event);\n        reject(new Error(`Request error while bulk enqueueing ${items.length} ${items.length === 1 ? 'job' : 'jobs'} in queue ${queueId}`));\n      };\n    }\n  });\n  return ids;\n}\n\nexport async function enqueueToDatabase(queueId: string, type: string, args: Array<any>, delay: number) { // eslint-disable-line no-underscore-dangle\n  if (typeof queueId !== 'string') {\n    throw new TypeError(`Unable to enqueue in database, received invalid \"queueId\" argument type \"${typeof queueId}\"`);\n  }\n  if (typeof type !== 'string') {\n    throw new TypeError(`Unable to enqueue in database, received invalid \"type\" argument type \"${typeof type}\"`);\n  }\n  if (!Array.isArray(args)) {\n    throw new TypeError(`Unable to enqueue in database, received invalid \"args\" argument type \"${typeof args}\"`);\n  }\n  if (typeof delay !== 'number') {\n    throw new TypeError(`Unable to enqueue in database, received invalid \"delay\" argument type \"${typeof delay}\"`);\n  }\n  const value = {\n    queueId,\n    type,\n    args,\n    attempt: 0,\n    created: Date.now(),\n    status: JOB_PENDING_STATUS,\n    startAfter: Date.now() + delay,\n  };\n  const store = await getReadWriteJobsObjectStore();\n\n  const request = store.put(value);\n  const id = await new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve(request.result);\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while enqueueing ${type} job`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while enqueueing ${type} job`));\n    };\n  });\n  localJobEmitter.emit('jobAdd', id, queueId, type);\n  jobEmitter.emit('jobAdd', id, queueId, type);\n  return id;\n}\n\nexport async function restoreJobToDatabaseForCleanupAndRemove(id:number, queueId: string, type: string, args: Array<any>) { // eslint-disable-line no-underscore-dangle\n  if (typeof id !== 'number') {\n    throw new TypeError(`Unable to restore to database, received invalid \"id\" argument type \"${typeof id}\"`);\n  }\n  if (typeof queueId !== 'string') {\n    throw new TypeError(`Unable to restore to database, received invalid \"queueId\" argument type \"${typeof queueId}\"`);\n  }\n  if (typeof type !== 'string') {\n    throw new TypeError(`Unable to restore to database, received invalid \"type\" argument type \"${typeof type}\"`);\n  }\n  if (!Array.isArray(args)) {\n    throw new TypeError(`Unable to restore to database, received invalid \"args\" argument type \"${typeof args}\"`);\n  }\n  const value = {\n    id,\n    queueId,\n    type,\n    args,\n    attempt: 1,\n    created: Date.now(),\n    status: JOB_CLEANUP_AND_REMOVE_STATUS,\n    startAfter: Date.now(),\n  };\n  const store = await getReadWriteJobsObjectStore();\n  const request = store.put(value);\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve(request.result);\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while enqueueing ${type} job`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while enqueueing ${type} job`));\n    };\n  });\n  localJobEmitter.emit('jobAdd', id, queueId, type);\n  jobEmitter.emit('jobAdd', id, queueId, type);\n  return id;\n}\n\nexport async function dequeueFromDatabase():Promise<Array<Job>> { // eslint-disable-line no-underscore-dangle\n  const store = await getReadOnlyJobsObjectStore();\n  const index = store.index('statusIndex');\n  // $FlowFixMe\n  const request = index.getAll(IDBKeyRange.bound(JOB_CLEANUP_AND_REMOVE_STATUS, JOB_PENDING_STATUS));\n  const jobs = await new Promise((resolve, reject) => {\n    request.onsuccess = function (event) {\n      resolve(event.target.result);\n    };\n    request.onerror = function (event) {\n      logger.error('Request error while dequeing');\n      logger.errorObject(event);\n      reject(new Error('Request error while dequeing'));\n    };\n  });\n  return jobs;\n}\n\nexport function getContiguousIds(ids:Array<number>) {\n  ids.sort((a, b) => a - b);\n  const points = [[0, ids[0] - 1]];\n  for (let i = 0; i < ids.length; i += 1) {\n    if (ids[i] + 1 !== ids[i + 1]) {\n      if (i + 1 >= ids.length) {\n        points.push([ids[i] + 1, Infinity]);\n      } else {\n        points.push([ids[i] + 1, ids[i + 1] - 1]);\n      }\n    }\n  }\n  return points;\n}\n\nexport async function dequeueFromDatabaseNotIn(ids:Array<number>):Promise<Array<Job>> { // eslint-disable-line no-underscore-dangle\n  if (ids.length === 0) {\n    return dequeueFromDatabase();\n  }\n  const [store, promise] = await getReadOnlyJobsObjectStoreAndTransactionPromise();\n  const index = store.index('statusIndex');\n  const jobs = [];\n  // $FlowFixMe\n  const request = index.getAllKeys(IDBKeyRange.bound(JOB_CLEANUP_STATUS, JOB_PENDING_STATUS));\n  request.onsuccess = function (event) {\n    for (const id of event.target.result) {\n      if (ids.includes(id)) {\n        continue;\n      }\n      const getRequest = store.get(id);\n      getRequest.onsuccess = function () {\n        jobs.push(getRequest.result);\n      };\n      getRequest.onerror = function (event2) {\n        logger.error(`Request error while getting job ${id}`);\n        logger.errorObject(event2);\n      };\n    }\n  };\n  request.onerror = function (event) {\n    logger.error('Request error while dequeing');\n    logger.errorObject(event);\n  };\n  await promise;\n  return jobs;\n}\n\nexport async function getJobsFromDatabase(queueId: string):Promise<Array<Job>> { // eslint-disable-line no-underscore-dangle\n  if (typeof queueId !== 'string') {\n    throw new TypeError(`Unable to get completed jobs database, received invalid \"queueId\" argument type \"${typeof queueId}\"`);\n  }\n  const store = await getReadOnlyJobsObjectStore();\n  const index = store.index('queueIdIndex');\n  // $FlowFixMe\n  const request = index.getAll(IDBKeyRange.only(queueId));\n  const jobs = await new Promise((resolve, reject) => {\n    request.onsuccess = function (event) {\n      resolve(event.target.result);\n    };\n    request.onerror = function (event) {\n      logger.error('Request error while dequeing');\n      logger.errorObject(event);\n      reject(new Error('Request error while dequeing'));\n    };\n  });\n  return jobs;\n}\n\nexport async function getCompletedJobsCountFromDatabase(queueId: string) { // eslint-disable-line no-underscore-dangle\n  const jobs = await getCompletedJobsFromDatabase(queueId);\n  return jobs.length;\n}\n\nexport async function getCompletedJobsFromDatabase(queueId: string):Promise<Array<Job>> { // eslint-disable-line no-underscore-dangle\n  if (typeof queueId !== 'string') {\n    throw new TypeError(`Unable to get completed jobs database, received invalid \"queueId\" argument type \"${typeof queueId}\"`);\n  }\n  const store = await getReadOnlyJobsObjectStore();\n  const index = store.index('statusQueueIdIndex');\n  // $FlowFixMe\n  const request = index.openCursor(IDBKeyRange.only([queueId, JOB_COMPLETE_STATUS]));\n  const jobs = [];\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function (event) {\n      const cursor = event.target.result;\n      if (cursor) {\n        jobs.push(cursor.value);\n        cursor.continue();\n      } else {\n        resolve();\n      }\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while getting completed jobs for queue ${queueId}`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while getting completed jobs for queue ${queueId}`));\n    };\n  });\n  return jobs;\n}\n\nexport async function storeAuthDataInDatabase(id:string, data: Object) { // eslint-disable-line no-underscore-dangle\n  if (typeof id !== 'string') {\n    throw new TypeError(`Unable to store auth data in database, received invalid \"id\" argument type \"${typeof id}\"`);\n  }\n  if (typeof data !== 'object') {\n    throw new TypeError(`Unable to store auth data in database, received invalid \"data\" argument type \"${typeof data}\"`);\n  }\n  const store = await getReadWriteAuthObjectStore();\n  const request = store.put({ id, data });\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve();\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while storing auth data for ${id}`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while storing auth data for ${id}`));\n    };\n  });\n}\n\nexport async function getAuthDataFromDatabase(id:string) {\n  if (typeof id !== 'string') {\n    throw new TypeError(`Unable to store auth data in database, received invalid \"id\" argument type \"${typeof id}\"`);\n  }\n  const store = await getReadOnlyAuthObjectStore();\n  const request = store.get(id);\n  const authData = await new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve(request.result);\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while getting auth data for ${id}`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while getting auth data for ${id}`));\n    };\n  });\n  return typeof authData !== 'undefined' ? authData.data : undefined;\n}\n\nexport async function removeAuthDataFromDatabase(id:string) {\n  if (typeof id !== 'string') {\n    throw new TypeError(`Unable to store auth data in database, received invalid \"id\" argument type \"${typeof id}\"`);\n  }\n  const store = await getReadWriteAuthObjectStore();\n  const request = store.delete(id);\n  return new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve();\n    };\n    request.onerror = function (event) {\n      logger.error(`Error while removing auth data for ${id}`);\n      logger.errorObject(event);\n      reject(new Error(`Error while removing auth data for ${id}`));\n    };\n  });\n}\n\nexport async function getQueueStatus(queueId:string) {\n  const store = await getReadOnlyJobsObjectStore();\n  const index = store.index('statusQueueIdIndex');\n  // $FlowFixMe\n  const abortedRequest = index.getAllKeys(IDBKeyRange.only([queueId, JOB_ABORTED_STATUS]));\n  // $FlowFixMe\n  const completeRequest = index.getAllKeys(IDBKeyRange.only([queueId, JOB_COMPLETE_STATUS]));\n  // $FlowFixMe\n  const pendingRequest = index.getAllKeys(IDBKeyRange.only([queueId, JOB_PENDING_STATUS]));\n  // $FlowFixMe\n  const errorRequest = index.getAllKeys(IDBKeyRange.only([queueId, JOB_ERROR_STATUS]));\n  // $FlowFixMe\n  const cleanupRequest = index.getAllKeys(IDBKeyRange.only([queueId, JOB_CLEANUP_STATUS]));\n  // $FlowFixMe\n  const cleanupAndRemoveRequest = index.getAllKeys(IDBKeyRange.only([queueId, JOB_CLEANUP_AND_REMOVE_STATUS]));\n  const abortedCountPromise = new Promise((resolve, reject) => {\n    abortedRequest.onsuccess = function (event) {\n      resolve(event.target.result.length);\n    };\n    abortedRequest.onerror = function (event) {\n      logger.error(`Request error while getting status of queue ${queueId}`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while getting status of queue ${queueId}`));\n    };\n  });\n  const completeCountPromise = new Promise((resolve, reject) => {\n    completeRequest.onsuccess = function (event) {\n      resolve(event.target.result.length);\n    };\n    completeRequest.onerror = function (event) {\n      logger.error(`Request error while getting status of queue ${queueId}`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while getting status of queue ${queueId}`));\n    };\n  });\n  const pendingCountPromise = new Promise((resolve, reject) => {\n    pendingRequest.onsuccess = function (event) {\n      resolve(event.target.result.length);\n    };\n    pendingRequest.onerror = function (event) {\n      logger.error(`Request error while getting status of queue ${queueId}`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while getting status of queue ${queueId}`));\n    };\n  });\n  const errorCountPromise = new Promise((resolve, reject) => {\n    errorRequest.onsuccess = function (event) {\n      resolve(event.target.result.length);\n    };\n    errorRequest.onerror = function (event) {\n      logger.error(`Request error while getting status of queue ${queueId}`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while getting status of queue ${queueId}`));\n    };\n  });\n  const cleanupCountPromise = new Promise((resolve, reject) => {\n    cleanupRequest.onsuccess = function (event) {\n      resolve(event.target.result.length);\n    };\n    cleanupRequest.onerror = function (event) {\n      logger.error(`Request error while getting status of queue ${queueId}`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while getting status of queue ${queueId}`));\n    };\n  });\n  const cleanupAndRemoveCountPromise = new Promise((resolve, reject) => {\n    cleanupAndRemoveRequest.onsuccess = function (event) {\n      resolve(event.target.result.length);\n    };\n    cleanupAndRemoveRequest.onerror = function (event) {\n      logger.error(`Request error while getting status of queue ${queueId}`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while getting status of queue ${queueId}`));\n    };\n  });\n  const [\n    abortedCount,\n    completeCount,\n    pendingCount,\n    errorCount,\n    cleanupCount,\n    cleanupAndRemoveCount,\n  ] = await Promise.all([\n    abortedCountPromise,\n    completeCountPromise,\n    pendingCountPromise,\n    errorCountPromise,\n    cleanupCountPromise,\n    cleanupAndRemoveCountPromise,\n  ]);\n  if (abortedCount > 0 || cleanupCount > 0) {\n    return QUEUE_ERROR_STATUS;\n  }\n  if (errorCount > 0 || pendingCount > 0 || cleanupAndRemoveCount > 0) {\n    return QUEUE_PENDING_STATUS;\n  }\n  if (completeCount > 0) {\n    return QUEUE_COMPLETE_STATUS;\n  }\n  return QUEUE_EMPTY_STATUS;\n}\n\n"],"file":"database.js"}