{"version":3,"sources":["../../src/database.js"],"names":["merge","unset","makeLogger","logger","OPERATION_ABORTED_STATUS","OPERATION_COMPLETE_STATUS","OPERATION_PENDING_STATUS","OPERATION_ERROR_STATUS","OPERATION_CLEANUP_STATUS","databasePromise","request","self","indexedDB","open","onupgradeneeded","e","store","target","result","createObjectStore","keyPath","autoIncrement","createIndex","unique","error","name","db","Promise","resolve","reject","onerror","Error","onsuccess","event","getReadWriteAuthObjectStore","database","transaction","objectStore","onabort","errorObject","getReadOnlyAuthObjectStore","getReadWriteQueueDataObjectStore","getReadOnlyQueueDataObjectStore","getReadWriteOperationsObjectStore","getReadOnlyOperationsObjectStore","getReadWriteCleanupsObjectStore","getReadOnlyCleanupsObjectStore","clearQueueDataDatabase","clear","clearOperationsDatabase","clearCleanupsDatabase","clearDatabase","removeOperationsWithQueueIdAndTypeFromDatabase","queueId","type","index","openCursor","IDBKeyRange","only","cursor","delete","primaryKey","continue","removeQueueIdFromOperationsDatabase","removeQueueIdFromCleanupsDatabase","removeQueueIdFromDatabase","removeCompletedExpiredItemsFromDatabase","maxAge","bound","Date","now","queueIds","Set","add","value","getOperationFromDatabase","id","get","removePathFromCleanupDataInDatabase","path","getCleanupFromDatabase","put","data","Array","isArray","join","updateCleanupInDatabase","removeCleanupFromDatabase","cleanupData","undefined","getQueueDataFromDatabase","queueData","updateQueueDataInDatabase","markOperationStatusInDatabase","status","markOperationCompleteInDatabase","markOperationPendingInDatabase","markOperationErrorInDatabase","markOperationCleanupInDatabase","markOperationAbortedInDatabase","markQueueForCleanupInDatabase","Object","assign","warn","updateRequest","update","event2","incrementAttemptsRemainingInDatabase","attemptsRemaining","decrementAttemptsRemainingInDatabase","bulkEnqueueToDatabase","items","delay","i","length","args","maxAttempts","created","startAfter","enqueueToDatabase","dequeueFromDatabase","operations","push","getCompletedOperationsCountFromDatabase","getCompletedOperationsFromDatabase","storeAuthDataInDatabase","getAuthDataFromDatabase","teamId","removeAuthDataFromDatabase"],"mappings":"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","sourcesContent":["// @flow\n\nimport { merge, unset } from 'lodash';\nimport makeLogger from './logger';\n\nconst logger = makeLogger('Operations Database');\n\ntype Operation = {\n  id: number,\n  queueId:string,\n  type:string,\n  args:Array<any>,\n  attemptsRemaining: number,\n  created: number,\n  status: number,\n  startAfter: number\n}\n\nexport const OPERATION_ABORTED_STATUS = 2;\nexport const OPERATION_COMPLETE_STATUS = 1;\nexport const OPERATION_PENDING_STATUS = 0;\nexport const OPERATION_ERROR_STATUS = -1;\nexport const OPERATION_CLEANUP_STATUS = -2;\n\nexport const databasePromise = (async () => {\n  const request = self.indexedDB.open('operations-009', 1);\n\n  request.onupgradeneeded = function (e) {\n    try {\n      const store = e.target.result.createObjectStore('operations', { keyPath: 'id', autoIncrement: true });\n      store.createIndex('statusIndex', 'status', { unique: false });\n      store.createIndex('queueIdIndex', 'queueId', { unique: false });\n      store.createIndex('queueIdTypeIndex', ['queueId', 'type'], { unique: false });\n      store.createIndex('statusQueueIdIndex', ['queueId', 'status'], { unique: false });\n      store.createIndex('statusCreatedIndex', ['status', 'created'], { unique: false });\n    } catch (error) {\n      if (!(error.name === 'ConstraintError')) {\n        throw error;\n      }\n    }\n    try {\n      e.target.result.createObjectStore('queue-data', { keyPath: 'queueId' });\n    } catch (error) {\n      if (!(error.name === 'ConstraintError')) {\n        throw error;\n      }\n    }\n    try {\n      const store = e.target.result.createObjectStore('cleanups', { keyPath: 'id' });\n      store.createIndex('queueIdIndex', 'queueId', { unique: false });\n    } catch (error) {\n      if (!(error.name === 'ConstraintError')) {\n        throw error;\n      }\n    }\n    try {\n      e.target.result.createObjectStore('auth', { keyPath: 'teamId' });\n    } catch (error) {\n      if (!(error.name === 'ConstraintError')) {\n        throw error;\n      }\n    }\n  };\n\n  const db = await new Promise((resolve, reject) => {\n    request.onerror = () => {\n      reject(new Error('Unable to open database'));\n    };\n    request.onsuccess = function (event) {\n      resolve(event.target.result);\n    };\n  });\n\n  return db;\n})();\n\nasync function getReadWriteAuthObjectStore() {\n  const database = await databasePromise;\n  const transaction = database.transaction(['auth'], 'readwrite');\n  const objectStore = transaction.objectStore('auth');\n  transaction.onabort = (event) => {\n    logger.error('Read-write auth transaction was aborted');\n    logger.errorObject(event);\n  };\n  transaction.onerror = (event) => {\n    logger.error('Error in read-write auth transaction');\n    logger.errorObject(event);\n  };\n  return objectStore;\n}\n\nasync function getReadOnlyAuthObjectStore() {\n  const database = await databasePromise;\n  const transaction = database.transaction(['auth'], 'readonly');\n  const objectStore = transaction.objectStore('auth');\n  transaction.onabort = (event) => {\n    logger.error('Read-only auth transaction was aborted');\n    logger.errorObject(event);\n  };\n  transaction.onerror = (event) => {\n    logger.error('Error in read-only auth transaction');\n    logger.errorObject(event);\n  };\n  return objectStore;\n}\n\nasync function getReadWriteQueueDataObjectStore() {\n  const database = await databasePromise;\n  const transaction = database.transaction(['queue-data'], 'readwrite');\n  const objectStore = transaction.objectStore('queue-data');\n  transaction.onabort = (event) => {\n    logger.error('Read-write queue data transaction was aborted');\n    logger.errorObject(event);\n  };\n  transaction.onerror = (event) => {\n    logger.error('Error in read-write queue data transaction');\n    logger.errorObject(event);\n  };\n  return objectStore;\n}\n\nasync function getReadOnlyQueueDataObjectStore() {\n  const database = await databasePromise;\n  const transaction = database.transaction(['queue-data'], 'readonly');\n  const objectStore = transaction.objectStore('queue-data');\n  transaction.onabort = (event) => {\n    logger.error('Read-only queue data transaction was aborted');\n    logger.errorObject(event);\n  };\n  transaction.onerror = (event) => {\n    logger.error('Error in read-only queue data transaction');\n    logger.errorObject(event);\n  };\n  return objectStore;\n}\n\nasync function getReadWriteOperationsObjectStore() {\n  const database = await databasePromise;\n  const transaction = database.transaction(['operations'], 'readwrite');\n  const objectStore = transaction.objectStore('operations');\n  transaction.onabort = (event) => {\n    logger.error('Read-write operations transaction was aborted');\n    logger.errorObject(event);\n  };\n  transaction.onerror = (event) => {\n    logger.error('Error in read-write operations transaction');\n    logger.errorObject(event);\n  };\n  return objectStore;\n}\n\nasync function getReadOnlyOperationsObjectStore() {\n  const database = await databasePromise;\n  const transaction = database.transaction(['operations'], 'readonly');\n  const objectStore = transaction.objectStore('operations');\n  transaction.onabort = (event) => {\n    logger.error('Read-only operations transaction was aborted');\n    logger.errorObject(event);\n  };\n  transaction.onerror = (event) => {\n    logger.error('Error in read-only operations transaction');\n    logger.errorObject(event);\n  };\n  return objectStore;\n}\n\nasync function getReadWriteCleanupsObjectStore() {\n  const database = await databasePromise;\n  const transaction = database.transaction(['cleanups'], 'readwrite');\n  const objectStore = transaction.objectStore('cleanups');\n  transaction.onabort = (event) => {\n    logger.error('Read-write cleanups transaction was aborted');\n    logger.errorObject(event);\n  };\n  transaction.onerror = (event) => {\n    logger.error('Error in read-write cleanups transaction');\n    logger.errorObject(event);\n  };\n  return objectStore;\n}\n\nasync function getReadOnlyCleanupsObjectStore() {\n  const database = await databasePromise;\n  const transaction = database.transaction(['cleanups'], 'readonly');\n  const objectStore = transaction.objectStore('cleanups');\n  transaction.onabort = (event) => {\n    logger.error('Read-only cleanups transaction was aborted');\n    logger.errorObject(event);\n  };\n  transaction.onerror = (event) => {\n    logger.error('Error in read-only cleanups transaction');\n    logger.errorObject(event);\n  };\n  return objectStore;\n}\n\nasync function clearQueueDataDatabase() {\n  const store = await getReadWriteQueueDataObjectStore();\n  const request = store.clear();\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve();\n    };\n    request.onerror = function (event) {\n      logger.error('Error while clearing queue data database');\n      logger.errorObject(event);\n      reject(new Error('Error while clearing queue data database'));\n    };\n  });\n}\n\nasync function clearOperationsDatabase() {\n  const store = await getReadWriteOperationsObjectStore();\n  const request = store.clear();\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve();\n    };\n    request.onerror = function (event) {\n      logger.error('Error while clearing operations database');\n      logger.errorObject(event);\n      reject(new Error('Error while clearing operations database'));\n    };\n  });\n}\n\nasync function clearCleanupsDatabase() {\n  const store = await getReadWriteCleanupsObjectStore();\n  const request = store.clear();\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve();\n    };\n    request.onerror = function (event) {\n      logger.error('Error while clearing cleanups database');\n      logger.errorObject(event);\n      reject(new Error('Error while clearing cleanups database'));\n    };\n  });\n}\n\nexport async function clearDatabase() {\n  await clearOperationsDatabase();\n  await clearCleanupsDatabase();\n  await clearQueueDataDatabase();\n}\n\nexport async function removeOperationsWithQueueIdAndTypeFromDatabase(queueId:string, type:string) {\n  const store = await getReadWriteOperationsObjectStore();\n  const index = store.index('queueIdTypeIndex');\n  // $FlowFixMe\n  const request = index.openCursor(IDBKeyRange.only([queueId, type]));\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function (event) {\n      const cursor = event.target.result;\n      if (cursor) {\n        store.delete(cursor.primaryKey);\n        cursor.continue();\n      } else {\n        resolve();\n      }\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while removing operations with queue ${queueId} and type ${type} from operations database`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while removing operations with queue ${queueId} and type ${type} from operations database`));\n    };\n  });\n}\n\nasync function removeQueueIdFromOperationsDatabase(queueId:string) {\n  const store = await getReadWriteOperationsObjectStore();\n  const index = store.index('queueIdIndex');\n  // $FlowFixMe\n  const request = index.openCursor(IDBKeyRange.only(queueId));\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function (event) {\n      const cursor = event.target.result;\n      if (cursor) {\n        store.delete(cursor.primaryKey);\n        cursor.continue();\n      } else {\n        resolve();\n      }\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while removing queue ${queueId} from operations database`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while removing queue ${queueId} from operations database`));\n    };\n  });\n}\n\nasync function removeQueueIdFromCleanupsDatabase(queueId:string) {\n  const store = await getReadWriteCleanupsObjectStore();\n  const index = store.index('queueIdIndex');\n  // $FlowFixMe\n  const request = index.openCursor(IDBKeyRange.only(queueId));\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function (event) {\n      const cursor = event.target.result;\n      if (cursor) {\n        store.delete(cursor.primaryKey);\n        cursor.continue();\n      } else {\n        resolve();\n      }\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while removing queue ${queueId} from operations database`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while removing queue ${queueId} from operations database`));\n    };\n  });\n}\n\nexport async function removeQueueIdFromDatabase(queueId:string) {\n  await removeQueueIdFromOperationsDatabase(queueId);\n  await removeQueueIdFromCleanupsDatabase(queueId);\n}\n\nexport async function removeCompletedExpiredItemsFromDatabase(maxAge:number) {\n  const store = await getReadWriteOperationsObjectStore();\n  const index = store.index('statusCreatedIndex');\n  // $FlowFixMe\n  const request = index.openCursor(IDBKeyRange.bound([OPERATION_COMPLETE_STATUS, 0], [OPERATION_COMPLETE_STATUS, Date.now() - maxAge]));\n  const queueIds = new Set();\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function (event) {\n      const cursor = event.target.result;\n      if (cursor) {\n        queueIds.add(cursor.value.queueId);\n        store.delete(cursor.primaryKey);\n        cursor.continue();\n      } else {\n        resolve();\n      }\n    };\n    request.onerror = function (event) {\n      logger.error('Request error while removing completed exired items from operations database');\n      logger.errorObject(event);\n      reject(new Error('Request error while removing completed exired items from operations database'));\n    };\n  });\n  for (const queueId of queueIds) {\n    await removeQueueIdFromDatabase(queueId);\n  }\n}\n\nexport async function getOperationFromDatabase(id:number):Promise<Operation | void> {\n  const store = await getReadOnlyOperationsObjectStore();\n  const request = store.get(id);\n  return new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve(request.result);\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while getting ${id}`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while getting ${id}`));\n    };\n  });\n}\n\nexport async function removePathFromCleanupDataInDatabase(id:number, queueId:string, path:Array<string>) {\n  const value = await getCleanupFromDatabase(id);\n  const store = await getReadWriteCleanupsObjectStore();\n  const request = store.put({\n    id,\n    queueId,\n    data: unset(value || {}, path),\n  });\n  return new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve();\n    };\n    request.onerror = function (event) {\n      logger.error(`Error while removing path ${Array.isArray(path) ? path.join('.') : path} from cleanup data for ${id} in queue ${queueId}`);\n      logger.errorObject(event);\n      reject(new Error(`Error while removing path ${Array.isArray(path) ? path.join('.') : path} from cleanup data for ${id} in queue ${queueId}`));\n    };\n  });\n}\n\nexport async function updateCleanupInDatabase(id:number, queueId:string, data:Object) {\n  const value = await getCleanupFromDatabase(id);\n  const store = await getReadWriteCleanupsObjectStore();\n  const request = store.put({\n    id,\n    queueId,\n    data: merge({}, value, data),\n  });\n  return new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve();\n    };\n    request.onerror = function (event) {\n      logger.error(`Error while updating cleanup data for ${id}`);\n      logger.errorObject(event);\n      reject(new Error(`Error while updating cleanup data for ${id}`));\n    };\n  });\n}\n\nexport async function removeCleanupFromDatabase(id:number) {\n  const store = await getReadWriteCleanupsObjectStore();\n  const request = store.delete(id);\n  return new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve();\n    };\n    request.onerror = function (event) {\n      logger.error(`Error while removing cleanup data for ${id}`);\n      logger.errorObject(event);\n      reject(new Error(`Error while removing cleanup data for ${id}`));\n    };\n  });\n}\n\nexport async function getCleanupFromDatabase(id:number) {\n  const store = await getReadOnlyCleanupsObjectStore();\n  const request = store.get(id);\n  const cleanupData = await new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve(request.result);\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while getting ${id}`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while getting ${id}`));\n    };\n  });\n  return typeof cleanupData !== 'undefined' ? cleanupData.data : undefined;\n}\n\nexport async function getQueueDataFromDatabase(queueId:string) {\n  const store = await getReadOnlyQueueDataObjectStore();\n  const request = store.get(queueId);\n  const queueData = await new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve(request.result);\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while getting queue ${queueId} data`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while getting queue ${queueId} data`));\n    };\n  });\n  return typeof queueData !== 'undefined' ? queueData.data : undefined;\n}\n\nexport async function updateQueueDataInDatabase(queueId:string, data:Object) {\n  const value = await getQueueDataFromDatabase(queueId);\n  const store = await getReadWriteQueueDataObjectStore();\n  const request = store.put({\n    queueId,\n    data: merge({}, value, data),\n  });\n  return new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve();\n    };\n    request.onerror = function (event) {\n      logger.error(`Error while updating queue ${queueId} data`);\n      logger.errorObject(event);\n      reject(new Error(`Error while updating queue ${queueId} data`));\n    };\n  });\n}\n\nexport async function markOperationStatusInDatabase(id:number, status:number) {\n  const value = await getOperationFromDatabase(id);\n  if (typeof value === 'undefined') {\n    throw new Error(`Unable to mark ${id} as statys ${status} in database, operation does not exist`);\n  }\n  value.status = status;\n  const store = await getReadWriteOperationsObjectStore();\n  const request = store.put(value);\n  return new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve();\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while marking ${id} complete`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while marking ${id} complete`));\n    };\n  });\n}\n\nexport function markOperationCompleteInDatabase(id:number) {\n  return markOperationStatusInDatabase(id, OPERATION_COMPLETE_STATUS);\n}\n\nexport function markOperationPendingInDatabase(id:number) {\n  return markOperationStatusInDatabase(id, OPERATION_PENDING_STATUS);\n}\n\nexport function markOperationErrorInDatabase(id:number) {\n  return markOperationStatusInDatabase(id, OPERATION_ERROR_STATUS);\n}\n\nexport function markOperationCleanupInDatabase(id:number) {\n  return markOperationStatusInDatabase(id, OPERATION_CLEANUP_STATUS);\n}\n\nexport function markOperationAbortedInDatabase(id:number) {\n  return markOperationStatusInDatabase(id, OPERATION_ABORTED_STATUS);\n}\n\nexport async function markQueueForCleanupInDatabase(queueId:string) {\n  const store = await getReadWriteOperationsObjectStore();\n  const index = store.index('queueIdIndex');\n  // $FlowFixMe\n  const request = index.openCursor(IDBKeyRange.only(queueId));\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function (event) {\n      const cursor = event.target.result;\n      if (cursor) {\n        const value = Object.assign({}, cursor.value);\n        switch (value.status) {\n          case OPERATION_ERROR_STATUS:\n            value.status = OPERATION_CLEANUP_STATUS;\n            break;\n          case OPERATION_COMPLETE_STATUS:\n            value.status = OPERATION_CLEANUP_STATUS;\n            break;\n          case OPERATION_PENDING_STATUS:\n            value.status = OPERATION_ABORTED_STATUS;\n            break;\n          case OPERATION_CLEANUP_STATUS:\n            cursor.continue();\n            return;\n          case OPERATION_ABORTED_STATUS:\n            cursor.continue();\n            return;\n          default:\n            logger.warn(`Unhandled operation status ${value.status}`);\n            cursor.continue();\n            return;\n        }\n        const updateRequest = cursor.update(value);\n        updateRequest.onsuccess = function () {\n          cursor.continue();\n        };\n        updateRequest.onerror = function (event2) {\n          logger.error(`Update request error while marking queue ${queueId} error`);\n          logger.errorObject(event2);\n          cursor.continue();\n        };\n      } else {\n        resolve();\n      }\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while marking queue ${queueId} error`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while marking queue ${queueId} error`));\n    };\n  });\n}\n\nexport async function incrementAttemptsRemainingInDatabase(id:number) {\n  const value = await getOperationFromDatabase(id);\n  if (typeof value === 'undefined') {\n    throw new Error(`Unable to increment attempts remaining for operation ${id} in database, operation does not exist`);\n  }\n  const attemptsRemaining = value.attemptsRemaining + 1;\n  value.attemptsRemaining = attemptsRemaining;\n  const store = await getReadWriteOperationsObjectStore();\n  const request = store.put(value);\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve();\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while increment attempts remaining for ${id}`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while increment attempts remaining for ${id}`));\n    };\n  });\n  return attemptsRemaining;\n}\n\nexport async function decrementAttemptsRemainingInDatabase(id:number) {\n  const value = await getOperationFromDatabase(id);\n  if (typeof value === 'undefined') {\n    throw new Error(`Unable to decrement attempts remaining for operation ${id} in database, operation does not exist`);\n  }\n  const attemptsRemaining = value.attemptsRemaining - 1;\n  value.attemptsRemaining = attemptsRemaining;\n  const store = await getReadWriteOperationsObjectStore();\n  const request = store.put(value);\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve();\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while decrementing attempts remaining for ${id}`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while decrementing attempts remaining for ${id}`));\n    };\n  });\n  return attemptsRemaining;\n}\n\nexport async function bulkEnqueueToDatabase(queueId: string, items:Array<[string, Array<any>, number]>, delay: number) { // eslint-disable-line no-underscore-dangle\n  const store = await getReadWriteOperationsObjectStore();\n  await new Promise((resolve, reject) => {\n    for (let i = 0; i < items.length; i += 1) {\n      const [type, args, maxAttempts] = items[i];\n      const value = {\n        queueId,\n        type,\n        args,\n        attemptsRemaining: maxAttempts,\n        created: Date.now(),\n        status: OPERATION_PENDING_STATUS,\n        startAfter: Date.now() + delay,\n      };\n      const request = store.put(value);\n      if (i === items.length - 1) {\n        request.onsuccess = function () {\n          resolve(request.result);\n        };\n        request.onerror = function (event) {\n          logger.error(`Request error while bulk enqueueing ${items.length} ${items.length === 1 ? 'operation' : 'operations'} in queue ${queueId}`);\n          logger.errorObject(event);\n          reject(new Error(`Request error while bulk enqueueing ${items.length} ${items.length === 1 ? 'operation' : 'operations'} in queue ${queueId}`));\n        };\n      }\n    }\n  });\n}\n\nexport async function enqueueToDatabase(queueId: string, type: string, args: Array<any>, maxAttempts: number, delay: number) { // eslint-disable-line no-underscore-dangle\n  const value = {\n    queueId,\n    type,\n    args,\n    attemptsRemaining: maxAttempts,\n    created: Date.now(),\n    status: OPERATION_PENDING_STATUS,\n    startAfter: Date.now() + delay,\n  };\n  const store = await getReadWriteOperationsObjectStore();\n  const request = store.put(value);\n  const id = await new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve(request.result);\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while enqueueing ${type} operation`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while enqueueing ${type} operation`));\n    };\n  });\n  return id;\n}\n\nexport async function dequeueFromDatabase():Promise<Array<Operation>> { // eslint-disable-line no-underscore-dangle\n  const store = await getReadOnlyOperationsObjectStore();\n  const index = store.index('statusIndex');\n  // $FlowFixMe\n  const request = index.openCursor(IDBKeyRange.bound(OPERATION_CLEANUP_STATUS, OPERATION_PENDING_STATUS));\n  const operations = [];\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function (event) {\n      const cursor = event.target.result;\n      if (cursor) {\n        operations.push(cursor.value);\n        cursor.continue();\n      } else {\n        resolve();\n      }\n    };\n    request.onerror = function (event) {\n      logger.error('Request error while dequeing');\n      logger.errorObject(event);\n      reject(new Error('Request error while dequeing'));\n    };\n  });\n  return operations;\n}\n\nexport async function getCompletedOperationsCountFromDatabase(queueId: string) { // eslint-disable-line no-underscore-dangle\n  const operations = await getCompletedOperationsFromDatabase(queueId);\n  return operations.length;\n}\n\nexport async function getCompletedOperationsFromDatabase(queueId: string):Promise<Array<Operation>> { // eslint-disable-line no-underscore-dangle\n  const store = await getReadOnlyOperationsObjectStore();\n  const index = store.index('statusQueueIdIndex');\n  // $FlowFixMe\n  const request = index.openCursor(IDBKeyRange.only([queueId, OPERATION_COMPLETE_STATUS]));\n  const operations = [];\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function (event) {\n      const cursor = event.target.result;\n      if (cursor) {\n        operations.push(cursor.value);\n        cursor.continue();\n      } else {\n        resolve();\n      }\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while getting completed operations for queue ${queueId}`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while getting completed operations for queue ${queueId}`));\n    };\n  });\n  return operations;\n}\n\nexport async function storeAuthDataInDatabase(value: Object) { // eslint-disable-line no-underscore-dangle\n  const store = await getReadWriteAuthObjectStore();\n  const request = store.put(value);\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve();\n    };\n    request.onerror = function (event) {\n      logger.error('Request error while storing auth data');\n      logger.errorObject(event);\n      reject(new Error('Request error while storing auth data'));\n    };\n  });\n}\n\nexport async function getAuthDataFromDatabase(teamId:string) {\n  const store = await getReadOnlyAuthObjectStore();\n  const request = store.get(teamId);\n  return new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve(request.result);\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while getting auth data for team ${teamId}`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while getting auth data for team ${teamId}`));\n    };\n  });\n}\n\nexport async function removeAuthDataFromDatabase(teamId:string) {\n  const store = await getReadWriteAuthObjectStore();\n  const request = store.delete(teamId);\n  return new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve();\n    };\n    request.onerror = function (event) {\n      logger.error(`Error while removing auth data for ${teamId}`);\n      logger.errorObject(event);\n      reject(new Error(`Error while removing auth data for ${teamId}`));\n    };\n  });\n}\n"],"file":"database.js"}