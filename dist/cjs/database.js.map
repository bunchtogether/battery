{"version":3,"sources":["../../src/database.js"],"names":["logger","JOB_ABORTED_STATUS","JOB_COMPLETE_STATUS","JOB_PENDING_STATUS","JOB_ERROR_STATUS","JOB_CLEANUP_STATUS","databasePromise","request","self","indexedDB","open","onupgradeneeded","e","store","target","result","createObjectStore","keyPath","autoIncrement","createIndex","unique","error","name","Promise","resolve","reject","onerror","Error","onsuccess","event","db","getReadWriteAuthObjectStore","console","log","database","transaction","objectStore","onabort","errorObject","getReadOnlyAuthObjectStore","getReadWriteQueueDataObjectStore","getReadOnlyQueueDataObjectStore","getReadWriteJobsObjectStore","getReadOnlyJobsObjectStore","getReadWriteCleanupsObjectStore","getReadOnlyCleanupsObjectStore","clearQueueDataDatabase","clear","clearJobsDatabase","clearCleanupsDatabase","clearDatabase","removeJobsWithQueueIdAndTypeFromDatabase","queueId","type","index","openCursor","IDBKeyRange","only","cursor","delete","primaryKey","continue","removeQueueIdFromJobsDatabase","removeQueueIdFromCleanupsDatabase","removeQueueIdFromDatabase","removeCompletedExpiredItemsFromDatabase","maxAge","bound","Date","now","queueIds","Set","add","value","updateJobInDatabase","id","transform","get","newValue","putRequest","put","getJobFromDatabase","updateCleanupInDatabase","removePathFromCleanupDataInDatabase","path","attempt","startAfter","data","Object","assign","updateCleanupValuesInDatabase","TypeError","combinedData","removeCleanupFromDatabase","getCleanupFromDatabase","getQueueDataFromDatabase","queueData","undefined","updateQueueDataInDatabase","markJobStatusInDatabase","status","markJobCompleteInDatabase","markJobPendingInDatabase","markJobErrorInDatabase","markJobCleanupInDatabase","markJobAbortedInDatabase","markJobStartAfterInDatabase","toLocaleString","markCleanupStartAfterInDatabase","markQueueForCleanupInDatabase","jobs","push","warn","updateRequest","update","event2","incrementJobAttemptInDatabase","incrementCleanupAttemptInDatabase","bulkEnqueueToDatabase","items","delay","Array","isArray","i","length","args","created","enqueueToDatabase","dequeueFromDatabase","getAll","getContiguousIds","ids","sort","a","b","points","Infinity","dequeueFromDatabaseNotIn","promise","oncomplete","getAllKeys","includes","getRequest","getCompletedJobsCountFromDatabase","getCompletedJobsFromDatabase","storeAuthDataInDatabase","getAuthDataFromDatabase","authData","removeAuthDataFromDatabase"],"mappings":"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","sourcesContent":["// @flow\n\nimport merge from 'lodash/merge';\nimport unset from 'lodash/unset';\nimport makeLogger from './logger';\n\nconst logger = makeLogger('Jobs Database');\n\nexport type Job = {\n  id: number,\n  queueId:string,\n  type:string,\n  args:Array<any>,\n  attempt: number,\n  created: number,\n  status: number,\n  startAfter: number\n};\n\n\ntype Cleanup = {\n  id: number,\n  queueId:string,\n  data: Object,\n  attempt: number,\n  startAfter: number\n};\n\n\nexport const JOB_ABORTED_STATUS = 2;\nexport const JOB_COMPLETE_STATUS = 1;\nexport const JOB_PENDING_STATUS = 0;\nexport const JOB_ERROR_STATUS = -1;\nexport const JOB_CLEANUP_STATUS = -2;\n\nexport const databasePromise = (async () => {\n  const request = self.indexedDB.open('battery-queue-01', 2);\n\n  request.onupgradeneeded = function (e) {\n    try {\n      const store = e.target.result.createObjectStore('jobs', { keyPath: 'id', autoIncrement: true });\n      store.createIndex('statusIndex', 'status', { unique: false });\n      store.createIndex('queueIdIndex', 'queueId', { unique: false });\n      store.createIndex('queueIdTypeIndex', ['queueId', 'type'], { unique: false });\n      store.createIndex('statusQueueIdIndex', ['queueId', 'status'], { unique: false });\n      store.createIndex('statusCreatedIndex', ['status', 'created'], { unique: false });\n    } catch (error) {\n      if (!(error.name === 'ConstraintError')) {\n        throw error;\n      }\n    }\n    try {\n      e.target.result.createObjectStore('queue-data', { keyPath: 'queueId' });\n    } catch (error) {\n      if (!(error.name === 'ConstraintError')) {\n        throw error;\n      }\n    }\n    try {\n      const store = e.target.result.createObjectStore('cleanups', { keyPath: 'id' });\n      store.createIndex('queueIdIndex', 'queueId', { unique: false });\n    } catch (error) {\n      if (!(error.name === 'ConstraintError')) {\n        throw error;\n      }\n    }\n    try {\n      e.target.result.createObjectStore('auth-data', { keyPath: 'id' });\n    } catch (error) {\n      if (!(error.name === 'ConstraintError')) {\n        throw error;\n      }\n    }\n  };\n\n  const db = await new Promise((resolve, reject) => {\n    request.onerror = () => {\n      reject(new Error('Unable to open database'));\n    };\n    request.onsuccess = function (event) {\n      resolve(event.target.result);\n    };\n  });\n\n  return db;\n})();\n\nasync function getReadWriteAuthObjectStore() {\n  console.log('getReadWriteAuthObjectStore');\n  const database = await databasePromise;\n  const transaction = database.transaction(['auth-data'], 'readwrite');\n  const objectStore = transaction.objectStore('auth-data');\n  transaction.onabort = (event) => {\n    logger.error('Read-write auth transaction was aborted');\n    logger.errorObject(event);\n  };\n  transaction.onerror = (event) => {\n    logger.error('Error in read-write auth transaction');\n    logger.errorObject(event);\n  };\n  return objectStore;\n}\n\nasync function getReadOnlyAuthObjectStore() {\n  console.log('getReadOnlyAuthObjectStore');\n  const database = await databasePromise;\n  const transaction = database.transaction(['auth-data'], 'readonly');\n  const objectStore = transaction.objectStore('auth-data');\n  transaction.onabort = (event) => {\n    logger.error('Read-only auth transaction was aborted');\n    logger.errorObject(event);\n  };\n  transaction.onerror = (event) => {\n    logger.error('Error in read-only auth transaction');\n    logger.errorObject(event);\n  };\n  return objectStore;\n}\n\nasync function getReadWriteQueueDataObjectStore() {\n  console.log('getReadWriteQueueDataObjectStore');\n  const database = await databasePromise;\n  const transaction = database.transaction(['queue-data'], 'readwrite');\n  const objectStore = transaction.objectStore('queue-data');\n  transaction.onabort = (event) => {\n    logger.error('Read-write queue data transaction was aborted');\n    logger.errorObject(event);\n  };\n  transaction.onerror = (event) => {\n    logger.error('Error in read-write queue data transaction');\n    logger.errorObject(event);\n  };\n  return objectStore;\n}\n\nasync function getReadOnlyQueueDataObjectStore() {\n  console.log('getReadOnlyQueueDataObjectStore');\n  const database = await databasePromise;\n  const transaction = database.transaction(['queue-data'], 'readonly');\n  const objectStore = transaction.objectStore('queue-data');\n  transaction.onabort = (event) => {\n    logger.error('Read-only queue data transaction was aborted');\n    logger.errorObject(event);\n  };\n  transaction.onerror = (event) => {\n    logger.error('Error in read-only queue data transaction');\n    logger.errorObject(event);\n  };\n  return objectStore;\n}\n\n\nasync function getReadWriteJobsObjectStore() {\n  console.log('getReadWriteJobsObjectStore');\n  const database = await databasePromise;\n  const transaction = database.transaction(['jobs'], 'readwrite');\n  const objectStore = transaction.objectStore('jobs');\n  transaction.onabort = (event) => {\n    logger.error('Read-write jobs transaction was aborted');\n    logger.errorObject(event);\n  };\n  transaction.onerror = (event) => {\n    logger.error('Error in read-write jobs transaction');\n    logger.errorObject(event);\n  };\n  return objectStore;\n}\n\nasync function getReadOnlyJobsObjectStore() {\n  console.log('getReadOnlyJobsObjectStore');\n  const database = await databasePromise;\n  const transaction = database.transaction(['jobs'], 'readonly');\n  const objectStore = transaction.objectStore('jobs');\n  transaction.onabort = (event) => {\n    logger.error('Read-only jobs transaction was aborted');\n    logger.errorObject(event);\n  };\n  transaction.onerror = (event) => {\n    logger.error('Error in read-only jobs transaction');\n    logger.errorObject(event);\n  };\n  return objectStore;\n}\n\nasync function getReadWriteCleanupsObjectStore() {\n  console.log('getReadWriteCleanupsObjectStore');\n  const database = await databasePromise;\n  const transaction = database.transaction(['cleanups'], 'readwrite');\n  const objectStore = transaction.objectStore('cleanups');\n  transaction.onabort = (event) => {\n    logger.error('Read-write cleanups transaction was aborted');\n    logger.errorObject(event);\n  };\n  transaction.onerror = (event) => {\n    logger.error('Error in read-write cleanups transaction');\n    logger.errorObject(event);\n  };\n  return objectStore;\n}\n\nasync function getReadOnlyCleanupsObjectStore() {\n  console.log('getReadOnlyCleanupsObjectStore');\n  const database = await databasePromise;\n  const transaction = database.transaction(['cleanups'], 'readonly');\n  const objectStore = transaction.objectStore('cleanups');\n  transaction.onabort = (event) => {\n    logger.error('Read-only cleanups transaction was aborted');\n    logger.errorObject(event);\n  };\n  transaction.onerror = (event) => {\n    logger.error('Error in read-only cleanups transaction');\n    logger.errorObject(event);\n  };\n  return objectStore;\n}\n\nasync function clearQueueDataDatabase() {\n  console.log('clearQueueDataDatabase');\n  const store = await getReadWriteQueueDataObjectStore();\n  const request = store.clear();\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve();\n    };\n    request.onerror = function (event) {\n      logger.error('Error while clearing queue data database');\n      logger.errorObject(event);\n      reject(new Error('Error while clearing queue data database'));\n    };\n  });\n}\n\nasync function clearJobsDatabase() {\n  console.log('clearJobsDatabase');\n  const store = await getReadWriteJobsObjectStore();\n  const request = store.clear();\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve();\n    };\n    request.onerror = function (event) {\n      logger.error('Error while clearing jobs database');\n      logger.errorObject(event);\n      reject(new Error('Error while clearing jobs database'));\n    };\n  });\n}\n\nasync function clearCleanupsDatabase() {\n  console.log('clearCleanupsDatabase');\n  const store = await getReadWriteCleanupsObjectStore();\n  const request = store.clear();\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve();\n    };\n    request.onerror = function (event) {\n      logger.error('Error while clearing cleanups database');\n      logger.errorObject(event);\n      reject(new Error('Error while clearing cleanups database'));\n    };\n  });\n}\n\nexport async function clearDatabase() {\n  console.log('clearDatabase');\n  await clearJobsDatabase();\n  await clearCleanupsDatabase();\n  await clearQueueDataDatabase();\n}\n\nexport async function removeJobsWithQueueIdAndTypeFromDatabase(queueId:string, type:string) {\n  console.log('removeJobsWithQueueIdAndTypeFromDatabase');\n  const store = await getReadWriteJobsObjectStore();\n  const index = store.index('queueIdTypeIndex');\n  // $FlowFixMe\n  const request = index.openCursor(IDBKeyRange.only([queueId, type]));\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function (event) {\n      const cursor = event.target.result;\n      if (cursor) {\n        store.delete(cursor.primaryKey);\n        cursor.continue();\n      } else {\n        resolve();\n      }\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while removing jobs with queue ${queueId} and type ${type} from jobs database`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while removing jobs with queue ${queueId} and type ${type} from jobs database`));\n    };\n  });\n}\n\nasync function removeQueueIdFromJobsDatabase(queueId:string) {\n  console.log('removeQueueIdFromJobsDatabase');\n  const store = await getReadWriteJobsObjectStore();\n  const index = store.index('queueIdIndex');\n  // $FlowFixMe\n  const request = index.openCursor(IDBKeyRange.only(queueId));\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function (event) {\n      const cursor = event.target.result;\n      if (cursor) {\n        store.delete(cursor.primaryKey);\n        cursor.continue();\n      } else {\n        resolve();\n      }\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while removing queue ${queueId} from jobs database`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while removing queue ${queueId} from jobs database`));\n    };\n  });\n}\n\nasync function removeQueueIdFromCleanupsDatabase(queueId:string) {\n  console.log('removeQueueIdFromCleanupsDatabase');\n  const store = await getReadWriteCleanupsObjectStore();\n  const index = store.index('queueIdIndex');\n  // $FlowFixMe\n  const request = index.openCursor(IDBKeyRange.only(queueId));\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function (event) {\n      const cursor = event.target.result;\n      if (cursor) {\n        store.delete(cursor.primaryKey);\n        cursor.continue();\n      } else {\n        resolve();\n      }\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while removing queue ${queueId} from jobs database`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while removing queue ${queueId} from jobs database`));\n    };\n  });\n}\n\nexport async function removeQueueIdFromDatabase(queueId:string) {\n  console.log('removeQueueIdFromDatabase');\n  await removeQueueIdFromJobsDatabase(queueId);\n  await removeQueueIdFromCleanupsDatabase(queueId);\n}\n\nexport async function removeCompletedExpiredItemsFromDatabase(maxAge:number) {\n  console.log('removeCompletedExpiredItemsFromDatabase');\n  const store = await getReadWriteJobsObjectStore();\n  const index = store.index('statusCreatedIndex');\n  // $FlowFixMe\n  const request = index.openCursor(IDBKeyRange.bound([JOB_COMPLETE_STATUS, 0], [JOB_COMPLETE_STATUS, Date.now() - maxAge]));\n  const queueIds = new Set();\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function (event) {\n      const cursor = event.target.result;\n      if (cursor) {\n        queueIds.add(cursor.value.queueId);\n        store.delete(cursor.primaryKey);\n        cursor.continue();\n      } else {\n        resolve();\n      }\n    };\n    request.onerror = function (event) {\n      logger.error('Request error while removing completed exired items from jobs database');\n      logger.errorObject(event);\n      reject(new Error('Request error while removing completed exired items from jobs database'));\n    };\n  });\n  for (const queueId of queueIds) {\n    await removeQueueIdFromDatabase(queueId);\n  }\n}\n\nexport async function updateJobInDatabase(id:number, transform:(Job | void) => Object):Promise<Job | void> {\n  const store = await getReadWriteJobsObjectStore();\n  const request = store.get(id);\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      const newValue = transform(request.result);\n      if (typeof newValue === 'undefined') {\n        resolve();\n      } else {\n        const putRequest = store.put(newValue);\n        putRequest.onsuccess = function () {\n          resolve();\n        };\n        putRequest.onerror = function (event) {\n          logger.error(`Put request error while updating ${id}`);\n          logger.errorObject(event);\n          reject(new Error(`Put request error while updating ${id}`));\n        };\n      }\n    };\n    request.onerror = function (event) {\n      logger.error(`Get request error while updating ${id}`);\n      logger.errorObject(event);\n      reject(new Error(`Get request error while updating ${id}`));\n    };\n  });\n}\n\nexport async function getJobFromDatabase(id:number):Promise<Job | void> {\n  console.log('getJobFromDatabase');\n  const store = await getReadOnlyJobsObjectStore();\n  const request = store.get(id);\n  return new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve(request.result);\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while getting ${id}`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while getting ${id}`));\n    };\n  });\n}\n\nexport async function updateCleanupInDatabase(id:number, transform:(Cleanup | void) => Object):Promise<Cleanup | void> {\n  const store = await getReadWriteCleanupsObjectStore();\n  const request = store.get(id);\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      const newValue = transform(request.result);\n      if (typeof newValue === 'undefined') {\n        resolve();\n      } else {\n        const putRequest = store.put(newValue);\n        putRequest.onsuccess = function () {\n          resolve();\n        };\n        putRequest.onerror = function (event) {\n          logger.error(`Put request error while updating ${id} cleanup`);\n          logger.errorObject(event);\n          reject(new Error(`Put request error while updating ${id} cleanup`));\n        };\n      }\n    };\n    request.onerror = function (event) {\n      logger.error(`Get request error while updating ${id} cleanup`);\n      logger.errorObject(event);\n      reject(new Error(`Get request error while updating ${id} cleanup`));\n    };\n  });\n}\n\nexport async function removePathFromCleanupDataInDatabase(id:number, path:Array<string>) {\n  console.log('removePathFromCleanupDataInDatabase');\n  await updateCleanupInDatabase(id, (value: Cleanup | void) => {\n    if (typeof value === 'undefined') {\n      return;\n    }\n    const { queueId, attempt, startAfter } = value;\n    const data = Object.assign({}, value.data);\n    unset(data, path);\n    return { // eslint-disable-line consistent-return\n      id,\n      queueId,\n      attempt,\n      startAfter,\n      data,\n    };\n  });\n}\n\n\nexport async function updateCleanupValuesInDatabase(id:number, queueId:string, data:Object) {\n  console.log('updateCleanupValuesInDatabase');\n  if (typeof id !== 'number') {\n    throw new TypeError(`Unable to update cleanup in database, received invalid \"id\" argument type \"${typeof id}\"`);\n  }\n  if (typeof queueId !== 'string') {\n    throw new TypeError(`Unable to update cleanup in database, received invalid \"queueId\" argument type \"${typeof queueId}\"`);\n  }\n  if (typeof data !== 'object') {\n    throw new TypeError(`Unable to update cleanup in database, received invalid \"data\" argument type \"${typeof data}\"`);\n  }\n  await updateCleanupInDatabase(id, (value: Cleanup | void) => {\n    const combinedData = typeof value === 'undefined' ? data : merge({}, value.data, data);\n    return {\n      id,\n      queueId,\n      attempt: 0,\n      startAfter: Date.now(),\n      data: combinedData,\n    };\n  });\n}\n\nexport async function removeCleanupFromDatabase(id:number) {\n  console.log('removeCleanupFromDatabase');\n  const store = await getReadWriteCleanupsObjectStore();\n  const request = store.delete(id);\n  return new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve();\n    };\n    request.onerror = function (event) {\n      logger.error(`Error while removing cleanup data for ${id}`);\n      logger.errorObject(event);\n      reject(new Error(`Error while removing cleanup data for ${id}`));\n    };\n  });\n}\n\nexport async function getCleanupFromDatabase(id:number):Promise<Cleanup | void> {\n  console.log('getCleanupFromDatabase');\n  const store = await getReadOnlyCleanupsObjectStore();\n  const request = store.get(id);\n  return new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve(request.result);\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while getting ${id}`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while getting ${id}`));\n    };\n  });\n}\n\nexport async function getQueueDataFromDatabase(queueId:string) {\n  console.log('getQueueDataFromDatabase');\n  const store = await getReadOnlyQueueDataObjectStore();\n  const request = store.get(queueId);\n  const queueData = await new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve(request.result);\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while getting queue ${queueId} data`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while getting queue ${queueId} data`));\n    };\n  });\n  return typeof queueData !== 'undefined' ? queueData.data : undefined;\n}\n\nexport async function updateQueueDataInDatabase(queueId:string, data:Object) {\n  console.log('updateQueueDataInDatabase');\n  const value = await getQueueDataFromDatabase(queueId);\n  const store = await getReadWriteQueueDataObjectStore();\n  const request = store.put({\n    queueId,\n    data: merge({}, value, data),\n  });\n  return new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve();\n    };\n    request.onerror = function (event) {\n      logger.error(`Error while updating queue ${queueId} data`);\n      logger.errorObject(event);\n      reject(new Error(`Error while updating queue ${queueId} data`));\n    };\n  });\n}\n\nexport async function markJobStatusInDatabase(id:number, status:number) {\n  return updateJobInDatabase(id, (value:Job | void) => {\n    if (typeof value === 'undefined') {\n      throw new Error(`Unable to mark job ${id} as status ${status} in database, job does not exist`);\n    }\n    value.status = status; // eslint-disable-line no-param-reassign\n    return value;\n  });\n}\n\nexport function markJobCompleteInDatabase(id:number) {\n  console.log('markJobCompleteInDatabase', id);\n  return markJobStatusInDatabase(id, JOB_COMPLETE_STATUS);\n}\n\nexport function markJobPendingInDatabase(id:number) {\n  console.log('markJobPendingInDatabase', id);\n  return markJobStatusInDatabase(id, JOB_PENDING_STATUS);\n}\n\nexport function markJobErrorInDatabase(id:number) {\n  console.log('markJobErrorInDatabase', id);\n  return markJobStatusInDatabase(id, JOB_ERROR_STATUS);\n}\n\nexport function markJobCleanupInDatabase(id:number) {\n  console.log('markJobCleanupInDatabase', id);\n  return markJobStatusInDatabase(id, JOB_CLEANUP_STATUS);\n}\n\nexport function markJobAbortedInDatabase(id:number) {\n  console.log('markJobAbortedInDatabase', id);\n  return markJobStatusInDatabase(id, JOB_ABORTED_STATUS);\n}\n\nexport async function markJobStartAfterInDatabase(id:number, startAfter:number) {\n  console.log('markJobStartAfterInDatabase', id);\n  return updateJobInDatabase(id, (value:Job | void) => {\n    if (typeof value === 'undefined') {\n      throw new Error(`Unable to mark job ${id} start-after time to ${new Date(startAfter).toLocaleString()} in database, job does not exist`);\n    }\n    if (startAfter < value.startAfter) {\n      return;\n    }\n    value.startAfter = startAfter; // eslint-disable-line no-param-reassign\n    return value; // eslint-disable-line consistent-return\n  });\n}\n\nexport async function markCleanupStartAfterInDatabase(id:number, startAfter:number) {\n  console.log('markCleanupStartAfterInDatabase');\n  await updateCleanupInDatabase(id, (value: Cleanup | void) => {\n    if (typeof value === 'undefined') {\n      throw new Error(`Unable to mark cleanup ${id} start-after time to ${new Date(startAfter).toLocaleString()} in database, cleanup does not exist`);\n    }\n    if (startAfter < value.startAfter) {\n      return;\n    }\n    value.startAfter = startAfter; // eslint-disable-line  no-param-reassign\n    return value; // eslint-disable-line consistent-return\n  });\n}\n\nexport async function markQueueForCleanupInDatabase(queueId:string) {\n  console.log('markQueueForCleanupInDatabase');\n  const store = await getReadWriteJobsObjectStore();\n  const index = store.index('queueIdIndex');\n  // $FlowFixMe\n  const request = index.openCursor(IDBKeyRange.only(queueId));\n  const jobs = [];\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function (event) {\n      const cursor = event.target.result;\n      if (cursor) {\n        const value = Object.assign({}, cursor.value);\n        switch (value.status) {\n          case JOB_ERROR_STATUS:\n            value.status = JOB_CLEANUP_STATUS;\n            jobs.push(value);\n            break;\n          case JOB_COMPLETE_STATUS:\n            value.status = JOB_CLEANUP_STATUS;\n            jobs.push(value);\n            break;\n          case JOB_PENDING_STATUS:\n            value.status = JOB_ABORTED_STATUS;\n            break;\n          case JOB_CLEANUP_STATUS:\n            cursor.continue();\n            return;\n          case JOB_ABORTED_STATUS:\n            cursor.continue();\n            return;\n          default:\n            logger.warn(`Unhandled job status ${value.status}`);\n            cursor.continue();\n            return;\n        }\n        const updateRequest = cursor.update(value);\n        updateRequest.onsuccess = function () {\n          cursor.continue();\n        };\n        updateRequest.onerror = function (event2) {\n          logger.error(`Update request error while marking queue ${queueId} error`);\n          logger.errorObject(event2);\n          cursor.continue();\n        };\n      } else {\n        resolve();\n      }\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while marking queue ${queueId} error`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while marking queue ${queueId} error`));\n    };\n  });\n  return jobs;\n}\n\nexport async function incrementJobAttemptInDatabase(id:number) {\n  console.log('incrementJobAttemptInDatabase');\n  await updateJobInDatabase(id, (value:Job | void) => {\n    if (typeof value === 'undefined') {\n      throw new Error(`Unable to increment attempts for job ${id} in database, job does not exist`);\n    }\n    value.attempt += 1; // eslint-disable-line no-param-reassign\n    return value;\n  });\n}\n\nexport async function incrementCleanupAttemptInDatabase(id:number, queueId:string) {\n  console.log('incrementCleanupAttemptInDatabase');\n  let attempt = 1;\n  await updateCleanupInDatabase(id, (value: Cleanup | void) => {\n    if (typeof value === 'undefined') {\n      return {\n        id,\n        queueId,\n        attempt: 1,\n        startAfter: Date.now(),\n        data: {},\n      };\n    }\n    attempt = value.attempt + 1;\n    value.attempt = attempt; // eslint-disable-line no-param-reassign\n    return value;\n  });\n  return attempt;\n}\n\nexport async function bulkEnqueueToDatabase(queueId: string, items:Array<[string, Array<any>]>, delay: number) { // eslint-disable-line no-underscore-dangle\n  console.log('bulkEnqueueToDatabase');\n  if (typeof queueId !== 'string') {\n    throw new TypeError(`Unable to bulk enqueue in database, received invalid \"queueId\" argument type \"${typeof queueId}\"`);\n  }\n  if (!Array.isArray(items)) {\n    throw new TypeError(`Unable to bulk enqueue in database, received invalid \"items\" argument type \"${typeof items}\"`);\n  }\n  for (let i = 0; i < items.length; i += 1) {\n    const [type, args] = items[i];\n    if (typeof type !== 'string') {\n      throw new TypeError(`Unable to bulk enqueue in database, received invalid items[${i}] \"type\" argument type \"${typeof type}\"`);\n    }\n    if (!Array.isArray(args)) {\n      throw new TypeError(`Unable to bulk enqueue in database, received invalid items[${i}] \"args\" argument type \"${typeof args}\"`);\n    }\n  }\n  if (typeof delay !== 'number') {\n    throw new TypeError(`Unable to bulk enqueue in database, received invalid \"delay\" argument type \"${typeof delay}\"`);\n  }\n  const store = await getReadWriteJobsObjectStore();\n  await new Promise((resolve, reject) => {\n    for (let i = 0; i < items.length; i += 1) {\n      const [type, args] = items[i];\n      const value = {\n        queueId,\n        type,\n        args,\n        attempt: 0,\n        created: Date.now(),\n        status: JOB_PENDING_STATUS,\n        startAfter: Date.now() + delay,\n      };\n      const request = store.put(value);\n      if (i === items.length - 1) {\n        request.onsuccess = function () {\n          resolve(request.result);\n        };\n        request.onerror = function (event) {\n          logger.error(`Request error while bulk enqueueing ${items.length} ${items.length === 1 ? 'job' : 'jobs'} in queue ${queueId}`);\n          logger.errorObject(event);\n          reject(new Error(`Request error while bulk enqueueing ${items.length} ${items.length === 1 ? 'job' : 'jobs'} in queue ${queueId}`));\n        };\n      }\n    }\n  });\n}\n\nexport async function enqueueToDatabase(queueId: string, type: string, args: Array<any>, delay: number) { // eslint-disable-line no-underscore-dangle\n  console.log('enqueueToDatabase');\n  if (typeof queueId !== 'string') {\n    throw new TypeError(`Unable to enqueue in database, received invalid \"queueId\" argument type \"${typeof queueId}\"`);\n  }\n  if (typeof type !== 'string') {\n    throw new TypeError(`Unable to enqueue in database, received invalid \"type\" argument type \"${typeof type}\"`);\n  }\n  if (!Array.isArray(args)) {\n    throw new TypeError(`Unable to enqueue in database, received invalid \"args\" argument type \"${typeof args}\"`);\n  }\n  if (typeof delay !== 'number') {\n    throw new TypeError(`Unable to enqueue in database, received invalid \"delay\" argument type \"${typeof delay}\"`);\n  }\n  const value = {\n    queueId,\n    type,\n    args,\n    attempt: 0,\n    created: Date.now(),\n    status: JOB_PENDING_STATUS,\n    startAfter: Date.now() + delay,\n  };\n  const store = await getReadWriteJobsObjectStore();\n  const request = store.put(value);\n  const id = await new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve(request.result);\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while enqueueing ${type} job`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while enqueueing ${type} job`));\n    };\n  });\n  return id;\n}\n\nexport async function dequeueFromDatabase():Promise<Array<Job>> { // eslint-disable-line no-underscore-dangle\n  console.log('dequeueFromDatabase');\n  const store = await getReadOnlyJobsObjectStore();\n  const index = store.index('statusIndex');\n  // $FlowFixMe\n  const request = index.getAll(IDBKeyRange.bound(JOB_CLEANUP_STATUS, JOB_PENDING_STATUS));\n  const jobs = await new Promise((resolve, reject) => {\n    request.onsuccess = function (event) {\n      resolve(event.target.result);\n    };\n    request.onerror = function (event) {\n      logger.error('Request error while dequeing');\n      logger.errorObject(event);\n      reject(new Error('Request error while dequeing'));\n    };\n  });\n  return jobs;\n}\n\nexport function getContiguousIds(ids:Array<number>) {\n  console.log('getContiguousIds');\n  ids.sort((a, b) => a - b);\n  const points = [[0, ids[0] - 1]];\n  for (let i = 0; i < ids.length; i += 1) {\n    if (ids[i] + 1 !== ids[i + 1]) {\n      if (i + 1 >= ids.length) {\n        points.push([ids[i] + 1, Infinity]);\n      } else {\n        points.push([ids[i] + 1, ids[i + 1] - 1]);\n      }\n    }\n  }\n  return points;\n}\n\nexport async function dequeueFromDatabaseNotIn(ids:Array<number>):Promise<Array<Job>> { // eslint-disable-line no-underscore-dangle\n  console.log('dequeueFromDatabaseNotIn');\n  if (ids.length === 0) {\n    return dequeueFromDatabase();\n  }\n  const database = await databasePromise;\n  const transaction = database.transaction(['jobs'], 'readonly');\n  const store = transaction.objectStore('jobs');\n  const index = store.index('statusIndex');\n  const jobs = [];\n  const promise = new Promise((resolve, reject) => {\n    transaction.onabort = (event) => {\n      logger.error('Read-write jobs transaction was aborted');\n      logger.errorObject(event);\n      reject(new Error('Read-write jobs transaction was aborted'));\n    };\n    transaction.onerror = (event) => {\n      logger.error('Error in read-write jobs transaction');\n      logger.errorObject(event);\n      reject(new Error('Error in read-write jobs transaction'));\n    };\n    transaction.oncomplete = () => {\n      resolve();\n    };\n  });\n  // $FlowFixMe\n  const request = index.getAllKeys(IDBKeyRange.bound(JOB_CLEANUP_STATUS, JOB_PENDING_STATUS));\n  request.onsuccess = function (event) {\n    for (const id of event.target.result) {\n      if (ids.includes(id)) {\n        continue;\n      }\n      const getRequest = store.get(id);\n      getRequest.onsuccess = function () {\n        jobs.push(getRequest.result);\n      };\n      getRequest.onerror = function (event2) {\n        logger.error(`Request error while getting job ${id}`);\n        logger.errorObject(event2);\n      };\n    }\n  };\n  request.onerror = function (event) {\n    logger.error('Request error while dequeing');\n    logger.errorObject(event);\n  };\n  await promise;\n  return jobs;\n}\n\nexport async function getCompletedJobsCountFromDatabase(queueId: string) { // eslint-disable-line no-underscore-dangle\n  console.log('getCompletedJobsCountFromDatabase');\n  const jobs = await getCompletedJobsFromDatabase(queueId);\n  return jobs.length;\n}\n\nexport async function getCompletedJobsFromDatabase(queueId: string):Promise<Array<Job>> { // eslint-disable-line no-underscore-dangle\n  console.log('getCompletedJobsFromDatabase');\n  if (typeof queueId !== 'string') {\n    throw new TypeError(`Unable to get completed jobs database, received invalid \"queueId\" argument type \"${typeof queueId}\"`);\n  }\n  const store = await getReadOnlyJobsObjectStore();\n  const index = store.index('statusQueueIdIndex');\n  // $FlowFixMe\n  const request = index.openCursor(IDBKeyRange.only([queueId, JOB_COMPLETE_STATUS]));\n  const jobs = [];\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function (event) {\n      const cursor = event.target.result;\n      if (cursor) {\n        jobs.push(cursor.value);\n        cursor.continue();\n      } else {\n        resolve();\n      }\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while getting completed jobs for queue ${queueId}`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while getting completed jobs for queue ${queueId}`));\n    };\n  });\n  return jobs;\n}\n\nexport async function storeAuthDataInDatabase(id:string, data: Object) { // eslint-disable-line no-underscore-dangle\n  console.log('storeAuthDataInDatabase');\n  if (typeof id !== 'string') {\n    throw new TypeError(`Unable to store auth data in database, received invalid \"id\" argument type \"${typeof id}\"`);\n  }\n  if (typeof data !== 'object') {\n    throw new TypeError(`Unable to store auth data in database, received invalid \"data\" argument type \"${typeof data}\"`);\n  }\n  const store = await getReadWriteAuthObjectStore();\n  const request = store.put({ id, data });\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve();\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while storing auth data for ${id}`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while storing auth data for ${id}`));\n    };\n  });\n}\n\nexport async function getAuthDataFromDatabase(id:string) {\n  console.log('getAuthDataFromDatabase');\n  if (typeof id !== 'string') {\n    throw new TypeError(`Unable to store auth data in database, received invalid \"id\" argument type \"${typeof id}\"`);\n  }\n  const store = await getReadOnlyAuthObjectStore();\n  const request = store.get(id);\n  const authData = await new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve(request.result);\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while getting auth data for ${id}`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while getting auth data for ${id}`));\n    };\n  });\n  return typeof authData !== 'undefined' ? authData.data : undefined;\n}\n\nexport async function removeAuthDataFromDatabase(id:string) {\n  console.log('removeAuthDataFromDatabase');\n  if (typeof id !== 'string') {\n    throw new TypeError(`Unable to store auth data in database, received invalid \"id\" argument type \"${typeof id}\"`);\n  }\n  const store = await getReadWriteAuthObjectStore();\n  const request = store.delete(id);\n  return new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve();\n    };\n    request.onerror = function (event) {\n      logger.error(`Error while removing auth data for ${id}`);\n      logger.errorObject(event);\n      reject(new Error(`Error while removing auth data for ${id}`));\n    };\n  });\n}\n"],"file":"database.js"}