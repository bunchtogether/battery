{"version":3,"sources":["../../src/database.js"],"names":["localJobEmitter","EventEmitter","jobEmitter","logger","JobDoesNotExistError","message","name","Error","CleanupDoesNotExistError","QUEUE_ERROR_STATUS","QUEUE_PENDING_STATUS","QUEUE_COMPLETE_STATUS","QUEUE_EMPTY_STATUS","JOB_ABORTED_STATUS","JOB_COMPLETE_STATUS","JOB_PENDING_STATUS","JOB_ERROR_STATUS","JOB_CLEANUP_STATUS","JOB_CLEANUP_AND_REMOVE_STATUS","databasePromise","request","self","indexedDB","open","onupgradeneeded","e","store","target","result","createObjectStore","keyPath","autoIncrement","createIndex","unique","error","Promise","resolve","reject","onerror","onsuccess","event","db","getReadWriteObjectStore","database","transaction","durability","objectStore","onabort","errorObject","getReadOnlyObjectStore","getReadWriteArgLookupObjectStore","getReadOnlyArgLookupObjectStore","getReadWriteAuthObjectStore","getReadOnlyAuthObjectStore","getReadWriteMetadataObjectStore","getReadOnlyMetadataObjectStore","getReadWriteJobsObjectStore","getReadOnlyJobsObjectStore","getReadWriteCleanupsObjectStore","getReadOnlyCleanupsObjectStore","getReadWriteJobCleanupAndArgLookupStores","getReadOnlyObjectStoreAndTransactionPromise","promise","oncomplete","getReadOnlyJobsObjectStoreAndTransactionPromise","removeJobCleanupAndArgLookup","jobsObjectStore","cleanupsObjectStore","argLookupObjectStore","jobId","queueId","onSuccess","onError","jobDeleteRequest","delete","emit","cleanupDeleteRequest","argLookupJobIdIndex","index","argLookupJobRequest","getAllKeys","IDBKeyRange","only","id","argLookupDeleteRequest","deleteEvent","clearAllMetadataInDatabase","clear","commit","clearJobsDatabase","clearCleanupsDatabase","clearDatabase","removeJobsWithQueueIdAndTypeFromDatabase","type","jobIds","i","length","removeQueueFromDatabase","removeCompletedExpiredItemsFromDatabase","maxAge","getAll","bound","Date","now","jobs","updateJobInDatabase","transform","get","newValue","value","deleteRequest","removeArgLookupsAndCleanupsForJobAsMicrotask","status","putRequest","put","getJobFromDatabase","updateCleanupInDatabase","removePathFromCleanupDataInDatabase","path","attempt","startAfter","data","Object","assign","updateCleanupValuesInDatabase","TypeError","combinedData","silentlyRemoveJobFromDatabase","removeJobFromDatabase","job","removeCleanupFromDatabase","getCleanupFromDatabase","getMetadataFromDatabase","response","metadata","undefined","clearMetadataInDatabase","setMetadataInDatabase","updateMetadataInDatabase","markJobStatusInDatabase","markJobCompleteInDatabase","markJobPendingInDatabase","markJobErrorInDatabase","markJobCleanupInDatabase","markJobAbortedInDatabase","markJobCompleteThenRemoveFromDatabase","markJobCleanupAndRemoveInDatabase","markJobAsAbortedOrRemoveFromDatabase","markJobStartAfterInDatabase","toLocaleString","markCleanupStartAfterInDatabase","markQueueForCleanupInDatabase","lastRequest","push","warn","event2","markQueueJobsGreaterThanIdCleanupAndRemoveInDatabase","shouldRemove","markQueueForCleanupAndRemoveInDatabase","markQueueJobsGreaterThanIdPendingInDatabase","markQueuePendingInDatabase","getGreatestJobIdFromQueueInDatabase","openCursor","cursor","incrementJobAttemptInDatabase","incrementCleanupAttemptInDatabase","bulkEnqueueToDatabase","items","delay","Array","isArray","args","ids","created","enqueueToDatabase","restoreJobToDatabaseForCleanupAndRemove","dequeueFromDatabase","getContiguousIds","sort","a","b","points","Infinity","dequeueFromDatabaseNotIn","includes","getRequest","getJobsWithTypeFromDatabase","getJobsInQueueFromDatabase","getJobsInDatabase","getCompletedJobsCountFromDatabase","getCompletedJobsFromDatabase","storeAuthDataInDatabase","getAuthDataFromDatabase","authData","removeAuthDataFromDatabase","getQueueStatus","abortedRequest","completeRequest","pendingRequest","errorRequest","cleanupRequest","cleanupAndRemoveRequest","abortedCountPromise","completeCountPromise","pendingCountPromise","errorCountPromise","cleanupCountPromise","cleanupAndRemoveCountPromise","all","abortedCount","completeCount","pendingCount","errorCount","cleanupCount","cleanupAndRemoveCount","addArgLookup","key","jsonPath","getArgLookupJobPathMap","map","Map","x","markJobsWithArgLookupKeyCleanupAndRemoveInDatabase","lookupArgs","argLookupIndex","argLookupRequest","results","argLookupEvent","argLookups","jobRequest","json","lookupArg","jobsArgLookupsAndCleanupsToRemove","removeArgLookupsAndCleanupsForJob","slice","queueMicrotask","UNLOAD_DATA_ID","updateUnloadDataInDatabase","getUnloadDataFromDatabase","clearUnloadDataInDatabase"],"mappings":"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","sourcesContent":["// @flow\n\nimport { JSONPath } from 'jsonpath-plus';\nimport merge from 'lodash/merge';\nimport unset from 'lodash/unset';\nimport uniq from 'lodash/uniq';\nimport EventEmitter from 'events';\nimport makeLogger from './logger';\n\n// Local job emitter is for this process only,\n// jobEmitter is bridged when a MessagePort is open\nexport const localJobEmitter = new EventEmitter();\nexport const jobEmitter = new EventEmitter();\n\nconst logger = makeLogger('Jobs Database');\n\nexport class JobDoesNotExistError extends Error {\n  constructor(message:string) {\n    super(message);\n    this.name = 'JobDoesNotExistError';\n  }\n}\n\nexport class CleanupDoesNotExistError extends Error {\n  constructor(message:string) {\n    super(message);\n    this.name = 'CleanupDoesNotExistError';\n  }\n}\n\nexport type Job = {\n  id: number,\n  queueId:string,\n  type:string,\n  args:Array<any>,\n  attempt: number,\n  created: number,\n  status: number,\n  startAfter: number\n};\n\n\ntype Cleanup = {\n  id: number,\n  queueId:string,\n  data: Object,\n  attempt: number,\n  startAfter: number\n};\n\nexport const QUEUE_ERROR_STATUS = 0;\nexport const QUEUE_PENDING_STATUS = 1;\nexport const QUEUE_COMPLETE_STATUS = 2;\nexport const QUEUE_EMPTY_STATUS = 3;\n\nexport const JOB_ABORTED_STATUS = 2;\nexport const JOB_COMPLETE_STATUS = 1;\nexport const JOB_PENDING_STATUS = 0;\nexport const JOB_ERROR_STATUS = -1;\nexport const JOB_CLEANUP_STATUS = -2;\nexport const JOB_CLEANUP_AND_REMOVE_STATUS = -3;\n\nexport const databasePromise = (async () => {\n  const request = self.indexedDB.open('battery-queue-08', 1);\n\n  request.onupgradeneeded = function (e) {\n    try {\n      const store = e.target.result.createObjectStore('jobs', { keyPath: 'id', autoIncrement: true });\n      store.createIndex('statusIndex', 'status', { unique: false });\n      store.createIndex('queueIdIndex', 'queueId', { unique: false });\n      store.createIndex('queueIdTypeIndex', ['queueId', 'type'], { unique: false });\n      store.createIndex('typeIndex', 'type', { unique: false });\n      store.createIndex('statusQueueIdIndex', ['queueId', 'status'], { unique: false });\n      store.createIndex('statusCreatedIndex', ['status', 'created'], { unique: false });\n    } catch (error) {\n      if (!(error.name === 'ConstraintError')) {\n        throw error;\n      }\n    }\n    try {\n      e.target.result.createObjectStore('metadata', { keyPath: 'id' });\n    } catch (error) {\n      if (!(error.name === 'ConstraintError')) {\n        throw error;\n      }\n    }\n    try {\n      const store = e.target.result.createObjectStore('cleanups', { keyPath: 'id' });\n      store.createIndex('queueIdIndex', 'queueId', { unique: false });\n    } catch (error) {\n      if (!(error.name === 'ConstraintError')) {\n        throw error;\n      }\n    }\n    try {\n      e.target.result.createObjectStore('auth-data', { keyPath: 'id' });\n    } catch (error) {\n      if (!(error.name === 'ConstraintError')) {\n        throw error;\n      }\n    }\n    try {\n      const store = e.target.result.createObjectStore('arg-lookup', { keyPath: 'id', autoIncrement: true });\n      store.createIndex('jobIdIndex', 'jobId', { unique: false });\n      store.createIndex('keyIndex', 'key', { unique: false });\n    } catch (error) {\n      if (!(error.name === 'ConstraintError')) {\n        throw error;\n      }\n    }\n  };\n\n  const db = await new Promise((resolve, reject) => {\n    request.onerror = () => {\n      reject(new Error('Unable to open database'));\n    };\n    request.onsuccess = function (event) {\n      resolve(event.target.result);\n    };\n  });\n\n  return db;\n})();\n\nasync function getReadWriteObjectStore(name:string) {\n  const database = await databasePromise;\n  const transaction = database.transaction([name], 'readwrite', { durability: 'relaxed' });\n  const objectStore = transaction.objectStore(name);\n  transaction.onabort = (event) => {\n    logger.error(`Read-write \"${name}\" transaction was aborted`);\n    logger.errorObject(event);\n  };\n  transaction.onerror = (event) => {\n    logger.error(`Error in read-write \"${name}\" transaction`);\n    logger.errorObject(event);\n  };\n  return objectStore;\n}\n\nasync function getReadOnlyObjectStore(name:string) {\n  const database = await databasePromise;\n  const transaction = database.transaction([name], 'readonly', { durability: 'relaxed' });\n  const objectStore = transaction.objectStore(name);\n  transaction.onabort = (event) => {\n    logger.error(`Read-only \"${name}\" transaction was aborted`);\n    logger.errorObject(event);\n  };\n  transaction.onerror = (event) => {\n    logger.error(`Error in read-only \"${name}\" transaction`);\n    logger.errorObject(event);\n  };\n  return objectStore;\n}\n\nfunction getReadWriteArgLookupObjectStore() {\n  return getReadWriteObjectStore('arg-lookup');\n}\n\nfunction getReadOnlyArgLookupObjectStore() {\n  return getReadOnlyObjectStore('arg-lookup');\n}\n\nfunction getReadWriteAuthObjectStore() {\n  return getReadWriteObjectStore('auth-data');\n}\n\nfunction getReadOnlyAuthObjectStore() {\n  return getReadOnlyObjectStore('auth-data');\n}\n\nfunction getReadWriteMetadataObjectStore() {\n  return getReadWriteObjectStore('metadata');\n}\n\nfunction getReadOnlyMetadataObjectStore() {\n  return getReadOnlyObjectStore('metadata');\n}\n\nfunction getReadWriteJobsObjectStore() {\n  return getReadWriteObjectStore('jobs');\n}\n\nfunction getReadOnlyJobsObjectStore() {\n  return getReadOnlyObjectStore('jobs');\n}\n\nfunction getReadWriteCleanupsObjectStore() {\n  return getReadWriteObjectStore('cleanups');\n}\n\nfunction getReadOnlyCleanupsObjectStore() {\n  return getReadOnlyObjectStore('cleanups');\n}\n\nasync function getReadWriteJobCleanupAndArgLookupStores() {\n  const database = await databasePromise;\n  const transaction = database.transaction(['jobs', 'cleanups', 'arg-lookup'], 'readwrite', { durability: 'relaxed' });\n  transaction.onabort = (event) => {\n    logger.error('Read-write \\'jobs\\', \\'cleanups\\', and \\'arg-lookup\\' transaction was aborted');\n    logger.errorObject(event);\n  };\n  transaction.onerror = (event) => {\n    logger.error('Error in read-write \\'jobs\\', \\'cleanups\\', and \\'arg-lookup\\' transaction');\n    logger.errorObject(event);\n  };\n  return [transaction.objectStore('jobs'), transaction.objectStore('cleanups'), transaction.objectStore('arg-lookup')];\n}\n\nasync function getReadOnlyObjectStoreAndTransactionPromise(name:string) {\n  const database = await databasePromise;\n  const transaction = database.transaction([name], 'readonly', { durability: 'relaxed' });\n  const objectStore = transaction.objectStore(name);\n  const promise = new Promise((resolve, reject) => {\n    transaction.onabort = (event) => {\n      logger.error(`Read-write \"${name}\" transaction was aborted`);\n      logger.errorObject(event);\n      reject(new Error(`Read-write \"${name}\" transaction was aborted`));\n    };\n    transaction.onerror = (event) => {\n      logger.error(`Error in read-write \"${name}\" transaction`);\n      logger.errorObject(event);\n      reject(new Error(`Error in read-write \"${name}\" transaction`));\n    };\n    transaction.oncomplete = () => {\n      resolve();\n    };\n  });\n  return [objectStore, promise];\n}\n\n\nfunction getReadOnlyJobsObjectStoreAndTransactionPromise() {\n  return getReadOnlyObjectStoreAndTransactionPromise('jobs');\n}\n\n\nfunction removeJobCleanupAndArgLookup(jobsObjectStore:IDBObjectStore, cleanupsObjectStore:IDBObjectStore, argLookupObjectStore:IDBObjectStore, jobId:number, queueId:string, onSuccess?:() => void, onError?:(Error) => void) {\n  const jobDeleteRequest = jobsObjectStore.delete(jobId);\n  localJobEmitter.emit('jobDelete', jobId, queueId);\n  jobEmitter.emit('jobDelete', jobId, queueId);\n  jobDeleteRequest.onerror = function (event) {\n    logger.error(`Request error while removing job ${jobId} in queue ${queueId} from database`);\n    logger.errorObject(event);\n    if (typeof onError === 'function') {\n      onError(new Error(`Request error while removing job ${jobId} in queue ${queueId} from database`));\n    }\n  };\n  const cleanupDeleteRequest = cleanupsObjectStore.delete(jobId);\n  cleanupDeleteRequest.onerror = function (event) {\n    logger.error(`Request error while removing cleanup for job ${jobId} in queue ${queueId} from database`);\n    logger.errorObject(event);\n    if (typeof onError === 'function') {\n      onError(new Error(`Request error while removing cleanup for job ${jobId} in queue ${queueId} from database`));\n    }\n  };\n  const argLookupJobIdIndex = argLookupObjectStore.index('jobIdIndex');\n  // $FlowFixMe\n  const argLookupJobRequest = argLookupJobIdIndex.getAllKeys(IDBKeyRange.only(jobId));\n  argLookupJobRequest.onsuccess = function (event) {\n    for (const id of event.target.result) {\n      const argLookupDeleteRequest = argLookupObjectStore.delete(id);\n      argLookupDeleteRequest.onerror = function (deleteEvent) {\n        logger.error(`Delete request error while removing argument lookups for job ${jobId} in queue ${queueId} from database`);\n        logger.errorObject(deleteEvent);\n        if (typeof onError === 'function') {\n          onError(new Error(`Delete request error while removing argument lookups for job ${jobId} in queue ${queueId} from database`));\n        }\n      };\n    }\n    if (typeof onSuccess === 'function') {\n      onSuccess();\n    }\n  };\n  argLookupJobRequest.onerror = function (event) {\n    logger.error(`Request error while removing argument lookups for job ${jobId} in queue ${queueId} from database`);\n    logger.errorObject(event);\n    if (typeof onError === 'function') {\n      onError(new Error(`Request error while removing argument lookups for job ${jobId} in queue ${queueId} from database`));\n    }\n  };\n}\n\nasync function clearAllMetadataInDatabase() {\n  const store = await getReadWriteMetadataObjectStore();\n  const request = store.clear();\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve();\n    };\n    request.onerror = function (event) {\n      logger.error('Error while clearing queue data database');\n      logger.errorObject(event);\n      reject(new Error('Error while clearing queue data database'));\n    };\n    store.transaction.commit();\n  });\n}\n\nasync function clearJobsDatabase() {\n  const store = await getReadWriteJobsObjectStore();\n  const request = store.clear();\n  localJobEmitter.emit('jobsClear');\n  jobEmitter.emit('jobsClear');\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve();\n    };\n    request.onerror = function (event) {\n      logger.error('Error while clearing jobs database');\n      logger.errorObject(event);\n      reject(new Error('Error while clearing jobs database'));\n    };\n    store.transaction.commit();\n  });\n}\n\nasync function clearCleanupsDatabase() {\n  const store = await getReadWriteCleanupsObjectStore();\n  const request = store.clear();\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve();\n    };\n    request.onerror = function (event) {\n      logger.error('Error while clearing cleanups database');\n      logger.errorObject(event);\n      reject(new Error('Error while clearing cleanups database'));\n    };\n    store.transaction.commit();\n  });\n}\n\nexport async function clearDatabase() {\n  await clearJobsDatabase();\n  await clearCleanupsDatabase();\n  await clearAllMetadataInDatabase();\n}\n\nexport async function removeJobsWithQueueIdAndTypeFromDatabase(queueId:string, type:string) {\n  const [jobsObjectStore, cleanupsObjectStore, argLookupObjectStore] = await getReadWriteJobCleanupAndArgLookupStores();\n  const index = jobsObjectStore.index('queueIdTypeIndex');\n  // $FlowFixMe\n  const request = index.getAllKeys(IDBKeyRange.only([queueId, type]));\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function (event) {\n      const jobIds = event.target.result;\n      for (let i = 0; i < jobIds.length; i += 1) {\n        const jobId = jobIds[i];\n        if (i === jobIds.length - 1) {\n          removeJobCleanupAndArgLookup(jobsObjectStore, cleanupsObjectStore, argLookupObjectStore, jobId, queueId, resolve, reject);\n        } else {\n          removeJobCleanupAndArgLookup(jobsObjectStore, cleanupsObjectStore, argLookupObjectStore, jobId, queueId);\n        }\n      }\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while removing jobs with queue ${queueId} and type ${type} from jobs database`);\n      logger.errorObject(event);\n    };\n  });\n}\n\nexport async function removeQueueFromDatabase(queueId:string) {\n  const [jobsObjectStore, cleanupsObjectStore, argLookupObjectStore] = await getReadWriteJobCleanupAndArgLookupStores();\n  const index = jobsObjectStore.index('queueIdIndex');\n  // $FlowFixMe\n  const request = index.getAllKeys(IDBKeyRange.only(queueId));\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function (event) {\n      const jobIds = event.target.result;\n      for (let i = 0; i < jobIds.length; i += 1) {\n        const jobId = jobIds[i];\n        if (i === jobIds.length - 1) {\n          removeJobCleanupAndArgLookup(jobsObjectStore, cleanupsObjectStore, argLookupObjectStore, jobId, queueId, () => {\n            jobsObjectStore.transaction.commit();\n            resolve();\n          }, reject);\n        } else {\n          removeJobCleanupAndArgLookup(jobsObjectStore, cleanupsObjectStore, argLookupObjectStore, jobId, queueId);\n        }\n      }\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while removing queue ${queueId} from jobs database`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while removing queue ${queueId} from jobs database`));\n    };\n  });\n}\n\nexport async function removeCompletedExpiredItemsFromDatabase(maxAge:number) {\n  const [jobsObjectStore, cleanupsObjectStore, argLookupObjectStore] = await getReadWriteJobCleanupAndArgLookupStores();\n  const index = jobsObjectStore.index('statusCreatedIndex');\n  // $FlowFixMe\n  const request = index.getAll(IDBKeyRange.bound([JOB_COMPLETE_STATUS, 0], [JOB_COMPLETE_STATUS, Date.now() - maxAge]));\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function (event) {\n      const jobs = event.target.result;\n      for (let i = 0; i < jobs.length; i += 1) {\n        const { id: jobId, queueId } = jobs[i];\n        if (i === jobs.length - 1) {\n          removeJobCleanupAndArgLookup(jobsObjectStore, cleanupsObjectStore, argLookupObjectStore, jobId, queueId, () => {\n            jobsObjectStore.transaction.commit();\n            resolve();\n          }, reject);\n        } else {\n          removeJobCleanupAndArgLookup(jobsObjectStore, cleanupsObjectStore, argLookupObjectStore, jobId, queueId);\n        }\n      }\n      if (jobs.length === 0) {\n        resolve();\n      }\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while removing completed jobs with age > ${maxAge}ms`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while removing completed jobs with age > ${maxAge}ms`));\n    };\n  });\n}\n\nexport async function updateJobInDatabase(id:number, transform:(Job | void) => Job | void | false):Promise<Job | void> {\n  const store = await getReadWriteJobsObjectStore();\n  const request = store.get(id);\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      let newValue;\n      const value = request.result;\n      try {\n        newValue = transform(value);\n      } catch (error) {\n        reject(error);\n        return;\n      }\n      if (typeof newValue === 'undefined') {\n        resolve();\n      } else if (newValue === false) {\n        if (typeof value !== 'undefined') {\n          const { queueId, type } = value;\n          const deleteRequest = store.delete(id);\n          localJobEmitter.emit('jobDelete', id, queueId);\n          jobEmitter.emit('jobDelete', id, queueId);\n          deleteRequest.onsuccess = function () {\n            removeArgLookupsAndCleanupsForJobAsMicrotask(id);\n            resolve();\n          };\n          deleteRequest.onerror = function (event) {\n            logger.error(`Delete request error while updating job ${id} in queue ${queueId} and type ${type} in jobs database`);\n            logger.errorObject(event);\n            reject(new Error(`Delete request error while updating job ${id} in queue ${queueId} and type ${type} from jobs database`));\n          };\n        }\n      } else {\n        const { queueId, type, status } = newValue;\n        const putRequest = store.put(newValue);\n        localJobEmitter.emit('jobUpdate', id, queueId, type, status);\n        jobEmitter.emit('jobUpdate', id, queueId, type, status);\n        putRequest.onsuccess = function () {\n          resolve();\n        };\n        putRequest.onerror = function (event) {\n          logger.error(`Put request error while updating job ${id} in queue ${queueId} and type ${type} in jobs database`);\n          logger.errorObject(event);\n          reject(new Error(`Put request error while updating job ${id} in queue ${queueId} and type ${type} from jobs database`));\n        };\n      }\n      store.transaction.commit();\n    };\n    request.onerror = function (event) {\n      logger.error(`Get request error while updating ${id}`);\n      logger.errorObject(event);\n      reject(new Error(`Get request error while updating ${id}`));\n    };\n  });\n}\n\nexport async function getJobFromDatabase(id:number):Promise<Job | void> {\n  const store = await getReadOnlyJobsObjectStore();\n  const request = store.get(id);\n  return new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve(request.result);\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while getting ${id}`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while getting ${id}`));\n    };\n    store.transaction.commit();\n  });\n}\n\nexport async function updateCleanupInDatabase(id:number, transform:(Cleanup | void) => Object):Promise<Cleanup | void> {\n  const store = await getReadWriteCleanupsObjectStore();\n  const request = store.get(id);\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      let newValue;\n      try {\n        newValue = transform(request.result);\n      } catch (error) {\n        reject(error);\n        return;\n      }\n      if (typeof newValue === 'undefined') {\n        resolve();\n      } else {\n        const putRequest = store.put(newValue);\n        putRequest.onsuccess = function () {\n          resolve();\n        };\n        putRequest.onerror = function (event) {\n          logger.error(`Put request error while updating ${id} cleanup`);\n          logger.errorObject(event);\n          reject(new Error(`Put request error while updating ${id} cleanup`));\n        };\n      }\n      store.transaction.commit();\n    };\n    request.onerror = function (event) {\n      logger.error(`Get request error while updating ${id} cleanup`);\n      logger.errorObject(event);\n      reject(new Error(`Get request error while updating ${id} cleanup`));\n    };\n  });\n}\n\nexport async function removePathFromCleanupDataInDatabase(id:number, path:Array<string>) {\n  await updateCleanupInDatabase(id, (value: Cleanup | void) => {\n    if (typeof value === 'undefined') {\n      return;\n    }\n    const { queueId, attempt, startAfter } = value;\n    const data = Object.assign({}, value.data);\n    unset(data, path);\n    return { // eslint-disable-line consistent-return\n      id,\n      queueId,\n      attempt,\n      startAfter,\n      data,\n    };\n  });\n}\n\n\nexport async function updateCleanupValuesInDatabase(id:number, queueId:string, data:Object) {\n  if (typeof id !== 'number') {\n    throw new TypeError(`Unable to update cleanup in database, received invalid \"id\" argument type \"${typeof id}\"`);\n  }\n  if (typeof queueId !== 'string') {\n    throw new TypeError(`Unable to update cleanup in database, received invalid \"queueId\" argument type \"${typeof queueId}\"`);\n  }\n  if (typeof data !== 'object') {\n    throw new TypeError(`Unable to update cleanup in database, received invalid \"data\" argument type \"${typeof data}\"`);\n  }\n  await updateCleanupInDatabase(id, (value: Cleanup | void) => {\n    const combinedData = typeof value === 'undefined' ? data : merge({}, value.data, data);\n    return {\n      id,\n      queueId,\n      attempt: 0,\n      startAfter: Date.now(),\n      data: combinedData,\n    };\n  });\n}\n\nexport async function silentlyRemoveJobFromDatabase(id:number) {\n  const store = await getReadWriteJobsObjectStore();\n  const request = store.delete(id);\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve();\n    };\n    request.onerror = function (event) {\n      logger.error(`Delete request error while removing job ${id} from database`);\n      logger.errorObject(event);\n      reject(new Error(`Delete request error while removing job ${id} from database`));\n    };\n    store.transaction.commit();\n  });\n}\n\n\nexport async function removeJobFromDatabase(jobId:number) {\n  const [jobsObjectStore, cleanupsObjectStore, argLookupObjectStore] = await getReadWriteJobCleanupAndArgLookupStores();\n  const request = jobsObjectStore.get(jobId);\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      const job = request.result;\n      if (typeof job === 'undefined') {\n        resolve();\n        jobsObjectStore.transaction.commit();\n        return;\n      }\n      removeJobCleanupAndArgLookup(jobsObjectStore, cleanupsObjectStore, argLookupObjectStore, job.id, job.queueId, () => {\n        resolve();\n      }, reject);\n      jobsObjectStore.transaction.commit();\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while getting job ${jobId} before removing from database`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while getting job ${jobId} before removing from database`));\n    };\n  });\n}\n\nexport async function removeCleanupFromDatabase(id:number) {\n  const store = await getReadWriteCleanupsObjectStore();\n  const request = store.delete(id);\n  return new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve();\n    };\n    request.onerror = function (event) {\n      logger.error(`Error while removing cleanup data for ${id}`);\n      logger.errorObject(event);\n      reject(new Error(`Error while removing cleanup data for ${id}`));\n    };\n    store.transaction.commit();\n  });\n}\n\nexport async function getCleanupFromDatabase(id:number):Promise<Cleanup | void> {\n  const store = await getReadOnlyCleanupsObjectStore();\n  const request = store.get(id);\n  return new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve(request.result);\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while getting ${id}`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while getting ${id}`));\n    };\n    store.transaction.commit();\n  });\n}\n\nexport async function getMetadataFromDatabase(id:string) {\n  const store = await getReadOnlyMetadataObjectStore();\n  const request = store.get(id);\n  const response = await new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve(request.result);\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while getting ${id} metadata`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while getting ${id} metadata`));\n    };\n    store.transaction.commit();\n  });\n  return typeof response !== 'undefined' ? response.metadata : undefined;\n}\n\nexport async function clearMetadataInDatabase(id:string) {\n  const store = await getReadWriteMetadataObjectStore();\n  const request = store.delete(id);\n  return new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve();\n    };\n    request.onerror = function (event) {\n      logger.error(`Error while clearing ${id} metadata`);\n      logger.errorObject(event);\n      reject(new Error(`Error while clearing ${id} metadata`));\n    };\n    store.transaction.commit();\n  });\n}\n\nexport async function setMetadataInDatabase(id:string, metadata:Object) {\n  const store = await getReadWriteMetadataObjectStore();\n  const request = store.put({\n    id,\n    metadata,\n  });\n  return new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve();\n    };\n    request.onerror = function (event) {\n      logger.error(`Error while setting ${id} metadata`);\n      logger.errorObject(event);\n      reject(new Error(`Error while setting ${id} metadata`));\n    };\n    store.transaction.commit();\n  });\n}\n\nexport async function updateMetadataInDatabase(id:string, transform:(Object | void) => Object | void | false):Promise<Object | void> {\n  const store = await getReadWriteMetadataObjectStore();\n  const request = store.get(id);\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      let newValue;\n      const response = request.result;\n      const value = typeof response !== 'undefined' ? response.metadata : undefined;\n      try {\n        newValue = transform(value);\n      } catch (error) {\n        reject(error);\n        return;\n      }\n      if (typeof newValue === 'undefined') {\n        resolve();\n      } else if (newValue === false) {\n        if (typeof value !== 'undefined') {\n          const deleteRequest = store.delete(id);\n          deleteRequest.onsuccess = function () {\n            resolve();\n          };\n          deleteRequest.onerror = function (event) {\n            logger.error(`Delete request error while updating ${id} in metadata database`);\n            logger.errorObject(event);\n            reject(new Error(`Delete request error while updating ${id} in metadata database`));\n          };\n        }\n      } else {\n        const putRequest = store.put({\n          id,\n          metadata: newValue,\n        });\n        putRequest.onsuccess = function () {\n          resolve();\n        };\n        putRequest.onerror = function (event) {\n          logger.error(`Put request error while updating ${id} in metadata database`);\n          logger.errorObject(event);\n          reject(new Error(`Put request error while updating ${id} in metadata database`));\n        };\n      }\n      store.transaction.commit();\n    };\n    request.onerror = function (event) {\n      logger.error(`Get request error while updating ${id} in metadata database`);\n      logger.errorObject(event);\n      reject(new Error(`Get request error while updating ${id} in metadata database`));\n    };\n  });\n}\n\nexport function markJobStatusInDatabase(id:number, status:number) {\n  return updateJobInDatabase(id, (value:Job | void) => {\n    if (typeof value === 'undefined') {\n      throw new JobDoesNotExistError(`Unable to mark job ${id} as status ${status} in database, job does not exist`);\n    }\n    value.status = status; // eslint-disable-line no-param-reassign\n    return value;\n  });\n}\n\nexport function markJobCompleteInDatabase(id:number) {\n  return markJobStatusInDatabase(id, JOB_COMPLETE_STATUS);\n}\n\nexport function markJobPendingInDatabase(id:number) {\n  return markJobStatusInDatabase(id, JOB_PENDING_STATUS);\n}\n\nexport function markJobErrorInDatabase(id:number) {\n  return markJobStatusInDatabase(id, JOB_ERROR_STATUS);\n}\n\nexport function markJobCleanupInDatabase(id:number) {\n  return markJobStatusInDatabase(id, JOB_CLEANUP_STATUS);\n}\n\nexport function markJobAbortedInDatabase(id:number) {\n  return markJobStatusInDatabase(id, JOB_ABORTED_STATUS);\n}\n\nexport async function markJobCompleteThenRemoveFromDatabase(id:number):Promise<void> {\n  const [jobsObjectStore, cleanupsObjectStore, argLookupObjectStore] = await getReadWriteJobCleanupAndArgLookupStores();\n  const request = jobsObjectStore.get(id);\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      const value = request.result;\n      if (typeof value !== 'undefined') {\n        const { queueId, type } = value;\n        localJobEmitter.emit('jobUpdate', id, queueId, type, JOB_COMPLETE_STATUS);\n        jobEmitter.emit('jobUpdate', id, queueId, type, JOB_COMPLETE_STATUS);\n        removeJobCleanupAndArgLookup(jobsObjectStore, cleanupsObjectStore, argLookupObjectStore, id, queueId, () => {\n          jobsObjectStore.transaction.commit();\n          resolve();\n        });\n      }\n    };\n    request.onerror = function (event) {\n      logger.error(`Get request error while marking job ${id} complete then removing from jobs database`);\n      logger.errorObject(event);\n      reject(new Error(`Get request error while marking job ${id} complete then removing from jobs database`));\n    };\n  });\n}\n\nexport function markJobCleanupAndRemoveInDatabase(id:number) {\n  return updateJobInDatabase(id, (value:Job | void) => {\n    if (typeof value === 'undefined') {\n      return false;\n    }\n    if (value.status === JOB_PENDING_STATUS) {\n      return false;\n    }\n    if (value.status === JOB_ABORTED_STATUS) {\n      return false;\n    }\n    value.status = JOB_CLEANUP_AND_REMOVE_STATUS; // eslint-disable-line no-param-reassign\n    return value;\n  });\n}\n\nexport function markJobAsAbortedOrRemoveFromDatabase(id:number) {\n  return updateJobInDatabase(id, (value:Job | void) => {\n    if (typeof value === 'undefined') {\n      return;\n    }\n    if (value.status === JOB_ERROR_STATUS) {\n      value.status = JOB_ABORTED_STATUS; // eslint-disable-line no-param-reassign\n      return value; // eslint-disable-line consistent-return\n    }\n    if (value.status === JOB_CLEANUP_STATUS) {\n      value.status = JOB_ABORTED_STATUS; // eslint-disable-line no-param-reassign\n      return value; // eslint-disable-line consistent-return\n    }\n    if (value.status === JOB_CLEANUP_AND_REMOVE_STATUS) {\n      return false; // eslint-disable-line consistent-return\n    }\n    throw new Error(`Unable to mark job ${id} as aborted or remove after cleanup, unable to handle status ${value.status}`);\n  });\n}\n\nexport function markJobStartAfterInDatabase(id:number, startAfter:number) {\n  return updateJobInDatabase(id, (value:Job | void) => {\n    if (typeof value === 'undefined') {\n      throw new JobDoesNotExistError(`Unable to mark job ${id} start-after time to ${new Date(startAfter).toLocaleString()} in database, job does not exist`);\n    }\n    if (startAfter < value.startAfter) {\n      return;\n    }\n    value.startAfter = startAfter; // eslint-disable-line no-param-reassign\n    return value; // eslint-disable-line consistent-return\n  });\n}\n\nexport function markCleanupStartAfterInDatabase(id:number, startAfter:number) {\n  return updateCleanupInDatabase(id, (value: Cleanup | void) => {\n    if (typeof value === 'undefined') {\n      throw new CleanupDoesNotExistError(`Unable to mark cleanup ${id} start-after time to ${new Date(startAfter).toLocaleString()} in database, cleanup does not exist`);\n    }\n    if (startAfter < value.startAfter) {\n      return;\n    }\n    value.startAfter = startAfter; // eslint-disable-line  no-param-reassign\n    return value; // eslint-disable-line consistent-return\n  });\n}\n\nexport async function markQueueForCleanupInDatabase(queueId:string) {\n  const store = await getReadWriteJobsObjectStore();\n  const index = store.index('queueIdIndex');\n  // $FlowFixMe\n  const request = index.getAll(IDBKeyRange.only(queueId));\n  const jobs = [];\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function (event) {\n      const length = event.target.result.length;\n      let lastRequest;\n      for (let i = 0; i < length; i += 1) {\n        const value = Object.assign({}, event.target.result[i]);\n        switch (value.status) {\n          case JOB_ERROR_STATUS:\n            value.status = JOB_CLEANUP_STATUS;\n            jobs.push(value);\n            break;\n          case JOB_COMPLETE_STATUS:\n            value.status = JOB_CLEANUP_STATUS;\n            jobs.push(value);\n            break;\n          case JOB_PENDING_STATUS:\n            value.status = JOB_ABORTED_STATUS;\n            break;\n          case JOB_CLEANUP_STATUS:\n            jobs.push(value);\n            continue;\n          case JOB_CLEANUP_AND_REMOVE_STATUS:\n            jobs.push(value);\n            continue;\n          case JOB_ABORTED_STATUS:\n            continue;\n          default:\n            logger.warn(`Unhandled job status ${value.status} while marking queue ${queueId} for cleanup`);\n            continue;\n        }\n        const putRequest = store.put(value);\n        localJobEmitter.emit('jobUpdate', value.id, value.queueId, value.type, value.status);\n        jobEmitter.emit('jobUpdate', value.id, value.queueId, value.type, value.status);\n        lastRequest = putRequest;\n        putRequest.onerror = function (event2) {\n          logger.error(`Put request error while marking queue ${queueId} for cleanup`);\n          logger.errorObject(event2);\n          reject(new Error(`Put request error while marking queue ${queueId} for cleanup`));\n        };\n      }\n      if (typeof lastRequest !== 'undefined') {\n        lastRequest.onsuccess = function () {\n          resolve();\n        };\n      } else {\n        resolve();\n      }\n      store.transaction.commit();\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while marking queue ${queueId} for cleanup`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while marking queue ${queueId} for cleanup`));\n    };\n  });\n  return jobs;\n}\n\nexport async function markQueueJobsGreaterThanIdCleanupAndRemoveInDatabase(queueId:string, jobId:number) {\n  const store = await getReadWriteJobsObjectStore();\n  const index = store.index('queueIdIndex');\n  // $FlowFixMe\n  const request = index.getAll(IDBKeyRange.only(queueId));\n  const jobs = [];\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function (event) {\n      const length = event.target.result.length;\n      let lastRequest;\n      for (let i = 0; i < length; i += 1) {\n        const value = Object.assign({}, event.target.result[i]);\n        if (value.id <= jobId) {\n          continue;\n        }\n        let shouldRemove = false;\n        switch (value.status) {\n          case JOB_ERROR_STATUS:\n            value.status = JOB_CLEANUP_AND_REMOVE_STATUS;\n            jobs.push(value);\n            break;\n          case JOB_COMPLETE_STATUS:\n            value.status = JOB_CLEANUP_AND_REMOVE_STATUS;\n            jobs.push(value);\n            break;\n          case JOB_PENDING_STATUS:\n            shouldRemove = true;\n            break;\n          case JOB_CLEANUP_STATUS:\n            value.status = JOB_CLEANUP_AND_REMOVE_STATUS;\n            jobs.push(value);\n            break;\n          case JOB_CLEANUP_AND_REMOVE_STATUS:\n            jobs.push(value);\n            continue;\n          case JOB_ABORTED_STATUS:\n            shouldRemove = true;\n            break;\n          default:\n            logger.warn(`Unhandled job status ${value.status} while marking queue ${queueId} for cleanup and removal`);\n            continue;\n        }\n        const { id, type, status } = value;\n        if (shouldRemove) {\n          const deleteRequest = store.delete(id);\n          localJobEmitter.emit('jobDelete', id, queueId);\n          jobEmitter.emit('jobDelete', id, queueId);\n          removeArgLookupsAndCleanupsForJobAsMicrotask(id);\n          lastRequest = deleteRequest;\n          deleteRequest.onerror = function (event2) {\n            logger.error(`Delete request error while marking queue ${queueId} for cleanup and removal`);\n            logger.errorObject(event2);\n            reject(new Error(`Delete request error while marking queue ${queueId} for cleanup and removal`));\n          };\n        } else {\n          const putRequest = store.put(value);\n          localJobEmitter.emit('jobUpdate', id, queueId, type, status);\n          jobEmitter.emit('jobUpdate', id, queueId, type, status);\n          lastRequest = putRequest;\n          putRequest.onerror = function (event2) {\n            logger.error(`Put request error while marking queue ${queueId} for cleanup and removal`);\n            logger.errorObject(event2);\n            reject(new Error(`Put request error while marking queue ${queueId} for cleanup and removal`));\n          };\n        }\n      }\n      if (typeof lastRequest !== 'undefined') {\n        lastRequest.onsuccess = function () {\n          resolve();\n        };\n      } else {\n        resolve();\n      }\n      store.transaction.commit();\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while marking queue ${queueId} for cleanup and removal`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while marking queue ${queueId} for cleanup and removal`));\n    };\n  });\n  return jobs;\n}\n\nexport function markQueueForCleanupAndRemoveInDatabase(queueId:string) {\n  return markQueueJobsGreaterThanIdCleanupAndRemoveInDatabase(queueId, -1);\n}\n\nexport async function markQueueJobsGreaterThanIdPendingInDatabase(queueId:string, jobId:number) {\n  const store = await getReadWriteJobsObjectStore();\n  const index = store.index('queueIdIndex');\n  // $FlowFixMe\n  const request = index.getAll(IDBKeyRange.only(queueId));\n  const jobs = [];\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function (event) {\n      const length = event.target.result.length;\n      let lastRequest;\n      for (let i = 0; i < length; i += 1) {\n        const value = Object.assign({}, event.target.result[i]);\n        if (value.id <= jobId) {\n          continue;\n        }\n        switch (value.status) {\n          case JOB_ERROR_STATUS:\n            value.attempt = 0;\n            jobs.push(value);\n            break;\n          case JOB_COMPLETE_STATUS:\n            continue;\n          case JOB_PENDING_STATUS:\n            value.attempt = 0;\n            jobs.push(value);\n            break;\n          case JOB_CLEANUP_STATUS:\n            value.attempt = 0;\n            jobs.push(value);\n            break;\n          case JOB_CLEANUP_AND_REMOVE_STATUS:\n            jobs.push(value);\n            continue;\n          case JOB_ABORTED_STATUS:\n            value.attempt = 0;\n            value.status = JOB_PENDING_STATUS;\n            jobs.push(value);\n            break;\n          default:\n            logger.warn(`Unhandled job status ${value.status} while marking queue ${queueId} as pending`);\n            continue;\n        }\n        const { id, type, status } = value;\n        const putRequest = store.put(value);\n        localJobEmitter.emit('jobUpdate', id, queueId, type, status);\n        jobEmitter.emit('jobUpdate', id, queueId, type, status);\n        lastRequest = putRequest;\n        putRequest.onerror = function (event2) {\n          logger.error(`Put request error while marking queue ${queueId} as pending`);\n          logger.errorObject(event2);\n          reject(new Error(`Put request error while marking queue ${queueId} as pending`));\n        };\n      }\n      if (typeof lastRequest !== 'undefined') {\n        lastRequest.onsuccess = function () {\n          resolve();\n        };\n      } else {\n        resolve();\n      }\n      store.transaction.commit();\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while marking queue ${queueId} as pending`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while marking queue ${queueId} as pending`));\n    };\n  });\n  return jobs;\n}\n\n\nexport function markQueuePendingInDatabase(queueId:string) {\n  return markQueueJobsGreaterThanIdPendingInDatabase(queueId, -1);\n}\n\nexport async function getGreatestJobIdFromQueueInDatabase(queueId:string) {\n  const store = await getReadOnlyJobsObjectStore();\n  const index = store.index('queueIdIndex');\n  // $FlowFixMe\n  const request = index.openCursor(IDBKeyRange.only(queueId), 'prev');\n  return new Promise((resolve, reject) => {\n    request.onsuccess = function (event) {\n      const cursor = event.target.result;\n      if (cursor) {\n        resolve(cursor.value.id || 0);\n      } else {\n        resolve(0);\n      }\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while getting the greatest job ID in queue ${queueId}`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while getting the greatest job ID in queue ${queueId}`));\n    };\n    store.transaction.commit();\n  });\n}\n\nexport async function incrementJobAttemptInDatabase(id:number) {\n  await updateJobInDatabase(id, (value:Job | void) => {\n    if (typeof value === 'undefined') {\n      throw new JobDoesNotExistError(`Unable to increment attempts for job ${id} in database, job does not exist`);\n    }\n    value.attempt += 1; // eslint-disable-line no-param-reassign\n    return value;\n  });\n}\n\nexport async function incrementCleanupAttemptInDatabase(id:number, queueId:string) {\n  let attempt = 1;\n  await updateCleanupInDatabase(id, (value: Cleanup | void) => {\n    if (typeof value === 'undefined') {\n      return {\n        id,\n        queueId,\n        attempt: 1,\n        startAfter: Date.now(),\n        data: {},\n      };\n    }\n    attempt = value.attempt + 1;\n    value.attempt = attempt; // eslint-disable-line no-param-reassign\n    return value;\n  });\n  return attempt;\n}\n\nexport async function bulkEnqueueToDatabase(queueId: string, items:Array<[string, Array<any>]>, delay: number) { // eslint-disable-line no-underscore-dangle\n  if (typeof queueId !== 'string') {\n    throw new TypeError(`Unable to bulk enqueue in database, received invalid \"queueId\" argument type \"${typeof queueId}\"`);\n  }\n  if (!Array.isArray(items)) {\n    throw new TypeError(`Unable to bulk enqueue in database, received invalid \"items\" argument type \"${typeof items}\"`);\n  }\n  for (let i = 0; i < items.length; i += 1) {\n    const [type, args] = items[i];\n    if (typeof type !== 'string') {\n      throw new TypeError(`Unable to bulk enqueue in database, received invalid items[${i}] \"type\" argument type \"${typeof type}\"`);\n    }\n    if (!Array.isArray(args)) {\n      throw new TypeError(`Unable to bulk enqueue in database, received invalid items[${i}] \"args\" argument type \"${typeof args}\"`);\n    }\n  }\n  if (typeof delay !== 'number') {\n    throw new TypeError(`Unable to bulk enqueue in database, received invalid \"delay\" argument type \"${typeof delay}\"`);\n  }\n  const ids = [];\n  const store = await getReadWriteJobsObjectStore();\n  await new Promise((resolve, reject) => {\n    for (let i = 0; i < items.length; i += 1) {\n      const [type, args] = items[i];\n      const value = {\n        queueId,\n        type,\n        args,\n        attempt: 0,\n        created: Date.now(),\n        status: JOB_PENDING_STATUS,\n        startAfter: Date.now() + delay,\n      };\n      const request = store.put(value);\n      request.onsuccess = function () {\n        const id = request.result;\n        ids.push(request.result);\n        localJobEmitter.emit('jobAdd', id, queueId, type);\n        jobEmitter.emit('jobAdd', id, queueId, type);\n        resolve(request.result);\n      };\n      request.onerror = function (event) {\n        logger.error(`Request error while bulk enqueueing ${items.length} ${items.length === 1 ? 'job' : 'jobs'} in queue ${queueId}`);\n        logger.errorObject(event);\n        reject(new Error(`Request error while bulk enqueueing ${items.length} ${items.length === 1 ? 'job' : 'jobs'} in queue ${queueId}`));\n      };\n    }\n    store.transaction.commit();\n  });\n  return ids;\n}\n\nexport async function enqueueToDatabase(queueId: string, type: string, args: Array<any>, delay: number) { // eslint-disable-line no-underscore-dangle\n  if (typeof queueId !== 'string') {\n    throw new TypeError(`Unable to enqueue in database, received invalid \"queueId\" argument type \"${typeof queueId}\"`);\n  }\n  if (typeof type !== 'string') {\n    throw new TypeError(`Unable to enqueue in database, received invalid \"type\" argument type \"${typeof type}\"`);\n  }\n  if (!Array.isArray(args)) {\n    throw new TypeError(`Unable to enqueue in database, received invalid \"args\" argument type \"${typeof args}\"`);\n  }\n  if (typeof delay !== 'number') {\n    throw new TypeError(`Unable to enqueue in database, received invalid \"delay\" argument type \"${typeof delay}\"`);\n  }\n  const value = {\n    queueId,\n    type,\n    args,\n    attempt: 0,\n    created: Date.now(),\n    status: JOB_PENDING_STATUS,\n    startAfter: Date.now() + delay,\n  };\n  const store = await getReadWriteJobsObjectStore();\n\n  const request = store.put(value);\n  const id = await new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve(request.result);\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while enqueueing ${type} job`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while enqueueing ${type} job`));\n    };\n    store.transaction.commit();\n  });\n  localJobEmitter.emit('jobAdd', id, queueId, type);\n  jobEmitter.emit('jobAdd', id, queueId, type);\n  return id;\n}\n\nexport async function restoreJobToDatabaseForCleanupAndRemove(id:number, queueId: string, type: string, args: Array<any>) { // eslint-disable-line no-underscore-dangle\n  if (typeof id !== 'number') {\n    throw new TypeError(`Unable to restore to database, received invalid \"id\" argument type \"${typeof id}\"`);\n  }\n  if (typeof queueId !== 'string') {\n    throw new TypeError(`Unable to restore to database, received invalid \"queueId\" argument type \"${typeof queueId}\"`);\n  }\n  if (typeof type !== 'string') {\n    throw new TypeError(`Unable to restore to database, received invalid \"type\" argument type \"${typeof type}\"`);\n  }\n  if (!Array.isArray(args)) {\n    throw new TypeError(`Unable to restore to database, received invalid \"args\" argument type \"${typeof args}\"`);\n  }\n  const value = {\n    id,\n    queueId,\n    type,\n    args,\n    attempt: 1,\n    created: Date.now(),\n    status: JOB_CLEANUP_AND_REMOVE_STATUS,\n    startAfter: Date.now(),\n  };\n  const store = await getReadWriteJobsObjectStore();\n  const request = store.put(value);\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve(request.result);\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while enqueueing ${type} job`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while enqueueing ${type} job`));\n    };\n    store.transaction.commit();\n  });\n  localJobEmitter.emit('jobAdd', id, queueId, type);\n  jobEmitter.emit('jobAdd', id, queueId, type);\n  return id;\n}\n\nexport async function dequeueFromDatabase():Promise<Array<Job>> { // eslint-disable-line no-underscore-dangle\n  const store = await getReadOnlyJobsObjectStore();\n  const index = store.index('statusIndex');\n  // $FlowFixMe\n  const request = index.getAll(IDBKeyRange.bound(JOB_CLEANUP_AND_REMOVE_STATUS, JOB_PENDING_STATUS));\n  const jobs = await new Promise((resolve, reject) => {\n    request.onsuccess = function (event) {\n      resolve(event.target.result);\n    };\n    request.onerror = function (event) {\n      logger.error('Request error while dequeing');\n      logger.errorObject(event);\n      reject(new Error('Request error while dequeing'));\n    };\n    store.transaction.commit();\n  });\n  return jobs;\n}\n\nexport function getContiguousIds(ids:Array<number>) {\n  ids.sort((a, b) => a - b);\n  const points = [[0, ids[0] - 1]];\n  for (let i = 0; i < ids.length; i += 1) {\n    if (ids[i] + 1 !== ids[i + 1]) {\n      if (i + 1 >= ids.length) {\n        points.push([ids[i] + 1, Infinity]);\n      } else {\n        points.push([ids[i] + 1, ids[i + 1] - 1]);\n      }\n    }\n  }\n  return points;\n}\n\nexport async function dequeueFromDatabaseNotIn(ids:Array<number>):Promise<Array<Job>> { // eslint-disable-line no-underscore-dangle\n  if (ids.length === 0) {\n    return dequeueFromDatabase();\n  }\n  const [store, promise] = await getReadOnlyJobsObjectStoreAndTransactionPromise();\n  const index = store.index('statusIndex');\n  const jobs = [];\n  // $FlowFixMe\n  const request = index.getAllKeys(IDBKeyRange.bound(JOB_CLEANUP_AND_REMOVE_STATUS, JOB_PENDING_STATUS));\n  request.onsuccess = function (event) {\n    for (const id of event.target.result) {\n      if (ids.includes(id)) {\n        continue;\n      }\n      const getRequest = store.get(id);\n      getRequest.onsuccess = function () {\n        jobs.push(getRequest.result);\n      };\n      getRequest.onerror = function (event2) {\n        logger.error(`Request error while getting job ${id}`);\n        logger.errorObject(event2);\n      };\n    }\n    store.transaction.commit();\n  };\n  request.onerror = function (event) {\n    logger.error('Request error while dequeing');\n    logger.errorObject(event);\n  };\n  await promise;\n  return jobs;\n}\n\nexport async function getJobsWithTypeFromDatabase(type:string):Promise<Array<Job>> {\n  const store = await getReadOnlyJobsObjectStore();\n  const index = store.index('typeIndex');\n  // $FlowFixMe\n  const request = index.getAll(IDBKeyRange.only(type));\n  return new Promise((resolve, reject) => {\n    request.onsuccess = function (event) {\n      resolve(event.target.result);\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while getting jobs with type ${type} from jobs database`);\n      logger.errorObject(event);\n      reject(new Error(`Error while getting jobs with type ${type} from jobs database`));\n    };\n    store.transaction.commit();\n  });\n}\n\nexport async function getJobsInQueueFromDatabase(queueId: string):Promise<Array<Job>> { // eslint-disable-line no-underscore-dangle\n  if (typeof queueId !== 'string') {\n    throw new TypeError(`Unable to get jobs in queue from database, received invalid \"queueId\" argument type \"${typeof queueId}\"`);\n  }\n  const store = await getReadOnlyJobsObjectStore();\n  const index = store.index('queueIdIndex');\n  // $FlowFixMe\n  const request = index.getAll(IDBKeyRange.only(queueId));\n  const jobs = await new Promise((resolve, reject) => {\n    request.onsuccess = function (event) {\n      resolve(event.target.result);\n    };\n    request.onerror = function (event) {\n      logger.error('Request error while dequeing');\n      logger.errorObject(event);\n      reject(new Error('Request error while dequeing'));\n    };\n    store.transaction.commit();\n  });\n  return jobs;\n}\n\nexport async function getJobsInDatabase(jobIds: Array<number>):Promise<Array<Job>> { // eslint-disable-line no-underscore-dangle\n  if (!Array.isArray(jobIds)) {\n    throw new TypeError(`Unable to get jobs from database, received invalid \"jobIds\" argument type \"${typeof jobIds}\"`);\n  }\n  const [store, promise] = await getReadOnlyJobsObjectStoreAndTransactionPromise();\n  const jobs = [];\n  for (const jobId of jobIds) {\n    const request = store.get(jobId);\n    request.onsuccess = function () {\n      if (typeof request.result !== 'undefined') {\n        jobs.push(request.result);\n      }\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while getting job ${jobId}`);\n      logger.errorObject(event);\n    };\n  }\n  store.transaction.commit();\n  await promise;\n  return jobs;\n}\n\nexport async function getCompletedJobsCountFromDatabase(queueId: string) { // eslint-disable-line no-underscore-dangle\n  const jobs = await getCompletedJobsFromDatabase(queueId);\n  return jobs.length;\n}\n\n\nexport async function getCompletedJobsFromDatabase(queueId: string):Promise<Array<Job>> { // eslint-disable-line no-underscore-dangle\n  if (typeof queueId !== 'string') {\n    throw new TypeError(`Unable to get completed jobs database, received invalid \"queueId\" argument type \"${typeof queueId}\"`);\n  }\n  const store = await getReadOnlyJobsObjectStore();\n  const index = store.index('statusQueueIdIndex');\n  // $FlowFixMe\n  const request = index.getAll(IDBKeyRange.only([queueId, JOB_COMPLETE_STATUS]));\n  const jobs = await new Promise((resolve, reject) => {\n    request.onsuccess = function (event) {\n      resolve(event.target.result);\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while getting completed jobs for queue ${queueId}`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while getting completed jobs for queue ${queueId}`));\n    };\n    store.transaction.commit();\n  });\n  return jobs;\n}\n\n\nexport async function storeAuthDataInDatabase(id:string, data: Object) { // eslint-disable-line no-underscore-dangle\n  if (typeof id !== 'string') {\n    throw new TypeError(`Unable to store auth data in database, received invalid \"id\" argument type \"${typeof id}\"`);\n  }\n  if (typeof data !== 'object') {\n    throw new TypeError(`Unable to store auth data in database, received invalid \"data\" argument type \"${typeof data}\"`);\n  }\n  const store = await getReadWriteAuthObjectStore();\n  const request = store.put({ id, data });\n  await new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve();\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while storing auth data for ${id}`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while storing auth data for ${id}`));\n    };\n    store.transaction.commit();\n  });\n}\n\nexport async function getAuthDataFromDatabase(id:string) {\n  if (typeof id !== 'string') {\n    throw new TypeError(`Unable to store auth data in database, received invalid \"id\" argument type \"${typeof id}\"`);\n  }\n  const store = await getReadOnlyAuthObjectStore();\n  const request = store.get(id);\n  const authData = await new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve(request.result);\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error while getting auth data for ${id}`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while getting auth data for ${id}`));\n    };\n    store.transaction.commit();\n  });\n  return typeof authData !== 'undefined' ? authData.data : undefined;\n}\n\nexport async function removeAuthDataFromDatabase(id:string) {\n  if (typeof id !== 'string') {\n    throw new TypeError(`Unable to store auth data in database, received invalid \"id\" argument type \"${typeof id}\"`);\n  }\n  const store = await getReadWriteAuthObjectStore();\n  const request = store.delete(id);\n  return new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve();\n    };\n    request.onerror = function (event) {\n      logger.error(`Error while removing auth data for ${id}`);\n      logger.errorObject(event);\n      reject(new Error(`Error while removing auth data for ${id}`));\n    };\n    store.transaction.commit();\n  });\n}\n\nexport async function getQueueStatus(queueId:string) {\n  const store = await getReadOnlyJobsObjectStore();\n  const index = store.index('statusQueueIdIndex');\n  // $FlowFixMe\n  const abortedRequest = index.getAllKeys(IDBKeyRange.only([queueId, JOB_ABORTED_STATUS]));\n  // $FlowFixMe\n  const completeRequest = index.getAllKeys(IDBKeyRange.only([queueId, JOB_COMPLETE_STATUS]));\n  // $FlowFixMe\n  const pendingRequest = index.getAllKeys(IDBKeyRange.only([queueId, JOB_PENDING_STATUS]));\n  // $FlowFixMe\n  const errorRequest = index.getAllKeys(IDBKeyRange.only([queueId, JOB_ERROR_STATUS]));\n  // $FlowFixMe\n  const cleanupRequest = index.getAllKeys(IDBKeyRange.only([queueId, JOB_CLEANUP_STATUS]));\n  // $FlowFixMe\n  const cleanupAndRemoveRequest = index.getAllKeys(IDBKeyRange.only([queueId, JOB_CLEANUP_AND_REMOVE_STATUS]));\n  const abortedCountPromise = new Promise((resolve, reject) => {\n    abortedRequest.onsuccess = function (event) {\n      resolve(event.target.result.length);\n    };\n    abortedRequest.onerror = function (event) {\n      logger.error(`Request error while getting status of queue ${queueId}`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while getting status of queue ${queueId}`));\n    };\n  });\n  const completeCountPromise = new Promise((resolve, reject) => {\n    completeRequest.onsuccess = function (event) {\n      resolve(event.target.result.length);\n    };\n    completeRequest.onerror = function (event) {\n      logger.error(`Request error while getting status of queue ${queueId}`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while getting status of queue ${queueId}`));\n    };\n  });\n  const pendingCountPromise = new Promise((resolve, reject) => {\n    pendingRequest.onsuccess = function (event) {\n      resolve(event.target.result.length);\n    };\n    pendingRequest.onerror = function (event) {\n      logger.error(`Request error while getting status of queue ${queueId}`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while getting status of queue ${queueId}`));\n    };\n  });\n  const errorCountPromise = new Promise((resolve, reject) => {\n    errorRequest.onsuccess = function (event) {\n      resolve(event.target.result.length);\n    };\n    errorRequest.onerror = function (event) {\n      logger.error(`Request error while getting status of queue ${queueId}`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while getting status of queue ${queueId}`));\n    };\n  });\n  const cleanupCountPromise = new Promise((resolve, reject) => {\n    cleanupRequest.onsuccess = function (event) {\n      resolve(event.target.result.length);\n    };\n    cleanupRequest.onerror = function (event) {\n      logger.error(`Request error while getting status of queue ${queueId}`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while getting status of queue ${queueId}`));\n    };\n  });\n  const cleanupAndRemoveCountPromise = new Promise((resolve, reject) => {\n    cleanupAndRemoveRequest.onsuccess = function (event) {\n      resolve(event.target.result.length);\n    };\n    cleanupAndRemoveRequest.onerror = function (event) {\n      logger.error(`Request error while getting status of queue ${queueId}`);\n      logger.errorObject(event);\n      reject(new Error(`Request error while getting status of queue ${queueId}`));\n    };\n  });\n  store.transaction.commit();\n  const [\n    abortedCount,\n    completeCount,\n    pendingCount,\n    errorCount,\n    cleanupCount,\n    cleanupAndRemoveCount,\n  ] = await Promise.all([\n    abortedCountPromise,\n    completeCountPromise,\n    pendingCountPromise,\n    errorCountPromise,\n    cleanupCountPromise,\n    cleanupAndRemoveCountPromise,\n  ]);\n  if (abortedCount > 0 || cleanupCount > 0) {\n    return QUEUE_ERROR_STATUS;\n  }\n  if (errorCount > 0 || pendingCount > 0 || cleanupAndRemoveCount > 0) {\n    return QUEUE_PENDING_STATUS;\n  }\n  if (completeCount > 0) {\n    return QUEUE_COMPLETE_STATUS;\n  }\n  return QUEUE_EMPTY_STATUS;\n}\n\nexport async function addArgLookup(jobId:number, key:string, jsonPath:string) {\n  if (typeof jobId !== 'number') {\n    throw new TypeError(`Unable add argument lookup, received invalid \"jobId\" argument type \"${typeof jobId}\"`);\n  }\n  if (typeof key !== 'string') {\n    throw new TypeError(`Unable add argument lookup, received invalid \"key\" argument type \"${typeof key}\"`);\n  }\n  if (typeof jsonPath !== 'string') {\n    throw new TypeError(`Unable add argument lookup, received invalid \"jsonPath\" argument type \"${typeof jsonPath}\"`);\n  }\n  const store = await getReadWriteArgLookupObjectStore();\n  const request = store.put({\n    jobId,\n    key,\n    jsonPath,\n  });\n  return new Promise((resolve, reject) => {\n    request.onsuccess = function () {\n      resolve();\n    };\n    request.onerror = function (event) {\n      logger.error(`Error while adding argument lookup for job ${jobId} with key \"${key}\" and JSON path \"${jsonPath}\"`);\n      logger.errorObject(event);\n      reject(new Error(`Error while adding argument lookup for job ${jobId} with key \"${key}\" and JSON path \"${jsonPath}\"`));\n    };\n    store.transaction.commit();\n  });\n}\n\nexport async function getArgLookupJobPathMap(key:string) {\n  if (typeof key !== 'string') {\n    throw new TypeError(`Unable to lookup arguments, received invalid \"key\" argument type \"${typeof key}\"`);\n  }\n  const store = await getReadOnlyArgLookupObjectStore();\n  const index = store.index('keyIndex');\n  // $FlowFixMe\n  const request = index.getAll(IDBKeyRange.only(key));\n  return new Promise((resolve, reject) => {\n    request.onsuccess = function (event) {\n      const map: Map<number, string> = new Map(event.target.result.map((x) => [x.jobId, x.jsonPath]));\n      resolve(map);\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error looking up arguments for key ${key}`);\n      logger.errorObject(event);\n      reject(new Error(`Request error looking up arguments for key ${key}`));\n    };\n    store.transaction.commit();\n  });\n}\n\n\nexport async function markJobsWithArgLookupKeyCleanupAndRemoveInDatabase(key:string) {\n  if (typeof key !== 'string') {\n    throw new TypeError(`Unable to lookup arguments, received invalid \"key\" argument type \"${typeof key}\"`);\n  }\n  const store = await getReadOnlyArgLookupObjectStore();\n  const index = store.index('keyIndex');\n  // $FlowFixMe\n  const request = index.getAll(IDBKeyRange.only(key));\n  const jobIds = await new Promise((resolve, reject) => {\n    request.onsuccess = function (event) {\n      resolve(uniq(event.target.result.map((x) => x.jobId)));\n    };\n    request.onerror = function (event) {\n      logger.error(`Request error looking up arguments for key ${key}`);\n      logger.errorObject(event);\n      reject(new Error(`Request error looking up arguments for key ${key}`));\n    };\n    store.transaction.commit();\n  });\n  await Promise.all(jobIds.map(markJobCleanupAndRemoveInDatabase));\n}\n\nexport async function lookupArgs(key:string) {\n  const database = await databasePromise;\n  const transaction = database.transaction(['arg-lookup', 'jobs'], 'readonly', { durability: 'relaxed' });\n  const argLookupObjectStore = transaction.objectStore('arg-lookup');\n  transaction.onabort = (event) => {\n    logger.error('Read-only lookupArgs transaction was aborted');\n    logger.errorObject(event);\n  };\n  transaction.onerror = (event) => {\n    logger.error('Error in read-only lookupArgs transaction');\n    logger.errorObject(event);\n  };\n  const argLookupIndex = argLookupObjectStore.index('keyIndex');\n  // $FlowFixMe\n  const argLookupRequest = argLookupIndex.getAll(IDBKeyRange.only(key));\n  const results = [];\n  return new Promise((resolve, reject) => {\n    argLookupRequest.onsuccess = function (argLookupEvent) {\n      const argLookups = argLookupEvent.target.result;\n      if (argLookups.length === 0) {\n        resolve([]);\n        transaction.commit();\n        return;\n      }\n      const jobsObjectStore = transaction.objectStore('jobs');\n      for (let i = 0; i < argLookups.length; i += 1) {\n        const { jobId, jsonPath } = argLookups[i];\n        const jobRequest = jobsObjectStore.get(jobId);\n        jobRequest.onsuccess = function () {\n          if (typeof jobRequest.result === 'undefined') {\n            return;\n          }\n          const { args } = jobRequest.result;\n          for (const result of JSONPath({ path: jsonPath, json: args })) {\n            results.push(result);\n          }\n          if (i === argLookups.length - 1) {\n            resolve(results);\n          }\n        };\n        jobRequest.onerror = function (event) {\n          logger.error(`Request error while getting job ${jobId}`);\n          logger.errorObject(event);\n          reject(new Error(`Request error looking up jobs for key ${key}`));\n        };\n      }\n      transaction.commit();\n    };\n    argLookupRequest.onerror = function (event) {\n      logger.error(`Request error looking up arguments for key ${key}`);\n      logger.errorObject(event);\n      reject(new Error(`Request error looking up arguments for key ${key}`));\n    };\n  });\n}\n\nexport async function lookupArg(key:string) {\n  const results = await lookupArgs(key);\n  return results[0];\n}\n\nconst jobsArgLookupsAndCleanupsToRemove = [];\n\nasync function removeArgLookupsAndCleanupsForJob() {\n  if (jobsArgLookupsAndCleanupsToRemove.length === 0) {\n    return;\n  }\n  const jobIds = jobsArgLookupsAndCleanupsToRemove.slice();\n  jobsArgLookupsAndCleanupsToRemove.length = 0;\n  const database = await databasePromise;\n  const transaction = database.transaction(['cleanups', 'arg-lookup'], 'readwrite', { durability: 'relaxed' });\n  transaction.onabort = (event) => {\n    logger.error('Read-write \"cleanups\", and \"arg-lookup\" transaction was aborted');\n    logger.errorObject(event);\n  };\n  transaction.onerror = (event) => {\n    logger.error('Error in read-write \"cleanups\" and \"arg-lookup\" transaction');\n    logger.errorObject(event);\n  };\n  const cleanupsObjectStore = transaction.objectStore('cleanups');\n  const argLookupObjectStore = transaction.objectStore('arg-lookup');\n  const argLookupJobIdIndex = argLookupObjectStore.index('jobIdIndex');\n  for (const jobId of jobIds) {\n    const cleanupDeleteRequest = cleanupsObjectStore.delete(jobId);\n    cleanupDeleteRequest.onerror = function (event) {\n      logger.error(`Request error while removing cleanups for job ${jobId} from database`);\n      logger.errorObject(event);\n    };\n    // $FlowFixMe\n    const argLookupJobRequest = argLookupJobIdIndex.getAllKeys(IDBKeyRange.only(jobId));\n    argLookupJobRequest.onsuccess = function (event) {\n      for (const id of event.target.result) {\n        const argLookupDeleteRequest = argLookupObjectStore.delete(id);\n        argLookupDeleteRequest.onerror = function (deleteEvent) {\n          logger.error(`Delete request error while removing argument lookups for job ${jobId} from database`);\n          logger.errorObject(deleteEvent);\n        };\n      }\n      transaction.commit();\n    };\n    argLookupJobRequest.onerror = function (event) {\n      logger.error(`Request error while removing argument lookups for job ${jobId} from database`);\n      logger.errorObject(event);\n    };\n  }\n}\n\nexport function removeArgLookupsAndCleanupsForJobAsMicrotask(jobId:number) {\n  jobsArgLookupsAndCleanupsToRemove.push(jobId);\n  self.queueMicrotask(removeArgLookupsAndCleanupsForJob);\n}\n\nconst UNLOAD_DATA_ID = '_UNLOAD_DATA';\n\nexport function updateUnloadDataInDatabase(transform:(Object | void) => Object | void | false):Promise<Object | void> {\n  return updateMetadataInDatabase(UNLOAD_DATA_ID, transform);\n}\n\nexport function getUnloadDataFromDatabase() {\n  return getMetadataFromDatabase(UNLOAD_DATA_ID);\n}\n\nexport function clearUnloadDataInDatabase() {\n  return clearMetadataInDatabase(UNLOAD_DATA_ID);\n}\n\n"],"file":"database.js"}