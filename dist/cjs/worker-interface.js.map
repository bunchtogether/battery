{"version":3,"sources":["../../src/worker-interface.js"],"names":["BatteryQueueServiceWorkerInterface","options","logger","on","controller","navigator","serviceWorker","ServiceWorker","Error","port","MessagePort","ready","messageChannel","MessageChannel","Promise","resolve","reject","timeout","setTimeout","port1","onmessage","event","MessageEvent","data","warn","warnObject","type","clearTimeout","getController","postMessage","port2","args","Array","isArray","queueIds","jobEmitter","emit","Set","queueId","add","delete","size","handleJobAdd","handleJobDelete","handleJobUpdate","handleJobsClear","localJobEmitter","addListener","info","maxDuration","link","requestId","Math","random","removeListener","handleClearComplete","handleClearError","responseId","error","handleAbortQueueComplete","handleAbortQueueError","handleDequeueComplete","handleDequeueError","handleIdleComplete","handleIdleError","Date","now","handleGetQueuesComplete","handleGetQueuesError","qIds","handleenableStartOnJobComplete","handleenableStartOnJobError","handledisableStartOnJobComplete","handledisableStartOnJobError","EventEmitter"],"mappings":"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","sourcesContent":["// @flow\n\nimport EventEmitter from 'events';\nimport type { Logger } from './logger';\nimport makeLogger from './logger';\nimport { jobEmitter, localJobEmitter } from './database';\n\ntype Options = {\n  logger?: Logger\n};\n\n// export const canUseSyncManager = 'serviceWorker' in navigator && 'SyncManager' in window;\n\nexport default class BatteryQueueServiceWorkerInterface extends EventEmitter {\n  declare serviceWorker: ServiceWorker;\n  declare logger: Logger;\n  declare port: MessagePort | void;\n  declare queueIds: Set<string> | void;\n\n  constructor(options?: Options = {}) {\n    super();\n    this.logger = options.logger || makeLogger('Battery Queue Worker Interface');\n    // This is a no-op to prevent errors from being thrown in the browser context.\n    // Errors are logged in the worker.\n    this.on('error', () => {});\n  }\n\n  getController() {\n    const controller = navigator && navigator.serviceWorker && navigator.serviceWorker.controller;\n    if (controller instanceof ServiceWorker) {\n      return controller;\n    }\n    throw new Error('Service worker controller does not exist');\n  }\n\n  async link() {\n    if (this.port instanceof MessagePort) {\n      return this.port;\n    }\n\n    const serviceWorker = navigator && navigator.serviceWorker;\n\n    if (!serviceWorker) {\n      throw new Error('Service worker not available');\n    }\n\n    await serviceWorker.ready;\n\n    const messageChannel = new MessageChannel();\n\n    await new Promise((resolve, reject) => {\n      const timeout = setTimeout(() => {\n        messageChannel.port1.onmessage = null;\n        reject(new Error('Unable to link to service worker'));\n      }, 1000);\n      messageChannel.port1.onmessage = (event:MessageEvent) => {\n        if (!(event instanceof MessageEvent)) {\n          return;\n        }\n        const { data } = event;\n        if (!data || typeof data !== 'object') {\n          this.logger.warn('Unknown message type');\n          this.logger.warnObject(event);\n          return;\n        }\n        const { type } = data;\n        if (typeof type !== 'string') {\n          this.logger.warn('Unknown message type');\n          this.logger.warnObject(event);\n          return;\n        }\n        if (type === 'BATTERY_QUEUE_WORKER_CONFIRMATION') {\n          clearTimeout(timeout);\n          resolve();\n        }\n      };\n      const controller = this.getController();\n      // $FlowFixMe\n      controller.postMessage({ type: 'BATTERY_QUEUE_WORKER_INITIALIZATION' }, [\n        messageChannel.port2,\n      ]);\n    });\n\n\n    messageChannel.port1.onmessage = (event:MessageEvent) => {\n      if (!(event instanceof MessageEvent)) {\n        return;\n      }\n      const { data } = event;\n      if (!data || typeof data !== 'object') {\n        this.logger.warn('Invalid message data');\n        this.logger.warnObject(event);\n        return;\n      }\n      const { type, args } = data;\n      if (typeof type !== 'string') {\n        this.logger.warn('Unknown message type');\n        this.logger.warnObject(event);\n        return;\n      }\n      if (!Array.isArray(args)) {\n        this.logger.warn('Unknown arguments type');\n        this.logger.warnObject(event);\n        return;\n      }\n      const queueIds = this.queueIds;\n      switch (type) {\n        case 'jobAdd':\n          jobEmitter.emit('jobAdd', ...args);\n          return;\n        case 'jobDelete':\n          jobEmitter.emit('jobDelete', ...args);\n          return;\n        case 'jobUpdate':\n          jobEmitter.emit('jobUpdate', ...args);\n          return;\n        case 'jobsClear':\n          jobEmitter.emit('jobsClear', ...args);\n          return;\n        case 'queueActive':\n          if (queueIds instanceof Set) {\n            const queueId = args[0];\n            if (typeof queueId === 'string') {\n              queueIds.add(queueId);\n            }\n          }\n          break;\n        case 'queueInactive':\n          if (queueIds instanceof Set) {\n            const queueId = args[0];\n            if (typeof queueId === 'string') {\n              queueIds.delete(queueId);\n              if (queueIds.size === 0) {\n                delete this.queueIds;\n              }\n            }\n          }\n          break;\n        default:\n          break;\n      }\n      this.emit(type, ...args);\n    };\n    const port = messageChannel.port1;\n\n    const handleJobAdd = (...args:Array<any>) => {\n      port.postMessage({ type: 'jobAdd', args });\n    };\n    const handleJobDelete = (...args:Array<any>) => {\n      port.postMessage({ type: 'jobDelete', args });\n    };\n    const handleJobUpdate = (...args:Array<any>) => {\n      port.postMessage({ type: 'jobUpdate', args });\n    };\n    const handleJobsClear = (...args:Array<any>) => {\n      port.postMessage({ type: 'jobsClear', args });\n    };\n    localJobEmitter.addListener('jobAdd', handleJobAdd);\n    localJobEmitter.addListener('jobDelete', handleJobDelete);\n    localJobEmitter.addListener('jobUpdate', handleJobUpdate);\n    localJobEmitter.addListener('jobsClear', handleJobsClear);\n\n    this.port = messageChannel.port1;\n\n    this.logger.info('Linked to worker');\n\n    return messageChannel.port1;\n  }\n\n  async clear(maxDuration?: number = 1000) {\n    const port = await this.link();\n    await new Promise((resolve, reject) => {\n      const requestId = Math.random();\n      const timeout = setTimeout(() => {\n        this.removeListener('clearComplete', handleClearComplete);\n        this.removeListener('clearError', handleClearError);\n        reject(new Error(`Did not receive clear response within ${maxDuration}ms`));\n      }, maxDuration);\n      const handleClearComplete = (responseId:number) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('clearComplete', handleClearComplete);\n        this.removeListener('clearError', handleClearError);\n        resolve();\n      };\n      const handleClearError = (responseId:number, error:Error) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('clearComplete', handleClearComplete);\n        this.removeListener('clearError', handleClearError);\n        reject(error);\n      };\n      this.addListener('clearComplete', handleClearComplete);\n      this.addListener('clearError', handleClearError);\n      port.postMessage({ type: 'clear', args: [requestId] });\n    });\n  }\n\n  async abortQueue(queueId:string, maxDuration?: number = 1000) {\n    const port = await this.link();\n    await new Promise((resolve, reject) => {\n      const requestId = Math.random();\n      const timeout = setTimeout(() => {\n        this.removeListener('abortQueueComplete', handleAbortQueueComplete);\n        this.removeListener('abortQueueError', handleAbortQueueError);\n        reject(new Error(`Did not receive abort queue response within ${maxDuration}ms`));\n      }, maxDuration);\n      const handleAbortQueueComplete = (responseId:number) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('abortQueueComplete', handleAbortQueueComplete);\n        this.removeListener('abortQueueError', handleAbortQueueError);\n        resolve();\n      };\n      const handleAbortQueueError = (responseId:number, error:Error) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('abortQueueComplete', handleAbortQueueComplete);\n        this.removeListener('abortQueueError', handleAbortQueueError);\n        reject(error);\n      };\n      this.addListener('abortQueueComplete', handleAbortQueueComplete);\n      this.addListener('abortQueueError', handleAbortQueueError);\n      port.postMessage({ type: 'abortQueue', args: [requestId, queueId] });\n    });\n  }\n\n  async dequeue(maxDuration?: number = 1000) {\n    const port = await this.link();\n    await new Promise((resolve, reject) => {\n      const requestId = Math.random();\n      const timeout = setTimeout(() => {\n        this.removeListener('dequeueComplete', handleDequeueComplete);\n        this.removeListener('dequeueError', handleDequeueError);\n        reject(new Error(`Did not receive dequeue response within ${maxDuration}ms`));\n      }, maxDuration);\n      const handleDequeueComplete = (responseId:number) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('dequeueComplete', handleDequeueComplete);\n        this.removeListener('dequeueError', handleDequeueError);\n        resolve();\n      };\n      const handleDequeueError = (responseId:number, error:Error) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('dequeueComplete', handleDequeueComplete);\n        this.removeListener('dequeueError', handleDequeueError);\n        reject(error);\n      };\n      this.addListener('dequeueComplete', handleDequeueComplete);\n      this.addListener('dequeueError', handleDequeueError);\n      port.postMessage({ type: 'dequeue', args: [requestId] });\n    });\n  }\n\n  async onIdle(maxDuration?: number = 1000) {\n    const port = await this.link();\n    await new Promise((resolve, reject) => {\n      const requestId = Math.random();\n      const timeout = setTimeout(() => {\n        this.removeListener('idleComplete', handleIdleComplete);\n        this.removeListener('idleError', handleIdleError);\n        reject(new Error(`Did not receive idle response within ${maxDuration}ms`));\n      }, maxDuration);\n      const handleIdleComplete = (responseId:number) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('idleComplete', handleIdleComplete);\n        this.removeListener('idleError', handleIdleError);\n        resolve();\n      };\n      const handleIdleError = (responseId:number, error:Error) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('idleComplete', handleIdleComplete);\n        this.removeListener('idleError', handleIdleError);\n        reject(error);\n      };\n      this.addListener('idleComplete', handleIdleComplete);\n      this.addListener('idleError', handleIdleError);\n      port.postMessage({ type: 'idle', args: [requestId, maxDuration, Date.now()] });\n    });\n  }\n\n  async getQueueIds(maxDuration?: number = 1000) {\n    if (this.queueIds instanceof Set) {\n      return this.queueIds;\n    }\n    const port = await this.link();\n    const queueIds = await new Promise((resolve, reject) => {\n      const requestId = Math.random();\n      const timeout = setTimeout(() => {\n        this.removeListener('getQueuesComplete', handleGetQueuesComplete);\n        this.removeListener('getQueuesError', handleGetQueuesError);\n        reject(new Error(`Did not receive idle response within ${maxDuration}ms`));\n      }, maxDuration);\n      const handleGetQueuesComplete = (responseId:number, qIds:Array<string>) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('getQueuesComplete', handleGetQueuesComplete);\n        this.removeListener('getQueuesError', handleGetQueuesError);\n        resolve((new Set(qIds): Set<string>));\n      };\n      const handleGetQueuesError = (responseId:number, error:Error) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('getQueuesComplete', handleGetQueuesComplete);\n        this.removeListener('getQueuesError', handleGetQueuesError);\n        reject(error);\n      };\n      this.addListener('getQueuesComplete', handleGetQueuesComplete);\n      this.addListener('getQueuesError', handleGetQueuesError);\n      port.postMessage({ type: 'getQueueIds', args: [requestId] });\n    });\n    if (queueIds.size > 0) {\n      this.queueIds = queueIds;\n    }\n    return queueIds;\n  }\n\n  async enableStartOnJob(maxDuration?: number = 1000) {\n    const port = await this.link();\n    await new Promise((resolve, reject) => {\n      const requestId = Math.random();\n      const timeout = setTimeout(() => {\n        this.removeListener('enableStartOnJobComplete', handleenableStartOnJobComplete);\n        this.removeListener('enableStartOnJobError', handleenableStartOnJobError);\n        reject(new Error(`Did not receive enableStartOnJob response within ${maxDuration}ms`));\n      }, maxDuration);\n      const handleenableStartOnJobComplete = (responseId:number) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('enableStartOnJobComplete', handleenableStartOnJobComplete);\n        this.removeListener('enableStartOnJobError', handleenableStartOnJobError);\n        resolve();\n      };\n      const handleenableStartOnJobError = (responseId:number, error:Error) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('enableStartOnJobComplete', handleenableStartOnJobComplete);\n        this.removeListener('enableStartOnJobError', handleenableStartOnJobError);\n        reject(error);\n      };\n      this.addListener('enableStartOnJobComplete', handleenableStartOnJobComplete);\n      this.addListener('enableStartOnJobError', handleenableStartOnJobError);\n      port.postMessage({ type: 'enableStartOnJob', args: [requestId] });\n    });\n  }\n\n  async disableStartOnJob(maxDuration?: number = 1000) {\n    const port = await this.link();\n    await new Promise((resolve, reject) => {\n      const requestId = Math.random();\n      const timeout = setTimeout(() => {\n        this.removeListener('disableStartOnJobComplete', handledisableStartOnJobComplete);\n        this.removeListener('disableStartOnJobError', handledisableStartOnJobError);\n        reject(new Error(`Did not receive disableStartOnJob response within ${maxDuration}ms`));\n      }, maxDuration);\n      const handledisableStartOnJobComplete = (responseId:number) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('disableStartOnJobComplete', handledisableStartOnJobComplete);\n        this.removeListener('disableStartOnJobError', handledisableStartOnJobError);\n        resolve();\n      };\n      const handledisableStartOnJobError = (responseId:number, error:Error) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('disableStartOnJobComplete', handledisableStartOnJobComplete);\n        this.removeListener('disableStartOnJobError', handledisableStartOnJobError);\n        reject(error);\n      };\n      this.addListener('disableStartOnJobComplete', handledisableStartOnJobComplete);\n      this.addListener('disableStartOnJobError', handledisableStartOnJobError);\n      port.postMessage({ type: 'disableStartOnJob', args: [requestId] });\n    });\n  }\n}\n"],"file":"worker-interface.js"}