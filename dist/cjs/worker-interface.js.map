{"version":3,"sources":["../../src/worker-interface.js"],"names":["canUseSyncManager","navigator","window","RedundantServiceWorkerError","Error","BatteryQueueServiceWorkerInterface","options","logger","on","isSyncing","serviceWorker","ready","registration","controller","state","hadControllerChange","info","Promise","resolve","timeout","setTimeout","removeEventListener","handleStateChange","handleControllerChange","clearTimeout","addEventListener","getRegistrationAndController","linkPromise","error","errorStack","port","MessagePort","postMessage","type","args","Math","random","clearInterval","portHeartbeatInterval","handlePortHeartbeat","removeListener","handleBeforeUnload","capture","handleJobAdd","portHandleJobAdd","localJobEmitter","handleJobDelete","portHandleJobDelete","handleJobUpdate","portHandleJobUpdate","handleJobsClear","portHandleJobsClear","close","onmessage","emit","maxDuration","requestId","handleUnlinkComplete","handleUnlinkError","responseId","addListener","_link","finally","messageChannel","MessageChannel","port1","handleUpdateFound","installingWorker","installing","activeWorker","active","unlink","warn","reject","handleStateChangeBeforeLink","event","MessageEvent","data","warnObject","port2","Array","isArray","queueIds","jobEmitter","cleanup","Set","queueId","add","delete","size","didReceiveHeartbeat","missedHeartbeatCount","sendHeartbeat","setInterval","sync","register","link","handleClearComplete","handleClearError","handleUpdateDurationEstimatesComplete","handleUpdateDurationEstimatesError","handleAbortQueueComplete","handleAbortQueueError","id","handleAbortAndRemoveQueueJobsGreaterThanIdComplete","handleAbortAndRemoveQueueJobsGreaterThanIdError","handleRetryQueueComplete","handleRetryQueueError","handleDequeueComplete","handleDequeueError","handleRunUnloadHandlersComplete","handleRunUnloadHandlersError","handleIdleComplete","handleIdleError","Date","now","handleGetQueuesComplete","handleGetQueuesError","qIds","handleEnableStartOnJobComplete","handleEnableStartOnJobError","handledisableStartOnJobComplete","handledisableStartOnJobError","handleGetDurationEstimateComplete","handleGetDurationEstimateError","values","handleGetCurrentJobTypeComplete","handleGetCurrentJobTypeError","handleOnIdleSync","handleIdle","handleUnlink","EventEmitter"],"mappings":"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","sourcesContent":["// @flow\n\nimport EventEmitter from 'events';\nimport type { Logger } from './logger';\nimport makeLogger from './logger';\nimport { jobEmitter, localJobEmitter } from './database';\n\ntype Options = {\n  logger?: Logger\n};\n\nconst canUseSyncManager = 'serviceWorker' in navigator && 'SyncManager' in window;\n\nclass RedundantServiceWorkerError extends Error {}\n\nexport default class BatteryQueueServiceWorkerInterface extends EventEmitter {\n  declare serviceWorker: ServiceWorker;\n  declare logger: Logger;\n  declare port: MessagePort | void;\n  declare portHeartbeatInterval: void | IntervalID;\n  declare handlePortHeartbeat: void | () => void;\n  declare handleBeforeUnload: void | () => void;\n  declare queueIds: Set<string> | void;\n  declare isSyncing: boolean;\n  declare handleJobAdd: void | () => void;\n  declare linkPromise: void | Promise<MessagePort>;\n  declare portHandleJobAdd: (...args:Array<any>) => void;\n  declare portHandleJobDelete: (...args:Array<any>) => void;\n  declare portHandleJobUpdate: (...args:Array<any>) => void;\n  declare portHandleJobsClear: (...args:Array<any>) => void;\n\n  constructor(options?: Options = {}) {\n    super();\n    this.logger = options.logger || makeLogger('Battery Queue Worker Interface');\n    // This is a no-op to prevent errors from being thrown in the browser context.\n    // Errors are logged in the worker.\n    this.on('error', () => {});\n    this.isSyncing = false;\n  }\n\n  async getRegistrationAndController() {\n    const serviceWorker = navigator && navigator.serviceWorker;\n\n    if (!serviceWorker) {\n      throw new Error('Service worker not available');\n    }\n\n    const registration = await serviceWorker.ready;\n\n    const { controller } = serviceWorker;\n\n    if (!controller) {\n      throw new Error('Service worker controller not available');\n    }\n\n    while (controller.state !== 'activated') {\n      const state = controller.state;\n      let hadControllerChange = false;\n      this.logger.info(`Service worker in \"${state}\" state, waiting for state or controller change`);\n      await new Promise((resolve) => {\n        const timeout = setTimeout(() => {\n          controller.removeEventListener('statechange', handleStateChange);\n          serviceWorker.removeEventListener('controllerchange', handleControllerChange);\n          throw new Error(`Unable to get service worker controller, state did not change from \"${state}\" within 5000ms`);\n        }, 5000);\n        const handleStateChange = () => {\n          if (controller.state !== 'activated') {\n            return;\n          }\n          clearTimeout(timeout);\n          controller.removeEventListener('statechange', handleStateChange);\n          serviceWorker.removeEventListener('controllerchange', handleControllerChange);\n          resolve();\n        };\n        const handleControllerChange = () => {\n          hadControllerChange = true;\n          clearTimeout(timeout);\n          controller.removeEventListener('statechange', handleStateChange);\n          serviceWorker.removeEventListener('controllerchange', handleControllerChange);\n          resolve();\n        };\n        serviceWorker.addEventListener('controllerchange', handleControllerChange);\n        controller.addEventListener('statechange', handleStateChange);\n      });\n      if (hadControllerChange) {\n        return this.getRegistrationAndController();\n      }\n    }\n    return [registration, controller];\n  }\n\n  async cleanup() {\n    this.logger.info('Cleaning up');\n    const linkPromise = this.linkPromise;\n    if (typeof linkPromise !== 'undefined') {\n      try {\n        await linkPromise;\n      } catch (error) {\n        this.logger.error('Link promise error while waiting to cleanup');\n        this.logger.errorStack(error);\n      }\n    }\n    const port = this.port;\n    if (!(port instanceof MessagePort)) {\n      return;\n    }\n    port.postMessage({ type: 'unlink', args: [Math.random()] });\n    delete this.port;\n    clearInterval(this.portHeartbeatInterval);\n    delete this.portHeartbeatInterval;\n    const handlePortHeartbeat = this.handlePortHeartbeat;\n    if (typeof handlePortHeartbeat === 'function') {\n      this.removeListener('heartbeat', this.handlePortHeartbeat);\n    }\n    const handleBeforeUnload = this.handleBeforeUnload;\n    if (typeof handlePortHeartbeat === 'function') {\n      window.removeEventListener('beforeunload', handleBeforeUnload, { capture: true });\n    }\n    const handleJobAdd = this.portHandleJobAdd;\n    if (typeof handleJobAdd === 'function') {\n      localJobEmitter.removeListener('jobAdd', handleJobAdd);\n    }\n    const handleJobDelete = this.portHandleJobDelete;\n    if (typeof handleJobDelete === 'function') {\n      localJobEmitter.removeListener('jobDelete', handleJobDelete);\n    }\n    const handleJobUpdate = this.portHandleJobUpdate;\n    if (typeof handleJobUpdate === 'function') {\n      localJobEmitter.removeListener('jobDelete', handleJobUpdate);\n    }\n    const handleJobsClear = this.portHandleJobsClear;\n    if (typeof handleJobsClear === 'function') {\n      localJobEmitter.removeListener('jobsClear', handleJobsClear);\n    }\n    try {\n      port.close();\n    } catch (error) {\n      this.logger.error('Error while closing MessageChannel port during cleanup');\n      this.logger.errorStack(error);\n    }\n    port.onmessage = null;\n    this.emit('unlink');\n    this.logger.info('Unlinked after close');\n  }\n\n  async unlink(maxDuration?: number = 60000) {\n    const linkPromise = this.linkPromise;\n    if (typeof linkPromise !== 'undefined') {\n      try {\n        await linkPromise;\n      } catch (error) {\n        this.logger.error('Link promise error while waiting to unlink');\n        this.logger.errorStack(error);\n      }\n    }\n    const port = this.port;\n    if (!(port instanceof MessagePort)) {\n      return;\n    }\n    delete this.port;\n    clearInterval(this.portHeartbeatInterval);\n    delete this.portHeartbeatInterval;\n    const handlePortHeartbeat = this.handlePortHeartbeat;\n    if (typeof handlePortHeartbeat === 'function') {\n      this.removeListener('heartbeat', this.handlePortHeartbeat);\n    }\n    const handleBeforeUnload = this.handleBeforeUnload;\n    if (typeof handlePortHeartbeat === 'function') {\n      window.removeEventListener('beforeunload', handleBeforeUnload, { capture: true });\n    }\n    const handleJobAdd = this.portHandleJobAdd;\n    if (typeof handleJobAdd === 'function') {\n      localJobEmitter.removeListener('jobAdd', handleJobAdd);\n    }\n    const handleJobDelete = this.portHandleJobDelete;\n    if (typeof handleJobDelete === 'function') {\n      localJobEmitter.removeListener('jobDelete', handleJobDelete);\n    }\n    const handleJobUpdate = this.portHandleJobUpdate;\n    if (typeof handleJobUpdate === 'function') {\n      localJobEmitter.removeListener('jobDelete', handleJobUpdate);\n    }\n    const handleJobsClear = this.portHandleJobsClear;\n    if (typeof handleJobsClear === 'function') {\n      localJobEmitter.removeListener('jobsClear', handleJobsClear);\n    }\n\n    await new Promise((resolve) => {\n      const requestId = Math.random();\n      const timeout = setTimeout(() => {\n        this.removeListener('unlinkComplete', handleUnlinkComplete);\n        this.removeListener('unlinkError', handleUnlinkError);\n        this.logger.error(`Did not receive unlink response within ${maxDuration}ms`);\n        resolve();\n      }, maxDuration);\n      const handleUnlinkComplete = (responseId:number) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('unlinkComplete', handleUnlinkComplete);\n        this.removeListener('unlinkError', handleUnlinkError);\n        resolve();\n      };\n      const handleUnlinkError = (responseId:number, error:Error) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('unlinkComplete', handleUnlinkComplete);\n        this.removeListener('unlinkError', handleUnlinkError);\n        this.logger.error('Received unlink error');\n        this.logger.errorStack(error);\n        resolve();\n      };\n      this.addListener('unlinkComplete', handleUnlinkComplete);\n      this.addListener('unlinkError', handleUnlinkError);\n      port.postMessage({ type: 'unlink', args: [requestId] });\n    });\n    try {\n      port.close();\n    } catch (error) {\n      this.logger.error('Error while closing MessageChannel port during unlink');\n      this.logger.errorStack(error);\n    }\n    port.onmessage = null;\n    this.emit('unlink');\n    this.logger.info('Unlinked');\n  }\n\n  async link() {\n    if (this.port instanceof MessagePort) {\n      return this.port;\n    }\n    if (this.linkPromise) {\n      return this.linkPromise;\n    }\n    const linkPromise = this._link().finally(() => { // eslint-disable-line no-underscore-dangle\n      delete this.linkPromise;\n    });\n    this.linkPromise = linkPromise;\n    return linkPromise;\n  }\n\n  async _link() {\n    if (this.port instanceof MessagePort) {\n      return this.port;\n    }\n\n    const [registration, controller] = await this.getRegistrationAndController();\n\n    const messageChannel = new MessageChannel();\n\n    const port = messageChannel.port1;\n    this.port = messageChannel.port1;\n\n    const handleUpdateFound = async () => {\n      const installingWorker = registration.installing;\n      const activeWorker = registration.active;\n      if (!installingWorker) {\n        return;\n      }\n      if (!activeWorker) {\n        return;\n      }\n      registration.removeEventListener('updatefound', handleUpdateFound);\n      controller.removeEventListener('statechange', handleStateChange);\n      try {\n        await this.unlink();\n        this.logger.info('Unlinked service worker after detecting new service worker');\n      } catch (error) {\n        this.logger.error('Unable to unlink service worker after detecting new service worker');\n        this.logger.errorStack(error);\n      }\n    };\n\n    const handleStateChange = async () => {\n      this.logger.warn(`Service worker state change to ${controller.state}`);\n      if (controller.state !== 'redundant') {\n        return;\n      }\n      registration.removeEventListener('updatefound', handleUpdateFound);\n      controller.removeEventListener('statechange', handleStateChange);\n      try {\n        await this.unlink();\n        this.logger.info('Unlinked service worker after detecting redundant service worker');\n      } catch (error) {\n        this.logger.error('Unable to unlink service worker after detecting redundant service worker');\n        this.logger.errorStack(error);\n      }\n    };\n\n    registration.addEventListener('updatefound', handleUpdateFound);\n    controller.addEventListener('statechange', handleStateChange);\n\n    try {\n      await new Promise((resolve, reject) => {\n        const timeout = setTimeout(() => {\n          messageChannel.port1.onmessage = null;\n          controller.removeEventListener('statechange', handleStateChangeBeforeLink);\n          reject(new Error('Unable to link to service worker'));\n        }, 1000);\n        const handleStateChangeBeforeLink = () => {\n          if (controller.state !== 'redundant') {\n            return;\n          }\n          clearTimeout(timeout);\n          controller.removeEventListener('statechange', handleStateChangeBeforeLink);\n          reject(new RedundantServiceWorkerError('Service worker in redundant state'));\n        };\n        controller.addEventListener('statechange', handleStateChangeBeforeLink);\n        messageChannel.port1.onmessage = (event:MessageEvent) => {\n          if (!(event instanceof MessageEvent)) {\n            return;\n          }\n          const { data } = event;\n          if (!data || typeof data !== 'object') {\n            this.logger.warn('Unknown message type');\n            this.logger.warnObject(event);\n            return;\n          }\n          const { type } = data;\n          if (typeof type !== 'string') {\n            this.logger.warn('Unknown message type');\n            this.logger.warnObject(event);\n            return;\n          }\n          if (type === 'BATTERY_QUEUE_WORKER_CONFIRMATION') {\n            clearTimeout(timeout);\n            controller.removeEventListener('statechange', handleStateChangeBeforeLink);\n            resolve();\n          }\n        };\n        // $FlowFixMe\n        controller.postMessage({ type: 'BATTERY_QUEUE_WORKER_INITIALIZATION' }, [\n          messageChannel.port2,\n        ]);\n      });\n    } catch (error) {\n      registration.removeEventListener('updatefound', handleUpdateFound);\n      controller.removeEventListener('statechange', handleStateChange);\n      if (error instanceof RedundantServiceWorkerError) {\n        return messageChannel.port1;\n      }\n      throw error;\n    }\n\n    messageChannel.port1.onmessage = (event:MessageEvent) => {\n      if (!(event instanceof MessageEvent)) {\n        return;\n      }\n      const { data } = event;\n      if (!data || typeof data !== 'object') {\n        this.logger.warn('Invalid message data');\n        this.logger.warnObject(event);\n        return;\n      }\n      const { type, args } = data;\n      if (typeof type !== 'string') {\n        this.logger.warn('Unknown message type');\n        this.logger.warnObject(event);\n        return;\n      }\n      if (!Array.isArray(args)) {\n        this.logger.warn('Unknown arguments type');\n        this.logger.warnObject(event);\n        return;\n      }\n      const queueIds = this.queueIds;\n      switch (type) {\n        case 'jobAdd':\n          jobEmitter.emit('jobAdd', ...args);\n          return;\n        case 'jobDelete':\n          jobEmitter.emit('jobDelete', ...args);\n          return;\n        case 'jobUpdate':\n          jobEmitter.emit('jobUpdate', ...args);\n          return;\n        case 'jobsClear':\n          jobEmitter.emit('jobsClear', ...args);\n          return;\n        case 'closed':\n          this.logger.warn('Received unexpected \"closed\" event');\n          this.cleanup();\n          return;\n        case 'queueActive':\n          if (queueIds instanceof Set) {\n            const queueId = args[0];\n            if (typeof queueId === 'string') {\n              queueIds.add(queueId);\n            }\n          }\n          break;\n        case 'queueInactive':\n          if (queueIds instanceof Set) {\n            const queueId = args[0];\n            if (typeof queueId === 'string') {\n              queueIds.delete(queueId);\n              if (queueIds.size === 0) {\n                delete this.queueIds;\n              }\n            }\n          }\n          break;\n        default:\n          break;\n      }\n      this.emit(type, ...args);\n    };\n\n\n    const handleJobAdd = (...args:Array<any>) => {\n      port.postMessage({ type: 'jobAdd', args });\n    };\n    const handleJobDelete = (...args:Array<any>) => {\n      port.postMessage({ type: 'jobDelete', args });\n    };\n    const handleJobUpdate = (...args:Array<any>) => {\n      port.postMessage({ type: 'jobUpdate', args });\n    };\n    const handleJobsClear = (...args:Array<any>) => {\n      port.postMessage({ type: 'jobsClear', args });\n    };\n\n    localJobEmitter.addListener('jobAdd', handleJobAdd);\n    localJobEmitter.addListener('jobDelete', handleJobDelete);\n    localJobEmitter.addListener('jobUpdate', handleJobUpdate);\n    localJobEmitter.addListener('jobsClear', handleJobsClear);\n\n    this.portHandleJobAdd = handleJobAdd;\n    this.portHandleJobDelete = handleJobDelete;\n    this.portHandleJobUpdate = handleJobUpdate;\n    this.portHandleJobsClear = handleJobsClear;\n\n    let didReceiveHeartbeat = true;\n    let missedHeartbeatCount = 0;\n\n    const handlePortHeartbeat = () => {\n      missedHeartbeatCount = 0;\n      didReceiveHeartbeat = true;\n    };\n    this.addListener('heartbeat', handlePortHeartbeat);\n    this.handlePortHeartbeat = handlePortHeartbeat;\n\n    const sendHeartbeat = () => {\n      if (!didReceiveHeartbeat) {\n        missedHeartbeatCount += 1;\n        this.logger.error(`Did not receive ${missedHeartbeatCount} port ${missedHeartbeatCount === 1 ? 'heartbeat' : 'heartbeats'}`);\n        if (missedHeartbeatCount > 2) {\n          this.cleanup();\n          return;\n        }\n      }\n      didReceiveHeartbeat = false;\n      port.postMessage({ type: 'heartbeat', args: [10000] });\n    };\n    this.portHeartbeatInterval = setInterval(sendHeartbeat, 10000);\n    sendHeartbeat();\n    const handleBeforeUnload = () => {\n      if (!canUseSyncManager) {\n        return;\n      }\n      // $FlowFixMe\n      registration.sync.register('unload');\n    };\n    this.handleBeforeUnload = handleBeforeUnload;\n    window.addEventListener('beforeunload', handleBeforeUnload, { capture: true });\n\n    this.logger.info('Linked to worker');\n    this.emit('link');\n    return messageChannel.port1;\n  }\n\n  async clear(maxDuration?: number = 1000) {\n    const port = await this.link();\n    await new Promise((resolve, reject) => {\n      const requestId = Math.random();\n      const timeout = setTimeout(() => {\n        this.removeListener('clearComplete', handleClearComplete);\n        this.removeListener('clearError', handleClearError);\n        reject(new Error(`Did not receive clear response within ${maxDuration}ms`));\n      }, maxDuration);\n      const handleClearComplete = (responseId:number) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('clearComplete', handleClearComplete);\n        this.removeListener('clearError', handleClearError);\n        resolve();\n      };\n      const handleClearError = (responseId:number, error:Error) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('clearComplete', handleClearComplete);\n        this.removeListener('clearError', handleClearError);\n        reject(error);\n      };\n      this.addListener('clearComplete', handleClearComplete);\n      this.addListener('clearError', handleClearError);\n      port.postMessage({ type: 'clear', args: [requestId] });\n    });\n  }\n\n  async updateDurationEstimates(maxDuration?: number = 1000) {\n    const port = await this.link();\n    await new Promise((resolve, reject) => {\n      const requestId = Math.random();\n      const timeout = setTimeout(() => {\n        this.removeListener('updateDurationEstimatesComplete', handleUpdateDurationEstimatesComplete);\n        this.removeListener('updateDurationEstimatesError', handleUpdateDurationEstimatesError);\n        reject(new Error(`Did not receive update duration estimates response within ${maxDuration}ms`));\n      }, maxDuration);\n      const handleUpdateDurationEstimatesComplete = (responseId:number) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('updateDurationEstimatesComplete', handleUpdateDurationEstimatesComplete);\n        this.removeListener('updateDurationEstimatesError', handleUpdateDurationEstimatesError);\n        resolve();\n      };\n      const handleUpdateDurationEstimatesError = (responseId:number, error:Error) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('updateDurationEstimatesComplete', handleUpdateDurationEstimatesComplete);\n        this.removeListener('updateDurationEstimatesError', handleUpdateDurationEstimatesError);\n        reject(error);\n      };\n      this.addListener('updateDurationEstimatesComplete', handleUpdateDurationEstimatesComplete);\n      this.addListener('updateDurationEstimatesError', handleUpdateDurationEstimatesError);\n      port.postMessage({ type: 'updateDurationEstimates', args: [requestId] });\n    });\n  }\n\n  async abortQueue(queueId:string, maxDuration?: number = 1000) {\n    const port = await this.link();\n    await new Promise((resolve, reject) => {\n      const requestId = Math.random();\n      const timeout = setTimeout(() => {\n        this.removeListener('abortQueueComplete', handleAbortQueueComplete);\n        this.removeListener('abortQueueError', handleAbortQueueError);\n        reject(new Error(`Did not receive abort queue response within ${maxDuration}ms`));\n      }, maxDuration);\n      const handleAbortQueueComplete = (responseId:number) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('abortQueueComplete', handleAbortQueueComplete);\n        this.removeListener('abortQueueError', handleAbortQueueError);\n        resolve();\n      };\n      const handleAbortQueueError = (responseId:number, error:Error) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('abortQueueComplete', handleAbortQueueComplete);\n        this.removeListener('abortQueueError', handleAbortQueueError);\n        reject(error);\n      };\n      this.addListener('abortQueueComplete', handleAbortQueueComplete);\n      this.addListener('abortQueueError', handleAbortQueueError);\n      port.postMessage({ type: 'abortQueue', args: [requestId, queueId] });\n    });\n  }\n\n  async abortAndRemoveQueue(queueId:string, maxDuration?: number = 1000) {\n    const port = await this.link();\n    await new Promise((resolve, reject) => {\n      const requestId = Math.random();\n      const timeout = setTimeout(() => {\n        this.removeListener('abortAndRemoveQueueComplete', handleAbortQueueComplete);\n        this.removeListener('abortAndRemoveQueueError', handleAbortQueueError);\n        reject(new Error(`Did not receive abort queue response within ${maxDuration}ms`));\n      }, maxDuration);\n      const handleAbortQueueComplete = (responseId:number) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('abortAndRemoveQueueComplete', handleAbortQueueComplete);\n        this.removeListener('abortAndRemoveQueueError', handleAbortQueueError);\n        resolve();\n      };\n      const handleAbortQueueError = (responseId:number, error:Error) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('abortAndRemoveQueueComplete', handleAbortQueueComplete);\n        this.removeListener('abortAndRemoveQueueError', handleAbortQueueError);\n        reject(error);\n      };\n      this.addListener('abortAndRemoveQueueComplete', handleAbortQueueComplete);\n      this.addListener('abortAndRemoveQueueError', handleAbortQueueError);\n      port.postMessage({ type: 'abortAndRemoveQueue', args: [requestId, queueId] });\n    });\n  }\n\n  async abortAndRemoveQueueJobsGreaterThanId(queueId:string, id:number, maxDuration?: number = 1000) {\n    const port = await this.link();\n    await new Promise((resolve, reject) => {\n      const requestId = Math.random();\n      const timeout = setTimeout(() => {\n        this.removeListener('abortAndRemoveQueueJobsGreaterThanIdComplete', handleAbortAndRemoveQueueJobsGreaterThanIdComplete);\n        this.removeListener('abortAndRemoveQueueJobsGreaterThanIdError', handleAbortAndRemoveQueueJobsGreaterThanIdError);\n        reject(new Error(`Did not receive abort queue response within ${maxDuration}ms`));\n      }, maxDuration);\n      const handleAbortAndRemoveQueueJobsGreaterThanIdComplete = (responseId:number) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('abortAndRemoveQueueJobsGreaterThanIdComplete', handleAbortAndRemoveQueueJobsGreaterThanIdComplete);\n        this.removeListener('abortAndRemoveQueueJobsGreaterThanIdError', handleAbortAndRemoveQueueJobsGreaterThanIdError);\n        resolve();\n      };\n      const handleAbortAndRemoveQueueJobsGreaterThanIdError = (responseId:number, error:Error) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('abortAndRemoveQueueJobsGreaterThanIdComplete', handleAbortAndRemoveQueueJobsGreaterThanIdComplete);\n        this.removeListener('abortAndRemoveQueueJobsGreaterThanIdError', handleAbortAndRemoveQueueJobsGreaterThanIdError);\n        reject(error);\n      };\n      this.addListener('abortAndRemoveQueueJobsGreaterThanIdComplete', handleAbortAndRemoveQueueJobsGreaterThanIdComplete);\n      this.addListener('abortAndRemoveQueueJobsGreaterThanIdError', handleAbortAndRemoveQueueJobsGreaterThanIdError);\n      port.postMessage({ type: 'abortAndRemoveQueueJobsGreaterThanId', args: [requestId, queueId, id] });\n    });\n  }\n\n  async retryQueue(queueId:string, maxDuration?: number = 1000) {\n    const port = await this.link();\n    await new Promise((resolve, reject) => {\n      const requestId = Math.random();\n      const timeout = setTimeout(() => {\n        this.removeListener('retryQueueComplete', handleRetryQueueComplete);\n        this.removeListener('retryQueueError', handleRetryQueueError);\n        reject(new Error(`Did not receive retry queue response within ${maxDuration}ms`));\n      }, maxDuration);\n      const handleRetryQueueComplete = (responseId:number) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('retryQueueComplete', handleRetryQueueComplete);\n        this.removeListener('retryQueueError', handleRetryQueueError);\n        resolve();\n      };\n      const handleRetryQueueError = (responseId:number, error:Error) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('retryQueueComplete', handleRetryQueueComplete);\n        this.removeListener('retryQueueError', handleRetryQueueError);\n        reject(error);\n      };\n      this.addListener('retryQueueComplete', handleRetryQueueComplete);\n      this.addListener('retryQueueError', handleRetryQueueError);\n      port.postMessage({ type: 'retryQueue', args: [requestId, queueId] });\n    });\n  }\n\n  async dequeue(maxDuration?: number = 1000) {\n    const port = await this.link();\n    await new Promise((resolve, reject) => {\n      const requestId = Math.random();\n      const timeout = setTimeout(() => {\n        this.removeListener('dequeueComplete', handleDequeueComplete);\n        this.removeListener('dequeueError', handleDequeueError);\n        reject(new Error(`Did not receive dequeue response within ${maxDuration}ms`));\n      }, maxDuration);\n      const handleDequeueComplete = (responseId:number) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('dequeueComplete', handleDequeueComplete);\n        this.removeListener('dequeueError', handleDequeueError);\n        resolve();\n      };\n      const handleDequeueError = (responseId:number, error:Error) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('dequeueComplete', handleDequeueComplete);\n        this.removeListener('dequeueError', handleDequeueError);\n        reject(error);\n      };\n      this.addListener('dequeueComplete', handleDequeueComplete);\n      this.addListener('dequeueError', handleDequeueError);\n      port.postMessage({ type: 'dequeue', args: [requestId] });\n    });\n  }\n\n  async runUnloadHandlers(maxDuration?: number = 10000) {\n    const port = await this.link();\n    await new Promise((resolve, reject) => {\n      const requestId = Math.random();\n      const timeout = setTimeout(() => {\n        this.removeListener('runUnloadHandlersComplete', handleRunUnloadHandlersComplete);\n        this.removeListener('runUnloadHandlersError', handleRunUnloadHandlersError);\n        reject(new Error(`Did not receive run unload handlers response within ${maxDuration}ms`));\n      }, maxDuration);\n      const handleRunUnloadHandlersComplete = (responseId:number) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('runUnloadHandlersComplete', handleRunUnloadHandlersComplete);\n        this.removeListener('runUnloadHandlersError', handleRunUnloadHandlersError);\n        resolve();\n      };\n      const handleRunUnloadHandlersError = (responseId:number, error:Error) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('runUnloadHandlersComplete', handleRunUnloadHandlersComplete);\n        this.removeListener('runUnloadHandlersError', handleRunUnloadHandlersError);\n        reject(error);\n      };\n      this.addListener('runUnloadHandlersComplete', handleRunUnloadHandlersComplete);\n      this.addListener('runUnloadHandlersError', handleRunUnloadHandlersError);\n      port.postMessage({ type: 'runUnloadHandlers', args: [requestId] });\n    });\n  }\n\n  async onIdle(maxDuration?: number = 1000) {\n    const port = await this.link();\n    await new Promise((resolve, reject) => {\n      const requestId = Math.random();\n      const timeout = setTimeout(() => {\n        this.removeListener('idleComplete', handleIdleComplete);\n        this.removeListener('idleError', handleIdleError);\n        reject(new Error(`Did not receive idle response within ${maxDuration}ms`));\n      }, maxDuration);\n      const handleIdleComplete = (responseId:number) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('idleComplete', handleIdleComplete);\n        this.removeListener('idleError', handleIdleError);\n        resolve();\n      };\n      const handleIdleError = (responseId:number, error:Error) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('idleComplete', handleIdleComplete);\n        this.removeListener('idleError', handleIdleError);\n        reject(error);\n      };\n      this.addListener('idleComplete', handleIdleComplete);\n      this.addListener('idleError', handleIdleError);\n      port.postMessage({ type: 'idle', args: [requestId, maxDuration, Date.now()] });\n    });\n  }\n\n  async getQueueIds(maxDuration?: number = 1000) {\n    if (this.queueIds instanceof Set) {\n      return this.queueIds;\n    }\n    const port = await this.link();\n    const queueIds = await new Promise((resolve, reject) => {\n      const requestId = Math.random();\n      const timeout = setTimeout(() => {\n        this.removeListener('getQueuesComplete', handleGetQueuesComplete);\n        this.removeListener('getQueuesError', handleGetQueuesError);\n        reject(new Error(`Did not receive idle response within ${maxDuration}ms`));\n      }, maxDuration);\n      const handleGetQueuesComplete = (responseId:number, qIds:Array<string>) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('getQueuesComplete', handleGetQueuesComplete);\n        this.removeListener('getQueuesError', handleGetQueuesError);\n        resolve((new Set(qIds): Set<string>));\n      };\n      const handleGetQueuesError = (responseId:number, error:Error) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('getQueuesComplete', handleGetQueuesComplete);\n        this.removeListener('getQueuesError', handleGetQueuesError);\n        reject(error);\n      };\n      this.addListener('getQueuesComplete', handleGetQueuesComplete);\n      this.addListener('getQueuesError', handleGetQueuesError);\n      port.postMessage({ type: 'getQueueIds', args: [requestId] });\n    });\n    if (queueIds.size > 0) {\n      this.queueIds = queueIds;\n    }\n    return queueIds;\n  }\n\n  async enableStartOnJob(maxDuration?: number = 1000) {\n    const port = await this.link();\n    await new Promise((resolve, reject) => {\n      const requestId = Math.random();\n      const timeout = setTimeout(() => {\n        this.removeListener('enableStartOnJobComplete', handleEnableStartOnJobComplete);\n        this.removeListener('enableStartOnJobError', handleEnableStartOnJobError);\n        reject(new Error(`Did not receive enableStartOnJob response within ${maxDuration}ms`));\n      }, maxDuration);\n      const handleEnableStartOnJobComplete = (responseId:number) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('enableStartOnJobComplete', handleEnableStartOnJobComplete);\n        this.removeListener('enableStartOnJobError', handleEnableStartOnJobError);\n        resolve();\n      };\n      const handleEnableStartOnJobError = (responseId:number, error:Error) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('enableStartOnJobComplete', handleEnableStartOnJobComplete);\n        this.removeListener('enableStartOnJobError', handleEnableStartOnJobError);\n        reject(error);\n      };\n      this.addListener('enableStartOnJobComplete', handleEnableStartOnJobComplete);\n      this.addListener('enableStartOnJobError', handleEnableStartOnJobError);\n      port.postMessage({ type: 'enableStartOnJob', args: [requestId] });\n    });\n    const handleJobAdd = () => {\n      this.sync();\n    };\n    jobEmitter.addListener('jobAdd', handleJobAdd);\n    this.handleJobAdd = handleJobAdd;\n  }\n\n  async disableStartOnJob(maxDuration?: number = 1000) {\n    const handleJobAdd = this.handleJobAdd;\n    if (typeof handleJobAdd === 'function') {\n      jobEmitter.removeListener('jobAdd', handleJobAdd);\n    }\n    const port = await this.link();\n    await new Promise((resolve, reject) => {\n      const requestId = Math.random();\n      const timeout = setTimeout(() => {\n        this.removeListener('disableStartOnJobComplete', handledisableStartOnJobComplete);\n        this.removeListener('disableStartOnJobError', handledisableStartOnJobError);\n        reject(new Error(`Did not receive disableStartOnJob response within ${maxDuration}ms`));\n      }, maxDuration);\n      const handledisableStartOnJobComplete = (responseId:number) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('disableStartOnJobComplete', handledisableStartOnJobComplete);\n        this.removeListener('disableStartOnJobError', handledisableStartOnJobError);\n        resolve();\n      };\n      const handledisableStartOnJobError = (responseId:number, error:Error) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('disableStartOnJobComplete', handledisableStartOnJobComplete);\n        this.removeListener('disableStartOnJobError', handledisableStartOnJobError);\n        reject(error);\n      };\n      this.addListener('disableStartOnJobComplete', handledisableStartOnJobComplete);\n      this.addListener('disableStartOnJobError', handledisableStartOnJobError);\n      port.postMessage({ type: 'disableStartOnJob', args: [requestId] });\n    });\n  }\n\n  async getDurationEstimate(queueId:string, maxDuration?: number = 1000) {\n    const port = await this.link();\n    return new Promise((resolve, reject) => {\n      const requestId = Math.random();\n      const timeout = setTimeout(() => {\n        this.removeListener('getDurationEstimateComplete', handleGetDurationEstimateComplete);\n        this.removeListener('getDurationEstimateError', handleGetDurationEstimateError);\n        reject(new Error(`Did not receive duration estimate response within ${maxDuration}ms`));\n      }, maxDuration);\n      const handleGetDurationEstimateComplete = (responseId:number, values:[number, number]) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('getDurationEstimateComplete', handleGetDurationEstimateComplete);\n        this.removeListener('getDurationEstimateError', handleGetDurationEstimateError);\n        resolve(values);\n      };\n      const handleGetDurationEstimateError = (responseId:number, error:Error) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('getDurationEstimateComplete', handleGetDurationEstimateComplete);\n        this.removeListener('getDurationEstimateError', handleGetDurationEstimateError);\n        reject(error);\n      };\n      this.addListener('getDurationEstimateComplete', handleGetDurationEstimateComplete);\n      this.addListener('getDurationEstimateError', handleGetDurationEstimateError);\n      port.postMessage({ type: 'getDurationEstimate', args: [requestId, queueId] });\n    });\n  }\n\n  async getCurrentJobType(queueId:string, maxDuration?: number = 1000) {\n    const port = await this.link();\n    return new Promise((resolve, reject) => {\n      const requestId = Math.random();\n      const timeout = setTimeout(() => {\n        this.removeListener('getCurrentJobTypeComplete', handleGetCurrentJobTypeComplete);\n        this.removeListener('getCurrentJobTypeError', handleGetCurrentJobTypeError);\n        reject(new Error(`Did not receive duration estimate response within ${maxDuration}ms`));\n      }, maxDuration);\n      const handleGetCurrentJobTypeComplete = (responseId:number, type:string | void) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('getCurrentJobTypeComplete', handleGetCurrentJobTypeComplete);\n        this.removeListener('getCurrentJobTypeError', handleGetCurrentJobTypeError);\n        resolve(type);\n      };\n      const handleGetCurrentJobTypeError = (responseId:number, error:Error) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('getCurrentJobTypeComplete', handleGetCurrentJobTypeComplete);\n        this.removeListener('getCurrentJobTypeError', handleGetCurrentJobTypeError);\n        reject(error);\n      };\n      this.addListener('getCurrentJobTypeComplete', handleGetCurrentJobTypeComplete);\n      this.addListener('getCurrentJobTypeError', handleGetCurrentJobTypeError);\n      port.postMessage({ type: 'getCurrentJobType', args: [requestId, queueId] });\n    });\n  }\n\n  async sync() {\n    if (!canUseSyncManager) {\n      return;\n    }\n    if (this.isSyncing) {\n      return;\n    }\n    this.isSyncing = true;\n    try {\n      await this.link();\n      this.logger.info('Sending sync event');\n      const serviceWorker = navigator && navigator.serviceWorker;\n      if (!serviceWorker) {\n        throw new Error('Service worker not available');\n      }\n      const registration = await serviceWorker.ready;\n      // $FlowFixMe\n      registration.sync.register('syncManagerOnIdle');\n      await new Promise((resolve, reject) => {\n        const timeout = setTimeout(() => {\n          this.removeListener('syncManagerOnIdle', handleOnIdleSync);\n          reject(new Error('Unable to sync, did not receive syncManagerOnIdle acknowledgement'));\n        }, 5000);\n        const handleOnIdleSync = () => {\n          clearTimeout(timeout);\n          this.removeListener('syncManagerOnIdle', handleOnIdleSync);\n          resolve();\n        };\n        this.addListener('syncManagerOnIdle', handleOnIdleSync);\n      });\n      await new Promise((resolve) => {\n        const handleIdle = () => {\n          this.removeListener('idle', handleIdle);\n          this.removeListener('unlink', handleUnlink);\n          resolve();\n        };\n        const handleUnlink = () => {\n          this.removeListener('idle', handleIdle);\n          this.removeListener('unlink', handleUnlink);\n          resolve();\n        };\n        this.addListener('idle', handleIdle);\n        this.addListener('unlink', handleUnlink);\n      });\n    } catch (error) {\n      this.logger.error('Unable to sync');\n      this.emit('error', error);\n      this.logger.errorStack(error);\n    }\n    this.isSyncing = false;\n  }\n}\n"],"file":"worker-interface.js"}