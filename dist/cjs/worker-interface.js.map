{"version":3,"sources":["../../src/worker-interface.js"],"names":["canUseSyncManager","navigator","window","BatteryQueueServiceWorkerInterface","options","logger","on","isSyncing","controller","serviceWorker","ServiceWorker","Error","port","MessagePort","ready","messageChannel","MessageChannel","port1","getController","handleStateChange","warn","state","postMessage","type","args","error","errorStack","close","port2","onmessage","emit","self","queueMicrotask","link","catch","addEventListener","Promise","resolve","reject","timeout","setTimeout","removeEventListener","event","MessageEvent","data","warnObject","clearTimeout","Array","isArray","queueIds","jobEmitter","Set","queueId","add","delete","size","handleJobAdd","handleJobDelete","handleJobUpdate","handleJobsClear","localJobEmitter","addListener","info","maxDuration","requestId","Math","random","removeListener","handleClearComplete","handleClearError","responseId","handleAbortQueueComplete","handleAbortQueueError","handleDequeueComplete","handleDequeueError","handleIdleComplete","handleIdleError","Date","now","handleGetQueuesComplete","handleGetQueuesError","qIds","handleEnableStartOnJobComplete","handleEnableStartOnJobError","sync","handledisableStartOnJobComplete","handledisableStartOnJobError","registration","register","handleOnIdleSync","handleIdle","handleUnlink","EventEmitter"],"mappings":"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","sourcesContent":["// @flow\n\nimport EventEmitter from 'events';\nimport type { Logger } from './logger';\nimport makeLogger from './logger';\nimport { jobEmitter, localJobEmitter } from './database';\n\ntype Options = {\n  logger?: Logger\n};\n\nconst canUseSyncManager = 'serviceWorker' in navigator && 'SyncManager' in window;\n\nexport default class BatteryQueueServiceWorkerInterface extends EventEmitter {\n  declare serviceWorker: ServiceWorker;\n  declare logger: Logger;\n  declare port: MessagePort | void;\n  declare queueIds: Set<string> | void;\n  declare isSyncing: boolean;\n  declare handleJobAdd: void | () => void;\n\n  constructor(options?: Options = {}) {\n    super();\n    this.logger = options.logger || makeLogger('Battery Queue Worker Interface');\n    // This is a no-op to prevent errors from being thrown in the browser context.\n    // Errors are logged in the worker.\n    this.on('error', () => {});\n    this.isSyncing = false;\n  }\n\n  getController() {\n    const controller = navigator && navigator.serviceWorker && navigator.serviceWorker.controller;\n    if (controller instanceof ServiceWorker) {\n      return controller;\n    }\n    throw new Error('Service worker controller does not exist');\n  }\n\n  async link() {\n    if (this.port instanceof MessagePort) {\n      return this.port;\n    }\n\n    const serviceWorker = navigator && navigator.serviceWorker;\n\n    if (!serviceWorker) {\n      throw new Error('Service worker not available');\n    }\n\n    await serviceWorker.ready;\n\n    const messageChannel = new MessageChannel();\n\n    const port = messageChannel.port1;\n\n    const controller = this.getController();\n\n    const handleStateChange = () => {\n      this.logger.warn(`Service worker state change to ${controller.state}`);\n      if (controller.state !== 'redundant') {\n        return;\n      }\n      this.logger.warn('Detected redundant service worker, unlinking');\n      try {\n        port.postMessage({ type: 'unlink', args: [] });\n      } catch (error) {\n        this.logger.error('Error while posting unlink message to redundant service worker');\n        this.logger.errorStack(error);\n      }\n      try {\n        messageChannel.port1.close();\n        messageChannel.port2.close();\n      } catch (error) {\n        this.logger.error('Error while closing MessageChannel ports with redundant service worker');\n        this.logger.errorStack(error);\n      }\n      messageChannel.port1.onmessage = null;\n      delete this.port;\n      this.emit('unlink');\n      self.queueMicrotask(() => {\n        this.link().catch((error) => {\n          this.logger.error('Unable to re-link service worker');\n          this.logger.errorStack(error);\n        });\n      });\n    };\n\n    controller.addEventListener('statechange', handleStateChange);\n\n    await new Promise((resolve, reject) => {\n      const timeout = setTimeout(() => {\n        messageChannel.port1.onmessage = null;\n        controller.removeEventListener('statechange', handleStateChange);\n        reject(new Error('Unable to link to service worker'));\n      }, 1000);\n      messageChannel.port1.onmessage = (event:MessageEvent) => {\n        if (!(event instanceof MessageEvent)) {\n          return;\n        }\n        const { data } = event;\n        if (!data || typeof data !== 'object') {\n          this.logger.warn('Unknown message type');\n          this.logger.warnObject(event);\n          return;\n        }\n        const { type } = data;\n        if (typeof type !== 'string') {\n          this.logger.warn('Unknown message type');\n          this.logger.warnObject(event);\n          return;\n        }\n        if (type === 'BATTERY_QUEUE_WORKER_CONFIRMATION') {\n          clearTimeout(timeout);\n          resolve();\n        }\n      };\n      // $FlowFixMe\n      controller.postMessage({ type: 'BATTERY_QUEUE_WORKER_INITIALIZATION' }, [\n        messageChannel.port2,\n      ]);\n    });\n\n\n    messageChannel.port1.onmessage = (event:MessageEvent) => {\n      if (!(event instanceof MessageEvent)) {\n        return;\n      }\n      const { data } = event;\n      if (!data || typeof data !== 'object') {\n        this.logger.warn('Invalid message data');\n        this.logger.warnObject(event);\n        return;\n      }\n      const { type, args } = data;\n      if (typeof type !== 'string') {\n        this.logger.warn('Unknown message type');\n        this.logger.warnObject(event);\n        return;\n      }\n      if (!Array.isArray(args)) {\n        this.logger.warn('Unknown arguments type');\n        this.logger.warnObject(event);\n        return;\n      }\n      const queueIds = this.queueIds;\n      switch (type) {\n        case 'jobAdd':\n          jobEmitter.emit('jobAdd', ...args);\n          return;\n        case 'jobDelete':\n          jobEmitter.emit('jobDelete', ...args);\n          return;\n        case 'jobUpdate':\n          jobEmitter.emit('jobUpdate', ...args);\n          return;\n        case 'jobsClear':\n          jobEmitter.emit('jobsClear', ...args);\n          return;\n        case 'queueActive':\n          if (queueIds instanceof Set) {\n            const queueId = args[0];\n            if (typeof queueId === 'string') {\n              queueIds.add(queueId);\n            }\n          }\n          break;\n        case 'queueInactive':\n          if (queueIds instanceof Set) {\n            const queueId = args[0];\n            if (typeof queueId === 'string') {\n              queueIds.delete(queueId);\n              if (queueIds.size === 0) {\n                delete this.queueIds;\n              }\n            }\n          }\n          break;\n        default:\n          break;\n      }\n      this.emit(type, ...args);\n    };\n\n\n    const handleJobAdd = (...args:Array<any>) => {\n      port.postMessage({ type: 'jobAdd', args });\n    };\n    const handleJobDelete = (...args:Array<any>) => {\n      port.postMessage({ type: 'jobDelete', args });\n    };\n    const handleJobUpdate = (...args:Array<any>) => {\n      port.postMessage({ type: 'jobUpdate', args });\n    };\n    const handleJobsClear = (...args:Array<any>) => {\n      port.postMessage({ type: 'jobsClear', args });\n    };\n    localJobEmitter.addListener('jobAdd', handleJobAdd);\n    localJobEmitter.addListener('jobDelete', handleJobDelete);\n    localJobEmitter.addListener('jobUpdate', handleJobUpdate);\n    localJobEmitter.addListener('jobsClear', handleJobsClear);\n\n    this.port = messageChannel.port1;\n\n    this.logger.info('Linked to worker');\n    this.emit('link');\n    return messageChannel.port1;\n  }\n\n  async clear(maxDuration?: number = 1000) {\n    const port = await this.link();\n    await new Promise((resolve, reject) => {\n      const requestId = Math.random();\n      const timeout = setTimeout(() => {\n        this.removeListener('clearComplete', handleClearComplete);\n        this.removeListener('clearError', handleClearError);\n        reject(new Error(`Did not receive clear response within ${maxDuration}ms`));\n      }, maxDuration);\n      const handleClearComplete = (responseId:number) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('clearComplete', handleClearComplete);\n        this.removeListener('clearError', handleClearError);\n        resolve();\n      };\n      const handleClearError = (responseId:number, error:Error) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('clearComplete', handleClearComplete);\n        this.removeListener('clearError', handleClearError);\n        reject(error);\n      };\n      this.addListener('clearComplete', handleClearComplete);\n      this.addListener('clearError', handleClearError);\n      port.postMessage({ type: 'clear', args: [requestId] });\n    });\n  }\n\n  async abortQueue(queueId:string, maxDuration?: number = 1000) {\n    const port = await this.link();\n    await new Promise((resolve, reject) => {\n      const requestId = Math.random();\n      const timeout = setTimeout(() => {\n        this.removeListener('abortQueueComplete', handleAbortQueueComplete);\n        this.removeListener('abortQueueError', handleAbortQueueError);\n        reject(new Error(`Did not receive abort queue response within ${maxDuration}ms`));\n      }, maxDuration);\n      const handleAbortQueueComplete = (responseId:number) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('abortQueueComplete', handleAbortQueueComplete);\n        this.removeListener('abortQueueError', handleAbortQueueError);\n        resolve();\n      };\n      const handleAbortQueueError = (responseId:number, error:Error) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('abortQueueComplete', handleAbortQueueComplete);\n        this.removeListener('abortQueueError', handleAbortQueueError);\n        reject(error);\n      };\n      this.addListener('abortQueueComplete', handleAbortQueueComplete);\n      this.addListener('abortQueueError', handleAbortQueueError);\n      port.postMessage({ type: 'abortQueue', args: [requestId, queueId] });\n    });\n  }\n\n  async dequeue(maxDuration?: number = 1000) {\n    const port = await this.link();\n    await new Promise((resolve, reject) => {\n      const requestId = Math.random();\n      const timeout = setTimeout(() => {\n        this.removeListener('dequeueComplete', handleDequeueComplete);\n        this.removeListener('dequeueError', handleDequeueError);\n        reject(new Error(`Did not receive dequeue response within ${maxDuration}ms`));\n      }, maxDuration);\n      const handleDequeueComplete = (responseId:number) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('dequeueComplete', handleDequeueComplete);\n        this.removeListener('dequeueError', handleDequeueError);\n        resolve();\n      };\n      const handleDequeueError = (responseId:number, error:Error) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('dequeueComplete', handleDequeueComplete);\n        this.removeListener('dequeueError', handleDequeueError);\n        reject(error);\n      };\n      this.addListener('dequeueComplete', handleDequeueComplete);\n      this.addListener('dequeueError', handleDequeueError);\n      port.postMessage({ type: 'dequeue', args: [requestId] });\n    });\n  }\n\n  async onIdle(maxDuration?: number = 1000) {\n    const port = await this.link();\n    await new Promise((resolve, reject) => {\n      const requestId = Math.random();\n      const timeout = setTimeout(() => {\n        this.removeListener('idleComplete', handleIdleComplete);\n        this.removeListener('idleError', handleIdleError);\n        reject(new Error(`Did not receive idle response within ${maxDuration}ms`));\n      }, maxDuration);\n      const handleIdleComplete = (responseId:number) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('idleComplete', handleIdleComplete);\n        this.removeListener('idleError', handleIdleError);\n        resolve();\n      };\n      const handleIdleError = (responseId:number, error:Error) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('idleComplete', handleIdleComplete);\n        this.removeListener('idleError', handleIdleError);\n        reject(error);\n      };\n      this.addListener('idleComplete', handleIdleComplete);\n      this.addListener('idleError', handleIdleError);\n      port.postMessage({ type: 'idle', args: [requestId, maxDuration, Date.now()] });\n    });\n  }\n\n  async getQueueIds(maxDuration?: number = 1000) {\n    if (this.queueIds instanceof Set) {\n      return this.queueIds;\n    }\n    const port = await this.link();\n    const queueIds = await new Promise((resolve, reject) => {\n      const requestId = Math.random();\n      const timeout = setTimeout(() => {\n        this.removeListener('getQueuesComplete', handleGetQueuesComplete);\n        this.removeListener('getQueuesError', handleGetQueuesError);\n        reject(new Error(`Did not receive idle response within ${maxDuration}ms`));\n      }, maxDuration);\n      const handleGetQueuesComplete = (responseId:number, qIds:Array<string>) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('getQueuesComplete', handleGetQueuesComplete);\n        this.removeListener('getQueuesError', handleGetQueuesError);\n        resolve((new Set(qIds): Set<string>));\n      };\n      const handleGetQueuesError = (responseId:number, error:Error) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('getQueuesComplete', handleGetQueuesComplete);\n        this.removeListener('getQueuesError', handleGetQueuesError);\n        reject(error);\n      };\n      this.addListener('getQueuesComplete', handleGetQueuesComplete);\n      this.addListener('getQueuesError', handleGetQueuesError);\n      port.postMessage({ type: 'getQueueIds', args: [requestId] });\n    });\n    if (queueIds.size > 0) {\n      this.queueIds = queueIds;\n    }\n    return queueIds;\n  }\n\n  async enableStartOnJob(maxDuration?: number = 1000) {\n    const port = await this.link();\n    await new Promise((resolve, reject) => {\n      const requestId = Math.random();\n      const timeout = setTimeout(() => {\n        this.removeListener('enableStartOnJobComplete', handleEnableStartOnJobComplete);\n        this.removeListener('enableStartOnJobError', handleEnableStartOnJobError);\n        reject(new Error(`Did not receive enableStartOnJob response within ${maxDuration}ms`));\n      }, maxDuration);\n      const handleEnableStartOnJobComplete = (responseId:number) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('enableStartOnJobComplete', handleEnableStartOnJobComplete);\n        this.removeListener('enableStartOnJobError', handleEnableStartOnJobError);\n        resolve();\n      };\n      const handleEnableStartOnJobError = (responseId:number, error:Error) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('enableStartOnJobComplete', handleEnableStartOnJobComplete);\n        this.removeListener('enableStartOnJobError', handleEnableStartOnJobError);\n        reject(error);\n      };\n      this.addListener('enableStartOnJobComplete', handleEnableStartOnJobComplete);\n      this.addListener('enableStartOnJobError', handleEnableStartOnJobError);\n      port.postMessage({ type: 'enableStartOnJob', args: [requestId] });\n    });\n    const handleJobAdd = () => {\n      this.sync();\n    };\n    jobEmitter.addListener('jobAdd', handleJobAdd);\n    this.handleJobAdd = handleJobAdd;\n  }\n\n  async disableStartOnJob(maxDuration?: number = 1000) {\n    const handleJobAdd = this.handleJobAdd;\n    if (typeof handleJobAdd === 'function') {\n      jobEmitter.removeListener('jobAdd', handleJobAdd);\n    }\n    const port = await this.link();\n    await new Promise((resolve, reject) => {\n      const requestId = Math.random();\n      const timeout = setTimeout(() => {\n        this.removeListener('disableStartOnJobComplete', handledisableStartOnJobComplete);\n        this.removeListener('disableStartOnJobError', handledisableStartOnJobError);\n        reject(new Error(`Did not receive disableStartOnJob response within ${maxDuration}ms`));\n      }, maxDuration);\n      const handledisableStartOnJobComplete = (responseId:number) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('disableStartOnJobComplete', handledisableStartOnJobComplete);\n        this.removeListener('disableStartOnJobError', handledisableStartOnJobError);\n        resolve();\n      };\n      const handledisableStartOnJobError = (responseId:number, error:Error) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('disableStartOnJobComplete', handledisableStartOnJobComplete);\n        this.removeListener('disableStartOnJobError', handledisableStartOnJobError);\n        reject(error);\n      };\n      this.addListener('disableStartOnJobComplete', handledisableStartOnJobComplete);\n      this.addListener('disableStartOnJobError', handledisableStartOnJobError);\n      port.postMessage({ type: 'disableStartOnJob', args: [requestId] });\n    });\n  }\n\n  async sync() {\n    if (!canUseSyncManager) {\n      return;\n    }\n    if (this.isSyncing) {\n      return;\n    }\n    this.isSyncing = true;\n    try {\n      await this.link();\n      this.logger.info('Sending sync event');\n      const serviceWorker = navigator && navigator.serviceWorker;\n      if (!serviceWorker) {\n        throw new Error('Service worker not available');\n      }\n      const registration = await serviceWorker.ready;\n      // $FlowFixMe\n      registration.sync.register('syncManagerOnIdle');\n      await new Promise((resolve, reject) => {\n        const timeout = setTimeout(() => {\n          this.removeListener('syncManagerOnIdle', handleOnIdleSync);\n          reject(new Error('Unable to sync, did not receive syncManagerOnIdle acknowledgement'));\n        }, 5000);\n        const handleOnIdleSync = () => {\n          clearTimeout(timeout);\n          this.removeListener('syncManagerOnIdle', handleOnIdleSync);\n          resolve();\n        };\n        this.addListener('syncManagerOnIdle', handleOnIdleSync);\n      });\n      await new Promise((resolve) => {\n        const handleIdle = () => {\n          this.removeListener('idle', handleIdle);\n          this.removeListener('unlink', handleUnlink);\n          resolve();\n        };\n        const handleUnlink = () => {\n          this.removeListener('idle', handleIdle);\n          this.removeListener('unlink', handleUnlink);\n          resolve();\n        };\n        this.addListener('idle', handleIdle);\n        this.addListener('unlink', handleUnlink);\n      });\n    } catch (error) {\n      this.logger.error('Unable to sync');\n      this.emit('error', error);\n      this.logger.errorStack(error);\n    }\n    this.isSyncing = false;\n  }\n}\n"],"file":"worker-interface.js"}