{"version":3,"sources":["../../src/worker-interface.js"],"names":["canUseSyncManager","navigator","window","RedundantServiceWorkerError","Error","BatteryQueueServiceWorkerInterface","options","logger","on","isSyncing","serviceWorker","registration","ready","controller","error","ControllerNotAvailableError","emit","state","hadControllerChange","info","Promise","resolve","timeout","setTimeout","removeEventListener","handleStateChange","handleControllerChange","clearTimeout","addEventListener","getRegistrationAndController","linkPromise","errorStack","port","MessagePort","postMessage","type","args","Math","random","clearInterval","portHeartbeatInterval","handlePortHeartbeat","removeListener","handleBeforeUnload","capture","handleJobAdd","portHandleJobAdd","localJobEmitter","handleJobDelete","portHandleJobDelete","handleJobUpdate","portHandleJobUpdate","handleJobsClear","portHandleJobsClear","close","onmessage","maxDuration","requestId","handleUnlinkComplete","handleUnlinkError","responseId","addListener","_link","finally","messageChannel","MessageChannel","port1","handleUpdateFound","installingWorker","installing","activeWorker","active","unlink","warn","reject","handleStateChangeBeforeLink","event","MessageEvent","data","warnObject","port2","Array","isArray","queueIds","jobEmitter","cleanup","Set","queueId","add","delete","size","didReceiveHeartbeat","missedHeartbeatCount","sendHeartbeat","setInterval","sync","register","link","handleClearComplete","handleClearError","handleUpdateDurationEstimatesComplete","handleUpdateDurationEstimatesError","handleAbortQueueComplete","handleAbortQueueError","id","handleAbortAndRemoveQueueJobsGreaterThanIdComplete","handleAbortAndRemoveQueueJobsGreaterThanIdError","handleRetryQueueComplete","handleRetryQueueError","handleDequeueComplete","handleDequeueError","handleRunUnloadHandlersComplete","handleRunUnloadHandlersError","handleIdleComplete","handleIdleError","Date","now","handleGetQueuesComplete","handleGetQueuesError","qIds","handleEnableStartOnJobComplete","handleEnableStartOnJobError","handledisableStartOnJobComplete","handledisableStartOnJobError","handleGetDurationEstimateComplete","handleGetDurationEstimateError","values","handleGetCurrentJobTypeComplete","handleGetCurrentJobTypeError","handleOnIdleSync","handleIdle","handleUnlink","name","EventEmitter"],"mappings":"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","sourcesContent":["// @flow\n\nimport EventEmitter from 'events';\nimport type { Logger } from './logger';\nimport makeLogger from './logger';\nimport { ControllerNotAvailableError } from './errors';\nimport { jobEmitter, localJobEmitter } from './database';\n\ntype Options = {\n  logger?: Logger\n};\n\nconst canUseSyncManager = 'serviceWorker' in navigator && 'SyncManager' in window;\n\nclass RedundantServiceWorkerError extends Error {}\n\nexport default class BatteryQueueServiceWorkerInterface extends EventEmitter {\n  declare serviceWorker: ServiceWorker;\n  declare logger: Logger;\n  declare port: MessagePort | void;\n  declare portHeartbeatInterval: void | IntervalID;\n  declare handlePortHeartbeat: void | () => void;\n  declare handleBeforeUnload: void | () => void;\n  declare queueIds: Set<string> | void;\n  declare isSyncing: boolean;\n  declare handleJobAdd: void | () => void;\n  declare linkPromise: void | Promise<MessagePort>;\n  declare portHandleJobAdd: (...args:Array<any>) => void;\n  declare portHandleJobDelete: (...args:Array<any>) => void;\n  declare portHandleJobUpdate: (...args:Array<any>) => void;\n  declare portHandleJobsClear: (...args:Array<any>) => void;\n\n  constructor(options?: Options = {}) {\n    super();\n    this.logger = options.logger || makeLogger('Battery Queue Worker Interface');\n    // This is a no-op to prevent errors from being thrown in the browser context.\n    // Errors are logged in the worker.\n    this.on('error', () => {});\n    this.isSyncing = false;\n  }\n\n  async getRegistrationAndController() {\n    const serviceWorker = navigator && navigator.serviceWorker;\n\n    if (!serviceWorker) {\n      throw new Error('Service worker not available');\n    }\n\n    const registration = await serviceWorker.ready;\n\n    const { controller } = serviceWorker;\n\n    if (!controller) {\n      const error = new ControllerNotAvailableError('Service worker controller not available');\n      this.emit('error', error);\n      throw error;\n    }\n\n    while (controller.state !== 'activated') {\n      const state = controller.state;\n      let hadControllerChange = false;\n      this.logger.info(`Service worker in \"${state}\" state, waiting for state or controller change`);\n      await new Promise((resolve) => {\n        const timeout = setTimeout(() => {\n          controller.removeEventListener('statechange', handleStateChange);\n          serviceWorker.removeEventListener('controllerchange', handleControllerChange);\n          throw new Error(`Unable to get service worker controller, state did not change from \"${state}\" within 5000ms`);\n        }, 5000);\n        const handleStateChange = () => {\n          if (controller.state !== 'activated') {\n            return;\n          }\n          clearTimeout(timeout);\n          controller.removeEventListener('statechange', handleStateChange);\n          serviceWorker.removeEventListener('controllerchange', handleControllerChange);\n          resolve();\n        };\n        const handleControllerChange = () => {\n          hadControllerChange = true;\n          clearTimeout(timeout);\n          controller.removeEventListener('statechange', handleStateChange);\n          serviceWorker.removeEventListener('controllerchange', handleControllerChange);\n          resolve();\n        };\n        serviceWorker.addEventListener('controllerchange', handleControllerChange);\n        controller.addEventListener('statechange', handleStateChange);\n      });\n      if (hadControllerChange) {\n        return this.getRegistrationAndController();\n      }\n    }\n    return [registration, controller];\n  }\n\n  async cleanup() {\n    this.logger.info('Cleaning up');\n    const linkPromise = this.linkPromise;\n    if (typeof linkPromise !== 'undefined') {\n      try {\n        await linkPromise;\n      } catch (error) {\n        this.logger.error('Link promise error while waiting to cleanup');\n        this.logger.errorStack(error);\n      }\n    }\n    const port = this.port;\n    if (!(port instanceof MessagePort)) {\n      return;\n    }\n    port.postMessage({ type: 'unlink', args: [Math.random()] });\n    delete this.port;\n    clearInterval(this.portHeartbeatInterval);\n    delete this.portHeartbeatInterval;\n    const handlePortHeartbeat = this.handlePortHeartbeat;\n    if (typeof handlePortHeartbeat === 'function') {\n      this.removeListener('heartbeat', this.handlePortHeartbeat);\n    }\n    const handleBeforeUnload = this.handleBeforeUnload;\n    if (typeof handlePortHeartbeat === 'function') {\n      window.removeEventListener('beforeunload', handleBeforeUnload, { capture: true });\n    }\n    const handleJobAdd = this.portHandleJobAdd;\n    if (typeof handleJobAdd === 'function') {\n      localJobEmitter.removeListener('jobAdd', handleJobAdd);\n    }\n    const handleJobDelete = this.portHandleJobDelete;\n    if (typeof handleJobDelete === 'function') {\n      localJobEmitter.removeListener('jobDelete', handleJobDelete);\n    }\n    const handleJobUpdate = this.portHandleJobUpdate;\n    if (typeof handleJobUpdate === 'function') {\n      localJobEmitter.removeListener('jobDelete', handleJobUpdate);\n    }\n    const handleJobsClear = this.portHandleJobsClear;\n    if (typeof handleJobsClear === 'function') {\n      localJobEmitter.removeListener('jobsClear', handleJobsClear);\n    }\n    try {\n      port.close();\n    } catch (error) {\n      this.logger.error('Error while closing MessageChannel port during cleanup');\n      this.logger.errorStack(error);\n    }\n    port.onmessage = null;\n    this.emit('unlink');\n    this.logger.info('Unlinked after close');\n  }\n\n  async unlink(maxDuration?: number = 60000) {\n    const linkPromise = this.linkPromise;\n    if (typeof linkPromise !== 'undefined') {\n      try {\n        await linkPromise;\n      } catch (error) {\n        this.logger.error('Link promise error while waiting to unlink');\n        this.logger.errorStack(error);\n      }\n    }\n    const port = this.port;\n    if (!(port instanceof MessagePort)) {\n      return;\n    }\n    delete this.port;\n    clearInterval(this.portHeartbeatInterval);\n    delete this.portHeartbeatInterval;\n    const handlePortHeartbeat = this.handlePortHeartbeat;\n    if (typeof handlePortHeartbeat === 'function') {\n      this.removeListener('heartbeat', this.handlePortHeartbeat);\n    }\n    const handleBeforeUnload = this.handleBeforeUnload;\n    if (typeof handlePortHeartbeat === 'function') {\n      window.removeEventListener('beforeunload', handleBeforeUnload, { capture: true });\n    }\n    const handleJobAdd = this.portHandleJobAdd;\n    if (typeof handleJobAdd === 'function') {\n      localJobEmitter.removeListener('jobAdd', handleJobAdd);\n    }\n    const handleJobDelete = this.portHandleJobDelete;\n    if (typeof handleJobDelete === 'function') {\n      localJobEmitter.removeListener('jobDelete', handleJobDelete);\n    }\n    const handleJobUpdate = this.portHandleJobUpdate;\n    if (typeof handleJobUpdate === 'function') {\n      localJobEmitter.removeListener('jobDelete', handleJobUpdate);\n    }\n    const handleJobsClear = this.portHandleJobsClear;\n    if (typeof handleJobsClear === 'function') {\n      localJobEmitter.removeListener('jobsClear', handleJobsClear);\n    }\n\n    await new Promise((resolve) => {\n      const requestId = Math.random();\n      const timeout = setTimeout(() => {\n        this.removeListener('unlinkComplete', handleUnlinkComplete);\n        this.removeListener('unlinkError', handleUnlinkError);\n        this.logger.error(`Did not receive unlink response within ${maxDuration}ms`);\n        resolve();\n      }, maxDuration);\n      const handleUnlinkComplete = (responseId:number) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('unlinkComplete', handleUnlinkComplete);\n        this.removeListener('unlinkError', handleUnlinkError);\n        resolve();\n      };\n      const handleUnlinkError = (responseId:number, error:Error) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('unlinkComplete', handleUnlinkComplete);\n        this.removeListener('unlinkError', handleUnlinkError);\n        this.logger.error('Received unlink error');\n        this.logger.errorStack(error);\n        resolve();\n      };\n      this.addListener('unlinkComplete', handleUnlinkComplete);\n      this.addListener('unlinkError', handleUnlinkError);\n      port.postMessage({ type: 'unlink', args: [requestId] });\n    });\n    try {\n      port.close();\n    } catch (error) {\n      this.logger.error('Error while closing MessageChannel port during unlink');\n      this.logger.errorStack(error);\n    }\n    port.onmessage = null;\n    this.emit('unlink');\n    this.logger.info('Unlinked');\n  }\n\n  async link() {\n    if (this.port instanceof MessagePort) {\n      return this.port;\n    }\n    if (this.linkPromise) {\n      return this.linkPromise;\n    }\n    const linkPromise = this._link().finally(() => { // eslint-disable-line no-underscore-dangle\n      delete this.linkPromise;\n    });\n    this.linkPromise = linkPromise;\n    return linkPromise;\n  }\n\n  async _link() {\n    if (this.port instanceof MessagePort) {\n      return this.port;\n    }\n\n    const [registration, controller] = await this.getRegistrationAndController();\n\n    const messageChannel = new MessageChannel();\n\n    const port = messageChannel.port1;\n    this.port = messageChannel.port1;\n\n    const handleUpdateFound = async () => {\n      const installingWorker = registration.installing;\n      const activeWorker = registration.active;\n      if (!installingWorker) {\n        return;\n      }\n      if (!activeWorker) {\n        return;\n      }\n      registration.removeEventListener('updatefound', handleUpdateFound);\n      controller.removeEventListener('statechange', handleStateChange);\n      try {\n        await this.unlink();\n        this.logger.info('Unlinked service worker after detecting new service worker');\n      } catch (error) {\n        this.logger.error('Unable to unlink service worker after detecting new service worker');\n        this.logger.errorStack(error);\n      }\n    };\n\n    const handleStateChange = async () => {\n      this.logger.warn(`Service worker state change to ${controller.state}`);\n      if (controller.state !== 'redundant') {\n        return;\n      }\n      registration.removeEventListener('updatefound', handleUpdateFound);\n      controller.removeEventListener('statechange', handleStateChange);\n      try {\n        await this.unlink();\n        this.logger.info('Unlinked service worker after detecting redundant service worker');\n      } catch (error) {\n        this.logger.error('Unable to unlink service worker after detecting redundant service worker');\n        this.logger.errorStack(error);\n      }\n    };\n\n    registration.addEventListener('updatefound', handleUpdateFound);\n    controller.addEventListener('statechange', handleStateChange);\n\n    try {\n      await new Promise((resolve, reject) => {\n        const timeout = setTimeout(() => {\n          messageChannel.port1.onmessage = null;\n          controller.removeEventListener('statechange', handleStateChangeBeforeLink);\n          reject(new Error('Unable to link to service worker'));\n        }, 1000);\n        const handleStateChangeBeforeLink = () => {\n          if (controller.state !== 'redundant') {\n            return;\n          }\n          clearTimeout(timeout);\n          controller.removeEventListener('statechange', handleStateChangeBeforeLink);\n          reject(new RedundantServiceWorkerError('Service worker in redundant state'));\n        };\n        controller.addEventListener('statechange', handleStateChangeBeforeLink);\n        messageChannel.port1.onmessage = (event:MessageEvent) => {\n          if (!(event instanceof MessageEvent)) {\n            return;\n          }\n          const { data } = event;\n          if (!data || typeof data !== 'object') {\n            this.logger.warn('Unknown message type');\n            this.logger.warnObject(event);\n            return;\n          }\n          const { type } = data;\n          if (typeof type !== 'string') {\n            this.logger.warn('Unknown message type');\n            this.logger.warnObject(event);\n            return;\n          }\n          if (type === 'BATTERY_QUEUE_WORKER_CONFIRMATION') {\n            clearTimeout(timeout);\n            controller.removeEventListener('statechange', handleStateChangeBeforeLink);\n            resolve();\n          }\n        };\n        // $FlowFixMe\n        controller.postMessage({ type: 'BATTERY_QUEUE_WORKER_INITIALIZATION' }, [\n          messageChannel.port2,\n        ]);\n      });\n    } catch (error) {\n      registration.removeEventListener('updatefound', handleUpdateFound);\n      controller.removeEventListener('statechange', handleStateChange);\n      if (error instanceof RedundantServiceWorkerError) {\n        return messageChannel.port1;\n      }\n      throw error;\n    }\n\n    messageChannel.port1.onmessage = (event:MessageEvent) => {\n      if (!(event instanceof MessageEvent)) {\n        return;\n      }\n      const { data } = event;\n      if (!data || typeof data !== 'object') {\n        this.logger.warn('Invalid message data');\n        this.logger.warnObject(event);\n        return;\n      }\n      const { type, args } = data;\n      if (typeof type !== 'string') {\n        this.logger.warn('Unknown message type');\n        this.logger.warnObject(event);\n        return;\n      }\n      if (!Array.isArray(args)) {\n        this.logger.warn('Unknown arguments type');\n        this.logger.warnObject(event);\n        return;\n      }\n      const queueIds = this.queueIds;\n      switch (type) {\n        case 'jobAdd':\n          jobEmitter.emit('jobAdd', ...args);\n          return;\n        case 'jobDelete':\n          jobEmitter.emit('jobDelete', ...args);\n          return;\n        case 'jobUpdate':\n          jobEmitter.emit('jobUpdate', ...args);\n          return;\n        case 'jobsClear':\n          jobEmitter.emit('jobsClear', ...args);\n          return;\n        case 'closed':\n          this.logger.warn('Received unexpected \"closed\" event');\n          this.cleanup();\n          return;\n        case 'queueActive':\n          if (queueIds instanceof Set) {\n            const queueId = args[0];\n            if (typeof queueId === 'string') {\n              queueIds.add(queueId);\n            }\n          }\n          break;\n        case 'queueInactive':\n          if (queueIds instanceof Set) {\n            const queueId = args[0];\n            if (typeof queueId === 'string') {\n              queueIds.delete(queueId);\n              if (queueIds.size === 0) {\n                delete this.queueIds;\n              }\n            }\n          }\n          break;\n        default:\n          break;\n      }\n      this.emit(type, ...args);\n    };\n\n\n    const handleJobAdd = (...args:Array<any>) => {\n      port.postMessage({ type: 'jobAdd', args });\n    };\n    const handleJobDelete = (...args:Array<any>) => {\n      port.postMessage({ type: 'jobDelete', args });\n    };\n    const handleJobUpdate = (...args:Array<any>) => {\n      port.postMessage({ type: 'jobUpdate', args });\n    };\n    const handleJobsClear = (...args:Array<any>) => {\n      port.postMessage({ type: 'jobsClear', args });\n    };\n\n    localJobEmitter.addListener('jobAdd', handleJobAdd);\n    localJobEmitter.addListener('jobDelete', handleJobDelete);\n    localJobEmitter.addListener('jobUpdate', handleJobUpdate);\n    localJobEmitter.addListener('jobsClear', handleJobsClear);\n\n    this.portHandleJobAdd = handleJobAdd;\n    this.portHandleJobDelete = handleJobDelete;\n    this.portHandleJobUpdate = handleJobUpdate;\n    this.portHandleJobsClear = handleJobsClear;\n\n    let didReceiveHeartbeat = true;\n    let missedHeartbeatCount = 0;\n\n    const handlePortHeartbeat = () => {\n      missedHeartbeatCount = 0;\n      didReceiveHeartbeat = true;\n    };\n    this.addListener('heartbeat', handlePortHeartbeat);\n    this.handlePortHeartbeat = handlePortHeartbeat;\n\n    const sendHeartbeat = () => {\n      if (!didReceiveHeartbeat) {\n        missedHeartbeatCount += 1;\n        this.logger.error(`Did not receive ${missedHeartbeatCount} port ${missedHeartbeatCount === 1 ? 'heartbeat' : 'heartbeats'}`);\n        if (missedHeartbeatCount > 2) {\n          this.cleanup();\n          return;\n        }\n      }\n      didReceiveHeartbeat = false;\n      port.postMessage({ type: 'heartbeat', args: [10000] });\n    };\n    this.portHeartbeatInterval = setInterval(sendHeartbeat, 10000);\n    sendHeartbeat();\n    const handleBeforeUnload = () => {\n      if (!canUseSyncManager) {\n        return;\n      }\n      // $FlowFixMe\n      registration.sync.register('unload');\n    };\n    this.handleBeforeUnload = handleBeforeUnload;\n    window.addEventListener('beforeunload', handleBeforeUnload, { capture: true });\n\n    this.logger.info('Linked to worker');\n    this.emit('link');\n    return messageChannel.port1;\n  }\n\n  async clear(maxDuration?: number = 1000) {\n    const port = await this.link();\n    await new Promise((resolve, reject) => {\n      const requestId = Math.random();\n      const timeout = setTimeout(() => {\n        this.removeListener('clearComplete', handleClearComplete);\n        this.removeListener('clearError', handleClearError);\n        reject(new Error(`Did not receive clear response within ${maxDuration}ms`));\n      }, maxDuration);\n      const handleClearComplete = (responseId:number) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('clearComplete', handleClearComplete);\n        this.removeListener('clearError', handleClearError);\n        resolve();\n      };\n      const handleClearError = (responseId:number, error:Error) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('clearComplete', handleClearComplete);\n        this.removeListener('clearError', handleClearError);\n        reject(error);\n      };\n      this.addListener('clearComplete', handleClearComplete);\n      this.addListener('clearError', handleClearError);\n      port.postMessage({ type: 'clear', args: [requestId] });\n    });\n  }\n\n  async updateDurationEstimates(maxDuration?: number = 1000) {\n    const port = await this.link();\n    await new Promise((resolve, reject) => {\n      const requestId = Math.random();\n      const timeout = setTimeout(() => {\n        this.removeListener('updateDurationEstimatesComplete', handleUpdateDurationEstimatesComplete);\n        this.removeListener('updateDurationEstimatesError', handleUpdateDurationEstimatesError);\n        reject(new Error(`Did not receive update duration estimates response within ${maxDuration}ms`));\n      }, maxDuration);\n      const handleUpdateDurationEstimatesComplete = (responseId:number) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('updateDurationEstimatesComplete', handleUpdateDurationEstimatesComplete);\n        this.removeListener('updateDurationEstimatesError', handleUpdateDurationEstimatesError);\n        resolve();\n      };\n      const handleUpdateDurationEstimatesError = (responseId:number, error:Error) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('updateDurationEstimatesComplete', handleUpdateDurationEstimatesComplete);\n        this.removeListener('updateDurationEstimatesError', handleUpdateDurationEstimatesError);\n        reject(error);\n      };\n      this.addListener('updateDurationEstimatesComplete', handleUpdateDurationEstimatesComplete);\n      this.addListener('updateDurationEstimatesError', handleUpdateDurationEstimatesError);\n      port.postMessage({ type: 'updateDurationEstimates', args: [requestId] });\n    });\n  }\n\n  async abortQueue(queueId:string, maxDuration?: number = 1000) {\n    const port = await this.link();\n    await new Promise((resolve, reject) => {\n      const requestId = Math.random();\n      const timeout = setTimeout(() => {\n        this.removeListener('abortQueueComplete', handleAbortQueueComplete);\n        this.removeListener('abortQueueError', handleAbortQueueError);\n        reject(new Error(`Did not receive abort queue response within ${maxDuration}ms`));\n      }, maxDuration);\n      const handleAbortQueueComplete = (responseId:number) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('abortQueueComplete', handleAbortQueueComplete);\n        this.removeListener('abortQueueError', handleAbortQueueError);\n        resolve();\n      };\n      const handleAbortQueueError = (responseId:number, error:Error) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('abortQueueComplete', handleAbortQueueComplete);\n        this.removeListener('abortQueueError', handleAbortQueueError);\n        reject(error);\n      };\n      this.addListener('abortQueueComplete', handleAbortQueueComplete);\n      this.addListener('abortQueueError', handleAbortQueueError);\n      port.postMessage({ type: 'abortQueue', args: [requestId, queueId] });\n    });\n  }\n\n  async abortAndRemoveQueue(queueId:string, maxDuration?: number = 1000) {\n    const port = await this.link();\n    await new Promise((resolve, reject) => {\n      const requestId = Math.random();\n      const timeout = setTimeout(() => {\n        this.removeListener('abortAndRemoveQueueComplete', handleAbortQueueComplete);\n        this.removeListener('abortAndRemoveQueueError', handleAbortQueueError);\n        reject(new Error(`Did not receive abort queue response within ${maxDuration}ms`));\n      }, maxDuration);\n      const handleAbortQueueComplete = (responseId:number) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('abortAndRemoveQueueComplete', handleAbortQueueComplete);\n        this.removeListener('abortAndRemoveQueueError', handleAbortQueueError);\n        resolve();\n      };\n      const handleAbortQueueError = (responseId:number, error:Error) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('abortAndRemoveQueueComplete', handleAbortQueueComplete);\n        this.removeListener('abortAndRemoveQueueError', handleAbortQueueError);\n        reject(error);\n      };\n      this.addListener('abortAndRemoveQueueComplete', handleAbortQueueComplete);\n      this.addListener('abortAndRemoveQueueError', handleAbortQueueError);\n      port.postMessage({ type: 'abortAndRemoveQueue', args: [requestId, queueId] });\n    });\n  }\n\n  async abortAndRemoveQueueJobsGreaterThanId(queueId:string, id:number, maxDuration?: number = 1000) {\n    const port = await this.link();\n    await new Promise((resolve, reject) => {\n      const requestId = Math.random();\n      const timeout = setTimeout(() => {\n        this.removeListener('abortAndRemoveQueueJobsGreaterThanIdComplete', handleAbortAndRemoveQueueJobsGreaterThanIdComplete);\n        this.removeListener('abortAndRemoveQueueJobsGreaterThanIdError', handleAbortAndRemoveQueueJobsGreaterThanIdError);\n        reject(new Error(`Did not receive abort queue response within ${maxDuration}ms`));\n      }, maxDuration);\n      const handleAbortAndRemoveQueueJobsGreaterThanIdComplete = (responseId:number) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('abortAndRemoveQueueJobsGreaterThanIdComplete', handleAbortAndRemoveQueueJobsGreaterThanIdComplete);\n        this.removeListener('abortAndRemoveQueueJobsGreaterThanIdError', handleAbortAndRemoveQueueJobsGreaterThanIdError);\n        resolve();\n      };\n      const handleAbortAndRemoveQueueJobsGreaterThanIdError = (responseId:number, error:Error) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('abortAndRemoveQueueJobsGreaterThanIdComplete', handleAbortAndRemoveQueueJobsGreaterThanIdComplete);\n        this.removeListener('abortAndRemoveQueueJobsGreaterThanIdError', handleAbortAndRemoveQueueJobsGreaterThanIdError);\n        reject(error);\n      };\n      this.addListener('abortAndRemoveQueueJobsGreaterThanIdComplete', handleAbortAndRemoveQueueJobsGreaterThanIdComplete);\n      this.addListener('abortAndRemoveQueueJobsGreaterThanIdError', handleAbortAndRemoveQueueJobsGreaterThanIdError);\n      port.postMessage({ type: 'abortAndRemoveQueueJobsGreaterThanId', args: [requestId, queueId, id] });\n    });\n  }\n\n  async retryQueue(queueId:string, maxDuration?: number = 1000) {\n    const port = await this.link();\n    await new Promise((resolve, reject) => {\n      const requestId = Math.random();\n      const timeout = setTimeout(() => {\n        this.removeListener('retryQueueComplete', handleRetryQueueComplete);\n        this.removeListener('retryQueueError', handleRetryQueueError);\n        reject(new Error(`Did not receive retry queue response within ${maxDuration}ms`));\n      }, maxDuration);\n      const handleRetryQueueComplete = (responseId:number) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('retryQueueComplete', handleRetryQueueComplete);\n        this.removeListener('retryQueueError', handleRetryQueueError);\n        resolve();\n      };\n      const handleRetryQueueError = (responseId:number, error:Error) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('retryQueueComplete', handleRetryQueueComplete);\n        this.removeListener('retryQueueError', handleRetryQueueError);\n        reject(error);\n      };\n      this.addListener('retryQueueComplete', handleRetryQueueComplete);\n      this.addListener('retryQueueError', handleRetryQueueError);\n      port.postMessage({ type: 'retryQueue', args: [requestId, queueId] });\n    });\n  }\n\n  async dequeue(maxDuration?: number = 1000) {\n    const port = await this.link();\n    await new Promise((resolve, reject) => {\n      const requestId = Math.random();\n      const timeout = setTimeout(() => {\n        this.removeListener('dequeueComplete', handleDequeueComplete);\n        this.removeListener('dequeueError', handleDequeueError);\n        reject(new Error(`Did not receive dequeue response within ${maxDuration}ms`));\n      }, maxDuration);\n      const handleDequeueComplete = (responseId:number) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('dequeueComplete', handleDequeueComplete);\n        this.removeListener('dequeueError', handleDequeueError);\n        resolve();\n      };\n      const handleDequeueError = (responseId:number, error:Error) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('dequeueComplete', handleDequeueComplete);\n        this.removeListener('dequeueError', handleDequeueError);\n        reject(error);\n      };\n      this.addListener('dequeueComplete', handleDequeueComplete);\n      this.addListener('dequeueError', handleDequeueError);\n      port.postMessage({ type: 'dequeue', args: [requestId] });\n    });\n  }\n\n  async runUnloadHandlers(maxDuration?: number = 10000) {\n    const port = await this.link();\n    await new Promise((resolve, reject) => {\n      const requestId = Math.random();\n      const timeout = setTimeout(() => {\n        this.removeListener('runUnloadHandlersComplete', handleRunUnloadHandlersComplete);\n        this.removeListener('runUnloadHandlersError', handleRunUnloadHandlersError);\n        reject(new Error(`Did not receive run unload handlers response within ${maxDuration}ms`));\n      }, maxDuration);\n      const handleRunUnloadHandlersComplete = (responseId:number) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('runUnloadHandlersComplete', handleRunUnloadHandlersComplete);\n        this.removeListener('runUnloadHandlersError', handleRunUnloadHandlersError);\n        resolve();\n      };\n      const handleRunUnloadHandlersError = (responseId:number, error:Error) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('runUnloadHandlersComplete', handleRunUnloadHandlersComplete);\n        this.removeListener('runUnloadHandlersError', handleRunUnloadHandlersError);\n        reject(error);\n      };\n      this.addListener('runUnloadHandlersComplete', handleRunUnloadHandlersComplete);\n      this.addListener('runUnloadHandlersError', handleRunUnloadHandlersError);\n      port.postMessage({ type: 'runUnloadHandlers', args: [requestId] });\n    });\n  }\n\n  async onIdle(maxDuration?: number = 1000) {\n    const port = await this.link();\n    await new Promise((resolve, reject) => {\n      const requestId = Math.random();\n      const timeout = setTimeout(() => {\n        this.removeListener('idleComplete', handleIdleComplete);\n        this.removeListener('idleError', handleIdleError);\n        reject(new Error(`Did not receive idle response within ${maxDuration}ms`));\n      }, maxDuration);\n      const handleIdleComplete = (responseId:number) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('idleComplete', handleIdleComplete);\n        this.removeListener('idleError', handleIdleError);\n        resolve();\n      };\n      const handleIdleError = (responseId:number, error:Error) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('idleComplete', handleIdleComplete);\n        this.removeListener('idleError', handleIdleError);\n        reject(error);\n      };\n      this.addListener('idleComplete', handleIdleComplete);\n      this.addListener('idleError', handleIdleError);\n      port.postMessage({ type: 'idle', args: [requestId, maxDuration, Date.now()] });\n    });\n  }\n\n  async getQueueIds(maxDuration?: number = 1000) {\n    if (this.queueIds instanceof Set) {\n      return this.queueIds;\n    }\n    const port = await this.link();\n    const queueIds = await new Promise((resolve, reject) => {\n      const requestId = Math.random();\n      const timeout = setTimeout(() => {\n        this.removeListener('getQueuesComplete', handleGetQueuesComplete);\n        this.removeListener('getQueuesError', handleGetQueuesError);\n        reject(new Error(`Did not receive idle response within ${maxDuration}ms`));\n      }, maxDuration);\n      const handleGetQueuesComplete = (responseId:number, qIds:Array<string>) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('getQueuesComplete', handleGetQueuesComplete);\n        this.removeListener('getQueuesError', handleGetQueuesError);\n        resolve((new Set(qIds): Set<string>));\n      };\n      const handleGetQueuesError = (responseId:number, error:Error) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('getQueuesComplete', handleGetQueuesComplete);\n        this.removeListener('getQueuesError', handleGetQueuesError);\n        reject(error);\n      };\n      this.addListener('getQueuesComplete', handleGetQueuesComplete);\n      this.addListener('getQueuesError', handleGetQueuesError);\n      port.postMessage({ type: 'getQueueIds', args: [requestId] });\n    });\n    if (queueIds.size > 0) {\n      this.queueIds = queueIds;\n    }\n    return queueIds;\n  }\n\n  async enableStartOnJob(maxDuration?: number = 1000) {\n    const port = await this.link();\n    await new Promise((resolve, reject) => {\n      const requestId = Math.random();\n      const timeout = setTimeout(() => {\n        this.removeListener('enableStartOnJobComplete', handleEnableStartOnJobComplete);\n        this.removeListener('enableStartOnJobError', handleEnableStartOnJobError);\n        reject(new Error(`Did not receive enableStartOnJob response within ${maxDuration}ms`));\n      }, maxDuration);\n      const handleEnableStartOnJobComplete = (responseId:number) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('enableStartOnJobComplete', handleEnableStartOnJobComplete);\n        this.removeListener('enableStartOnJobError', handleEnableStartOnJobError);\n        resolve();\n      };\n      const handleEnableStartOnJobError = (responseId:number, error:Error) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('enableStartOnJobComplete', handleEnableStartOnJobComplete);\n        this.removeListener('enableStartOnJobError', handleEnableStartOnJobError);\n        reject(error);\n      };\n      this.addListener('enableStartOnJobComplete', handleEnableStartOnJobComplete);\n      this.addListener('enableStartOnJobError', handleEnableStartOnJobError);\n      port.postMessage({ type: 'enableStartOnJob', args: [requestId] });\n    });\n    const handleJobAdd = () => {\n      this.sync();\n    };\n    jobEmitter.addListener('jobAdd', handleJobAdd);\n    this.handleJobAdd = handleJobAdd;\n  }\n\n  async disableStartOnJob(maxDuration?: number = 1000) {\n    const handleJobAdd = this.handleJobAdd;\n    if (typeof handleJobAdd === 'function') {\n      jobEmitter.removeListener('jobAdd', handleJobAdd);\n    }\n    const port = await this.link();\n    await new Promise((resolve, reject) => {\n      const requestId = Math.random();\n      const timeout = setTimeout(() => {\n        this.removeListener('disableStartOnJobComplete', handledisableStartOnJobComplete);\n        this.removeListener('disableStartOnJobError', handledisableStartOnJobError);\n        reject(new Error(`Did not receive disableStartOnJob response within ${maxDuration}ms`));\n      }, maxDuration);\n      const handledisableStartOnJobComplete = (responseId:number) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('disableStartOnJobComplete', handledisableStartOnJobComplete);\n        this.removeListener('disableStartOnJobError', handledisableStartOnJobError);\n        resolve();\n      };\n      const handledisableStartOnJobError = (responseId:number, error:Error) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('disableStartOnJobComplete', handledisableStartOnJobComplete);\n        this.removeListener('disableStartOnJobError', handledisableStartOnJobError);\n        reject(error);\n      };\n      this.addListener('disableStartOnJobComplete', handledisableStartOnJobComplete);\n      this.addListener('disableStartOnJobError', handledisableStartOnJobError);\n      port.postMessage({ type: 'disableStartOnJob', args: [requestId] });\n    });\n  }\n\n  async getDurationEstimate(queueId:string, maxDuration?: number = 1000) {\n    const port = await this.link();\n    return new Promise((resolve, reject) => {\n      const requestId = Math.random();\n      const timeout = setTimeout(() => {\n        this.removeListener('getDurationEstimateComplete', handleGetDurationEstimateComplete);\n        this.removeListener('getDurationEstimateError', handleGetDurationEstimateError);\n        reject(new Error(`Did not receive duration estimate response within ${maxDuration}ms`));\n      }, maxDuration);\n      const handleGetDurationEstimateComplete = (responseId:number, values:[number, number]) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('getDurationEstimateComplete', handleGetDurationEstimateComplete);\n        this.removeListener('getDurationEstimateError', handleGetDurationEstimateError);\n        resolve(values);\n      };\n      const handleGetDurationEstimateError = (responseId:number, error:Error) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('getDurationEstimateComplete', handleGetDurationEstimateComplete);\n        this.removeListener('getDurationEstimateError', handleGetDurationEstimateError);\n        reject(error);\n      };\n      this.addListener('getDurationEstimateComplete', handleGetDurationEstimateComplete);\n      this.addListener('getDurationEstimateError', handleGetDurationEstimateError);\n      port.postMessage({ type: 'getDurationEstimate', args: [requestId, queueId] });\n    });\n  }\n\n  async getCurrentJobType(queueId:string, maxDuration?: number = 1000) {\n    const port = await this.link();\n    return new Promise((resolve, reject) => {\n      const requestId = Math.random();\n      const timeout = setTimeout(() => {\n        this.removeListener('getCurrentJobTypeComplete', handleGetCurrentJobTypeComplete);\n        this.removeListener('getCurrentJobTypeError', handleGetCurrentJobTypeError);\n        reject(new Error(`Did not receive duration estimate response within ${maxDuration}ms`));\n      }, maxDuration);\n      const handleGetCurrentJobTypeComplete = (responseId:number, type:string | void) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('getCurrentJobTypeComplete', handleGetCurrentJobTypeComplete);\n        this.removeListener('getCurrentJobTypeError', handleGetCurrentJobTypeError);\n        resolve(type);\n      };\n      const handleGetCurrentJobTypeError = (responseId:number, error:Error) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('getCurrentJobTypeComplete', handleGetCurrentJobTypeComplete);\n        this.removeListener('getCurrentJobTypeError', handleGetCurrentJobTypeError);\n        reject(error);\n      };\n      this.addListener('getCurrentJobTypeComplete', handleGetCurrentJobTypeComplete);\n      this.addListener('getCurrentJobTypeError', handleGetCurrentJobTypeError);\n      port.postMessage({ type: 'getCurrentJobType', args: [requestId, queueId] });\n    });\n  }\n\n  async sync() {\n    if (!canUseSyncManager) {\n      return;\n    }\n    if (this.isSyncing) {\n      return;\n    }\n    this.isSyncing = true;\n    try {\n      await this.link();\n      this.logger.info('Sending sync event');\n      const serviceWorker = navigator && navigator.serviceWorker;\n      if (!serviceWorker) {\n        throw new Error('Service worker not available');\n      }\n      const registration = await serviceWorker.ready;\n      // $FlowFixMe\n      registration.sync.register('syncManagerOnIdle');\n      await new Promise((resolve, reject) => {\n        const timeout = setTimeout(() => {\n          this.removeListener('syncManagerOnIdle', handleOnIdleSync);\n          reject(new Error('Unable to sync, did not receive syncManagerOnIdle acknowledgement'));\n        }, 5000);\n        const handleOnIdleSync = () => {\n          clearTimeout(timeout);\n          this.removeListener('syncManagerOnIdle', handleOnIdleSync);\n          resolve();\n        };\n        this.addListener('syncManagerOnIdle', handleOnIdleSync);\n      });\n      await new Promise((resolve) => {\n        const handleIdle = () => {\n          this.removeListener('idle', handleIdle);\n          this.removeListener('unlink', handleUnlink);\n          resolve();\n        };\n        const handleUnlink = () => {\n          this.removeListener('idle', handleIdle);\n          this.removeListener('unlink', handleUnlink);\n          resolve();\n        };\n        this.addListener('idle', handleIdle);\n        this.addListener('unlink', handleUnlink);\n      });\n    } catch (error) {\n      this.logger.error('Unable to sync');\n      if (error.name !== 'ControllerNotAvailableError') { // ControllerNotAvailableError errors are emitted immediately\n        this.emit('error', error);\n      }\n      this.logger.errorStack(error);\n    }\n    this.isSyncing = false;\n  }\n}\n"],"file":"worker-interface.js"}