{"version":3,"sources":["../../src/worker-interface.js"],"names":["EventEmitter","deserializeError","makeLogger","BatteryQueueServiceWorkerInterface","constructor","logger","getController","controller","navigator","serviceWorker","ServiceWorker","Error","link","port","MessagePort","ready","messageChannel","MessageChannel","Promise","resolve","reject","timeout","setTimeout","port1","onmessage","event","MessageEvent","data","warn","warnObject","type","clearTimeout","postMessage","port2","info","args","Array","isArray","emit","clear","maxDuration","id","Math","random","removeListener","handleClearComplete","handleClearError","responseId","errorObject","error","addListener","value","abortQueue","queueId","handleAbortQueueComplete","handleAbortQueueError","dequeue","handleDequeueComplete","handleDequeueError","onIdle","handleIdleComplete","handleIdleError","start","Date","now"],"mappings":"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","sourcesContent":["// @flow\n\nimport EventEmitter from 'events';\nimport { deserializeError } from 'serialize-error';\nimport type { Logger } from './logger';\nimport makeLogger from './logger';\n\nexport class BatteryQueueServiceWorkerInterface extends EventEmitter {\n  declare serviceWorker: ServiceWorker;\n  declare logger: Logger;\n  declare port: MessagePort | void;\n\n  constructor(logger?: Logger = makeLogger('BatteryQueue Worker Interface')) {\n    super();\n    this.logger = logger;\n  }\n\n  getController() {\n    const controller = navigator && navigator.serviceWorker && navigator.serviceWorker.controller;\n    if (controller instanceof ServiceWorker) {\n      return controller;\n    }\n    throw new Error('Service worker controller does not exist');\n  }\n\n  async link() {\n    if (this.port instanceof MessagePort) {\n      return this.port;\n    }\n\n    const serviceWorker = navigator && navigator.serviceWorker;\n\n    if (!serviceWorker) {\n      throw new Error('Service worker not available');\n    }\n\n    await serviceWorker.ready;\n\n    const messageChannel = new MessageChannel();\n\n    await new Promise((resolve, reject) => {\n      const timeout = setTimeout(() => {\n        messageChannel.port1.onmessage = null;\n        reject(new Error('Unable to link to service worker'));\n      }, 1000);\n      messageChannel.port1.onmessage = (event:MessageEvent) => {\n        if (!(event instanceof MessageEvent)) {\n          return;\n        }\n        const { data } = event;\n        if (!data || typeof data !== 'object') {\n          this.logger.warn('Unknown message type');\n          this.logger.warnObject(event);\n          return;\n        }\n        const { type } = data;\n        if (typeof type !== 'string') {\n          this.logger.warn('Unknown message type');\n          this.logger.warnObject(event);\n          return;\n        }\n        if (type === 'BATTERY_QUEUE_WORKER_CONFIRMATION') {\n          clearTimeout(timeout);\n          resolve();\n        }\n      };\n      const controller = this.getController();\n      // $FlowFixMe\n      controller.postMessage({ type: 'BATTERY_QUEUE_WORKER_INITIALIZATION' }, [\n        messageChannel.port2,\n      ]);\n    });\n\n    this.logger.info('Linked to worker');\n\n    messageChannel.port1.onmessage = (event:MessageEvent) => {\n      if (!(event instanceof MessageEvent)) {\n        return;\n      }\n      const { data } = event;\n      if (!data || typeof data !== 'object') {\n        this.logger.warn('Invalid message data');\n        this.logger.warnObject(event);\n        return;\n      }\n      const { type, args } = data;\n      if (typeof type !== 'string') {\n        this.logger.warn('Unknown message type');\n        this.logger.warnObject(event);\n        return;\n      }\n      if (!Array.isArray(args)) {\n        this.logger.warn('Unknown arguments type');\n        this.logger.warnObject(event);\n        return;\n      }\n      this.emit(type, ...args);\n    };\n\n    this.port = messageChannel.port1;\n    return messageChannel.port1;\n  }\n\n  async clear(maxDuration?: number = 1000) {\n    const port = await this.link();\n    await new Promise((resolve, reject) => {\n      const id = Math.random();\n      const timeout = setTimeout(() => {\n        this.removeListener('clearComplete', handleClearComplete);\n        this.removeListener('clearError', handleClearError);\n        reject(new Error(`Did not receive clear response within ${maxDuration}ms`));\n      }, maxDuration);\n      const handleClearComplete = ({ id: responseId }) => {\n        if (id !== responseId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('clearComplete', handleClearComplete);\n        this.removeListener('clearError', handleClearError);\n        resolve();\n      };\n      const handleClearError = ({ id: responseId, errorObject }) => {\n        if (id !== responseId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('clearComplete', handleClearComplete);\n        this.removeListener('clearError', handleClearError);\n        const error = deserializeError(errorObject);\n        reject(error);\n      };\n      this.addListener('clearComplete', handleClearComplete);\n      this.addListener('clearError', handleClearError);\n      port.postMessage({ type: 'clear', value: { id } });\n    });\n  }\n\n  async abortQueue(queueId:string, maxDuration?: number = 1000) {\n    const port = await this.link();\n    await new Promise((resolve, reject) => {\n      const id = Math.random();\n      const timeout = setTimeout(() => {\n        this.removeListener('abortQueueComplete', handleAbortQueueComplete);\n        this.removeListener('abortQueueError', handleAbortQueueError);\n        reject(new Error(`Did not receive abort queue response within ${maxDuration}ms`));\n      }, maxDuration);\n      const handleAbortQueueComplete = ({ id: responseId }) => {\n        if (id !== responseId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('abortQueueComplete', handleAbortQueueComplete);\n        this.removeListener('abortQueueError', handleAbortQueueError);\n        resolve();\n      };\n      const handleAbortQueueError = ({ id: responseId, errorObject }) => {\n        if (id !== responseId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('abortQueueComplete', handleAbortQueueComplete);\n        this.removeListener('abortQueueError', handleAbortQueueError);\n        const error = deserializeError(errorObject);\n        reject(error);\n      };\n      this.addListener('abortQueueComplete', handleAbortQueueComplete);\n      this.addListener('abortQueueError', handleAbortQueueError);\n      port.postMessage({ type: 'abortQueue', value: { id, queueId } });\n    });\n  }\n\n  async dequeue(maxDuration?: number = 1000) {\n    const port = await this.link();\n    await new Promise((resolve, reject) => {\n      const id = Math.random();\n      const timeout = setTimeout(() => {\n        this.removeListener('dequeueComplete', handleDequeueComplete);\n        this.removeListener('dequeueError', handleDequeueError);\n        reject(new Error(`Did not receive dequeue response within ${maxDuration}ms`));\n      }, maxDuration);\n      const handleDequeueComplete = ({ id: responseId }) => {\n        if (id !== responseId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('dequeueComplete', handleDequeueComplete);\n        this.removeListener('dequeueError', handleDequeueError);\n        resolve();\n      };\n      const handleDequeueError = ({ id: responseId, errorObject }) => {\n        if (id !== responseId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('dequeueComplete', handleDequeueComplete);\n        this.removeListener('dequeueError', handleDequeueError);\n        const error = deserializeError(errorObject);\n        reject(error);\n      };\n      this.addListener('dequeueComplete', handleDequeueComplete);\n      this.addListener('dequeueError', handleDequeueError);\n      port.postMessage({ type: 'dequeue', value: { id } });\n    });\n  }\n\n  async onIdle(maxDuration?: number = 1000) {\n    const port = await this.link();\n    await new Promise((resolve, reject) => {\n      const id = Math.random();\n      const timeout = setTimeout(() => {\n        this.removeListener('idleComplete', handleIdleComplete);\n        this.removeListener('idleError', handleIdleError);\n        reject(new Error(`Did not receive idle response within ${maxDuration}ms`));\n      }, maxDuration);\n      const handleIdleComplete = ({ id: responseId }) => {\n        if (id !== responseId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('idleComplete', handleIdleComplete);\n        this.removeListener('idleError', handleIdleError);\n        resolve();\n      };\n      const handleIdleError = ({ id: responseId, errorObject }) => {\n        if (id !== responseId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('idleComplete', handleIdleComplete);\n        this.removeListener('idleError', handleIdleError);\n        const error = deserializeError(errorObject);\n        reject(error);\n      };\n      this.addListener('idleComplete', handleIdleComplete);\n      this.addListener('idleError', handleIdleError);\n      port.postMessage({ type: 'idle', value: { id, maxDuration, start: Date.now() } });\n    });\n  }\n}\n"],"file":"worker-interface.js"}