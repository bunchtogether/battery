{"version":3,"sources":["../../src/worker-interface.js"],"names":["canUseSyncManager","navigator","window","RedundantServiceWorkerError","Error","BatteryQueueServiceWorkerInterface","options","logger","on","isSyncing","serviceWorker","ready","controller","state","warn","Promise","resolve","timeout","setTimeout","removeEventListener","handleControllerChange","clearTimeout","addEventListener","getController","port","MessagePort","messageChannel","MessageChannel","port1","handleStateChange","postMessage","type","args","error","errorStack","close","port2","onmessage","emit","self","queueMicrotask","link","catch","reject","handleStateChangeBeforeLink","event","MessageEvent","data","warnObject","Array","isArray","queueIds","jobEmitter","Set","queueId","add","delete","size","handleJobAdd","handleJobDelete","handleJobUpdate","handleJobsClear","localJobEmitter","addListener","info","maxDuration","requestId","Math","random","removeListener","handleClearComplete","handleClearError","responseId","handleAbortQueueComplete","handleAbortQueueError","handleDequeueComplete","handleDequeueError","handleIdleComplete","handleIdleError","Date","now","handleGetQueuesComplete","handleGetQueuesError","qIds","handleEnableStartOnJobComplete","handleEnableStartOnJobError","sync","handledisableStartOnJobComplete","handledisableStartOnJobError","registration","register","handleOnIdleSync","handleIdle","handleUnlink","EventEmitter"],"mappings":"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","sourcesContent":["// @flow\n\nimport EventEmitter from 'events';\nimport type { Logger } from './logger';\nimport makeLogger from './logger';\nimport { jobEmitter, localJobEmitter } from './database';\n\ntype Options = {\n  logger?: Logger\n};\n\nconst canUseSyncManager = 'serviceWorker' in navigator && 'SyncManager' in window;\n\nclass RedundantServiceWorkerError extends Error {}\n\nexport default class BatteryQueueServiceWorkerInterface extends EventEmitter {\n  declare serviceWorker: ServiceWorker;\n  declare logger: Logger;\n  declare port: MessagePort | void;\n  declare queueIds: Set<string> | void;\n  declare isSyncing: boolean;\n  declare handleJobAdd: void | () => void;\n\n  constructor(options?: Options = {}) {\n    super();\n    this.logger = options.logger || makeLogger('Battery Queue Worker Interface');\n    // This is a no-op to prevent errors from being thrown in the browser context.\n    // Errors are logged in the worker.\n    this.on('error', () => {});\n    this.isSyncing = false;\n  }\n\n  async getController() {\n    const serviceWorker = navigator && navigator.serviceWorker;\n\n    if (!serviceWorker) {\n      throw new Error('Service worker not available');\n    }\n\n    await serviceWorker.ready;\n\n    const { controller } = serviceWorker;\n\n    if (!controller) {\n      throw new Error('Service worker controller not available');\n    }\n\n    if (controller.state === 'redundant') {\n      this.logger.warn('Service worker in redudant state, waiting for controller change');\n      await new Promise((resolve) => {\n        const timeout = setTimeout(() => {\n          serviceWorker.removeEventListener('controllerchange', handleControllerChange);\n          resolve();\n        }, 5000);\n        const handleControllerChange = () => {\n          clearTimeout(timeout);\n          serviceWorker.removeEventListener('controllerchange', handleControllerChange);\n          resolve();\n        };\n        serviceWorker.addEventListener('controllerchange', handleControllerChange);\n      });\n      return this.getController();\n    }\n\n    return controller;\n  }\n\n  async link() {\n    if (this.port instanceof MessagePort) {\n      return this.port;\n    }\n\n    const controller = await this.getController();\n\n    const messageChannel = new MessageChannel();\n\n    const port = messageChannel.port1;\n\n    const handleStateChange = () => {\n      this.logger.warn(`Service worker state change to ${controller.state}`);\n      if (controller.state !== 'redundant') {\n        return;\n      }\n      this.logger.warn('Unlinking');\n      try {\n        port.postMessage({ type: 'unlink', args: [] });\n      } catch (error) {\n        this.logger.error('Error while posting unlink message to redundant service worker');\n        this.logger.errorStack(error);\n      }\n      try {\n        messageChannel.port1.close();\n        messageChannel.port2.close();\n      } catch (error) {\n        this.logger.error('Error while closing MessageChannel ports with redundant service worker');\n        this.logger.errorStack(error);\n      }\n      messageChannel.port1.onmessage = null;\n      delete this.port;\n      this.emit('unlink');\n      self.queueMicrotask(() => {\n        this.link().catch((error) => {\n          this.logger.error('Unable to re-link service worker');\n          this.logger.errorStack(error);\n        });\n      });\n    };\n\n    controller.addEventListener('statechange', handleStateChange);\n\n    try {\n      await new Promise((resolve, reject) => {\n        const timeout = setTimeout(() => {\n          messageChannel.port1.onmessage = null;\n          controller.removeEventListener('statechange', handleStateChange);\n          controller.removeEventListener('statechange', handleStateChangeBeforeLink);\n          reject(new Error('Unable to link to service worker'));\n        }, 1000);\n        const handleStateChangeBeforeLink = () => {\n          if (controller.state !== 'redundant') {\n            return;\n          }\n          clearTimeout(timeout);\n          controller.removeEventListener('statechange', handleStateChangeBeforeLink);\n          reject(new RedundantServiceWorkerError('Service worker in redundant state'));\n        };\n        controller.addEventListener('statechange', handleStateChangeBeforeLink);\n        messageChannel.port1.onmessage = (event:MessageEvent) => {\n          if (!(event instanceof MessageEvent)) {\n            return;\n          }\n          const { data } = event;\n          if (!data || typeof data !== 'object') {\n            this.logger.warn('Unknown message type');\n            this.logger.warnObject(event);\n            return;\n          }\n          const { type } = data;\n          if (typeof type !== 'string') {\n            this.logger.warn('Unknown message type');\n            this.logger.warnObject(event);\n            return;\n          }\n          if (type === 'BATTERY_QUEUE_WORKER_CONFIRMATION') {\n            clearTimeout(timeout);\n            controller.removeEventListener('statechange', handleStateChangeBeforeLink);\n            resolve();\n          }\n        };\n        // $FlowFixMe\n        controller.postMessage({ type: 'BATTERY_QUEUE_WORKER_INITIALIZATION' }, [\n          messageChannel.port2,\n        ]);\n      });\n    } catch (error) {\n      if (error instanceof RedundantServiceWorkerError) {\n        return messageChannel.port1;\n      }\n      controller.removeEventListener('statechange', handleStateChange);\n      throw error;\n    }\n\n    messageChannel.port1.onmessage = (event:MessageEvent) => {\n      if (!(event instanceof MessageEvent)) {\n        return;\n      }\n      const { data } = event;\n      if (!data || typeof data !== 'object') {\n        this.logger.warn('Invalid message data');\n        this.logger.warnObject(event);\n        return;\n      }\n      const { type, args } = data;\n      if (typeof type !== 'string') {\n        this.logger.warn('Unknown message type');\n        this.logger.warnObject(event);\n        return;\n      }\n      if (!Array.isArray(args)) {\n        this.logger.warn('Unknown arguments type');\n        this.logger.warnObject(event);\n        return;\n      }\n      const queueIds = this.queueIds;\n      switch (type) {\n        case 'jobAdd':\n          jobEmitter.emit('jobAdd', ...args);\n          return;\n        case 'jobDelete':\n          jobEmitter.emit('jobDelete', ...args);\n          return;\n        case 'jobUpdate':\n          jobEmitter.emit('jobUpdate', ...args);\n          return;\n        case 'jobsClear':\n          jobEmitter.emit('jobsClear', ...args);\n          return;\n        case 'queueActive':\n          if (queueIds instanceof Set) {\n            const queueId = args[0];\n            if (typeof queueId === 'string') {\n              queueIds.add(queueId);\n            }\n          }\n          break;\n        case 'queueInactive':\n          if (queueIds instanceof Set) {\n            const queueId = args[0];\n            if (typeof queueId === 'string') {\n              queueIds.delete(queueId);\n              if (queueIds.size === 0) {\n                delete this.queueIds;\n              }\n            }\n          }\n          break;\n        default:\n          break;\n      }\n      this.emit(type, ...args);\n    };\n\n\n    const handleJobAdd = (...args:Array<any>) => {\n      port.postMessage({ type: 'jobAdd', args });\n    };\n    const handleJobDelete = (...args:Array<any>) => {\n      port.postMessage({ type: 'jobDelete', args });\n    };\n    const handleJobUpdate = (...args:Array<any>) => {\n      port.postMessage({ type: 'jobUpdate', args });\n    };\n    const handleJobsClear = (...args:Array<any>) => {\n      port.postMessage({ type: 'jobsClear', args });\n    };\n    localJobEmitter.addListener('jobAdd', handleJobAdd);\n    localJobEmitter.addListener('jobDelete', handleJobDelete);\n    localJobEmitter.addListener('jobUpdate', handleJobUpdate);\n    localJobEmitter.addListener('jobsClear', handleJobsClear);\n\n    this.port = messageChannel.port1;\n\n    this.logger.info('Linked to worker');\n    this.emit('link');\n    return messageChannel.port1;\n  }\n\n  async clear(maxDuration?: number = 1000) {\n    const port = await this.link();\n    await new Promise((resolve, reject) => {\n      const requestId = Math.random();\n      const timeout = setTimeout(() => {\n        this.removeListener('clearComplete', handleClearComplete);\n        this.removeListener('clearError', handleClearError);\n        reject(new Error(`Did not receive clear response within ${maxDuration}ms`));\n      }, maxDuration);\n      const handleClearComplete = (responseId:number) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('clearComplete', handleClearComplete);\n        this.removeListener('clearError', handleClearError);\n        resolve();\n      };\n      const handleClearError = (responseId:number, error:Error) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('clearComplete', handleClearComplete);\n        this.removeListener('clearError', handleClearError);\n        reject(error);\n      };\n      this.addListener('clearComplete', handleClearComplete);\n      this.addListener('clearError', handleClearError);\n      port.postMessage({ type: 'clear', args: [requestId] });\n    });\n  }\n\n  async abortQueue(queueId:string, maxDuration?: number = 1000) {\n    const port = await this.link();\n    await new Promise((resolve, reject) => {\n      const requestId = Math.random();\n      const timeout = setTimeout(() => {\n        this.removeListener('abortQueueComplete', handleAbortQueueComplete);\n        this.removeListener('abortQueueError', handleAbortQueueError);\n        reject(new Error(`Did not receive abort queue response within ${maxDuration}ms`));\n      }, maxDuration);\n      const handleAbortQueueComplete = (responseId:number) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('abortQueueComplete', handleAbortQueueComplete);\n        this.removeListener('abortQueueError', handleAbortQueueError);\n        resolve();\n      };\n      const handleAbortQueueError = (responseId:number, error:Error) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('abortQueueComplete', handleAbortQueueComplete);\n        this.removeListener('abortQueueError', handleAbortQueueError);\n        reject(error);\n      };\n      this.addListener('abortQueueComplete', handleAbortQueueComplete);\n      this.addListener('abortQueueError', handleAbortQueueError);\n      port.postMessage({ type: 'abortQueue', args: [requestId, queueId] });\n    });\n  }\n\n  async dequeue(maxDuration?: number = 1000) {\n    const port = await this.link();\n    await new Promise((resolve, reject) => {\n      const requestId = Math.random();\n      const timeout = setTimeout(() => {\n        this.removeListener('dequeueComplete', handleDequeueComplete);\n        this.removeListener('dequeueError', handleDequeueError);\n        reject(new Error(`Did not receive dequeue response within ${maxDuration}ms`));\n      }, maxDuration);\n      const handleDequeueComplete = (responseId:number) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('dequeueComplete', handleDequeueComplete);\n        this.removeListener('dequeueError', handleDequeueError);\n        resolve();\n      };\n      const handleDequeueError = (responseId:number, error:Error) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('dequeueComplete', handleDequeueComplete);\n        this.removeListener('dequeueError', handleDequeueError);\n        reject(error);\n      };\n      this.addListener('dequeueComplete', handleDequeueComplete);\n      this.addListener('dequeueError', handleDequeueError);\n      port.postMessage({ type: 'dequeue', args: [requestId] });\n    });\n  }\n\n  async onIdle(maxDuration?: number = 1000) {\n    const port = await this.link();\n    await new Promise((resolve, reject) => {\n      const requestId = Math.random();\n      const timeout = setTimeout(() => {\n        this.removeListener('idleComplete', handleIdleComplete);\n        this.removeListener('idleError', handleIdleError);\n        reject(new Error(`Did not receive idle response within ${maxDuration}ms`));\n      }, maxDuration);\n      const handleIdleComplete = (responseId:number) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('idleComplete', handleIdleComplete);\n        this.removeListener('idleError', handleIdleError);\n        resolve();\n      };\n      const handleIdleError = (responseId:number, error:Error) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('idleComplete', handleIdleComplete);\n        this.removeListener('idleError', handleIdleError);\n        reject(error);\n      };\n      this.addListener('idleComplete', handleIdleComplete);\n      this.addListener('idleError', handleIdleError);\n      port.postMessage({ type: 'idle', args: [requestId, maxDuration, Date.now()] });\n    });\n  }\n\n  async getQueueIds(maxDuration?: number = 1000) {\n    if (this.queueIds instanceof Set) {\n      return this.queueIds;\n    }\n    const port = await this.link();\n    const queueIds = await new Promise((resolve, reject) => {\n      const requestId = Math.random();\n      const timeout = setTimeout(() => {\n        this.removeListener('getQueuesComplete', handleGetQueuesComplete);\n        this.removeListener('getQueuesError', handleGetQueuesError);\n        reject(new Error(`Did not receive idle response within ${maxDuration}ms`));\n      }, maxDuration);\n      const handleGetQueuesComplete = (responseId:number, qIds:Array<string>) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('getQueuesComplete', handleGetQueuesComplete);\n        this.removeListener('getQueuesError', handleGetQueuesError);\n        resolve((new Set(qIds): Set<string>));\n      };\n      const handleGetQueuesError = (responseId:number, error:Error) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('getQueuesComplete', handleGetQueuesComplete);\n        this.removeListener('getQueuesError', handleGetQueuesError);\n        reject(error);\n      };\n      this.addListener('getQueuesComplete', handleGetQueuesComplete);\n      this.addListener('getQueuesError', handleGetQueuesError);\n      port.postMessage({ type: 'getQueueIds', args: [requestId] });\n    });\n    if (queueIds.size > 0) {\n      this.queueIds = queueIds;\n    }\n    return queueIds;\n  }\n\n  async enableStartOnJob(maxDuration?: number = 1000) {\n    const port = await this.link();\n    await new Promise((resolve, reject) => {\n      const requestId = Math.random();\n      const timeout = setTimeout(() => {\n        this.removeListener('enableStartOnJobComplete', handleEnableStartOnJobComplete);\n        this.removeListener('enableStartOnJobError', handleEnableStartOnJobError);\n        reject(new Error(`Did not receive enableStartOnJob response within ${maxDuration}ms`));\n      }, maxDuration);\n      const handleEnableStartOnJobComplete = (responseId:number) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('enableStartOnJobComplete', handleEnableStartOnJobComplete);\n        this.removeListener('enableStartOnJobError', handleEnableStartOnJobError);\n        resolve();\n      };\n      const handleEnableStartOnJobError = (responseId:number, error:Error) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('enableStartOnJobComplete', handleEnableStartOnJobComplete);\n        this.removeListener('enableStartOnJobError', handleEnableStartOnJobError);\n        reject(error);\n      };\n      this.addListener('enableStartOnJobComplete', handleEnableStartOnJobComplete);\n      this.addListener('enableStartOnJobError', handleEnableStartOnJobError);\n      port.postMessage({ type: 'enableStartOnJob', args: [requestId] });\n    });\n    const handleJobAdd = () => {\n      this.sync();\n    };\n    jobEmitter.addListener('jobAdd', handleJobAdd);\n    this.handleJobAdd = handleJobAdd;\n  }\n\n  async disableStartOnJob(maxDuration?: number = 1000) {\n    const handleJobAdd = this.handleJobAdd;\n    if (typeof handleJobAdd === 'function') {\n      jobEmitter.removeListener('jobAdd', handleJobAdd);\n    }\n    const port = await this.link();\n    await new Promise((resolve, reject) => {\n      const requestId = Math.random();\n      const timeout = setTimeout(() => {\n        this.removeListener('disableStartOnJobComplete', handledisableStartOnJobComplete);\n        this.removeListener('disableStartOnJobError', handledisableStartOnJobError);\n        reject(new Error(`Did not receive disableStartOnJob response within ${maxDuration}ms`));\n      }, maxDuration);\n      const handledisableStartOnJobComplete = (responseId:number) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('disableStartOnJobComplete', handledisableStartOnJobComplete);\n        this.removeListener('disableStartOnJobError', handledisableStartOnJobError);\n        resolve();\n      };\n      const handledisableStartOnJobError = (responseId:number, error:Error) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('disableStartOnJobComplete', handledisableStartOnJobComplete);\n        this.removeListener('disableStartOnJobError', handledisableStartOnJobError);\n        reject(error);\n      };\n      this.addListener('disableStartOnJobComplete', handledisableStartOnJobComplete);\n      this.addListener('disableStartOnJobError', handledisableStartOnJobError);\n      port.postMessage({ type: 'disableStartOnJob', args: [requestId] });\n    });\n  }\n\n  async sync() {\n    if (!canUseSyncManager) {\n      return;\n    }\n    if (this.isSyncing) {\n      return;\n    }\n    this.isSyncing = true;\n    try {\n      await this.link();\n      this.logger.info('Sending sync event');\n      const serviceWorker = navigator && navigator.serviceWorker;\n      if (!serviceWorker) {\n        throw new Error('Service worker not available');\n      }\n      const registration = await serviceWorker.ready;\n      // $FlowFixMe\n      registration.sync.register('syncManagerOnIdle');\n      await new Promise((resolve, reject) => {\n        const timeout = setTimeout(() => {\n          this.removeListener('syncManagerOnIdle', handleOnIdleSync);\n          reject(new Error('Unable to sync, did not receive syncManagerOnIdle acknowledgement'));\n        }, 5000);\n        const handleOnIdleSync = () => {\n          clearTimeout(timeout);\n          this.removeListener('syncManagerOnIdle', handleOnIdleSync);\n          resolve();\n        };\n        this.addListener('syncManagerOnIdle', handleOnIdleSync);\n      });\n      await new Promise((resolve) => {\n        const handleIdle = () => {\n          this.removeListener('idle', handleIdle);\n          this.removeListener('unlink', handleUnlink);\n          resolve();\n        };\n        const handleUnlink = () => {\n          this.removeListener('idle', handleIdle);\n          this.removeListener('unlink', handleUnlink);\n          resolve();\n        };\n        this.addListener('idle', handleIdle);\n        this.addListener('unlink', handleUnlink);\n      });\n    } catch (error) {\n      this.logger.error('Unable to sync');\n      this.emit('error', error);\n      this.logger.errorStack(error);\n    }\n    this.isSyncing = false;\n  }\n}\n"],"file":"worker-interface.js"}