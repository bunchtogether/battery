{"version":3,"sources":["../../src/worker-interface.js"],"names":["BatteryQueueServiceWorkerInterface","options","logger","on","controller","navigator","serviceWorker","ServiceWorker","Error","port","MessagePort","ready","messageChannel","MessageChannel","Promise","resolve","reject","timeout","setTimeout","port1","onmessage","event","MessageEvent","data","warn","warnObject","type","clearTimeout","getController","postMessage","port2","info","args","Array","isArray","jobEmitter","emit","maxDuration","link","id","Math","random","removeListener","handleClearComplete","handleClearError","responseId","error","addListener","value","queueId","handleAbortQueueComplete","handleAbortQueueError","handleDequeueComplete","handleDequeueError","handleIdleComplete","handleIdleError","start","Date","now","EventEmitter"],"mappings":"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","sourcesContent":["// @flow\n\nimport EventEmitter from 'events';\nimport type { Logger } from './logger';\nimport makeLogger from './logger';\nimport { jobEmitter } from './database';\n\ntype Options = {\n  logger?: Logger\n};\n\nexport default class BatteryQueueServiceWorkerInterface extends EventEmitter {\n  declare serviceWorker: ServiceWorker;\n  declare logger: Logger;\n  declare port: MessagePort | void;\n\n  constructor(options?: Options = {}) {\n    super();\n    this.logger = options.logger || makeLogger('Battery Queue Worker Interface');\n    // This is a no-op to prevent errors from being thrown in the browser context.\n    // Errors are logged in the worker.\n    this.on('error', () => {});\n  }\n\n  getController() {\n    const controller = navigator && navigator.serviceWorker && navigator.serviceWorker.controller;\n    if (controller instanceof ServiceWorker) {\n      return controller;\n    }\n    throw new Error('Service worker controller does not exist');\n  }\n\n  async link() {\n    if (this.port instanceof MessagePort) {\n      return this.port;\n    }\n\n    const serviceWorker = navigator && navigator.serviceWorker;\n\n    if (!serviceWorker) {\n      throw new Error('Service worker not available');\n    }\n\n    await serviceWorker.ready;\n\n    const messageChannel = new MessageChannel();\n\n    await new Promise((resolve, reject) => {\n      const timeout = setTimeout(() => {\n        messageChannel.port1.onmessage = null;\n        reject(new Error('Unable to link to service worker'));\n      }, 1000);\n      messageChannel.port1.onmessage = (event:MessageEvent) => {\n        if (!(event instanceof MessageEvent)) {\n          return;\n        }\n        const { data } = event;\n        if (!data || typeof data !== 'object') {\n          this.logger.warn('Unknown message type');\n          this.logger.warnObject(event);\n          return;\n        }\n        const { type } = data;\n        if (typeof type !== 'string') {\n          this.logger.warn('Unknown message type');\n          this.logger.warnObject(event);\n          return;\n        }\n        if (type === 'BATTERY_QUEUE_WORKER_CONFIRMATION') {\n          clearTimeout(timeout);\n          resolve();\n        }\n      };\n      const controller = this.getController();\n      // $FlowFixMe\n      controller.postMessage({ type: 'BATTERY_QUEUE_WORKER_INITIALIZATION' }, [\n        messageChannel.port2,\n      ]);\n    });\n\n    this.logger.info('Linked to worker');\n\n    messageChannel.port1.onmessage = (event:MessageEvent) => {\n      if (!(event instanceof MessageEvent)) {\n        return;\n      }\n      const { data } = event;\n      if (!data || typeof data !== 'object') {\n        this.logger.warn('Invalid message data');\n        this.logger.warnObject(event);\n        return;\n      }\n      const { type, args } = data;\n      if (typeof type !== 'string') {\n        this.logger.warn('Unknown message type');\n        this.logger.warnObject(event);\n        return;\n      }\n      if (!Array.isArray(args)) {\n        this.logger.warn('Unknown arguments type');\n        this.logger.warnObject(event);\n        return;\n      }\n      switch (type) {\n        case 'jobAdd':\n          jobEmitter.emit('jobAdd', ...args);\n          return;\n        case 'jobDelete':\n          jobEmitter.emit('jobDelete', ...args);\n          return;\n        case 'jobUpdate':\n          jobEmitter.emit('jobUpdate', ...args);\n          return;\n        case 'jobsClear':\n          jobEmitter.emit('jobsClear', ...args);\n          return;\n        default:\n          break;\n      }\n      this.emit(type, ...args);\n    };\n    this.port = messageChannel.port1;\n    return messageChannel.port1;\n  }\n\n  async clear(maxDuration?: number = 1000) {\n    const port = await this.link();\n    await new Promise((resolve, reject) => {\n      const id = Math.random();\n      const timeout = setTimeout(() => {\n        this.removeListener('clearComplete', handleClearComplete);\n        this.removeListener('clearError', handleClearError);\n        reject(new Error(`Did not receive clear response within ${maxDuration}ms`));\n      }, maxDuration);\n      const handleClearComplete = ({ id: responseId }) => {\n        if (id !== responseId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('clearComplete', handleClearComplete);\n        this.removeListener('clearError', handleClearError);\n        resolve();\n      };\n      const handleClearError = ({ id: responseId, error }) => {\n        if (id !== responseId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('clearComplete', handleClearComplete);\n        this.removeListener('clearError', handleClearError);\n        reject(error);\n      };\n      this.addListener('clearComplete', handleClearComplete);\n      this.addListener('clearError', handleClearError);\n      port.postMessage({ type: 'clear', value: { id } });\n    });\n  }\n\n  async abortQueue(queueId:string, maxDuration?: number = 1000) {\n    const port = await this.link();\n    await new Promise((resolve, reject) => {\n      const id = Math.random();\n      const timeout = setTimeout(() => {\n        this.removeListener('abortQueueComplete', handleAbortQueueComplete);\n        this.removeListener('abortQueueError', handleAbortQueueError);\n        reject(new Error(`Did not receive abort queue response within ${maxDuration}ms`));\n      }, maxDuration);\n      const handleAbortQueueComplete = ({ id: responseId }) => {\n        if (id !== responseId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('abortQueueComplete', handleAbortQueueComplete);\n        this.removeListener('abortQueueError', handleAbortQueueError);\n        resolve();\n      };\n      const handleAbortQueueError = ({ id: responseId, error }) => {\n        if (id !== responseId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('abortQueueComplete', handleAbortQueueComplete);\n        this.removeListener('abortQueueError', handleAbortQueueError);\n        reject(error);\n      };\n      this.addListener('abortQueueComplete', handleAbortQueueComplete);\n      this.addListener('abortQueueError', handleAbortQueueError);\n      port.postMessage({ type: 'abortQueue', value: { id, queueId } });\n    });\n  }\n\n  async dequeue(maxDuration?: number = 1000) {\n    const port = await this.link();\n    await new Promise((resolve, reject) => {\n      const id = Math.random();\n      const timeout = setTimeout(() => {\n        this.removeListener('dequeueComplete', handleDequeueComplete);\n        this.removeListener('dequeueError', handleDequeueError);\n        reject(new Error(`Did not receive dequeue response within ${maxDuration}ms`));\n      }, maxDuration);\n      const handleDequeueComplete = ({ id: responseId }) => {\n        if (id !== responseId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('dequeueComplete', handleDequeueComplete);\n        this.removeListener('dequeueError', handleDequeueError);\n        resolve();\n      };\n      const handleDequeueError = ({ id: responseId, error }) => {\n        if (id !== responseId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('dequeueComplete', handleDequeueComplete);\n        this.removeListener('dequeueError', handleDequeueError);\n        reject(error);\n      };\n      this.addListener('dequeueComplete', handleDequeueComplete);\n      this.addListener('dequeueError', handleDequeueError);\n      port.postMessage({ type: 'dequeue', value: { id } });\n    });\n  }\n\n  async onIdle(maxDuration?: number = 1000) {\n    const port = await this.link();\n    await new Promise((resolve, reject) => {\n      const id = Math.random();\n      const timeout = setTimeout(() => {\n        this.removeListener('idleComplete', handleIdleComplete);\n        this.removeListener('idleError', handleIdleError);\n        reject(new Error(`Did not receive idle response within ${maxDuration}ms`));\n      }, maxDuration);\n      const handleIdleComplete = ({ id: responseId }) => {\n        if (id !== responseId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('idleComplete', handleIdleComplete);\n        this.removeListener('idleError', handleIdleError);\n        resolve();\n      };\n      const handleIdleError = ({ id: responseId, error }) => {\n        if (id !== responseId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('idleComplete', handleIdleComplete);\n        this.removeListener('idleError', handleIdleError);\n        reject(error);\n      };\n      this.addListener('idleComplete', handleIdleComplete);\n      this.addListener('idleError', handleIdleError);\n      port.postMessage({ type: 'idle', value: { id, maxDuration, start: Date.now() } });\n    });\n  }\n}\n"],"file":"worker-interface.js"}