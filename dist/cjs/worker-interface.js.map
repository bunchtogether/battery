{"version":3,"sources":["../../src/worker-interface.js"],"names":["canUseSyncManager","navigator","window","RedundantServiceWorkerError","Error","BatteryQueueServiceWorkerInterface","options","logger","on","isSyncing","serviceWorker","ready","registration","controller","state","hadControllerChange","info","Promise","resolve","timeout","setTimeout","removeEventListener","handleStateChange","handleControllerChange","clearTimeout","addEventListener","getRegistrationAndController","linkPromise","error","errorStack","port","MessagePort","postMessage","type","args","close","onmessage","clearInterval","portHeartbeatInterval","handlePortHeartbeat","removeListener","handleBeforeUnload","capture","emit","_link","finally","messageChannel","MessageChannel","port1","warn","unlink","link","reject","handleStateChangeBeforeLink","event","MessageEvent","data","warnObject","port2","Array","isArray","queueIds","jobEmitter","Set","queueId","add","delete","size","handleJobAdd","handleJobDelete","handleJobUpdate","handleJobsClear","localJobEmitter","addListener","didLogHeartbeatTimeout","didReceiveHeartbeat","sendHeartbeat","setInterval","sync","register","maxDuration","requestId","Math","random","handleClearComplete","handleClearError","responseId","handleAbortQueueComplete","handleAbortQueueError","id","handleAbortAndRemoveQueueJobsGreaterThanIdComplete","handleAbortAndRemoveQueueJobsGreaterThanIdError","handleDequeueComplete","handleDequeueError","handleRunUnloadHandlersComplete","handleRunUnloadHandlersError","handleIdleComplete","handleIdleError","Date","now","handleGetQueuesComplete","handleGetQueuesError","qIds","handleEnableStartOnJobComplete","handleEnableStartOnJobError","handledisableStartOnJobComplete","handledisableStartOnJobError","handleGetDurationEstimateComplete","handleGetDurationEstimateError","values","handleGetCurrentJobTypeComplete","handleGetCurrentJobTypeError","handleOnIdleSync","handleIdle","handleUnlink","EventEmitter"],"mappings":"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","sourcesContent":["// @flow\n\nimport EventEmitter from 'events';\nimport type { Logger } from './logger';\nimport makeLogger from './logger';\nimport { jobEmitter, localJobEmitter } from './database';\n\ntype Options = {\n  logger?: Logger\n};\n\nconst canUseSyncManager = 'serviceWorker' in navigator && 'SyncManager' in window;\n\nclass RedundantServiceWorkerError extends Error {}\n\nexport default class BatteryQueueServiceWorkerInterface extends EventEmitter {\n  declare serviceWorker: ServiceWorker;\n  declare logger: Logger;\n  declare port: MessagePort | void;\n  declare portHeartbeatInterval: void | IntervalID;\n  declare handlePortHeartbeat: void | () => void;\n  declare handleBeforeUnload: void | () => void;\n  declare queueIds: Set<string> | void;\n  declare isSyncing: boolean;\n  declare handleJobAdd: void | () => void;\n  declare linkPromise: void | Promise<MessagePort>;\n\n  constructor(options?: Options = {}) {\n    super();\n    this.logger = options.logger || makeLogger('Battery Queue Worker Interface');\n    // This is a no-op to prevent errors from being thrown in the browser context.\n    // Errors are logged in the worker.\n    this.on('error', () => {});\n    this.isSyncing = false;\n  }\n\n  async getRegistrationAndController() {\n    const serviceWorker = navigator && navigator.serviceWorker;\n\n    if (!serviceWorker) {\n      throw new Error('Service worker not available');\n    }\n\n    const registration = await serviceWorker.ready;\n\n    const { controller } = serviceWorker;\n\n    if (!controller) {\n      throw new Error('Service worker controller not available');\n    }\n\n    while (controller.state !== 'activated') {\n      const state = controller.state;\n      let hadControllerChange = false;\n      this.logger.info(`Service worker in \"${state}\" state, waiting for state or controller change`);\n      await new Promise((resolve) => {\n        const timeout = setTimeout(() => {\n          controller.removeEventListener('statechange', handleStateChange);\n          serviceWorker.removeEventListener('controllerchange', handleControllerChange);\n          throw new Error(`Unable to get service worker controller, state did not change from \"${state}\" within 5000ms`);\n        }, 5000);\n        const handleStateChange = () => {\n          if (controller.state !== 'activated') {\n            return;\n          }\n          clearTimeout(timeout);\n          controller.removeEventListener('statechange', handleStateChange);\n          serviceWorker.removeEventListener('controllerchange', handleControllerChange);\n          resolve();\n        };\n        const handleControllerChange = () => {\n          hadControllerChange = true;\n          clearTimeout(timeout);\n          controller.removeEventListener('statechange', handleStateChange);\n          serviceWorker.removeEventListener('controllerchange', handleControllerChange);\n          resolve();\n        };\n        serviceWorker.addEventListener('controllerchange', handleControllerChange);\n        controller.addEventListener('statechange', handleStateChange);\n      });\n      if (hadControllerChange) {\n        return this.getRegistrationAndController();\n      }\n    }\n    return [registration, controller];\n  }\n\n  async unlink() {\n    const linkPromise = this.linkPromise;\n    if (typeof linkPromise !== 'undefined') {\n      try {\n        await linkPromise;\n      } catch (error) {\n        this.logger.error('Link promise error while waiting to unlink');\n        this.logger.errorStack(error);\n      }\n    }\n    const port = this.port;\n    if (!(port instanceof MessagePort)) {\n      return;\n    }\n    try {\n      port.postMessage({ type: 'unlink', args: [] });\n    } catch (error) {\n      this.logger.error('Error while posting unlink message to redundant service worker');\n      this.logger.errorStack(error);\n    }\n    try {\n      port.close();\n    } catch (error) {\n      this.logger.error('Error while closing MessageChannel port with redundant service worker');\n      this.logger.errorStack(error);\n    }\n    port.onmessage = null;\n    delete this.port;\n    clearInterval(this.portHeartbeatInterval);\n    delete this.portHeartbeatInterval;\n    const handlePortHeartbeat = this.handlePortHeartbeat;\n    if (typeof handlePortHeartbeat === 'function') {\n      this.removeListener('heartbeat', this.handlePortHeartbeat);\n    }\n    const handleBeforeUnload = this.handleBeforeUnload;\n    if (typeof handlePortHeartbeat === 'function') {\n      window.removeEventListener('beforeunload', handleBeforeUnload, { capture: true });\n    }\n    this.emit('unlink');\n    this.logger.info('Unlinked');\n  }\n\n  async link() {\n    if (this.port instanceof MessagePort) {\n      return this.port;\n    }\n    if (this.linkPromise) {\n      return this.linkPromise;\n    }\n    const linkPromise = this._link().finally(() => { // eslint-disable-line no-underscore-dangle\n      delete this.linkPromise;\n    });\n    this.linkPromise = linkPromise;\n    return linkPromise;\n  }\n\n  async _link() {\n    if (this.port instanceof MessagePort) {\n      return this.port;\n    }\n\n    const [registration, controller] = await this.getRegistrationAndController();\n\n    const messageChannel = new MessageChannel();\n\n    const port = messageChannel.port1;\n    this.port = messageChannel.port1;\n\n    const handleStateChange = async () => {\n      this.logger.warn(`Service worker state change to ${controller.state}`);\n      if (controller.state !== 'redundant') {\n        return;\n      }\n      try {\n        await this.unlink();\n        await this.link();\n      } catch (error) {\n        this.logger.error('Unable to re-link service worker');\n        this.logger.errorStack(error);\n      }\n    };\n\n    controller.addEventListener('statechange', handleStateChange);\n\n    try {\n      await new Promise((resolve, reject) => {\n        const timeout = setTimeout(() => {\n          messageChannel.port1.onmessage = null;\n          controller.removeEventListener('statechange', handleStateChangeBeforeLink);\n          reject(new Error('Unable to link to service worker'));\n        }, 1000);\n        const handleStateChangeBeforeLink = () => {\n          if (controller.state !== 'redundant') {\n            return;\n          }\n          clearTimeout(timeout);\n          controller.removeEventListener('statechange', handleStateChangeBeforeLink);\n          reject(new RedundantServiceWorkerError('Service worker in redundant state'));\n        };\n        controller.addEventListener('statechange', handleStateChangeBeforeLink);\n        messageChannel.port1.onmessage = (event:MessageEvent) => {\n          if (!(event instanceof MessageEvent)) {\n            return;\n          }\n          const { data } = event;\n          if (!data || typeof data !== 'object') {\n            this.logger.warn('Unknown message type');\n            this.logger.warnObject(event);\n            return;\n          }\n          const { type } = data;\n          if (typeof type !== 'string') {\n            this.logger.warn('Unknown message type');\n            this.logger.warnObject(event);\n            return;\n          }\n          if (type === 'BATTERY_QUEUE_WORKER_CONFIRMATION') {\n            clearTimeout(timeout);\n            controller.removeEventListener('statechange', handleStateChangeBeforeLink);\n            resolve();\n          }\n        };\n        // $FlowFixMe\n        controller.postMessage({ type: 'BATTERY_QUEUE_WORKER_INITIALIZATION' }, [\n          messageChannel.port2,\n        ]);\n      });\n    } catch (error) {\n      controller.removeEventListener('statechange', handleStateChange);\n      if (error instanceof RedundantServiceWorkerError) {\n        return messageChannel.port1;\n      }\n      throw error;\n    }\n\n    messageChannel.port1.onmessage = (event:MessageEvent) => {\n      if (!(event instanceof MessageEvent)) {\n        return;\n      }\n      const { data } = event;\n      if (!data || typeof data !== 'object') {\n        this.logger.warn('Invalid message data');\n        this.logger.warnObject(event);\n        return;\n      }\n      const { type, args } = data;\n      if (typeof type !== 'string') {\n        this.logger.warn('Unknown message type');\n        this.logger.warnObject(event);\n        return;\n      }\n      if (!Array.isArray(args)) {\n        this.logger.warn('Unknown arguments type');\n        this.logger.warnObject(event);\n        return;\n      }\n      const queueIds = this.queueIds;\n      switch (type) {\n        case 'jobAdd':\n          jobEmitter.emit('jobAdd', ...args);\n          return;\n        case 'jobDelete':\n          jobEmitter.emit('jobDelete', ...args);\n          return;\n        case 'jobUpdate':\n          jobEmitter.emit('jobUpdate', ...args);\n          return;\n        case 'jobsClear':\n          jobEmitter.emit('jobsClear', ...args);\n          return;\n        case 'queueActive':\n          if (queueIds instanceof Set) {\n            const queueId = args[0];\n            if (typeof queueId === 'string') {\n              queueIds.add(queueId);\n            }\n          }\n          break;\n        case 'queueInactive':\n          if (queueIds instanceof Set) {\n            const queueId = args[0];\n            if (typeof queueId === 'string') {\n              queueIds.delete(queueId);\n              if (queueIds.size === 0) {\n                delete this.queueIds;\n              }\n            }\n          }\n          break;\n        default:\n          break;\n      }\n      this.emit(type, ...args);\n    };\n\n\n    const handleJobAdd = (...args:Array<any>) => {\n      port.postMessage({ type: 'jobAdd', args });\n    };\n    const handleJobDelete = (...args:Array<any>) => {\n      port.postMessage({ type: 'jobDelete', args });\n    };\n    const handleJobUpdate = (...args:Array<any>) => {\n      port.postMessage({ type: 'jobUpdate', args });\n    };\n    const handleJobsClear = (...args:Array<any>) => {\n      port.postMessage({ type: 'jobsClear', args });\n    };\n    localJobEmitter.addListener('jobAdd', handleJobAdd);\n    localJobEmitter.addListener('jobDelete', handleJobDelete);\n    localJobEmitter.addListener('jobUpdate', handleJobUpdate);\n    localJobEmitter.addListener('jobsClear', handleJobsClear);\n\n    let didLogHeartbeatTimeout = false;\n    let didReceiveHeartbeat = true;\n\n    const handlePortHeartbeat = () => {\n      didLogHeartbeatTimeout = false;\n      didReceiveHeartbeat = true;\n    };\n    this.addListener('heartbeat', handlePortHeartbeat);\n    this.handlePortHeartbeat = handlePortHeartbeat;\n\n    const sendHeartbeat = () => {\n      if (!didReceiveHeartbeat) {\n        if (!didLogHeartbeatTimeout) {\n          this.logger.error('Did not receive port heartbeat');\n          didLogHeartbeatTimeout = true;\n        }\n      }\n      didReceiveHeartbeat = false;\n      port.postMessage({ type: 'heartbeat', args: [10000] });\n    };\n    this.portHeartbeatInterval = setInterval(sendHeartbeat, 10000);\n    sendHeartbeat();\n    const handleBeforeUnload = () => {\n      if (!canUseSyncManager) {\n        return;\n      }\n      // $FlowFixMe\n      registration.sync.register('unload');\n    };\n    this.handleBeforeUnload = handleBeforeUnload;\n    window.addEventListener('beforeunload', handleBeforeUnload, { capture: true });\n\n    this.logger.info('Linked to worker');\n    this.emit('link');\n    return messageChannel.port1;\n  }\n\n  async clear(maxDuration?: number = 1000) {\n    const port = await this.link();\n    await new Promise((resolve, reject) => {\n      const requestId = Math.random();\n      const timeout = setTimeout(() => {\n        this.removeListener('clearComplete', handleClearComplete);\n        this.removeListener('clearError', handleClearError);\n        reject(new Error(`Did not receive clear response within ${maxDuration}ms`));\n      }, maxDuration);\n      const handleClearComplete = (responseId:number) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('clearComplete', handleClearComplete);\n        this.removeListener('clearError', handleClearError);\n        resolve();\n      };\n      const handleClearError = (responseId:number, error:Error) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('clearComplete', handleClearComplete);\n        this.removeListener('clearError', handleClearError);\n        reject(error);\n      };\n      this.addListener('clearComplete', handleClearComplete);\n      this.addListener('clearError', handleClearError);\n      port.postMessage({ type: 'clear', args: [requestId] });\n    });\n  }\n\n  async abortQueue(queueId:string, maxDuration?: number = 1000) {\n    const port = await this.link();\n    await new Promise((resolve, reject) => {\n      const requestId = Math.random();\n      const timeout = setTimeout(() => {\n        this.removeListener('abortQueueComplete', handleAbortQueueComplete);\n        this.removeListener('abortQueueError', handleAbortQueueError);\n        reject(new Error(`Did not receive abort queue response within ${maxDuration}ms`));\n      }, maxDuration);\n      const handleAbortQueueComplete = (responseId:number) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('abortQueueComplete', handleAbortQueueComplete);\n        this.removeListener('abortQueueError', handleAbortQueueError);\n        resolve();\n      };\n      const handleAbortQueueError = (responseId:number, error:Error) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('abortQueueComplete', handleAbortQueueComplete);\n        this.removeListener('abortQueueError', handleAbortQueueError);\n        reject(error);\n      };\n      this.addListener('abortQueueComplete', handleAbortQueueComplete);\n      this.addListener('abortQueueError', handleAbortQueueError);\n      port.postMessage({ type: 'abortQueue', args: [requestId, queueId] });\n    });\n  }\n\n  async abortAndRemoveQueue(queueId:string, maxDuration?: number = 1000) {\n    const port = await this.link();\n    await new Promise((resolve, reject) => {\n      const requestId = Math.random();\n      const timeout = setTimeout(() => {\n        this.removeListener('abortAndRemoveQueueComplete', handleAbortQueueComplete);\n        this.removeListener('abortAndRemoveQueueError', handleAbortQueueError);\n        reject(new Error(`Did not receive abort queue response within ${maxDuration}ms`));\n      }, maxDuration);\n      const handleAbortQueueComplete = (responseId:number) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('abortAndRemoveQueueComplete', handleAbortQueueComplete);\n        this.removeListener('abortAndRemoveQueueError', handleAbortQueueError);\n        resolve();\n      };\n      const handleAbortQueueError = (responseId:number, error:Error) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('abortAndRemoveQueueComplete', handleAbortQueueComplete);\n        this.removeListener('abortAndRemoveQueueError', handleAbortQueueError);\n        reject(error);\n      };\n      this.addListener('abortAndRemoveQueueComplete', handleAbortQueueComplete);\n      this.addListener('abortAndRemoveQueueError', handleAbortQueueError);\n      port.postMessage({ type: 'abortAndRemoveQueue', args: [requestId, queueId] });\n    });\n  }\n\n  async abortAndRemoveQueueJobsGreaterThanId(queueId:string, id:number, maxDuration?: number = 1000) {\n    const port = await this.link();\n    await new Promise((resolve, reject) => {\n      const requestId = Math.random();\n      const timeout = setTimeout(() => {\n        this.removeListener('abortAndRemoveQueueJobsGreaterThanIdComplete', handleAbortAndRemoveQueueJobsGreaterThanIdComplete);\n        this.removeListener('abortAndRemoveQueueJobsGreaterThanIdError', handleAbortAndRemoveQueueJobsGreaterThanIdError);\n        reject(new Error(`Did not receive abort queue response within ${maxDuration}ms`));\n      }, maxDuration);\n      const handleAbortAndRemoveQueueJobsGreaterThanIdComplete = (responseId:number) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('abortAndRemoveQueueJobsGreaterThanIdComplete', handleAbortAndRemoveQueueJobsGreaterThanIdComplete);\n        this.removeListener('abortAndRemoveQueueJobsGreaterThanIdError', handleAbortAndRemoveQueueJobsGreaterThanIdError);\n        resolve();\n      };\n      const handleAbortAndRemoveQueueJobsGreaterThanIdError = (responseId:number, error:Error) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('abortAndRemoveQueueJobsGreaterThanIdComplete', handleAbortAndRemoveQueueJobsGreaterThanIdComplete);\n        this.removeListener('abortAndRemoveQueueJobsGreaterThanIdError', handleAbortAndRemoveQueueJobsGreaterThanIdError);\n        reject(error);\n      };\n      this.addListener('abortAndRemoveQueueJobsGreaterThanIdComplete', handleAbortAndRemoveQueueJobsGreaterThanIdComplete);\n      this.addListener('abortAndRemoveQueueJobsGreaterThanIdError', handleAbortAndRemoveQueueJobsGreaterThanIdError);\n      port.postMessage({ type: 'abortAndRemoveQueueJobsGreaterThanId', args: [requestId, queueId, id] });\n    });\n  }\n\n\n  async dequeue(maxDuration?: number = 1000) {\n    const port = await this.link();\n    await new Promise((resolve, reject) => {\n      const requestId = Math.random();\n      const timeout = setTimeout(() => {\n        this.removeListener('dequeueComplete', handleDequeueComplete);\n        this.removeListener('dequeueError', handleDequeueError);\n        reject(new Error(`Did not receive dequeue response within ${maxDuration}ms`));\n      }, maxDuration);\n      const handleDequeueComplete = (responseId:number) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('dequeueComplete', handleDequeueComplete);\n        this.removeListener('dequeueError', handleDequeueError);\n        resolve();\n      };\n      const handleDequeueError = (responseId:number, error:Error) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('dequeueComplete', handleDequeueComplete);\n        this.removeListener('dequeueError', handleDequeueError);\n        reject(error);\n      };\n      this.addListener('dequeueComplete', handleDequeueComplete);\n      this.addListener('dequeueError', handleDequeueError);\n      port.postMessage({ type: 'dequeue', args: [requestId] });\n    });\n  }\n\n  async runUnloadHandlers(maxDuration?: number = 10000) {\n    const port = await this.link();\n    await new Promise((resolve, reject) => {\n      const requestId = Math.random();\n      const timeout = setTimeout(() => {\n        this.removeListener('runUnloadHandlersComplete', handleRunUnloadHandlersComplete);\n        this.removeListener('runUnloadHandlersError', handleRunUnloadHandlersError);\n        reject(new Error(`Did not receive run unload handlers response within ${maxDuration}ms`));\n      }, maxDuration);\n      const handleRunUnloadHandlersComplete = (responseId:number) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('runUnloadHandlersComplete', handleRunUnloadHandlersComplete);\n        this.removeListener('runUnloadHandlersError', handleRunUnloadHandlersError);\n        resolve();\n      };\n      const handleRunUnloadHandlersError = (responseId:number, error:Error) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('runUnloadHandlersComplete', handleRunUnloadHandlersComplete);\n        this.removeListener('runUnloadHandlersError', handleRunUnloadHandlersError);\n        reject(error);\n      };\n      this.addListener('runUnloadHandlersComplete', handleRunUnloadHandlersComplete);\n      this.addListener('runUnloadHandlersError', handleRunUnloadHandlersError);\n      port.postMessage({ type: 'runUnloadHandlers', args: [requestId] });\n    });\n  }\n\n  async onIdle(maxDuration?: number = 1000) {\n    const port = await this.link();\n    await new Promise((resolve, reject) => {\n      const requestId = Math.random();\n      const timeout = setTimeout(() => {\n        this.removeListener('idleComplete', handleIdleComplete);\n        this.removeListener('idleError', handleIdleError);\n        reject(new Error(`Did not receive idle response within ${maxDuration}ms`));\n      }, maxDuration);\n      const handleIdleComplete = (responseId:number) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('idleComplete', handleIdleComplete);\n        this.removeListener('idleError', handleIdleError);\n        resolve();\n      };\n      const handleIdleError = (responseId:number, error:Error) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('idleComplete', handleIdleComplete);\n        this.removeListener('idleError', handleIdleError);\n        reject(error);\n      };\n      this.addListener('idleComplete', handleIdleComplete);\n      this.addListener('idleError', handleIdleError);\n      port.postMessage({ type: 'idle', args: [requestId, maxDuration, Date.now()] });\n    });\n  }\n\n  async getQueueIds(maxDuration?: number = 1000) {\n    if (this.queueIds instanceof Set) {\n      return this.queueIds;\n    }\n    const port = await this.link();\n    const queueIds = await new Promise((resolve, reject) => {\n      const requestId = Math.random();\n      const timeout = setTimeout(() => {\n        this.removeListener('getQueuesComplete', handleGetQueuesComplete);\n        this.removeListener('getQueuesError', handleGetQueuesError);\n        reject(new Error(`Did not receive idle response within ${maxDuration}ms`));\n      }, maxDuration);\n      const handleGetQueuesComplete = (responseId:number, qIds:Array<string>) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('getQueuesComplete', handleGetQueuesComplete);\n        this.removeListener('getQueuesError', handleGetQueuesError);\n        resolve((new Set(qIds): Set<string>));\n      };\n      const handleGetQueuesError = (responseId:number, error:Error) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('getQueuesComplete', handleGetQueuesComplete);\n        this.removeListener('getQueuesError', handleGetQueuesError);\n        reject(error);\n      };\n      this.addListener('getQueuesComplete', handleGetQueuesComplete);\n      this.addListener('getQueuesError', handleGetQueuesError);\n      port.postMessage({ type: 'getQueueIds', args: [requestId] });\n    });\n    if (queueIds.size > 0) {\n      this.queueIds = queueIds;\n    }\n    return queueIds;\n  }\n\n  async enableStartOnJob(maxDuration?: number = 1000) {\n    const port = await this.link();\n    await new Promise((resolve, reject) => {\n      const requestId = Math.random();\n      const timeout = setTimeout(() => {\n        this.removeListener('enableStartOnJobComplete', handleEnableStartOnJobComplete);\n        this.removeListener('enableStartOnJobError', handleEnableStartOnJobError);\n        reject(new Error(`Did not receive enableStartOnJob response within ${maxDuration}ms`));\n      }, maxDuration);\n      const handleEnableStartOnJobComplete = (responseId:number) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('enableStartOnJobComplete', handleEnableStartOnJobComplete);\n        this.removeListener('enableStartOnJobError', handleEnableStartOnJobError);\n        resolve();\n      };\n      const handleEnableStartOnJobError = (responseId:number, error:Error) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('enableStartOnJobComplete', handleEnableStartOnJobComplete);\n        this.removeListener('enableStartOnJobError', handleEnableStartOnJobError);\n        reject(error);\n      };\n      this.addListener('enableStartOnJobComplete', handleEnableStartOnJobComplete);\n      this.addListener('enableStartOnJobError', handleEnableStartOnJobError);\n      port.postMessage({ type: 'enableStartOnJob', args: [requestId] });\n    });\n    const handleJobAdd = () => {\n      this.sync();\n    };\n    jobEmitter.addListener('jobAdd', handleJobAdd);\n    this.handleJobAdd = handleJobAdd;\n  }\n\n  async disableStartOnJob(maxDuration?: number = 1000) {\n    const handleJobAdd = this.handleJobAdd;\n    if (typeof handleJobAdd === 'function') {\n      jobEmitter.removeListener('jobAdd', handleJobAdd);\n    }\n    const port = await this.link();\n    await new Promise((resolve, reject) => {\n      const requestId = Math.random();\n      const timeout = setTimeout(() => {\n        this.removeListener('disableStartOnJobComplete', handledisableStartOnJobComplete);\n        this.removeListener('disableStartOnJobError', handledisableStartOnJobError);\n        reject(new Error(`Did not receive disableStartOnJob response within ${maxDuration}ms`));\n      }, maxDuration);\n      const handledisableStartOnJobComplete = (responseId:number) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('disableStartOnJobComplete', handledisableStartOnJobComplete);\n        this.removeListener('disableStartOnJobError', handledisableStartOnJobError);\n        resolve();\n      };\n      const handledisableStartOnJobError = (responseId:number, error:Error) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('disableStartOnJobComplete', handledisableStartOnJobComplete);\n        this.removeListener('disableStartOnJobError', handledisableStartOnJobError);\n        reject(error);\n      };\n      this.addListener('disableStartOnJobComplete', handledisableStartOnJobComplete);\n      this.addListener('disableStartOnJobError', handledisableStartOnJobError);\n      port.postMessage({ type: 'disableStartOnJob', args: [requestId] });\n    });\n  }\n\n  async getDurationEstimate(queueId:string, maxDuration?: number = 1000) {\n    const port = await this.link();\n    return new Promise((resolve, reject) => {\n      const requestId = Math.random();\n      const timeout = setTimeout(() => {\n        this.removeListener('getDurationEstimateComplete', handleGetDurationEstimateComplete);\n        this.removeListener('getDurationEstimateError', handleGetDurationEstimateError);\n        reject(new Error(`Did not receive duration estimate response within ${maxDuration}ms`));\n      }, maxDuration);\n      const handleGetDurationEstimateComplete = (responseId:number, values:[number, number]) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('getDurationEstimateComplete', handleGetDurationEstimateComplete);\n        this.removeListener('getDurationEstimateError', handleGetDurationEstimateError);\n        resolve(values);\n      };\n      const handleGetDurationEstimateError = (responseId:number, error:Error) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('getDurationEstimateComplete', handleGetDurationEstimateComplete);\n        this.removeListener('getDurationEstimateError', handleGetDurationEstimateError);\n        reject(error);\n      };\n      this.addListener('getDurationEstimateComplete', handleGetDurationEstimateComplete);\n      this.addListener('getDurationEstimateError', handleGetDurationEstimateError);\n      port.postMessage({ type: 'getDurationEstimate', args: [requestId, queueId] });\n    });\n  }\n\n  async getCurrentJobType(queueId:string, maxDuration?: number = 1000) {\n    const port = await this.link();\n    return new Promise((resolve, reject) => {\n      const requestId = Math.random();\n      const timeout = setTimeout(() => {\n        this.removeListener('getCurrentJobTypeComplete', handleGetCurrentJobTypeComplete);\n        this.removeListener('getCurrentJobTypeError', handleGetCurrentJobTypeError);\n        reject(new Error(`Did not receive duration estimate response within ${maxDuration}ms`));\n      }, maxDuration);\n      const handleGetCurrentJobTypeComplete = (responseId:number, type:string | void) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('getCurrentJobTypeComplete', handleGetCurrentJobTypeComplete);\n        this.removeListener('getCurrentJobTypeError', handleGetCurrentJobTypeError);\n        resolve(type);\n      };\n      const handleGetCurrentJobTypeError = (responseId:number, error:Error) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('getCurrentJobTypeComplete', handleGetCurrentJobTypeComplete);\n        this.removeListener('getCurrentJobTypeError', handleGetCurrentJobTypeError);\n        reject(error);\n      };\n      this.addListener('getCurrentJobTypeComplete', handleGetCurrentJobTypeComplete);\n      this.addListener('getCurrentJobTypeError', handleGetCurrentJobTypeError);\n      port.postMessage({ type: 'getCurrentJobType', args: [requestId, queueId] });\n    });\n  }\n\n  async sync() {\n    if (!canUseSyncManager) {\n      return;\n    }\n    if (this.isSyncing) {\n      return;\n    }\n    this.isSyncing = true;\n    try {\n      await this.link();\n      this.logger.info('Sending sync event');\n      const serviceWorker = navigator && navigator.serviceWorker;\n      if (!serviceWorker) {\n        throw new Error('Service worker not available');\n      }\n      const registration = await serviceWorker.ready;\n      // $FlowFixMe\n      registration.sync.register('syncManagerOnIdle');\n      await new Promise((resolve, reject) => {\n        const timeout = setTimeout(() => {\n          this.removeListener('syncManagerOnIdle', handleOnIdleSync);\n          reject(new Error('Unable to sync, did not receive syncManagerOnIdle acknowledgement'));\n        }, 5000);\n        const handleOnIdleSync = () => {\n          clearTimeout(timeout);\n          this.removeListener('syncManagerOnIdle', handleOnIdleSync);\n          resolve();\n        };\n        this.addListener('syncManagerOnIdle', handleOnIdleSync);\n      });\n      await new Promise((resolve) => {\n        const handleIdle = () => {\n          this.removeListener('idle', handleIdle);\n          this.removeListener('unlink', handleUnlink);\n          resolve();\n        };\n        const handleUnlink = () => {\n          this.removeListener('idle', handleIdle);\n          this.removeListener('unlink', handleUnlink);\n          resolve();\n        };\n        this.addListener('idle', handleIdle);\n        this.addListener('unlink', handleUnlink);\n      });\n    } catch (error) {\n      this.logger.error('Unable to sync');\n      this.emit('error', error);\n      this.logger.errorStack(error);\n    }\n    this.isSyncing = false;\n  }\n}\n"],"file":"worker-interface.js"}