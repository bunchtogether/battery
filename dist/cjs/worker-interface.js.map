{"version":3,"sources":["../../src/worker-interface.js"],"names":["canUseSyncManager","navigator","window","RedundantServiceWorkerError","Error","BatteryQueueServiceWorkerInterface","options","logger","on","isSyncing","serviceWorker","ready","registration","controller","state","hadControllerChange","info","Promise","resolve","timeout","setTimeout","removeEventListener","handleStateChange","handleControllerChange","clearTimeout","addEventListener","getRegistrationAndController","maxDuration","linkPromise","error","errorStack","port","MessagePort","clearInterval","portHeartbeatInterval","handlePortHeartbeat","removeListener","handleBeforeUnload","capture","requestId","Math","random","handleUnlinkComplete","handleUnlinkError","responseId","addListener","postMessage","type","args","close","onmessage","emit","_link","finally","messageChannel","MessageChannel","port1","handleUpdateFound","installingWorker","installing","activeWorker","active","unlink","warn","reject","handleStateChangeBeforeLink","event","MessageEvent","data","warnObject","port2","Array","isArray","queueIds","jobEmitter","Set","queueId","add","delete","size","handleJobAdd","handleJobDelete","handleJobUpdate","handleJobsClear","localJobEmitter","didLogHeartbeatTimeout","didReceiveHeartbeat","sendHeartbeat","setInterval","sync","register","link","handleClearComplete","handleClearError","handleUpdateDurationEstimatesComplete","handleUpdateDurationEstimatesError","handleAbortQueueComplete","handleAbortQueueError","id","handleAbortAndRemoveQueueJobsGreaterThanIdComplete","handleAbortAndRemoveQueueJobsGreaterThanIdError","handleRetryQueueComplete","handleRetryQueueError","handleDequeueComplete","handleDequeueError","handleRunUnloadHandlersComplete","handleRunUnloadHandlersError","handleIdleComplete","handleIdleError","Date","now","handleGetQueuesComplete","handleGetQueuesError","qIds","handleEnableStartOnJobComplete","handleEnableStartOnJobError","handledisableStartOnJobComplete","handledisableStartOnJobError","handleGetDurationEstimateComplete","handleGetDurationEstimateError","values","handleGetCurrentJobTypeComplete","handleGetCurrentJobTypeError","handleOnIdleSync","handleIdle","handleUnlink","EventEmitter"],"mappings":"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","sourcesContent":["// @flow\n\nimport EventEmitter from 'events';\nimport type { Logger } from './logger';\nimport makeLogger from './logger';\nimport { jobEmitter, localJobEmitter } from './database';\n\ntype Options = {\n  logger?: Logger\n};\n\nconst canUseSyncManager = 'serviceWorker' in navigator && 'SyncManager' in window;\n\nclass RedundantServiceWorkerError extends Error {}\n\nexport default class BatteryQueueServiceWorkerInterface extends EventEmitter {\n  declare serviceWorker: ServiceWorker;\n  declare logger: Logger;\n  declare port: MessagePort | void;\n  declare portHeartbeatInterval: void | IntervalID;\n  declare handlePortHeartbeat: void | () => void;\n  declare handleBeforeUnload: void | () => void;\n  declare queueIds: Set<string> | void;\n  declare isSyncing: boolean;\n  declare handleJobAdd: void | () => void;\n  declare linkPromise: void | Promise<MessagePort>;\n\n  constructor(options?: Options = {}) {\n    super();\n    this.logger = options.logger || makeLogger('Battery Queue Worker Interface');\n    // This is a no-op to prevent errors from being thrown in the browser context.\n    // Errors are logged in the worker.\n    this.on('error', () => {});\n    this.isSyncing = false;\n  }\n\n  async getRegistrationAndController() {\n    const serviceWorker = navigator && navigator.serviceWorker;\n\n    if (!serviceWorker) {\n      throw new Error('Service worker not available');\n    }\n\n    const registration = await serviceWorker.ready;\n\n    const { controller } = serviceWorker;\n\n    if (!controller) {\n      throw new Error('Service worker controller not available');\n    }\n\n    while (controller.state !== 'activated') {\n      const state = controller.state;\n      let hadControllerChange = false;\n      this.logger.info(`Service worker in \"${state}\" state, waiting for state or controller change`);\n      await new Promise((resolve) => {\n        const timeout = setTimeout(() => {\n          controller.removeEventListener('statechange', handleStateChange);\n          serviceWorker.removeEventListener('controllerchange', handleControllerChange);\n          throw new Error(`Unable to get service worker controller, state did not change from \"${state}\" within 5000ms`);\n        }, 5000);\n        const handleStateChange = () => {\n          if (controller.state !== 'activated') {\n            return;\n          }\n          clearTimeout(timeout);\n          controller.removeEventListener('statechange', handleStateChange);\n          serviceWorker.removeEventListener('controllerchange', handleControllerChange);\n          resolve();\n        };\n        const handleControllerChange = () => {\n          hadControllerChange = true;\n          clearTimeout(timeout);\n          controller.removeEventListener('statechange', handleStateChange);\n          serviceWorker.removeEventListener('controllerchange', handleControllerChange);\n          resolve();\n        };\n        serviceWorker.addEventListener('controllerchange', handleControllerChange);\n        controller.addEventListener('statechange', handleStateChange);\n      });\n      if (hadControllerChange) {\n        return this.getRegistrationAndController();\n      }\n    }\n    return [registration, controller];\n  }\n\n  async unlink(maxDuration?: number = 60000) {\n    const linkPromise = this.linkPromise;\n    if (typeof linkPromise !== 'undefined') {\n      try {\n        await linkPromise;\n      } catch (error) {\n        this.logger.error('Link promise error while waiting to unlink');\n        this.logger.errorStack(error);\n      }\n    }\n    const port = this.port;\n    if (!(port instanceof MessagePort)) {\n      return;\n    }\n    delete this.port;\n    clearInterval(this.portHeartbeatInterval);\n    delete this.portHeartbeatInterval;\n    const handlePortHeartbeat = this.handlePortHeartbeat;\n    if (typeof handlePortHeartbeat === 'function') {\n      this.removeListener('heartbeat', this.handlePortHeartbeat);\n    }\n    const handleBeforeUnload = this.handleBeforeUnload;\n    if (typeof handlePortHeartbeat === 'function') {\n      window.removeEventListener('beforeunload', handleBeforeUnload, { capture: true });\n    }\n    await new Promise((resolve) => {\n      const requestId = Math.random();\n      const timeout = setTimeout(() => {\n        this.removeListener('unlinkComplete', handleUnlinkComplete);\n        this.removeListener('unlinkError', handleUnlinkError);\n        this.logger.error(`Did not receive unlink response within ${maxDuration}ms`);\n        resolve();\n      }, maxDuration);\n      const handleUnlinkComplete = (responseId:number) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('unlinkComplete', handleUnlinkComplete);\n        this.removeListener('unlinkError', handleUnlinkError);\n        resolve();\n      };\n      const handleUnlinkError = (responseId:number, error:Error) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('unlinkComplete', handleUnlinkComplete);\n        this.removeListener('unlinkError', handleUnlinkError);\n        this.logger.error('Received unlink error');\n        this.logger.errorStack(error);\n        resolve();\n      };\n      this.addListener('unlinkComplete', handleUnlinkComplete);\n      this.addListener('unlinkError', handleUnlinkError);\n      port.postMessage({ type: 'unlink', args: [requestId] });\n    });\n    try {\n      port.close();\n    } catch (error) {\n      this.logger.error('Error while closing MessageChannel port with redundant service worker');\n      this.logger.errorStack(error);\n    }\n    port.onmessage = null;\n    this.emit('unlink');\n    this.logger.info('Unlinked');\n  }\n\n  async link() {\n    if (this.port instanceof MessagePort) {\n      return this.port;\n    }\n    if (this.linkPromise) {\n      return this.linkPromise;\n    }\n    const linkPromise = this._link().finally(() => { // eslint-disable-line no-underscore-dangle\n      delete this.linkPromise;\n    });\n    this.linkPromise = linkPromise;\n    return linkPromise;\n  }\n\n  async _link() {\n    if (this.port instanceof MessagePort) {\n      return this.port;\n    }\n\n    const [registration, controller] = await this.getRegistrationAndController();\n\n    const messageChannel = new MessageChannel();\n\n    const port = messageChannel.port1;\n    this.port = messageChannel.port1;\n\n    const handleUpdateFound = async () => {\n      const installingWorker = registration.installing;\n      const activeWorker = registration.active;\n      if (!installingWorker) {\n        return;\n      }\n      if (!activeWorker) {\n        return;\n      }\n      registration.removeEventListener('updatefound', handleUpdateFound);\n      controller.removeEventListener('statechange', handleStateChange);\n      try {\n        await this.unlink();\n        this.logger.info('Unlinked service worker after detecting new service worker');\n      } catch (error) {\n        this.logger.error('Unable to unlink service worker after detecting new service worker');\n        this.logger.errorStack(error);\n      }\n    };\n\n    const handleStateChange = async () => {\n      this.logger.warn(`Service worker state change to ${controller.state}`);\n      if (controller.state !== 'redundant') {\n        return;\n      }\n      registration.removeEventListener('updatefound', handleUpdateFound);\n      controller.removeEventListener('statechange', handleStateChange);\n      try {\n        await this.unlink();\n        this.logger.info('Unlinked service worker after detecting redundant service worker');\n      } catch (error) {\n        this.logger.error('Unable to unlink service worker after detecting redundant service worker');\n        this.logger.errorStack(error);\n      }\n    };\n\n    registration.addEventListener('updatefound', handleUpdateFound);\n    controller.addEventListener('statechange', handleStateChange);\n\n    try {\n      await new Promise((resolve, reject) => {\n        const timeout = setTimeout(() => {\n          messageChannel.port1.onmessage = null;\n          controller.removeEventListener('statechange', handleStateChangeBeforeLink);\n          reject(new Error('Unable to link to service worker'));\n        }, 1000);\n        const handleStateChangeBeforeLink = () => {\n          if (controller.state !== 'redundant') {\n            return;\n          }\n          clearTimeout(timeout);\n          controller.removeEventListener('statechange', handleStateChangeBeforeLink);\n          reject(new RedundantServiceWorkerError('Service worker in redundant state'));\n        };\n        controller.addEventListener('statechange', handleStateChangeBeforeLink);\n        messageChannel.port1.onmessage = (event:MessageEvent) => {\n          if (!(event instanceof MessageEvent)) {\n            return;\n          }\n          const { data } = event;\n          if (!data || typeof data !== 'object') {\n            this.logger.warn('Unknown message type');\n            this.logger.warnObject(event);\n            return;\n          }\n          const { type } = data;\n          if (typeof type !== 'string') {\n            this.logger.warn('Unknown message type');\n            this.logger.warnObject(event);\n            return;\n          }\n          if (type === 'BATTERY_QUEUE_WORKER_CONFIRMATION') {\n            clearTimeout(timeout);\n            controller.removeEventListener('statechange', handleStateChangeBeforeLink);\n            resolve();\n          }\n        };\n        // $FlowFixMe\n        controller.postMessage({ type: 'BATTERY_QUEUE_WORKER_INITIALIZATION' }, [\n          messageChannel.port2,\n        ]);\n      });\n    } catch (error) {\n      registration.removeEventListener('updatefound', handleUpdateFound);\n      controller.removeEventListener('statechange', handleStateChange);\n      if (error instanceof RedundantServiceWorkerError) {\n        return messageChannel.port1;\n      }\n      throw error;\n    }\n\n    messageChannel.port1.onmessage = (event:MessageEvent) => {\n      if (!(event instanceof MessageEvent)) {\n        return;\n      }\n      const { data } = event;\n      if (!data || typeof data !== 'object') {\n        this.logger.warn('Invalid message data');\n        this.logger.warnObject(event);\n        return;\n      }\n      const { type, args } = data;\n      if (typeof type !== 'string') {\n        this.logger.warn('Unknown message type');\n        this.logger.warnObject(event);\n        return;\n      }\n      if (!Array.isArray(args)) {\n        this.logger.warn('Unknown arguments type');\n        this.logger.warnObject(event);\n        return;\n      }\n      const queueIds = this.queueIds;\n      switch (type) {\n        case 'jobAdd':\n          jobEmitter.emit('jobAdd', ...args);\n          return;\n        case 'jobDelete':\n          jobEmitter.emit('jobDelete', ...args);\n          return;\n        case 'jobUpdate':\n          jobEmitter.emit('jobUpdate', ...args);\n          return;\n        case 'jobsClear':\n          jobEmitter.emit('jobsClear', ...args);\n          return;\n        case 'queueActive':\n          if (queueIds instanceof Set) {\n            const queueId = args[0];\n            if (typeof queueId === 'string') {\n              queueIds.add(queueId);\n            }\n          }\n          break;\n        case 'queueInactive':\n          if (queueIds instanceof Set) {\n            const queueId = args[0];\n            if (typeof queueId === 'string') {\n              queueIds.delete(queueId);\n              if (queueIds.size === 0) {\n                delete this.queueIds;\n              }\n            }\n          }\n          break;\n        default:\n          break;\n      }\n      this.emit(type, ...args);\n    };\n\n\n    const handleJobAdd = (...args:Array<any>) => {\n      port.postMessage({ type: 'jobAdd', args });\n    };\n    const handleJobDelete = (...args:Array<any>) => {\n      port.postMessage({ type: 'jobDelete', args });\n    };\n    const handleJobUpdate = (...args:Array<any>) => {\n      port.postMessage({ type: 'jobUpdate', args });\n    };\n    const handleJobsClear = (...args:Array<any>) => {\n      port.postMessage({ type: 'jobsClear', args });\n    };\n    localJobEmitter.addListener('jobAdd', handleJobAdd);\n    localJobEmitter.addListener('jobDelete', handleJobDelete);\n    localJobEmitter.addListener('jobUpdate', handleJobUpdate);\n    localJobEmitter.addListener('jobsClear', handleJobsClear);\n\n    let didLogHeartbeatTimeout = false;\n    let didReceiveHeartbeat = true;\n\n    const handlePortHeartbeat = () => {\n      didLogHeartbeatTimeout = false;\n      didReceiveHeartbeat = true;\n    };\n    this.addListener('heartbeat', handlePortHeartbeat);\n    this.handlePortHeartbeat = handlePortHeartbeat;\n\n    const sendHeartbeat = () => {\n      if (!didReceiveHeartbeat) {\n        if (!didLogHeartbeatTimeout) {\n          this.logger.error('Did not receive port heartbeat');\n          didLogHeartbeatTimeout = true;\n        }\n      }\n      didReceiveHeartbeat = false;\n      port.postMessage({ type: 'heartbeat', args: [10000] });\n    };\n    this.portHeartbeatInterval = setInterval(sendHeartbeat, 10000);\n    sendHeartbeat();\n    const handleBeforeUnload = () => {\n      if (!canUseSyncManager) {\n        return;\n      }\n      // $FlowFixMe\n      registration.sync.register('unload');\n    };\n    this.handleBeforeUnload = handleBeforeUnload;\n    window.addEventListener('beforeunload', handleBeforeUnload, { capture: true });\n\n    this.logger.info('Linked to worker');\n    this.emit('link');\n    return messageChannel.port1;\n  }\n\n  async clear(maxDuration?: number = 1000) {\n    const port = await this.link();\n    await new Promise((resolve, reject) => {\n      const requestId = Math.random();\n      const timeout = setTimeout(() => {\n        this.removeListener('clearComplete', handleClearComplete);\n        this.removeListener('clearError', handleClearError);\n        reject(new Error(`Did not receive clear response within ${maxDuration}ms`));\n      }, maxDuration);\n      const handleClearComplete = (responseId:number) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('clearComplete', handleClearComplete);\n        this.removeListener('clearError', handleClearError);\n        resolve();\n      };\n      const handleClearError = (responseId:number, error:Error) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('clearComplete', handleClearComplete);\n        this.removeListener('clearError', handleClearError);\n        reject(error);\n      };\n      this.addListener('clearComplete', handleClearComplete);\n      this.addListener('clearError', handleClearError);\n      port.postMessage({ type: 'clear', args: [requestId] });\n    });\n  }\n\n  async updateDurationEstimates(maxDuration?: number = 1000) {\n    const port = await this.link();\n    await new Promise((resolve, reject) => {\n      const requestId = Math.random();\n      const timeout = setTimeout(() => {\n        this.removeListener('updateDurationEstimatesComplete', handleUpdateDurationEstimatesComplete);\n        this.removeListener('updateDurationEstimatesError', handleUpdateDurationEstimatesError);\n        reject(new Error(`Did not receive update duration estimates response within ${maxDuration}ms`));\n      }, maxDuration);\n      const handleUpdateDurationEstimatesComplete = (responseId:number) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('updateDurationEstimatesComplete', handleUpdateDurationEstimatesComplete);\n        this.removeListener('updateDurationEstimatesError', handleUpdateDurationEstimatesError);\n        resolve();\n      };\n      const handleUpdateDurationEstimatesError = (responseId:number, error:Error) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('updateDurationEstimatesComplete', handleUpdateDurationEstimatesComplete);\n        this.removeListener('updateDurationEstimatesError', handleUpdateDurationEstimatesError);\n        reject(error);\n      };\n      this.addListener('updateDurationEstimatesComplete', handleUpdateDurationEstimatesComplete);\n      this.addListener('updateDurationEstimatesError', handleUpdateDurationEstimatesError);\n      port.postMessage({ type: 'updateDurationEstimates', args: [requestId] });\n    });\n  }\n\n  async abortQueue(queueId:string, maxDuration?: number = 1000) {\n    const port = await this.link();\n    await new Promise((resolve, reject) => {\n      const requestId = Math.random();\n      const timeout = setTimeout(() => {\n        this.removeListener('abortQueueComplete', handleAbortQueueComplete);\n        this.removeListener('abortQueueError', handleAbortQueueError);\n        reject(new Error(`Did not receive abort queue response within ${maxDuration}ms`));\n      }, maxDuration);\n      const handleAbortQueueComplete = (responseId:number) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('abortQueueComplete', handleAbortQueueComplete);\n        this.removeListener('abortQueueError', handleAbortQueueError);\n        resolve();\n      };\n      const handleAbortQueueError = (responseId:number, error:Error) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('abortQueueComplete', handleAbortQueueComplete);\n        this.removeListener('abortQueueError', handleAbortQueueError);\n        reject(error);\n      };\n      this.addListener('abortQueueComplete', handleAbortQueueComplete);\n      this.addListener('abortQueueError', handleAbortQueueError);\n      port.postMessage({ type: 'abortQueue', args: [requestId, queueId] });\n    });\n  }\n\n  async abortAndRemoveQueue(queueId:string, maxDuration?: number = 1000) {\n    const port = await this.link();\n    await new Promise((resolve, reject) => {\n      const requestId = Math.random();\n      const timeout = setTimeout(() => {\n        this.removeListener('abortAndRemoveQueueComplete', handleAbortQueueComplete);\n        this.removeListener('abortAndRemoveQueueError', handleAbortQueueError);\n        reject(new Error(`Did not receive abort queue response within ${maxDuration}ms`));\n      }, maxDuration);\n      const handleAbortQueueComplete = (responseId:number) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('abortAndRemoveQueueComplete', handleAbortQueueComplete);\n        this.removeListener('abortAndRemoveQueueError', handleAbortQueueError);\n        resolve();\n      };\n      const handleAbortQueueError = (responseId:number, error:Error) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('abortAndRemoveQueueComplete', handleAbortQueueComplete);\n        this.removeListener('abortAndRemoveQueueError', handleAbortQueueError);\n        reject(error);\n      };\n      this.addListener('abortAndRemoveQueueComplete', handleAbortQueueComplete);\n      this.addListener('abortAndRemoveQueueError', handleAbortQueueError);\n      port.postMessage({ type: 'abortAndRemoveQueue', args: [requestId, queueId] });\n    });\n  }\n\n  async abortAndRemoveQueueJobsGreaterThanId(queueId:string, id:number, maxDuration?: number = 1000) {\n    const port = await this.link();\n    await new Promise((resolve, reject) => {\n      const requestId = Math.random();\n      const timeout = setTimeout(() => {\n        this.removeListener('abortAndRemoveQueueJobsGreaterThanIdComplete', handleAbortAndRemoveQueueJobsGreaterThanIdComplete);\n        this.removeListener('abortAndRemoveQueueJobsGreaterThanIdError', handleAbortAndRemoveQueueJobsGreaterThanIdError);\n        reject(new Error(`Did not receive abort queue response within ${maxDuration}ms`));\n      }, maxDuration);\n      const handleAbortAndRemoveQueueJobsGreaterThanIdComplete = (responseId:number) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('abortAndRemoveQueueJobsGreaterThanIdComplete', handleAbortAndRemoveQueueJobsGreaterThanIdComplete);\n        this.removeListener('abortAndRemoveQueueJobsGreaterThanIdError', handleAbortAndRemoveQueueJobsGreaterThanIdError);\n        resolve();\n      };\n      const handleAbortAndRemoveQueueJobsGreaterThanIdError = (responseId:number, error:Error) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('abortAndRemoveQueueJobsGreaterThanIdComplete', handleAbortAndRemoveQueueJobsGreaterThanIdComplete);\n        this.removeListener('abortAndRemoveQueueJobsGreaterThanIdError', handleAbortAndRemoveQueueJobsGreaterThanIdError);\n        reject(error);\n      };\n      this.addListener('abortAndRemoveQueueJobsGreaterThanIdComplete', handleAbortAndRemoveQueueJobsGreaterThanIdComplete);\n      this.addListener('abortAndRemoveQueueJobsGreaterThanIdError', handleAbortAndRemoveQueueJobsGreaterThanIdError);\n      port.postMessage({ type: 'abortAndRemoveQueueJobsGreaterThanId', args: [requestId, queueId, id] });\n    });\n  }\n\n  async retryQueue(queueId:string, maxDuration?: number = 1000) {\n    const port = await this.link();\n    await new Promise((resolve, reject) => {\n      const requestId = Math.random();\n      const timeout = setTimeout(() => {\n        this.removeListener('retryQueueComplete', handleRetryQueueComplete);\n        this.removeListener('retryQueueError', handleRetryQueueError);\n        reject(new Error(`Did not receive retry queue response within ${maxDuration}ms`));\n      }, maxDuration);\n      const handleRetryQueueComplete = (responseId:number) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('retryQueueComplete', handleRetryQueueComplete);\n        this.removeListener('retryQueueError', handleRetryQueueError);\n        resolve();\n      };\n      const handleRetryQueueError = (responseId:number, error:Error) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('retryQueueComplete', handleRetryQueueComplete);\n        this.removeListener('retryQueueError', handleRetryQueueError);\n        reject(error);\n      };\n      this.addListener('retryQueueComplete', handleRetryQueueComplete);\n      this.addListener('retryQueueError', handleRetryQueueError);\n      port.postMessage({ type: 'retryQueue', args: [requestId, queueId] });\n    });\n  }\n\n  async dequeue(maxDuration?: number = 1000) {\n    const port = await this.link();\n    await new Promise((resolve, reject) => {\n      const requestId = Math.random();\n      const timeout = setTimeout(() => {\n        this.removeListener('dequeueComplete', handleDequeueComplete);\n        this.removeListener('dequeueError', handleDequeueError);\n        reject(new Error(`Did not receive dequeue response within ${maxDuration}ms`));\n      }, maxDuration);\n      const handleDequeueComplete = (responseId:number) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('dequeueComplete', handleDequeueComplete);\n        this.removeListener('dequeueError', handleDequeueError);\n        resolve();\n      };\n      const handleDequeueError = (responseId:number, error:Error) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('dequeueComplete', handleDequeueComplete);\n        this.removeListener('dequeueError', handleDequeueError);\n        reject(error);\n      };\n      this.addListener('dequeueComplete', handleDequeueComplete);\n      this.addListener('dequeueError', handleDequeueError);\n      port.postMessage({ type: 'dequeue', args: [requestId] });\n    });\n  }\n\n  async runUnloadHandlers(maxDuration?: number = 10000) {\n    const port = await this.link();\n    await new Promise((resolve, reject) => {\n      const requestId = Math.random();\n      const timeout = setTimeout(() => {\n        this.removeListener('runUnloadHandlersComplete', handleRunUnloadHandlersComplete);\n        this.removeListener('runUnloadHandlersError', handleRunUnloadHandlersError);\n        reject(new Error(`Did not receive run unload handlers response within ${maxDuration}ms`));\n      }, maxDuration);\n      const handleRunUnloadHandlersComplete = (responseId:number) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('runUnloadHandlersComplete', handleRunUnloadHandlersComplete);\n        this.removeListener('runUnloadHandlersError', handleRunUnloadHandlersError);\n        resolve();\n      };\n      const handleRunUnloadHandlersError = (responseId:number, error:Error) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('runUnloadHandlersComplete', handleRunUnloadHandlersComplete);\n        this.removeListener('runUnloadHandlersError', handleRunUnloadHandlersError);\n        reject(error);\n      };\n      this.addListener('runUnloadHandlersComplete', handleRunUnloadHandlersComplete);\n      this.addListener('runUnloadHandlersError', handleRunUnloadHandlersError);\n      port.postMessage({ type: 'runUnloadHandlers', args: [requestId] });\n    });\n  }\n\n  async onIdle(maxDuration?: number = 1000) {\n    const port = await this.link();\n    await new Promise((resolve, reject) => {\n      const requestId = Math.random();\n      const timeout = setTimeout(() => {\n        this.removeListener('idleComplete', handleIdleComplete);\n        this.removeListener('idleError', handleIdleError);\n        reject(new Error(`Did not receive idle response within ${maxDuration}ms`));\n      }, maxDuration);\n      const handleIdleComplete = (responseId:number) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('idleComplete', handleIdleComplete);\n        this.removeListener('idleError', handleIdleError);\n        resolve();\n      };\n      const handleIdleError = (responseId:number, error:Error) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('idleComplete', handleIdleComplete);\n        this.removeListener('idleError', handleIdleError);\n        reject(error);\n      };\n      this.addListener('idleComplete', handleIdleComplete);\n      this.addListener('idleError', handleIdleError);\n      port.postMessage({ type: 'idle', args: [requestId, maxDuration, Date.now()] });\n    });\n  }\n\n  async getQueueIds(maxDuration?: number = 1000) {\n    if (this.queueIds instanceof Set) {\n      return this.queueIds;\n    }\n    const port = await this.link();\n    const queueIds = await new Promise((resolve, reject) => {\n      const requestId = Math.random();\n      const timeout = setTimeout(() => {\n        this.removeListener('getQueuesComplete', handleGetQueuesComplete);\n        this.removeListener('getQueuesError', handleGetQueuesError);\n        reject(new Error(`Did not receive idle response within ${maxDuration}ms`));\n      }, maxDuration);\n      const handleGetQueuesComplete = (responseId:number, qIds:Array<string>) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('getQueuesComplete', handleGetQueuesComplete);\n        this.removeListener('getQueuesError', handleGetQueuesError);\n        resolve((new Set(qIds): Set<string>));\n      };\n      const handleGetQueuesError = (responseId:number, error:Error) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('getQueuesComplete', handleGetQueuesComplete);\n        this.removeListener('getQueuesError', handleGetQueuesError);\n        reject(error);\n      };\n      this.addListener('getQueuesComplete', handleGetQueuesComplete);\n      this.addListener('getQueuesError', handleGetQueuesError);\n      port.postMessage({ type: 'getQueueIds', args: [requestId] });\n    });\n    if (queueIds.size > 0) {\n      this.queueIds = queueIds;\n    }\n    return queueIds;\n  }\n\n  async enableStartOnJob(maxDuration?: number = 1000) {\n    const port = await this.link();\n    await new Promise((resolve, reject) => {\n      const requestId = Math.random();\n      const timeout = setTimeout(() => {\n        this.removeListener('enableStartOnJobComplete', handleEnableStartOnJobComplete);\n        this.removeListener('enableStartOnJobError', handleEnableStartOnJobError);\n        reject(new Error(`Did not receive enableStartOnJob response within ${maxDuration}ms`));\n      }, maxDuration);\n      const handleEnableStartOnJobComplete = (responseId:number) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('enableStartOnJobComplete', handleEnableStartOnJobComplete);\n        this.removeListener('enableStartOnJobError', handleEnableStartOnJobError);\n        resolve();\n      };\n      const handleEnableStartOnJobError = (responseId:number, error:Error) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('enableStartOnJobComplete', handleEnableStartOnJobComplete);\n        this.removeListener('enableStartOnJobError', handleEnableStartOnJobError);\n        reject(error);\n      };\n      this.addListener('enableStartOnJobComplete', handleEnableStartOnJobComplete);\n      this.addListener('enableStartOnJobError', handleEnableStartOnJobError);\n      port.postMessage({ type: 'enableStartOnJob', args: [requestId] });\n    });\n    const handleJobAdd = () => {\n      this.sync();\n    };\n    jobEmitter.addListener('jobAdd', handleJobAdd);\n    this.handleJobAdd = handleJobAdd;\n  }\n\n  async disableStartOnJob(maxDuration?: number = 1000) {\n    const handleJobAdd = this.handleJobAdd;\n    if (typeof handleJobAdd === 'function') {\n      jobEmitter.removeListener('jobAdd', handleJobAdd);\n    }\n    const port = await this.link();\n    await new Promise((resolve, reject) => {\n      const requestId = Math.random();\n      const timeout = setTimeout(() => {\n        this.removeListener('disableStartOnJobComplete', handledisableStartOnJobComplete);\n        this.removeListener('disableStartOnJobError', handledisableStartOnJobError);\n        reject(new Error(`Did not receive disableStartOnJob response within ${maxDuration}ms`));\n      }, maxDuration);\n      const handledisableStartOnJobComplete = (responseId:number) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('disableStartOnJobComplete', handledisableStartOnJobComplete);\n        this.removeListener('disableStartOnJobError', handledisableStartOnJobError);\n        resolve();\n      };\n      const handledisableStartOnJobError = (responseId:number, error:Error) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('disableStartOnJobComplete', handledisableStartOnJobComplete);\n        this.removeListener('disableStartOnJobError', handledisableStartOnJobError);\n        reject(error);\n      };\n      this.addListener('disableStartOnJobComplete', handledisableStartOnJobComplete);\n      this.addListener('disableStartOnJobError', handledisableStartOnJobError);\n      port.postMessage({ type: 'disableStartOnJob', args: [requestId] });\n    });\n  }\n\n  async getDurationEstimate(queueId:string, maxDuration?: number = 1000) {\n    const port = await this.link();\n    return new Promise((resolve, reject) => {\n      const requestId = Math.random();\n      const timeout = setTimeout(() => {\n        this.removeListener('getDurationEstimateComplete', handleGetDurationEstimateComplete);\n        this.removeListener('getDurationEstimateError', handleGetDurationEstimateError);\n        reject(new Error(`Did not receive duration estimate response within ${maxDuration}ms`));\n      }, maxDuration);\n      const handleGetDurationEstimateComplete = (responseId:number, values:[number, number]) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('getDurationEstimateComplete', handleGetDurationEstimateComplete);\n        this.removeListener('getDurationEstimateError', handleGetDurationEstimateError);\n        resolve(values);\n      };\n      const handleGetDurationEstimateError = (responseId:number, error:Error) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('getDurationEstimateComplete', handleGetDurationEstimateComplete);\n        this.removeListener('getDurationEstimateError', handleGetDurationEstimateError);\n        reject(error);\n      };\n      this.addListener('getDurationEstimateComplete', handleGetDurationEstimateComplete);\n      this.addListener('getDurationEstimateError', handleGetDurationEstimateError);\n      port.postMessage({ type: 'getDurationEstimate', args: [requestId, queueId] });\n    });\n  }\n\n  async getCurrentJobType(queueId:string, maxDuration?: number = 1000) {\n    const port = await this.link();\n    return new Promise((resolve, reject) => {\n      const requestId = Math.random();\n      const timeout = setTimeout(() => {\n        this.removeListener('getCurrentJobTypeComplete', handleGetCurrentJobTypeComplete);\n        this.removeListener('getCurrentJobTypeError', handleGetCurrentJobTypeError);\n        reject(new Error(`Did not receive duration estimate response within ${maxDuration}ms`));\n      }, maxDuration);\n      const handleGetCurrentJobTypeComplete = (responseId:number, type:string | void) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('getCurrentJobTypeComplete', handleGetCurrentJobTypeComplete);\n        this.removeListener('getCurrentJobTypeError', handleGetCurrentJobTypeError);\n        resolve(type);\n      };\n      const handleGetCurrentJobTypeError = (responseId:number, error:Error) => {\n        if (responseId !== requestId) {\n          return;\n        }\n        clearTimeout(timeout);\n        this.removeListener('getCurrentJobTypeComplete', handleGetCurrentJobTypeComplete);\n        this.removeListener('getCurrentJobTypeError', handleGetCurrentJobTypeError);\n        reject(error);\n      };\n      this.addListener('getCurrentJobTypeComplete', handleGetCurrentJobTypeComplete);\n      this.addListener('getCurrentJobTypeError', handleGetCurrentJobTypeError);\n      port.postMessage({ type: 'getCurrentJobType', args: [requestId, queueId] });\n    });\n  }\n\n  async sync() {\n    if (!canUseSyncManager) {\n      return;\n    }\n    if (this.isSyncing) {\n      return;\n    }\n    this.isSyncing = true;\n    try {\n      await this.link();\n      this.logger.info('Sending sync event');\n      const serviceWorker = navigator && navigator.serviceWorker;\n      if (!serviceWorker) {\n        throw new Error('Service worker not available');\n      }\n      const registration = await serviceWorker.ready;\n      // $FlowFixMe\n      registration.sync.register('syncManagerOnIdle');\n      await new Promise((resolve, reject) => {\n        const timeout = setTimeout(() => {\n          this.removeListener('syncManagerOnIdle', handleOnIdleSync);\n          reject(new Error('Unable to sync, did not receive syncManagerOnIdle acknowledgement'));\n        }, 5000);\n        const handleOnIdleSync = () => {\n          clearTimeout(timeout);\n          this.removeListener('syncManagerOnIdle', handleOnIdleSync);\n          resolve();\n        };\n        this.addListener('syncManagerOnIdle', handleOnIdleSync);\n      });\n      await new Promise((resolve) => {\n        const handleIdle = () => {\n          this.removeListener('idle', handleIdle);\n          this.removeListener('unlink', handleUnlink);\n          resolve();\n        };\n        const handleUnlink = () => {\n          this.removeListener('idle', handleIdle);\n          this.removeListener('unlink', handleUnlink);\n          resolve();\n        };\n        this.addListener('idle', handleIdle);\n        this.addListener('unlink', handleUnlink);\n      });\n    } catch (error) {\n      this.logger.error('Unable to sync');\n      this.emit('error', error);\n      this.logger.errorStack(error);\n    }\n    this.isSyncing = false;\n  }\n}\n"],"file":"worker-interface.js"}